!function(e){function t(e,t,o){return 4===arguments.length?n.apply(this,arguments):void r(e,{declarative:!0,deps:t,declare:o})}function n(e,t,n,o){r(e,{declarative:!1,deps:t,executingRequire:n,execute:o})}function r(e,t){t.name=e,e in m||(m[e]=t),t.normalizedDeps=t.deps}function o(e,t){if(t[e.groupIndex]=t[e.groupIndex]||[],-1==v.call(t[e.groupIndex],e)){t[e.groupIndex].push(e);for(var n=0,r=e.normalizedDeps.length;r>n;n++){var i=e.normalizedDeps[n],a=m[i];if(a&&!a.evaluated){var u=e.groupIndex+(a.declarative!=e.declarative);if(void 0===a.groupIndex||a.groupIndex<u){if(void 0!==a.groupIndex&&(t[a.groupIndex].splice(v.call(t[a.groupIndex],a),1),0==t[a.groupIndex].length))throw new TypeError("Mixed dependency cycle detected");a.groupIndex=u}o(a,t)}}}}function i(e){var t=m[e];t.groupIndex=0;var n=[];o(t,n);for(var r=!!t.declarative==n.length%2,i=n.length-1;i>=0;i--){for(var a=n[i],s=0;s<a.length;s++){var l=a[s];r?u(l):c(l)}r=!r}}function a(e){return x[e]||(x[e]={name:e,dependencies:[],exports:{},importers:[]})}function u(t){if(!t.module){var n=t.module=a(t.name),r=t.module.exports,o=t.declare.call(e,function(e,t){if(n.locked=!0,"object"==typeof e)for(var o in e)r[o]=e[o];else r[e]=t;for(var i=0,a=n.importers.length;a>i;i++){var u=n.importers[i];if(!u.locked)for(var s=0;s<u.dependencies.length;++s)u.dependencies[s]===n&&u.setters[s](r)}return n.locked=!1,t},t.name);n.setters=o.setters,n.execute=o.execute;for(var i=0,s=t.normalizedDeps.length;s>i;i++){var c,l=t.normalizedDeps[i],p=m[l],d=x[l];d?c=d.exports:p&&!p.declarative?c=p.esModule:p?(u(p),d=p.module,c=d.exports):c=h(l),d&&d.importers?(d.importers.push(n),n.dependencies.push(d)):n.dependencies.push(null),n.setters[i]&&n.setters[i](c)}}}function s(e){var t,n=m[e];if(n)n.declarative?f(e,[]):n.evaluated||c(n),t=n.module.exports;else if(t=h(e),!t)throw new Error("Unable to load dependency "+e+".");return(!n||n.declarative)&&t&&t.__useDefault?t["default"]:t}function c(t){if(!t.module){var n={},r=t.module={exports:n,id:t.name};if(!t.executingRequire)for(var o=0,i=t.normalizedDeps.length;i>o;o++){var a=t.normalizedDeps[o],u=m[a];u&&c(u)}t.evaluated=!0;var p=t.execute.call(e,function(e){for(var n=0,r=t.deps.length;r>n;n++)if(t.deps[n]==e)return s(t.normalizedDeps[n]);throw new TypeError("Module "+e+" not declared as a dependency.")},n,r);p&&(r.exports=p),n=r.exports,n&&n.__esModule?t.esModule=n:t.esModule=l(n)}}function l(e){var t={};if("object"==typeof e||"function"==typeof e){var n=e&&e.hasOwnProperty;if(g)for(var r in e)d(t,e,r)||p(t,e,r,n);else for(var r in e)p(t,e,r,n)}return t["default"]=e,b(t,"__useDefault",{value:!0}),t}function p(e,t,n,r){(!r||t.hasOwnProperty(n))&&(e[n]=t[n])}function d(e,t,n){try{var r;return(r=Object.getOwnPropertyDescriptor(t,n))&&b(e,n,r),!0}catch(o){return!1}}function f(t,n){var r=m[t];if(r&&!r.evaluated&&r.declarative){n.push(t);for(var o=0,i=r.normalizedDeps.length;i>o;o++){var a=r.normalizedDeps[o];-1==v.call(n,a)&&(m[a]?f(a,n):h(a))}r.evaluated||(r.evaluated=!0,r.module.execute.call(e))}}function h(e){if(_[e])return _[e];if("@node/"==e.substr(0,6))return E(e.substr(6));var t=m[e];if(!t)throw"Module "+e+" not present.";return i(e),f(e,[]),m[e]=void 0,t.declarative&&b(t.module.exports,"__esModule",{value:!0}),_[e]=t.declarative?t.module.exports:t.esModule}var m={},v=Array.prototype.indexOf||function(e){for(var t=0,n=this.length;n>t;t++)if(this[t]===e)return t;return-1},g=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(y){g=!1}var b;!function(){try{Object.defineProperty({},"a",{})&&(b=Object.defineProperty)}catch(e){b=function(e,t,n){try{e[t]=n.value||n.get.call(e)}catch(r){}}}}();var x={},E="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&require.resolve&&"undefined"!=typeof process&&require,_={"@empty":{}};return function(e,r,o){return function(i){i(function(i){for(var a={_nodeRequire:E,register:t,registerDynamic:n,get:h,set:function(e,t){_[e]=t},newModule:function(e){return e}},u=0;u<r.length;u++)(function(e,t){t&&t.__esModule?_[e]=t:_[e]=l(t)})(r[u],arguments[u]);o(a);var s=h(e[0]);if(e.length>1)for(var u=1;u<e.length;u++)h(e[u]);return s.__useDefault?s["default"]:s})}}}("undefined"!=typeof self?self:global)(["1","2"],[],function(e){this.require,this.exports,this.module;e.registerDynamic("3",["6","4","5"],!0,function(e,t,n){"use strict";function r(e){this._root=e,this._startText=this.getText(),this._fallbackText=null}var o=e("6"),i=e("4"),a=e("5");return o(r.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[a()]},getData:function(){if(this._fallbackText)return this._fallbackText;var e,t,n=this._startText,r=n.length,o=this.getText(),i=o.length;for(e=0;r>e&&n[e]===o[e];e++);var a=r-e;for(t=1;a>=t&&n[r-t]===o[i-t];t++);var u=t>1?1-t:void 0;return this._fallbackText=o.slice(e,u),this._fallbackText}}),i.addPoolingTo(r),n.exports=r,n.exports}),e.registerDynamic("7",["8"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("8"),i={data:null};return o.augmentClass(r,i),n.exports=r,n.exports}),e.registerDynamic("9",["8"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("8"),i={data:null};return o.augmentClass(r,i),n.exports=r,n.exports}),e.registerDynamic("a",["b","c","d","3","7","9","e"],!0,function(e,t,n){"use strict";function r(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}function o(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}function i(e){switch(e){case T.topCompositionStart:return S.compositionStart;case T.topCompositionEnd:return S.compositionEnd;case T.topCompositionUpdate:return S.compositionUpdate}}function a(e,t){return e===T.topKeyDown&&t.keyCode===E}function u(e,t){switch(e){case T.topKeyUp:return-1!==x.indexOf(t.keyCode);case T.topKeyDown:return t.keyCode!==E;case T.topKeyPress:case T.topMouseDown:case T.topBlur:return!0;default:return!1}}function s(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function c(e,t,n,r){var o,c;if(_?o=i(e):k?u(e,n)&&(o=S.compositionEnd):a(e,n)&&(o=S.compositionStart),!o)return null;P&&(k||o!==S.compositionStart?o===S.compositionEnd&&k&&(c=k.getData()):k=v.getPooled(r));var l=g.getPooled(o,t,n,r);if(c)l.data=c;else{var p=s(n);null!==p&&(l.data=p)}return h.accumulateTwoPhaseDispatches(l),l}function l(e,t){switch(e){case T.topCompositionEnd:return s(t);case T.topKeyPress:var n=t.which;return n!==w?null:(M=!0,N);case T.topTextInput:var r=t.data;return r===N&&M?null:r;default:return null}}function p(e,t){if(k){if(e===T.topCompositionEnd||u(e,t)){var n=k.getData();return v.release(k),k=null,n}return null}switch(e){case T.topPaste:return null;case T.topKeyPress:return t.which&&!o(t)?String.fromCharCode(t.which):null;case T.topCompositionEnd:return P?null:t.data;default:return null}}function d(e,t,n,r){var o;if(o=D?l(e,n):p(e,n),!o)return null;var i=y.getPooled(S.beforeInput,t,n,r);return i.data=o,h.accumulateTwoPhaseDispatches(i),i}var f=e("b"),h=e("c"),m=e("d"),v=e("3"),g=e("7"),y=e("9"),b=e("e"),x=[9,13,27,32],E=229,_=m.canUseDOM&&"CompositionEvent"in window,C=null;m.canUseDOM&&"documentMode"in document&&(C=document.documentMode);var D=m.canUseDOM&&"TextEvent"in window&&!C&&!r(),P=m.canUseDOM&&(!_||C&&C>8&&11>=C),w=32,N=String.fromCharCode(w),T=f.topLevelTypes,S={beforeInput:{phasedRegistrationNames:{bubbled:b({onBeforeInput:null}),captured:b({onBeforeInputCapture:null})},dependencies:[T.topCompositionEnd,T.topKeyPress,T.topTextInput,T.topPaste]},compositionEnd:{phasedRegistrationNames:{bubbled:b({onCompositionEnd:null}),captured:b({onCompositionEndCapture:null})},dependencies:[T.topBlur,T.topCompositionEnd,T.topKeyDown,T.topKeyPress,T.topKeyUp,T.topMouseDown]},compositionStart:{phasedRegistrationNames:{bubbled:b({onCompositionStart:null}),captured:b({onCompositionStartCapture:null})},dependencies:[T.topBlur,T.topCompositionStart,T.topKeyDown,T.topKeyPress,T.topKeyUp,T.topMouseDown]},compositionUpdate:{phasedRegistrationNames:{bubbled:b({onCompositionUpdate:null}),captured:b({onCompositionUpdateCapture:null})},dependencies:[T.topBlur,T.topCompositionUpdate,T.topKeyDown,T.topKeyPress,T.topKeyUp,T.topMouseDown]}},M=!1,k=null,O={eventTypes:S,extractEvents:function(e,t,n,r){return[c(e,t,n,r),d(e,t,n,r)]}};return n.exports=O,n.exports}),e.registerDynamic("f",["b","10","c","d","11","12","8","13","14","15","e","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){var t=e.nodeName&&e.nodeName.toLowerCase();return"select"===t||"input"===t&&"file"===e.type}function o(e){var t=D.getPooled(M.change,O,e,P(e));x.accumulateTwoPhaseDispatches(t),C.batchedUpdates(i,t)}function i(e){b.enqueueEvents(e),b.processEventQueue(!1)}function a(e,t){k=e,O=t,k.attachEvent("onchange",o)}function u(){k&&(k.detachEvent("onchange",o),k=null,O=null)}function s(e,t){return e===S.topChange?t:void 0}function c(e,t,n){e===S.topFocus?(u(),a(t,n)):e===S.topBlur&&u()}function l(e,t){k=e,O=t,I=e.value,A=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(k,"value",U),k.attachEvent?k.attachEvent("onpropertychange",d):k.addEventListener("propertychange",d,!1)}function p(){k&&(delete k.value,k.detachEvent?k.detachEvent("onpropertychange",d):k.removeEventListener("propertychange",d,!1),k=null,O=null,I=null,A=null)}function d(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==I&&(I=t,o(e))}}function f(e,t){return e===S.topInput?t:void 0}function h(e,t,n){e===S.topFocus?(p(),l(t,n)):e===S.topBlur&&p()}function m(e,t){return e!==S.topSelectionChange&&e!==S.topKeyUp&&e!==S.topKeyDown||!k||k.value===I?void 0:(I=k.value,O)}function v(e){return e.nodeName&&"input"===e.nodeName.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}function g(e,t){return e===S.topClick?t:void 0}var y=e("b"),b=e("10"),x=e("c"),E=e("d"),_=e("11"),C=e("12"),D=e("8"),P=e("13"),w=e("14"),N=e("15"),T=e("e"),S=y.topLevelTypes,M={change:{phasedRegistrationNames:{bubbled:T({onChange:null}),captured:T({onChangeCapture:null})},dependencies:[S.topBlur,S.topChange,S.topClick,S.topFocus,S.topInput,S.topKeyDown,S.topKeyUp,S.topSelectionChange]}},k=null,O=null,I=null,A=null,R=!1;E.canUseDOM&&(R=w("change")&&(!("documentMode"in document)||document.documentMode>8));var L=!1;E.canUseDOM&&(L=w("input")&&(!("documentMode"in document)||document.documentMode>11));var U={get:function(){return A.get.call(this)},set:function(e){I=""+e,A.set.call(this,e)}},F={eventTypes:M,extractEvents:function(e,t,n,o){var i,a,u=t?_.getNodeFromInstance(t):window;if(r(u)?R?i=s:a=c:N(u)?L?i=f:(i=m,a=h):v(u)&&(i=g),i){var l=i(e,t);if(l){var p=D.getPooled(M.change,l,n,o);return p.type="change",x.accumulateTwoPhaseDispatches(p),p}}a&&a(e,u,t)}};n.exports=F}(e("16")),n.exports}),e.registerDynamic("17",["e"],!0,function(e,t,n){"use strict";var r=e("e"),o=[r({ResponderEventPlugin:null}),r({SimpleEventPlugin:null}),r({TapEventPlugin:null}),r({EnterLeaveEventPlugin:null}),r({ChangeEventPlugin:null}),r({SelectEventPlugin:null}),r({BeforeInputEventPlugin:null})];return n.exports=o,n.exports}),e.registerDynamic("18",["b","c","11","19","e"],!0,function(e,t,n){"use strict";var r=e("b"),o=e("c"),i=e("11"),a=e("19"),u=e("e"),s=r.topLevelTypes,c={mouseEnter:{registrationName:u({onMouseEnter:null}),dependencies:[s.topMouseOut,s.topMouseOver]},mouseLeave:{registrationName:u({onMouseLeave:null}),dependencies:[s.topMouseOut,s.topMouseOver]}},l={eventTypes:c,extractEvents:function(e,t,n,r){if(e===s.topMouseOver&&(n.relatedTarget||n.fromElement))return null;if(e!==s.topMouseOut&&e!==s.topMouseOver)return null;var u;if(r.window===r)u=r;else{var l=r.ownerDocument;u=l?l.defaultView||l.parentWindow:window}var p,d;if(e===s.topMouseOut){p=t;var f=n.relatedTarget||n.toElement;d=f?i.getClosestInstanceFromNode(f):null}else p=null,d=t;if(p===d)return null;var h=null==p?u:i.getNodeFromInstance(p),m=null==d?u:i.getNodeFromInstance(d),v=a.getPooled(c.mouseLeave,p,n,r);v.type="mouseleave",v.target=h,v.relatedTarget=m;var g=a.getPooled(c.mouseEnter,d,n,r);return g.type="mouseenter",g.target=m,g.relatedTarget=h,o.accumulateEnterLeaveDispatches(v,g,p,d),[v,g]}};return n.exports=l,n.exports}),e.registerDynamic("1a",["1b"],!0,function(e,t,n){"use strict";var r=e("1b"),o=r.injection.MUST_USE_PROPERTY,i=r.injection.HAS_BOOLEAN_VALUE,a=r.injection.HAS_SIDE_EFFECTS,u=r.injection.HAS_NUMERIC_VALUE,s=r.injection.HAS_POSITIVE_NUMERIC_VALUE,c=r.injection.HAS_OVERLOADED_BOOLEAN_VALUE,l={isCustomAttribute:RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+r.ATTRIBUTE_NAME_CHAR+"]*$")),Properties:{accept:0,acceptCharset:0,accessKey:0,action:0,allowFullScreen:i,allowTransparency:0,alt:0,async:i,autoComplete:0,autoPlay:i,capture:i,cellPadding:0,cellSpacing:0,charSet:0,challenge:0,checked:o|i,cite:0,classID:0,className:0,cols:s,colSpan:0,content:0,contentEditable:0,contextMenu:0,controls:i,coords:0,crossOrigin:0,data:0,dateTime:0,"default":i,defer:i,dir:0,disabled:i,download:c,draggable:0,encType:0,form:0,formAction:0,formEncType:0,formMethod:0,formNoValidate:i,formTarget:0,frameBorder:0,headers:0,height:0,hidden:i,high:0,href:0,hrefLang:0,htmlFor:0,httpEquiv:0,icon:0,id:0,inputMode:0,integrity:0,is:0,keyParams:0,keyType:0,kind:0,label:0,lang:0,list:0,loop:i,low:0,manifest:0,marginHeight:0,marginWidth:0,max:0,maxLength:0,media:0,mediaGroup:0,method:0,min:0,minLength:0,multiple:o|i,muted:o|i,name:0,nonce:0,noValidate:i,open:i,optimum:0,pattern:0,placeholder:0,poster:0,preload:0,profile:0,radioGroup:0,readOnly:i,rel:0,required:i,reversed:i,role:0,rows:s,rowSpan:u,sandbox:0,scope:0,scoped:i,scrolling:0,seamless:i,selected:o|i,shape:0,size:s,sizes:0,span:s,spellCheck:0,src:0,srcDoc:0,srcLang:0,srcSet:0,start:u,step:0,style:0,summary:0,tabIndex:0,target:0,title:0,type:0,useMap:0,value:o|a,width:0,wmode:0,wrap:0,about:0,datatype:0,inlist:0,prefix:0,property:0,resource:0,"typeof":0,vocab:0,autoCapitalize:0,autoCorrect:0,autoSave:0,color:0,itemProp:0,itemScope:i,itemType:0,itemID:0,itemRef:0,results:0,security:0,unselectable:0},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{}};return n.exports=l,n.exports}),e.registerDynamic("1c",["11","1d"],!0,function(e,t,n){"use strict";var r=e("11"),o=e("1d"),i={focusDOMComponent:function(){o(r.getNodeFromInstance(this))}};return n.exports=i,n.exports}),e.registerDynamic("1e",[],!0,function(e,t,n){"use strict";function r(e){return e.replace(o,function(e,t){return t.toUpperCase()})}var o=/-(.)/g;return n.exports=r,n.exports}),e.registerDynamic("1f",["1e"],!0,function(e,t,n){"use strict";function r(e){return o(e.replace(i,"ms-"))}var o=e("1e"),i=/^-ms-/;return n.exports=r,n.exports}),e.registerDynamic("20",[],!0,function(e,t,n){"use strict";function r(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}var o={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},i=["Webkit","ms","Moz","O"];Object.keys(o).forEach(function(e){i.forEach(function(t){o[r(t,e)]=o[e]})});var a={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},u={isUnitlessNumber:o,shorthandPropertyExpansions:a};return n.exports=u,n.exports}),e.registerDynamic("21",["20","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n){var r=null==t||"boolean"==typeof t||""===t;if(r)return"";var o=isNaN(t);if(o||0===t||i.hasOwnProperty(e)&&i[e])return""+t;if("string"==typeof t){t=t.trim()}return t+"px"}var o=e("20"),i=(e("22"),o.isUnitlessNumber);n.exports=r}(e("16")),n.exports}),e.registerDynamic("23",[],!0,function(e,t,n){"use strict";function r(e){return e.replace(o,"-$1").toLowerCase()}var o=/([A-Z])/g;return n.exports=r,n.exports}),e.registerDynamic("24",["23"],!0,function(e,t,n){"use strict";function r(e){return o(e).replace(i,"-ms-")}var o=e("23"),i=/^ms-/;return n.exports=r,n.exports}),e.registerDynamic("25",[],!0,function(e,t,n){"use strict";function r(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}return n.exports=r,n.exports}),e.registerDynamic("26",["20","d","27","1f","21","24","25","22","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("20"),o=e("d"),i=(e("27"),e("1f"),e("21")),a=e("24"),u=e("25"),s=(e("22"),u(function(e){return a(e)})),c=!1,l="cssFloat";if(o.canUseDOM){var p=document.createElement("div").style;try{p.font=""}catch(d){c=!0}void 0===document.documentElement.style.cssFloat&&(l="styleFloat")}var f={createMarkupForStyles:function(e,t){var n="";for(var r in e)if(e.hasOwnProperty(r)){var o=e[r];null!=o&&(n+=s(r)+":",n+=i(r,o,t)+";")}return n||null},setValueForStyles:function(e,t,n){var o=e.style;for(var a in t)if(t.hasOwnProperty(a)){var u=i(a,t[a],n);if("float"!==a&&"cssFloat"!==a||(a=l),u)o[a]=u;else{var s=c&&r.shorthandPropertyExpansions[a];if(s)for(var p in s)o[p]="";else o[a]=""}}}};n.exports=f}(e("16")),n.exports}),e.registerDynamic("28",["29","11","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("29"),o=e("11"),i={dangerouslyProcessChildrenUpdates:function(e,t){var n=o.getNodeFromInstance(e);r.processUpdates(n,t)}};n.exports=i}(e("16")),n.exports}),e.registerDynamic("2a",["29","28","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("29"),o=e("28"),i={processChildrenUpdates:o.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkup:r.dangerouslyReplaceNodeWithMarkup,unmountIDFromEnvironment:function(e){}};n.exports=i}(e("16")),n.exports}),e.registerDynamic("2b",["2c"],!0,function(e,t,n){"use strict";var r=e("2c"),o={getNativeProps:r.getNativeProps};return n.exports=o,n.exports}),e.registerDynamic("2d",["6","2c","2e","2f","11","12","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(){this._rootNodeID&&d.updateWrapper(this)}function o(e){var t=this._currentElement.props,n=s.executeOnChange(t,e);l.asap(r,this);var o=t.name;if("radio"===t.type&&null!=o){for(var i=c.getNodeFromInstance(this),a=i;a.parentNode;)a=a.parentNode;for(var u=a.querySelectorAll("input[name="+JSON.stringify(""+o)+'][type="radio"]'),d=0;d<u.length;d++){var f=u[d];if(f!==i&&f.form===i.form){var h=c.getInstanceFromNode(f);h?void 0:p(!1),l.asap(r,h)}}}return n}var i=e("6"),a=e("2c"),u=e("2e"),s=e("2f"),c=e("11"),l=e("12"),p=e("30"),d=(e("22"),{getNativeProps:function(e,t){var n=s.getValue(t),r=s.getChecked(t),o=i({type:void 0},a.getNativeProps(e,t),{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=r?r:e._wrapperState.initialChecked,onChange:e._wrapperState.onChange});return o},mountWrapper:function(e,t){var n=t.defaultValue;e._wrapperState={initialChecked:t.defaultChecked||!1,initialValue:null!=n?n:null,listeners:null,onChange:o.bind(e)}},updateWrapper:function(e){var t=e._currentElement.props,n=t.checked;null!=n&&u.setValueForProperty(c.getNodeFromInstance(e),"checked",n||!1);var r=s.getValue(t);null!=r&&u.setValueForProperty(c.getNodeFromInstance(e),"value",""+r)}});n.exports=d}(e("16")),n.exports}),e.registerDynamic("31",["6","32","11","33","22","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("6"),o=e("32"),i=e("11"),a=e("33"),u=(e("22"),{mountWrapper:function(e,t,n){var r=null;if(null!=n){var o=n;"optgroup"===o._tag&&(o=o._nativeParent),null!=o&&"select"===o._tag&&(r=a.getSelectValueContext(o))}var i=null;if(null!=r)if(i=!1,Array.isArray(r)){for(var u=0;u<r.length;u++)if(""+r[u]==""+t.value){i=!0;break}}else i=""+r==""+t.value;e._wrapperState={selected:i}},postMountWrapper:function(e){var t=e._currentElement.props;if(null!=t.value){var n=i.getNodeFromInstance(e);n.setAttribute("value",t.value)}},getNativeProps:function(e,t){var n=r({selected:void 0,children:void 0},t);null!=e._wrapperState.selected&&(n.selected=e._wrapperState.selected);var i="";return o.forEach(t.children,function(e){null!=e&&("string"!=typeof e&&"number"!=typeof e||(i+=e))}),i&&(n.children=i),n}});n.exports=u}(e("16")),n.exports}),e.registerDynamic("33",["6","2c","2f","11","12","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var e=this._currentElement.props,t=s.getValue(e);null!=t&&o(this,Boolean(e.multiple),t)}}function o(e,t,n){var r,o,i=c.getNodeFromInstance(e).options;if(t){for(r={},o=0;o<n.length;o++)r[""+n[o]]=!0;for(o=0;o<i.length;o++){var a=r.hasOwnProperty(i[o].value);i[o].selected!==a&&(i[o].selected=a)}}else{for(r=""+n,o=0;o<i.length;o++)if(i[o].value===r)return void(i[o].selected=!0);i.length&&(i[0].selected=!0)}}function i(e){var t=this._currentElement.props,n=s.executeOnChange(t,e);return this._rootNodeID&&(this._wrapperState.pendingUpdate=!0),l.asap(r,this),n}var a=e("6"),u=e("2c"),s=e("2f"),c=e("11"),l=e("12"),p=(e("22"),!1),d={getNativeProps:function(e,t){return a({},u.getNativeProps(e,t),{onChange:e._wrapperState.onChange,value:void 0})},mountWrapper:function(e,t){var n=s.getValue(t);e._wrapperState={pendingUpdate:!1,initialValue:null!=n?n:t.defaultValue,listeners:null,onChange:i.bind(e),wasMultiple:Boolean(t.multiple)},void 0===t.value||void 0===t.defaultValue||p||(p=!0)},getSelectValueContext:function(e){return e._wrapperState.initialValue},postUpdateWrapper:function(e){var t=e._currentElement.props;e._wrapperState.initialValue=void 0;var n=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=Boolean(t.multiple);var r=s.getValue(t);null!=r?(e._wrapperState.pendingUpdate=!1,o(e,Boolean(t.multiple),r)):n!==Boolean(t.multiple)&&(null!=t.defaultValue?o(e,Boolean(t.multiple),t.defaultValue):o(e,Boolean(t.multiple),t.multiple?[]:""))}};n.exports=d}(e("16")),n.exports}),e.registerDynamic("2c",[],!0,function(e,t,n){"use strict";var r={onClick:!0,onDoubleClick:!0,onMouseDown:!0,onMouseMove:!0,onMouseUp:!0,onClickCapture:!0,onDoubleClickCapture:!0,onMouseDownCapture:!0,onMouseMoveCapture:!0,onMouseUpCapture:!0},o={getNativeProps:function(e,t){if(!t.disabled)return t;var n={};for(var o in t)!r[o]&&t.hasOwnProperty(o)&&(n[o]=t[o]);return n}};return n.exports=o,n.exports}),e.registerDynamic("34",["1b","35","22","16"],!0,function(e,t,n){return function(t){"use strict";var r,o=(e("1b"),e("35"),e("22"),{onCreateMarkupForProperty:function(e,t){r(e)},onSetValueForProperty:function(e,t,n){r(t)},onDeleteValueForProperty:function(e,t){r(t)}});n.exports=o}(e("16")),n.exports}),e.registerDynamic("36",["34","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n,r,o,i){}var o=e("34"),i=(e("22"),[]),a={addDevtool:function(e){i.push(e)},removeDevtool:function(e){for(var t=0;t<i.length;t++)i[t]===e&&(i.splice(t,1),t--)},onCreateMarkupForProperty:function(e,t){r("onCreateMarkupForProperty",e,t)},onSetValueForProperty:function(e,t,n){r("onSetValueForProperty",e,t,n)},onDeleteValueForProperty:function(e,t){r("onDeleteValueForProperty",e,t)}};a.addDevtool(o),n.exports=a}(e("16")),n.exports}),e.registerDynamic("37",["36"],!0,function(e,t,n){"use strict";var r=e("36");return n.exports={debugTool:r},n.exports}),e.registerDynamic("38",["39"],!0,function(e,t,n){"use strict";function r(e){return'"'+o(e)+'"'}var o=e("39");return n.exports=r,n.exports}),e.registerDynamic("2e",["1b","11","37","27","38","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){return c.hasOwnProperty(e)?!0:s.hasOwnProperty(e)?!1:u.test(e)?(c[e]=!0,!0):(s[e]=!0,!1)}function o(e,t){return null==t||e.hasBooleanValue&&!t||e.hasNumericValue&&isNaN(t)||e.hasPositiveNumericValue&&1>t||e.hasOverloadedBooleanValue&&t===!1}var i=e("1b"),a=(e("11"),e("37"),e("27"),e("38")),u=(e("22"),new RegExp("^["+i.ATTRIBUTE_NAME_START_CHAR+"]["+i.ATTRIBUTE_NAME_CHAR+"]*$")),s={},c={},l={createMarkupForID:function(e){return i.ID_ATTRIBUTE_NAME+"="+a(e)},setAttributeForID:function(e,t){e.setAttribute(i.ID_ATTRIBUTE_NAME,t)},createMarkupForRoot:function(){return i.ROOT_ATTRIBUTE_NAME+'=""'},setAttributeForRoot:function(e){e.setAttribute(i.ROOT_ATTRIBUTE_NAME,"")},createMarkupForProperty:function(e,t){var n=i.properties.hasOwnProperty(e)?i.properties[e]:null;if(n){if(o(n,t))return"";var r=n.attributeName;return n.hasBooleanValue||n.hasOverloadedBooleanValue&&t===!0?r+'=""':r+"="+a(t)}return i.isCustomAttribute(e)?null==t?"":e+"="+a(t):null},createMarkupForCustomAttribute:function(e,t){return r(e)&&null!=t?e+"="+a(t):""},setValueForProperty:function(e,t,n){var r=i.properties.hasOwnProperty(t)?i.properties[t]:null;if(r){var a=r.mutationMethod;if(a)a(e,n);else{if(o(r,n))return void this.deleteValueForProperty(e,t);if(r.mustUseProperty){var u=r.propertyName;r.hasSideEffects&&""+e[u]==""+n||(e[u]=n)}else{var s=r.attributeName,c=r.attributeNamespace;c?e.setAttributeNS(c,s,""+n):r.hasBooleanValue||r.hasOverloadedBooleanValue&&n===!0?e.setAttribute(s,""):e.setAttribute(s,""+n)}}}else if(i.isCustomAttribute(t))return void l.setValueForAttribute(e,t,n)},setValueForAttribute:function(e,t,n){if(r(t)){null==n?e.removeAttribute(t):e.setAttribute(t,""+n)}},deleteValueForProperty:function(e,t){var n=i.properties.hasOwnProperty(t)?i.properties[t]:null;if(n){var r=n.mutationMethod;if(r)r(e,void 0);else if(n.mustUseProperty){var o=n.propertyName;n.hasBooleanValue?e[o]=!1:n.hasSideEffects&&""+e[o]==""||(e[o]="")}else e.removeAttribute(n.attributeName)}else i.isCustomAttribute(t)&&e.removeAttribute(t)}};n.exports=l}(e("16")),n.exports}),e.registerDynamic("2f",["3a","3b","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){null!=e.checkedLink&&null!=e.valueLink?c(!1):void 0}function o(e){r(e),null!=e.value||null!=e.onChange?c(!1):void 0}function i(e){r(e),null!=e.checked||null!=e.onChange?c(!1):void 0}function a(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}var u=e("3a"),s=e("3b"),c=e("30"),l=(e("22"),{button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0}),p={value:function(e,t,n){return!e[t]||l[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t,n){return!e[t]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:u.func},d={},f={checkPropTypes:function(e,t,n){for(var r in p){if(p.hasOwnProperty(r))var o=p[r](t,r,e,s.prop);if(o instanceof Error&&!(o.message in d)){d[o.message]=!0;a(n)}}},getValue:function(e){return e.valueLink?(o(e),e.valueLink.value):e.value},getChecked:function(e){return e.checkedLink?(i(e),e.checkedLink.value):e.checked},executeOnChange:function(e,t){return e.valueLink?(o(e),e.valueLink.requestChange(t.target.value)):e.checkedLink?(i(e),e.checkedLink.requestChange(t.target.checked)):e.onChange?e.onChange.call(void 0,t):void 0}};n.exports=f}(e("16")),n.exports}),e.registerDynamic("3c",["6","2c","2e","2f","11","12","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(){this._rootNodeID&&d.updateWrapper(this)}function o(e){var t=this._currentElement.props,n=s.executeOnChange(t,e);return l.asap(r,this),n}var i=e("6"),a=e("2c"),u=e("2e"),s=e("2f"),c=e("11"),l=e("12"),p=e("30"),d=(e("22"),{getNativeProps:function(e,t){null!=t.dangerouslySetInnerHTML?p(!1):void 0;var n=i({},a.getNativeProps(e,t),{defaultValue:void 0,value:void 0,children:e._wrapperState.initialValue,onChange:e._wrapperState.onChange});return n},mountWrapper:function(e,t){var n=t.defaultValue,r=t.children;null!=r&&(null!=n?p(!1):void 0,Array.isArray(r)&&(r.length<=1?void 0:p(!1),r=r[0]),n=""+r),null==n&&(n="");var i=s.getValue(t);e._wrapperState={initialValue:""+(null!=i?i:n),listeners:null,onChange:o.bind(e)}},updateWrapper:function(e){var t=e._currentElement.props,n=s.getValue(t);null!=n&&u.setValueForProperty(c.getNodeFromInstance(e),"value",""+n)}});n.exports=d}(e("16")),n.exports}),e.registerDynamic("3d",["3e","3f","40","41","42","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n){var r=void 0===e[n];null!=t&&r&&(e[n]=i(t))}var o=e("3e"),i=e("3f"),a=(e("40"),e("41")),u=e("42"),s=(e("22"),{instantiateChildren:function(e,t,n){if(null==e)return null;var o={};return u(e,r,o),o},updateChildren:function(e,t,n,r,u){if(t||e){var s,c;for(s in t)if(t.hasOwnProperty(s)){c=e&&e[s];var l=c&&c._currentElement,p=t[s];if(null!=c&&a(l,p))o.receiveComponent(c,p,r,u),t[s]=c;else{c&&(n[s]=o.getNativeNode(c),o.unmountComponent(c,!1));var d=i(p);t[s]=d}}for(s in e)!e.hasOwnProperty(s)||t&&t.hasOwnProperty(s)||(c=e[s],n[s]=o.getNativeNode(c),o.unmountComponent(c,!1))}},unmountChildren:function(e,t){for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];o.unmountComponent(r,t)}}});n.exports=s}(e("16")),n.exports}),e.registerDynamic("43",["40","42","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n){var r=e,o=void 0===r[n];o&&null!=t&&(r[n]=t)}function o(e){if(null==e)return e;var t={};return i(e,r,t),t}var i=(e("40"),e("42"));e("22");n.exports=o}(e("16")),n.exports}),e.registerDynamic("44",["45","27","46","47","3e","3d","48","43","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n){return{type:p.INSERT_MARKUP,content:e,fromIndex:null,fromNode:null,toIndex:n,afterNode:t}}function o(e,t,n){return{type:p.MOVE_EXISTING,content:null,fromIndex:e._mountIndex,fromNode:d.getNativeNode(e),toIndex:n,afterNode:t}}function i(e,t){return{type:p.REMOVE_NODE,content:null,fromIndex:e._mountIndex,fromNode:t,toIndex:null,afterNode:null}}function a(e){return{type:p.SET_MARKUP,content:e,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}function u(e){return{type:p.TEXT_CONTENT,content:e,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}function s(e,t){return t&&(e=e||[],e.push(t)),e}function c(e,t){l.processChildrenUpdates(e,t)}var l=e("45"),p=(e("27"),e("46")),d=(e("47"),e("3e")),f=e("3d"),h=(e("48"),e("43")),m=e("30"),v={Mixin:{_reconcilerInstantiateChildren:function(e,t,n){return f.instantiateChildren(e,t,n)},_reconcilerUpdateChildren:function(e,t,n,r,o){var i;return i=h(t),f.updateChildren(e,i,n,r,o),i},mountChildren:function(e,t,n){var r=this._reconcilerInstantiateChildren(e,t,n);this._renderedChildren=r;var o=[],i=0;for(var a in r)if(r.hasOwnProperty(a)){var u=r[a],s=d.mountComponent(u,t,this,this._nativeContainerInfo,n);u._mountIndex=i++,o.push(s)}return o},updateTextContent:function(e){var t=this._renderedChildren;f.unmountChildren(t,!1);for(var n in t)t.hasOwnProperty(n)&&m(!1);var r=[u(e)];c(this,r)},updateMarkup:function(e){var t=this._renderedChildren;f.unmountChildren(t,!1);for(var n in t)t.hasOwnProperty(n)&&m(!1);var r=[a(e)];c(this,r)},updateChildren:function(e,t,n){this._updateChildren(e,t,n);
},_updateChildren:function(e,t,n){var r=this._renderedChildren,o={},i=this._reconcilerUpdateChildren(r,e,o,t,n);if(i||r){var a,u=null,l=0,p=0,f=null;for(a in i)if(i.hasOwnProperty(a)){var h=r&&r[a],m=i[a];h===m?(u=s(u,this.moveChild(h,f,p,l)),l=Math.max(h._mountIndex,l),h._mountIndex=p):(h&&(l=Math.max(h._mountIndex,l)),u=s(u,this._mountChildAtIndex(m,f,p,t,n))),p++,f=d.getNativeNode(m)}for(a in o)o.hasOwnProperty(a)&&(u=s(u,this._unmountChild(r[a],o[a])));u&&c(this,u),this._renderedChildren=i}},unmountChildren:function(e){var t=this._renderedChildren;f.unmountChildren(t,e),this._renderedChildren=null},moveChild:function(e,t,n,r){return e._mountIndex<r?o(e,t,n):void 0},createChild:function(e,t,n){return r(n,t,e._mountIndex)},removeChild:function(e,t){return i(e,t)},_mountChildAtIndex:function(e,t,n,r,o){var i=d.mountComponent(e,r,this,this._nativeContainerInfo,o);return e._mountIndex=n,this.createChild(e,t,i)},_unmountChild:function(e,t){var n=this.removeChild(e,t);return e._mountIndex=null,n}}};n.exports=v}(e("16")),n.exports}),e.registerDynamic("49",["6","4","4a"],!0,function(e,t,n){"use strict";function r(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.useCreateElement=!1}var o=e("6"),i=e("4"),a=e("4a"),u=[],s={enqueue:function(){}},c={getTransactionWrappers:function(){return u},getReactMountReady:function(){return s},destructor:function(){},checkpoint:function(){},rollback:function(){}};return o(r.prototype,a.Mixin,c),i.addPoolingTo(r),n.exports=r,n.exports}),e.registerDynamic("4b",["6","1c","26","4c","4d","1b","2e","b","10","35","4e","2a","2b","4f","11","2d","31","33","3c","27","44","49","48","39","30","14","e","51","50","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){t&&(X[e._tag]&&(null!=t.children||null!=t.dangerouslySetInnerHTML?A(!1):void 0),null!=t.dangerouslySetInnerHTML&&(null!=t.children?A(!1):void 0,"object"==typeof t.dangerouslySetInnerHTML&&q in t.dangerouslySetInnerHTML?void 0:A(!1)),null!=t.style&&"object"!=typeof t.style?A(!1):void 0)}function o(e,t,n,r){if(!(r instanceof O)){var o=e._nativeContainerInfo,a=o._node&&o._node.nodeType===K,u=a?o._node:o._ownerDocument;j(t,u),r.getReactMountReady().enqueue(i,{inst:e,registrationName:t,listener:n})}}function i(){var e=this;x.putListener(e.inst,e.registrationName,e.listener)}function a(){var e=this;T.postMountWrapper(e)}function u(){var e=this;e._rootNodeID?void 0:A(!1);var t=F(e);switch(t?void 0:A(!1),e._tag){case"iframe":case"object":e._wrapperState.listeners=[_.trapBubbledEvent(b.topLevelTypes.topLoad,"load",t)];break;case"video":case"audio":e._wrapperState.listeners=[];for(var n in Y)Y.hasOwnProperty(n)&&e._wrapperState.listeners.push(_.trapBubbledEvent(b.topLevelTypes[n],Y[n],t));break;case"img":e._wrapperState.listeners=[_.trapBubbledEvent(b.topLevelTypes.topError,"error",t),_.trapBubbledEvent(b.topLevelTypes.topLoad,"load",t)];break;case"form":e._wrapperState.listeners=[_.trapBubbledEvent(b.topLevelTypes.topReset,"reset",t),_.trapBubbledEvent(b.topLevelTypes.topSubmit,"submit",t)];break;case"input":case"select":case"textarea":e._wrapperState.listeners=[_.trapBubbledEvent(b.topLevelTypes.topInvalid,"invalid",t)]}}function s(){S.postUpdateWrapper(this)}function c(e){J.call(Q,e)||($.test(e)?void 0:A(!1),Q[e]=!0)}function l(e,t){return e.indexOf("-")>=0||null!=t.is}function p(e){var t=e.type;c(t),this._currentElement=e,this._tag=t.toLowerCase(),this._namespaceURI=null,this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._nativeNode=null,this._nativeParent=null,this._rootNodeID=null,this._domID=null,this._nativeContainerInfo=null,this._wrapperState=null,this._topLevelWrapper=null,this._flags=0}var d=e("6"),f=e("1c"),h=e("26"),m=e("4c"),v=e("4d"),g=e("1b"),y=e("2e"),b=e("b"),x=e("10"),E=e("35"),_=e("4e"),C=e("2a"),D=e("2b"),P=e("4f"),w=e("11"),N=e("2d"),T=e("31"),S=e("33"),M=e("3c"),k=(e("27"),e("44")),O=e("49"),I=(e("48"),e("39")),A=e("30"),R=(e("14"),e("e")),L=(e("51"),e("50"),e("22"),P),U=x.deleteListener,F=w.getNodeFromInstance,j=_.listenTo,V=E.registrationNameModules,B={string:!0,number:!0},W=R({style:null}),q=R({__html:null}),H={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null},K=11,Y={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},z={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},G={listing:!0,pre:!0,textarea:!0},X=d({menuitem:!0},z),$=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,Q={},J={}.hasOwnProperty,Z=1;p.displayName="ReactDOMComponent",p.Mixin={mountComponent:function(e,t,n,o){this._rootNodeID=Z++,this._domID=n._idCounter++,this._nativeParent=t,this._nativeContainerInfo=n;var i=this._currentElement.props;switch(this._tag){case"iframe":case"object":case"img":case"form":case"video":case"audio":this._wrapperState={listeners:null},e.getReactMountReady().enqueue(u,this);break;case"button":i=D.getNativeProps(this,i,t);break;case"input":N.mountWrapper(this,i,t),i=N.getNativeProps(this,i),e.getReactMountReady().enqueue(u,this);break;case"option":T.mountWrapper(this,i,t),i=T.getNativeProps(this,i);break;case"select":S.mountWrapper(this,i,t),i=S.getNativeProps(this,i),e.getReactMountReady().enqueue(u,this);break;case"textarea":M.mountWrapper(this,i,t),i=M.getNativeProps(this,i),e.getReactMountReady().enqueue(u,this)}r(this,i);var s,c;null!=t?(s=t._namespaceURI,c=t._tag):n._tag&&(s=n._namespaceURI,c=n._tag),(null==s||s===v.svg&&"foreignobject"===c)&&(s=v.html),s===v.html&&("svg"===this._tag?s=v.svg:"math"===this._tag&&(s=v.mathml)),this._namespaceURI=s;var l;if(e.useCreateElement){var p,d=n._ownerDocument;if(s===v.html)if("script"===this._tag){var h=d.createElement("div"),g=this._currentElement.type;h.innerHTML="<"+g+"></"+g+">",p=h.removeChild(h.firstChild)}else p=d.createElement(this._currentElement.type,i.is||null);else p=d.createElementNS(s,this._currentElement.type);w.precacheNode(this,p),this._flags|=L.hasCachedChildNodes,this._nativeParent||y.setAttributeForRoot(p),this._updateDOMProperties(null,i,e);var b=m(p);this._createInitialChildren(e,i,o,b),l=b}else{var x=this._createOpenTagMarkupAndPutListeners(e,i),E=this._createContentMarkup(e,i,o);l=!E&&z[this._tag]?x+"/>":x+">"+E+"</"+this._currentElement.type+">"}switch(this._tag){case"button":case"input":case"select":case"textarea":i.autoFocus&&e.getReactMountReady().enqueue(f.focusDOMComponent,this);break;case"option":e.getReactMountReady().enqueue(a,this)}return l},_createOpenTagMarkupAndPutListeners:function(e,t){var n="<"+this._currentElement.type;for(var r in t)if(t.hasOwnProperty(r)){var i=t[r];if(null!=i)if(V.hasOwnProperty(r))i&&o(this,r,i,e);else{r===W&&(i&&(i=this._previousStyleCopy=d({},t.style)),i=h.createMarkupForStyles(i,this));var a=null;null!=this._tag&&l(this._tag,t)?H.hasOwnProperty(r)||(a=y.createMarkupForCustomAttribute(r,i)):a=y.createMarkupForProperty(r,i),a&&(n+=" "+a)}}return e.renderToStaticMarkup?n:(this._nativeParent||(n+=" "+y.createMarkupForRoot()),n+=" "+y.createMarkupForID(this._domID))},_createContentMarkup:function(e,t,n){var r="",o=t.dangerouslySetInnerHTML;if(null!=o)null!=o.__html&&(r=o.__html);else{var i=B[typeof t.children]?t.children:null,a=null!=i?null:t.children;if(null!=i)r=I(i);else if(null!=a){var u=this.mountChildren(a,e,n);r=u.join("")}}return G[this._tag]&&"\n"===r.charAt(0)?"\n"+r:r},_createInitialChildren:function(e,t,n,r){var o=t.dangerouslySetInnerHTML;if(null!=o)null!=o.__html&&m.queueHTML(r,o.__html);else{var i=B[typeof t.children]?t.children:null,a=null!=i?null:t.children;if(null!=i)m.queueText(r,i);else if(null!=a)for(var u=this.mountChildren(a,e,n),s=0;s<u.length;s++)m.queueChild(r,u[s])}},receiveComponent:function(e,t,n){var r=this._currentElement;this._currentElement=e,this.updateComponent(t,r,e,n)},updateComponent:function(e,t,n,o){var i=t.props,a=this._currentElement.props;switch(this._tag){case"button":i=D.getNativeProps(this,i),a=D.getNativeProps(this,a);break;case"input":N.updateWrapper(this),i=N.getNativeProps(this,i),a=N.getNativeProps(this,a);break;case"option":i=T.getNativeProps(this,i),a=T.getNativeProps(this,a);break;case"select":i=S.getNativeProps(this,i),a=S.getNativeProps(this,a);break;case"textarea":M.updateWrapper(this),i=M.getNativeProps(this,i),a=M.getNativeProps(this,a)}r(this,a),this._updateDOMProperties(i,a,e),this._updateDOMChildren(i,a,e,o),"select"===this._tag&&e.getReactMountReady().enqueue(s,this)},_updateDOMProperties:function(e,t,n){var r,i,a;for(r in e)if(!t.hasOwnProperty(r)&&e.hasOwnProperty(r)&&null!=e[r])if(r===W){var u=this._previousStyleCopy;for(i in u)u.hasOwnProperty(i)&&(a=a||{},a[i]="");this._previousStyleCopy=null}else V.hasOwnProperty(r)?e[r]&&U(this,r):(g.properties[r]||g.isCustomAttribute(r))&&y.deleteValueForProperty(F(this),r);for(r in t){var s=t[r],c=r===W?this._previousStyleCopy:null!=e?e[r]:void 0;if(t.hasOwnProperty(r)&&s!==c&&(null!=s||null!=c))if(r===W)if(s?s=this._previousStyleCopy=d({},s):this._previousStyleCopy=null,c){for(i in c)!c.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(a=a||{},a[i]="");for(i in s)s.hasOwnProperty(i)&&c[i]!==s[i]&&(a=a||{},a[i]=s[i])}else a=s;else if(V.hasOwnProperty(r))s?o(this,r,s,n):c&&U(this,r);else if(l(this._tag,t))H.hasOwnProperty(r)||y.setValueForAttribute(F(this),r,s);else if(g.properties[r]||g.isCustomAttribute(r)){var p=F(this);null!=s?y.setValueForProperty(p,r,s):y.deleteValueForProperty(p,r)}}a&&h.setValueForStyles(F(this),a,this)},_updateDOMChildren:function(e,t,n,r){var o=B[typeof e.children]?e.children:null,i=B[typeof t.children]?t.children:null,a=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,u=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,s=null!=o?null:e.children,c=null!=i?null:t.children,l=null!=o||null!=a,p=null!=i||null!=u;null!=s&&null==c?this.updateChildren(null,n,r):l&&!p&&this.updateTextContent(""),null!=i?o!==i&&this.updateTextContent(""+i):null!=u?a!==u&&this.updateMarkup(""+u):null!=c&&this.updateChildren(c,n,r)},getNativeNode:function(){return F(this)},unmountComponent:function(e){switch(this._tag){case"iframe":case"object":case"img":case"form":case"video":case"audio":var t=this._wrapperState.listeners;if(t)for(var n=0;n<t.length;n++)t[n].remove();break;case"html":case"head":case"body":A(!1)}this.unmountChildren(e),w.uncacheNode(this),x.deleteAllListeners(this),C.unmountIDFromEnvironment(this._rootNodeID),this._rootNodeID=null,this._domID=null,this._wrapperState=null},getPublicInstance:function(){return F(this)}},d(p.prototype,p.Mixin,k.Mixin),n.exports=p}(e("16")),n.exports}),e.registerDynamic("52",["6","4c","11"],!0,function(e,t,n){"use strict";var r=e("6"),o=e("4c"),i=e("11"),a=function(e){this._currentElement=null,this._nativeNode=null,this._nativeParent=null,this._nativeContainerInfo=null,this._domID=null};return r(a.prototype,{mountComponent:function(e,t,n,r){var a=n._idCounter++;this._domID=a,this._nativeParent=t,this._nativeContainerInfo=n;var u=" react-empty: "+this._domID+" ";if(e.useCreateElement){var s=n._ownerDocument,c=s.createComment(u);return i.precacheNode(this,c),o(c)}return e.renderToStaticMarkup?"":"<!--"+u+"-->"},receiveComponent:function(){},getNativeNode:function(){return i.getNodeFromInstance(this)},unmountComponent:function(){i.uncacheNode(this)}}),n.exports=a,n.exports}),e.registerDynamic("53",["30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){"_nativeNode"in e?void 0:s(!1),"_nativeNode"in t?void 0:s(!1);for(var n=0,r=e;r;r=r._nativeParent)n++;for(var o=0,i=t;i;i=i._nativeParent)o++;for(;n-o>0;)e=e._nativeParent,n--;for(;o-n>0;)t=t._nativeParent,o--;for(var a=n;a--;){if(e===t)return e;e=e._nativeParent,t=t._nativeParent}return null}function o(e,t){"_nativeNode"in e?void 0:s(!1),"_nativeNode"in t?void 0:s(!1);for(;t;){if(t===e)return!0;t=t._nativeParent}return!1}function i(e){return"_nativeNode"in e?void 0:s(!1),e._nativeParent}function a(e,t,n){for(var r=[];e;)r.push(e),e=e._nativeParent;var o;for(o=r.length;o-- >0;)t(r[o],!1,n);for(o=0;o<r.length;o++)t(r[o],!0,n)}function u(e,t,n,o,i){for(var a=e&&t?r(e,t):null,u=[];e&&e!==a;)u.push(e),e=e._nativeParent;for(var s=[];t&&t!==a;)s.push(t),t=t._nativeParent;var c;for(c=0;c<u.length;c++)n(u[c],!0,o);for(c=s.length;c-- >0;)n(s[c],!1,i)}var s=e("30");n.exports={isAncestor:o,getLowestCommonAncestor:r,getParentInstance:i,traverseTwoPhase:a,traverseEnterLeave:u}}(e("16")),n.exports}),e.registerDynamic("54",["30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){var t=e.length;if(Array.isArray(e)||"object"!=typeof e&&"function"!=typeof e?a(!1):void 0,"number"!=typeof t?a(!1):void 0,0===t||t-1 in e?void 0:a(!1),"function"==typeof e.callee?a(!1):void 0,e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(n){}for(var r=Array(t),o=0;t>o;o++)r[o]=e[o];return r}function o(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}function i(e){return o(e)?Array.isArray(e)?e.slice():r(e):[e]}var a=e("30");n.exports=i}(e("16")),n.exports}),e.registerDynamic("55",["d","54","56","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){var t=e.match(l);return t&&t[1].toLowerCase()}function o(e,t){var n=c;c?void 0:s(!1);var o=r(e),i=o&&u(o);if(i){n.innerHTML=i[1]+e+i[2];for(var l=i[0];l--;)n=n.lastChild}else n.innerHTML=e;var p=n.getElementsByTagName("script");p.length&&(t?void 0:s(!1),a(p).forEach(t));for(var d=Array.from(n.childNodes);n.lastChild;)n.removeChild(n.lastChild);return d}var i=e("d"),a=e("54"),u=e("56"),s=e("30"),c=i.canUseDOM?document.createElement("div"):null,l=/^\s*<(\w+)/;n.exports=o}(e("16")),n.exports}),e.registerDynamic("56",["d","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){return a?void 0:i(!1),d.hasOwnProperty(e)||(e="*"),u.hasOwnProperty(e)||("*"===e?a.innerHTML="<link />":a.innerHTML="<"+e+"></"+e+">",u[e]=!a.firstChild),u[e]?d[e]:null}var o=e("d"),i=e("30"),a=o.canUseDOM?document.createElement("div"):null,u={},s=[1,'<select multiple="true">',"</select>"],c=[1,"<table>","</table>"],l=[3,"<table><tbody><tr>","</tr></tbody></table>"],p=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],d={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:s,option:s,caption:c,colgroup:c,tbody:c,tfoot:c,thead:c,td:l,th:l},f=["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"];f.forEach(function(e){d[e]=p,u[e]=!0}),n.exports=r}(e("16")),n.exports}),e.registerDynamic("57",["4c","d","55","48","56","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){return e.substring(1,e.indexOf(" "))}var o=e("4c"),i=e("d"),a=e("55"),u=e("48"),s=e("56"),c=e("30"),l=/^(<[^ \/>]+)/,p="data-danger-index",d={dangerouslyRenderMarkup:function(e){i.canUseDOM?void 0:c(!1);for(var t,n={},o=0;o<e.length;o++)e[o]?void 0:c(!1),t=r(e[o]),t=s(t)?t:"*",n[t]=n[t]||[],n[t][o]=e[o];var d=[],f=0;for(t in n)if(n.hasOwnProperty(t)){var h,m=n[t];for(h in m)if(m.hasOwnProperty(h)){var v=m[h];m[h]=v.replace(l,"$1 "+p+'="'+h+'" ')}for(var g=a(m.join(""),u),y=0;y<g.length;++y){var b=g[y];b.hasAttribute&&b.hasAttribute(p)&&(h=+b.getAttribute(p),b.removeAttribute(p),d.hasOwnProperty(h)?c(!1):void 0,d[h]=b,f+=1)}}return f!==d.length?c(!1):void 0,d.length!==e.length?c(!1):void 0,d},dangerouslyReplaceNodeWithMarkup:function(e,t){if(i.canUseDOM?void 0:c(!1),t?void 0:c(!1),"HTML"===e.nodeName?c(!1):void 0,"string"==typeof t){var n=a(t,u)[0];e.parentNode.replaceChild(n,e)}else o.replaceChildWithTree(e,t)}};n.exports=d}(e("16")),n.exports}),e.registerDynamic("46",["58"],!0,function(e,t,n){"use strict";var r=e("58"),o=r({INSERT_MARKUP:null,MOVE_EXISTING:null,REMOVE_NODE:null,SET_MARKUP:null,TEXT_CONTENT:null});return n.exports=o,n.exports}),e.registerDynamic("29",["4c","57","46","11","27","59","5a","5b","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){return Array.isArray(t)&&(t=t[1]),t?t.nextSibling:e.firstChild}function o(e,t,n){l.insertTreeBefore(e,t,n)}function i(e,t,n){Array.isArray(t)?u(e,t[0],t[1],n):v(e,t,n)}function a(e,t){if(Array.isArray(t)){var n=t[1];t=t[0],s(e,t,n),e.removeChild(n)}e.removeChild(t)}function u(e,t,n,r){for(var o=t;;){var i=o.nextSibling;if(v(e,o,r),o===n)break;o=i}}function s(e,t,n){for(;;){var r=t.nextSibling;if(r===n)break;e.removeChild(r)}}function c(e,t,n){var r=e.parentNode,o=e.nextSibling;o===t?n&&v(r,document.createTextNode(n),o):n?(m(o,n),s(r,o,t)):s(r,e,t)}var l=e("4c"),p=e("57"),d=e("46"),f=(e("11"),e("27"),e("59")),h=e("5a"),m=e("5b"),v=f(function(e,t,n){e.insertBefore(t,n)}),g=p.dangerouslyReplaceNodeWithMarkup,y={dangerouslyReplaceNodeWithMarkup:g,replaceDelimitedText:c,processUpdates:function(e,t){for(var n=0;n<t.length;n++){var u=t[n];switch(u.type){case d.INSERT_MARKUP:o(e,u.content,r(e,u.afterNode));break;case d.MOVE_EXISTING:i(e,u.fromNode,r(e,u.afterNode));break;case d.SET_MARKUP:h(e,u.content);break;case d.TEXT_CONTENT:m(e,u.content);break;case d.REMOVE_NODE:a(e,u.fromNode)}}}};n.exports=y}(e("16")),n.exports}),e.registerDynamic("5c",["6","29","4c","11","27","39","30","50","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("6"),o=e("29"),i=e("4c"),a=e("11"),u=(e("27"),e("39")),s=e("30"),c=(e("50"),function(e){this._currentElement=e,this._stringText=""+e,this._nativeNode=null,this._nativeParent=null,this._domID=null,this._mountIndex=0,this._closingComment=null,this._commentNodes=null});r(c.prototype,{mountComponent:function(e,t,n,r){var o=n._idCounter++,s=" react-text: "+o+" ",c=" /react-text ";if(this._domID=o,this._nativeParent=t,e.useCreateElement){var l=n._ownerDocument,p=l.createComment(s),d=l.createComment(c),f=i(l.createDocumentFragment());return i.queueChild(f,i(p)),this._stringText&&i.queueChild(f,i(l.createTextNode(this._stringText))),i.queueChild(f,i(d)),a.precacheNode(this,p),this._closingComment=d,f}var h=u(this._stringText);return e.renderToStaticMarkup?h:"<!--"+s+"-->"+h+"<!--"+c+"-->"},receiveComponent:function(e,t){if(e!==this._currentElement){this._currentElement=e;var n=""+e;if(n!==this._stringText){this._stringText=n;var r=this.getNativeNode();o.replaceDelimitedText(r[0],r[1],n)}}},getNativeNode:function(){var e=this._commentNodes;if(e)return e;if(!this._closingComment)for(var t=a.getNodeFromInstance(this),n=t.nextSibling;;){if(null==n?s(!1):void 0,8===n.nodeType&&" /react-text "===n.nodeValue){this._closingComment=n;break}n=n.nextSibling}return e=[this._nativeNode,this._closingComment],this._commentNodes=e,e},unmountComponent:function(){this._closingComment=null,this._commentNodes=null,a.uncacheNode(this)}}),n.exports=c}(e("16")),n.exports}),e.registerDynamic("5d",["6","12","4a","48"],!0,function(e,t,n){"use strict";function r(){this.reinitializeTransaction()}var o=e("6"),i=e("12"),a=e("4a"),u=e("48"),s={initialize:u,close:function(){d.isBatchingUpdates=!1}},c={initialize:u,close:i.flushBatchedUpdates.bind(i)},l=[c,s];o(r.prototype,a.Mixin,{getTransactionWrappers:function(){return l}});var p=new r,d={isBatchingUpdates:!1,batchedUpdates:function(e,t,n,r,o,i){var a=d.isBatchingUpdates;d.isBatchingUpdates=!0,a?e(t,n,r,o,i):p.perform(e,null,t,n,r,o,i)}};return n.exports=d,n.exports}),e.registerDynamic("5e",[],!0,function(e,t,n){"use strict";function r(e){return e===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}return n.exports=r,n.exports}),e.registerDynamic("5f",["6","60","d","4","11","12","13","5e","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){for(;e._nativeParent;)e=e._nativeParent;var t=p.getNodeFromInstance(e),n=t.parentNode;return p.getClosestInstanceFromNode(n)}function o(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function i(e){var t=f(e.nativeEvent),n=p.getClosestInstanceFromNode(t),o=n;do e.ancestors.push(o),o=o&&r(o);while(o);for(var i=0;i<e.ancestors.length;i++)n=e.ancestors[i],m._handleTopLevel(e.topLevelType,n,e.nativeEvent,f(e.nativeEvent))}function a(e){var t=h(window);e(t)}var u=e("6"),s=e("60"),c=e("d"),l=e("4"),p=e("11"),d=e("12"),f=e("13"),h=e("5e");u(o.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),l.addPoolingTo(o,l.twoArgumentPooler);var m={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:c.canUseDOM?window:null,setHandleTopLevel:function(e){m._handleTopLevel=e},setEnabled:function(e){m._enabled=!!e},isEnabled:function(){return m._enabled},trapBubbledEvent:function(e,t,n){var r=n;return r?s.listen(r,t,m.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,n){var r=n;return r?s.capture(r,t,m.dispatchEvent.bind(null,e)):null},monitorScrollValue:function(e){var t=a.bind(null,e);s.listen(window,"scroll",t)},dispatchEvent:function(e,t){if(m._enabled){var n=o.getPooled(e,t);try{d.batchedUpdates(i,n)}finally{o.release(n)}}}};n.exports=m}(e("16")),n.exports}),e.registerDynamic("61",["1b","10","62","45","63","64","4e","65","12"],!0,function(e,t,n){"use strict";var r=e("1b"),o=e("10"),i=e("62"),a=e("45"),u=e("63"),s=e("64"),c=e("4e"),l=e("65"),p=e("12"),d={Component:a.injection,Class:u.injection,DOMProperty:r.injection,EmptyComponent:s.injection,EventPluginHub:o.injection,EventPluginUtils:i.injection,EventEmitter:c.injection,NativeComponent:l.injection,Updates:p.injection};return n.exports=d,n.exports}),e.registerDynamic("66",["6","67","4","4e","68","4a"],!0,function(e,t,n){"use strict";function r(e){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=i.getPooled(null),this.useCreateElement=e}var o=e("6"),i=e("67"),a=e("4"),u=e("4e"),s=e("68"),c=e("4a"),l={initialize:s.getSelectionInformation,close:s.restoreSelection},p={initialize:function(){var e=u.isEnabled();return u.setEnabled(!1),e},close:function(e){u.setEnabled(e)}},d={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},f=[l,p,d],h={getTransactionWrappers:function(){return f},getReactMountReady:function(){return this.reactMountReady},checkpoint:function(){return this.reactMountReady.checkpoint()},rollback:function(e){this.reactMountReady.rollback(e)},destructor:function(){i.release(this.reactMountReady),this.reactMountReady=null}};return o(r.prototype,c.Mixin,h),a.addPoolingTo(r),n.exports=r,n.exports}),e.registerDynamic("69",[],!0,function(e,t,n){"use strict";var r={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},o={accentHeight:"accent-height",accumulate:0,additive:0,alignmentBaseline:"alignment-baseline",allowReorder:"allowReorder",alphabetic:0,amplitude:0,arabicForm:"arabic-form",ascent:0,attributeName:"attributeName",attributeType:"attributeType",autoReverse:"autoReverse",azimuth:0,baseFrequency:"baseFrequency",baseProfile:"baseProfile",baselineShift:"baseline-shift",bbox:0,begin:0,bias:0,by:0,calcMode:"calcMode",capHeight:"cap-height",clip:0,clipPath:"clip-path",clipRule:"clip-rule",clipPathUnits:"clipPathUnits",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",contentScriptType:"contentScriptType",contentStyleType:"contentStyleType",cursor:0,cx:0,cy:0,d:0,decelerate:0,descent:0,diffuseConstant:"diffuseConstant",direction:0,display:0,divisor:0,dominantBaseline:"dominant-baseline",dur:0,dx:0,dy:0,edgeMode:"edgeMode",elevation:0,enableBackground:"enable-background",end:0,exponent:0,externalResourcesRequired:"externalResourcesRequired",fill:0,fillOpacity:"fill-opacity",fillRule:"fill-rule",filter:0,filterRes:"filterRes",filterUnits:"filterUnits",floodColor:"flood-color",floodOpacity:"flood-opacity",focusable:0,fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",glyphRef:"glyphRef",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",hanging:0,horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",ideographic:0,imageRendering:"image-rendering","in":0,in2:0,intercept:0,k:0,k1:0,k2:0,k3:0,k4:0,kernelMatrix:"kernelMatrix",kernelUnitLength:"kernelUnitLength",kerning:0,keyPoints:"keyPoints",keySplines:"keySplines",keyTimes:"keyTimes",lengthAdjust:"lengthAdjust",letterSpacing:"letter-spacing",lightingColor:"lighting-color",limitingConeAngle:"limitingConeAngle",local:0,markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",markerHeight:"markerHeight",markerUnits:"markerUnits",markerWidth:"markerWidth",mask:0,maskContentUnits:"maskContentUnits",maskUnits:"maskUnits",mathematical:0,mode:0,numOctaves:"numOctaves",offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pathLength:"pathLength",patternContentUnits:"patternContentUnits",patternTransform:"patternTransform",patternUnits:"patternUnits",pointerEvents:"pointer-events",points:0,pointsAtX:"pointsAtX",pointsAtY:"pointsAtY",pointsAtZ:"pointsAtZ",preserveAlpha:"preserveAlpha",preserveAspectRatio:"preserveAspectRatio",primitiveUnits:"primitiveUnits",r:0,radius:0,refX:"refX",refY:"refY",renderingIntent:"rendering-intent",repeatCount:"repeatCount",repeatDur:"repeatDur",requiredExtensions:"requiredExtensions",requiredFeatures:"requiredFeatures",restart:0,result:0,rotate:0,rx:0,ry:0,scale:0,seed:0,shapeRendering:"shape-rendering",slope:0,spacing:0,specularConstant:"specularConstant",specularExponent:"specularExponent",speed:0,spreadMethod:"spreadMethod",startOffset:"startOffset",stdDeviation:"stdDeviation",stemh:0,stemv:0,stitchTiles:"stitchTiles",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",string:0,stroke:0,strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeMiterlimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",surfaceScale:"surfaceScale",systemLanguage:"systemLanguage",tableValues:"tableValues",targetX:"targetX",targetY:"targetY",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",textLength:"textLength",to:0,transform:0,u1:0,u2:0,underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicode:0,unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",values:0,vectorEffect:"vector-effect",version:0,vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",viewBox:"viewBox",viewTarget:"viewTarget",visibility:0,widths:0,wordSpacing:"word-spacing",writingMode:"writing-mode",x:0,xHeight:"x-height",x1:0,x2:0,xChannelSelector:"xChannelSelector",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlLang:"xml:lang",xmlSpace:"xml:space",y:0,y1:0,y2:0,yChannelSelector:"yChannelSelector",z:0,zoomAndPan:"zoomAndPan"},i={Properties:{},DOMAttributeNamespaces:{xlinkActuate:r.xlink,xlinkArcrole:r.xlink,xlinkHref:r.xlink,xlinkRole:r.xlink,xlinkShow:r.xlink,xlinkTitle:r.xlink,xlinkType:r.xlink,xmlBase:r.xml,xmlLang:r.xml,xmlSpace:r.xml},DOMAttributeNames:{}};return Object.keys(o).forEach(function(e){i.Properties[e]=0,o[e]&&(i.DOMAttributeNames[e]=o[e])}),n.exports=i,n.exports}),e.registerDynamic("6a",[],!0,function(e,t,n){"use strict";function r(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function o(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function i(e,t){for(var n=r(e),i=0,a=0;n;){if(3===n.nodeType){if(a=i+n.textContent.length,t>=i&&a>=t)return{node:n,offset:t-i};i=a}n=r(o(n))}}return n.exports=i,n.exports}),e.registerDynamic("5",["d"],!0,function(e,t,n){"use strict";function r(){return!i&&o.canUseDOM&&(i="textContent"in document.documentElement?"textContent":"innerText"),i}var o=e("d"),i=null;return n.exports=r,n.exports}),e.registerDynamic("6b",["d","6a","5"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return e===n&&t===r}function o(e){var t=document.selection,n=t.createRange(),r=n.text.length,o=n.duplicate();o.moveToElementText(e),o.setEndPoint("EndToStart",n);var i=o.text.length,a=i+r;return{start:i,end:a}}function i(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,o=t.anchorOffset,i=t.focusNode,a=t.focusOffset,u=t.getRangeAt(0);try{u.startContainer.nodeType,u.endContainer.nodeType}catch(s){return null}var c=r(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),l=c?0:u.toString().length,p=u.cloneRange();p.selectNodeContents(e),p.setEnd(u.startContainer,u.startOffset);var d=r(p.startContainer,p.startOffset,p.endContainer,p.endOffset),f=d?0:p.toString().length,h=f+l,m=document.createRange();m.setStart(n,o),m.setEnd(i,a);var v=m.collapsed;return{start:v?h:f,end:v?f:h}}function a(e,t){var n,r,o=document.selection.createRange().duplicate();void 0===t.end?(n=t.start,r=n):t.start>t.end?(n=t.end,r=t.start):(n=t.start,r=t.end),o.moveToElementText(e),o.moveStart("character",n),o.setEndPoint("EndToStart",o),o.moveEnd("character",r-n),o.select()}function u(e,t){if(window.getSelection){var n=window.getSelection(),r=e[l()].length,o=Math.min(t.start,r),i=void 0===t.end?o:Math.min(t.end,r);if(!n.extend&&o>i){var a=i;i=o,o=a}var u=c(e,o),s=c(e,i);if(u&&s){var p=document.createRange();p.setStart(u.node,u.offset),n.removeAllRanges(),o>i?(n.addRange(p),n.extend(s.node,s.offset)):(p.setEnd(s.node,s.offset),n.addRange(p))}}}var s=e("d"),c=e("6a"),l=e("5"),p=s.canUseDOM&&"selection"in document&&!("getSelection"in window),d={getOffsets:p?o:i,setOffsets:p?a:u};return n.exports=d,n.exports}),e.registerDynamic("6c",[],!0,function(e,t,n){"use strict";function r(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}return n.exports=r,n.exports}),e.registerDynamic("6d",["6c"],!0,function(e,t,n){"use strict";function r(e){return o(e)&&3==e.nodeType}var o=e("6c");return n.exports=r,n.exports}),e.registerDynamic("6e",["6d"],!0,function(e,t,n){"use strict";function r(e,t){return e&&t?e===t?!0:o(e)?!1:o(t)?r(e,t.parentNode):e.contains?e.contains(t):e.compareDocumentPosition?!!(16&e.compareDocumentPosition(t)):!1:!1}var o=e("6d");return n.exports=r,n.exports}),e.registerDynamic("1d",[],!0,function(e,t,n){"use strict";function r(e){try{e.focus()}catch(t){}}return n.exports=r,n.exports}),e.registerDynamic("68",["6b","6e","1d","6f"],!0,function(e,t,n){"use strict";function r(e){return i(document.documentElement,e)}var o=e("6b"),i=e("6e"),a=e("1d"),u=e("6f"),s={hasSelectionCapabilities:function(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable);
},getSelectionInformation:function(){var e=u();return{focusedElem:e,selectionRange:s.hasSelectionCapabilities(e)?s.getSelection(e):null}},restoreSelection:function(e){var t=u(),n=e.focusedElem,o=e.selectionRange;t!==n&&r(n)&&(s.hasSelectionCapabilities(n)&&s.setSelection(n,o),a(n))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=o.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,r=t.end;if(void 0===r&&(r=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length);else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var i=e.createTextRange();i.collapse(!0),i.moveStart("character",n),i.moveEnd("character",r-n),i.select()}else o.setOffsets(e,t)}};return n.exports=s,n.exports}),e.registerDynamic("6f",[],!0,function(e,t,n){"use strict";function r(){if("undefined"==typeof document)return null;try{return document.activeElement||document.body}catch(e){return document.body}}return n.exports=r,n.exports}),e.registerDynamic("15",[],!0,function(e,t,n){"use strict";function r(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&o[e.type]||"textarea"===t)}var o={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};return n.exports=r,n.exports}),e.registerDynamic("51",[],!0,function(e,t,n){"use strict";function r(e,t){return e===t?0!==e||1/e===1/t:e!==e&&t!==t}function o(e,t){if(r(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(var a=0;a<n.length;a++)if(!i.call(t,n[a])||!r(e[n[a]],t[n[a]]))return!1;return!0}var i=Object.prototype.hasOwnProperty;return n.exports=o,n.exports}),e.registerDynamic("70",["b","c","d","11","68","8","6f","15","e","51"],!0,function(e,t,n){"use strict";function r(e){if("selectionStart"in e&&c.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function o(e,t){if(E||null==y||y!==p())return null;var n=r(y);if(!x||!h(x,n)){x=n;var o=l.getPooled(g.select,b,e,t);return o.type="select",o.target=y,a.accumulateTwoPhaseDispatches(o),o}return null}var i=e("b"),a=e("c"),u=e("d"),s=e("11"),c=e("68"),l=e("8"),p=e("6f"),d=e("15"),f=e("e"),h=e("51"),m=i.topLevelTypes,v=u.canUseDOM&&"documentMode"in document&&document.documentMode<=11,g={select:{phasedRegistrationNames:{bubbled:f({onSelect:null}),captured:f({onSelectCapture:null})},dependencies:[m.topBlur,m.topContextMenu,m.topFocus,m.topKeyDown,m.topMouseDown,m.topMouseUp,m.topSelectionChange]}},y=null,b=null,x=null,E=!1,_=!1,C=f({onSelect:null}),D={eventTypes:g,extractEvents:function(e,t,n,r){if(!_)return null;var i=t?s.getNodeFromInstance(t):window;switch(e){case m.topFocus:(d(i)||"true"===i.contentEditable)&&(y=i,b=t,x=null);break;case m.topBlur:y=null,b=null,x=null;break;case m.topMouseDown:E=!0;break;case m.topContextMenu:case m.topMouseUp:return E=!1,o(n,r);case m.topSelectionChange:if(v)break;case m.topKeyDown:case m.topKeyUp:return o(n,r)}return null},didPutListener:function(e,t,n){t===C&&(_=!0)}};return n.exports=D,n.exports}),e.registerDynamic("60",["48","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("48"),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function(){e.removeEventListener(t,n,!0)}}):{remove:r}},registerDefault:function(){}};n.exports=o}(e("16")),n.exports}),e.registerDynamic("c",["b","10","62","71","72","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n){var r=t.dispatchConfig.phasedRegistrationNames[n];return b(e,r)}function o(e,t,n){var o=t?y.bubbled:y.captured,i=r(e,n,o);i&&(n._dispatchListeners=v(n._dispatchListeners,i),n._dispatchInstances=v(n._dispatchInstances,e))}function i(e){e&&e.dispatchConfig.phasedRegistrationNames&&m.traverseTwoPhase(e._targetInst,o,e)}function a(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst,n=t?m.getParentInstance(t):null;m.traverseTwoPhase(n,o,e)}}function u(e,t,n){if(n&&n.dispatchConfig.registrationName){var r=n.dispatchConfig.registrationName,o=b(e,r);o&&(n._dispatchListeners=v(n._dispatchListeners,o),n._dispatchInstances=v(n._dispatchInstances,e))}}function s(e){e&&e.dispatchConfig.registrationName&&u(e._targetInst,null,e)}function c(e){g(e,i)}function l(e){g(e,a)}function p(e,t,n,r){m.traverseEnterLeave(n,r,u,e,t)}function d(e){g(e,s)}var f=e("b"),h=e("10"),m=e("62"),v=e("71"),g=e("72"),y=(e("22"),f.PropagationPhases),b=h.getListener,x={accumulateTwoPhaseDispatches:c,accumulateTwoPhaseDispatchesSkipTarget:l,accumulateDirectDispatches:d,accumulateEnterLeaveDispatches:p};n.exports=x}(e("16")),n.exports}),e.registerDynamic("73",["8"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("8"),i={animationName:null,elapsedTime:null,pseudoElement:null};return o.augmentClass(r,i),n.exports=r,n.exports}),e.registerDynamic("74",["8"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("8"),i={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};return o.augmentClass(r,i),n.exports=r,n.exports}),e.registerDynamic("75",["76"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("76"),i={relatedTarget:null};return o.augmentClass(r,i),n.exports=r,n.exports}),e.registerDynamic("77",["78"],!0,function(e,t,n){"use strict";function r(e){if(e.key){var t=i[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=o(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?a[e.keyCode]||"Unidentified":""}var o=e("78"),i={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},a={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};return n.exports=r,n.exports}),e.registerDynamic("79",["76","78","77","7a"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("76"),i=e("78"),a=e("77"),u=e("7a"),s={key:a,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:u,charCode:function(e){return"keypress"===e.type?i(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?i(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};return o.augmentClass(r,s),n.exports=r,n.exports}),e.registerDynamic("7b",["19"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("19"),i={dataTransfer:null};return o.augmentClass(r,i),n.exports=r,n.exports}),e.registerDynamic("7c",["76","7a"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("76"),i=e("7a"),a={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:i};return o.augmentClass(r,a),n.exports=r,n.exports}),e.registerDynamic("7d",["8"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("8"),i={propertyName:null,elapsedTime:null,pseudoElement:null};return o.augmentClass(r,i),n.exports=r,n.exports}),e.registerDynamic("8",["6","4","48","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n,r){this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n;var o=this.constructor.Interface;for(var i in o)if(o.hasOwnProperty(i)){var u=o[i];u?this[i]=u(n):"target"===i?this.target=r:this[i]=n[i]}var s=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;return s?this.isDefaultPrevented=a.thatReturnsTrue:this.isDefaultPrevented=a.thatReturnsFalse,this.isPropagationStopped=a.thatReturnsFalse,this}var o=e("6"),i=e("4"),a=e("48"),u=(e("22"),"function"==typeof Proxy,["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"]),s={type:null,target:null,currentTarget:a.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};o(r.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():e.returnValue=!1,this.isDefaultPrevented=a.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():e.cancelBubble=!0,this.isPropagationStopped=a.thatReturnsTrue)},persist:function(){this.isPersistent=a.thatReturnsTrue},isPersistent:a.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)this[t]=null;for(var n=0;n<u.length;n++)this[u[n]]=null}}),r.Interface=s,r.augmentClass=function(e,t){var n=this,r=function(){};r.prototype=n.prototype;var a=new r;o(a,e.prototype),e.prototype=a,e.prototype.constructor=e,e.Interface=o({},n.Interface,t),e.augmentClass=n.augmentClass,i.addPoolingTo(e,i.fourArgumentPooler)},i.addPoolingTo(r,i.fourArgumentPooler),n.exports=r}(e("16")),n.exports}),e.registerDynamic("13",[],!0,function(e,t,n){"use strict";function r(e){var t=e.target||e.srcElement||window;return t.correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}return n.exports=r,n.exports}),e.registerDynamic("76",["8","13"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("8"),i=e("13"),a={view:function(e){if(e.view)return e.view;var t=i(e);if(null!=t&&t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};return o.augmentClass(r,a),n.exports=r,n.exports}),e.registerDynamic("7a",[],!0,function(e,t,n){"use strict";function r(e){var t=this,n=t.nativeEvent;if(n.getModifierState)return n.getModifierState(e);var r=i[e];return r?!!n[r]:!1}function o(e){return r}var i={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};return n.exports=o,n.exports}),e.registerDynamic("19",["76","7e","7a"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("76"),i=e("7e"),a=e("7a"),u={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:a,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+i.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+i.currentScrollTop}};return o.augmentClass(r,u),n.exports=r,n.exports}),e.registerDynamic("7f",["19"],!0,function(e,t,n){"use strict";function r(e,t,n,r){return o.call(this,e,t,n,r)}var o=e("19"),i={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};return o.augmentClass(r,i),n.exports=r,n.exports}),e.registerDynamic("78",[],!0,function(e,t,n){"use strict";function r(e){var t,n=e.keyCode;return"charCode"in e?(t=e.charCode,0===t&&13===n&&(t=13)):t=n,t>=32||13===t?t:0}return n.exports=r,n.exports}),e.registerDynamic("80",["b","60","c","11","73","74","8","75","79","19","7b","7c","7d","76","7f","48","78","30","e","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("b"),o=e("60"),i=e("c"),a=e("11"),u=e("73"),s=e("74"),c=e("8"),l=e("75"),p=e("79"),d=e("19"),f=e("7b"),h=e("7c"),m=e("7d"),v=e("76"),g=e("7f"),y=e("48"),b=e("78"),x=e("30"),E=e("e"),_=r.topLevelTypes,C={abort:{phasedRegistrationNames:{bubbled:E({onAbort:!0}),captured:E({onAbortCapture:!0})}},animationEnd:{phasedRegistrationNames:{bubbled:E({onAnimationEnd:!0}),captured:E({onAnimationEndCapture:!0})}},animationIteration:{phasedRegistrationNames:{bubbled:E({onAnimationIteration:!0}),captured:E({onAnimationIterationCapture:!0})}},animationStart:{phasedRegistrationNames:{bubbled:E({onAnimationStart:!0}),captured:E({onAnimationStartCapture:!0})}},blur:{phasedRegistrationNames:{bubbled:E({onBlur:!0}),captured:E({onBlurCapture:!0})}},canPlay:{phasedRegistrationNames:{bubbled:E({onCanPlay:!0}),captured:E({onCanPlayCapture:!0})}},canPlayThrough:{phasedRegistrationNames:{bubbled:E({onCanPlayThrough:!0}),captured:E({onCanPlayThroughCapture:!0})}},click:{phasedRegistrationNames:{bubbled:E({onClick:!0}),captured:E({onClickCapture:!0})}},contextMenu:{phasedRegistrationNames:{bubbled:E({onContextMenu:!0}),captured:E({onContextMenuCapture:!0})}},copy:{phasedRegistrationNames:{bubbled:E({onCopy:!0}),captured:E({onCopyCapture:!0})}},cut:{phasedRegistrationNames:{bubbled:E({onCut:!0}),captured:E({onCutCapture:!0})}},doubleClick:{phasedRegistrationNames:{bubbled:E({onDoubleClick:!0}),captured:E({onDoubleClickCapture:!0})}},drag:{phasedRegistrationNames:{bubbled:E({onDrag:!0}),captured:E({onDragCapture:!0})}},dragEnd:{phasedRegistrationNames:{bubbled:E({onDragEnd:!0}),captured:E({onDragEndCapture:!0})}},dragEnter:{phasedRegistrationNames:{bubbled:E({onDragEnter:!0}),captured:E({onDragEnterCapture:!0})}},dragExit:{phasedRegistrationNames:{bubbled:E({onDragExit:!0}),captured:E({onDragExitCapture:!0})}},dragLeave:{phasedRegistrationNames:{bubbled:E({onDragLeave:!0}),captured:E({onDragLeaveCapture:!0})}},dragOver:{phasedRegistrationNames:{bubbled:E({onDragOver:!0}),captured:E({onDragOverCapture:!0})}},dragStart:{phasedRegistrationNames:{bubbled:E({onDragStart:!0}),captured:E({onDragStartCapture:!0})}},drop:{phasedRegistrationNames:{bubbled:E({onDrop:!0}),captured:E({onDropCapture:!0})}},durationChange:{phasedRegistrationNames:{bubbled:E({onDurationChange:!0}),captured:E({onDurationChangeCapture:!0})}},emptied:{phasedRegistrationNames:{bubbled:E({onEmptied:!0}),captured:E({onEmptiedCapture:!0})}},encrypted:{phasedRegistrationNames:{bubbled:E({onEncrypted:!0}),captured:E({onEncryptedCapture:!0})}},ended:{phasedRegistrationNames:{bubbled:E({onEnded:!0}),captured:E({onEndedCapture:!0})}},error:{phasedRegistrationNames:{bubbled:E({onError:!0}),captured:E({onErrorCapture:!0})}},focus:{phasedRegistrationNames:{bubbled:E({onFocus:!0}),captured:E({onFocusCapture:!0})}},input:{phasedRegistrationNames:{bubbled:E({onInput:!0}),captured:E({onInputCapture:!0})}},invalid:{phasedRegistrationNames:{bubbled:E({onInvalid:!0}),captured:E({onInvalidCapture:!0})}},keyDown:{phasedRegistrationNames:{bubbled:E({onKeyDown:!0}),captured:E({onKeyDownCapture:!0})}},keyPress:{phasedRegistrationNames:{bubbled:E({onKeyPress:!0}),captured:E({onKeyPressCapture:!0})}},keyUp:{phasedRegistrationNames:{bubbled:E({onKeyUp:!0}),captured:E({onKeyUpCapture:!0})}},load:{phasedRegistrationNames:{bubbled:E({onLoad:!0}),captured:E({onLoadCapture:!0})}},loadedData:{phasedRegistrationNames:{bubbled:E({onLoadedData:!0}),captured:E({onLoadedDataCapture:!0})}},loadedMetadata:{phasedRegistrationNames:{bubbled:E({onLoadedMetadata:!0}),captured:E({onLoadedMetadataCapture:!0})}},loadStart:{phasedRegistrationNames:{bubbled:E({onLoadStart:!0}),captured:E({onLoadStartCapture:!0})}},mouseDown:{phasedRegistrationNames:{bubbled:E({onMouseDown:!0}),captured:E({onMouseDownCapture:!0})}},mouseMove:{phasedRegistrationNames:{bubbled:E({onMouseMove:!0}),captured:E({onMouseMoveCapture:!0})}},mouseOut:{phasedRegistrationNames:{bubbled:E({onMouseOut:!0}),captured:E({onMouseOutCapture:!0})}},mouseOver:{phasedRegistrationNames:{bubbled:E({onMouseOver:!0}),captured:E({onMouseOverCapture:!0})}},mouseUp:{phasedRegistrationNames:{bubbled:E({onMouseUp:!0}),captured:E({onMouseUpCapture:!0})}},paste:{phasedRegistrationNames:{bubbled:E({onPaste:!0}),captured:E({onPasteCapture:!0})}},pause:{phasedRegistrationNames:{bubbled:E({onPause:!0}),captured:E({onPauseCapture:!0})}},play:{phasedRegistrationNames:{bubbled:E({onPlay:!0}),captured:E({onPlayCapture:!0})}},playing:{phasedRegistrationNames:{bubbled:E({onPlaying:!0}),captured:E({onPlayingCapture:!0})}},progress:{phasedRegistrationNames:{bubbled:E({onProgress:!0}),captured:E({onProgressCapture:!0})}},rateChange:{phasedRegistrationNames:{bubbled:E({onRateChange:!0}),captured:E({onRateChangeCapture:!0})}},reset:{phasedRegistrationNames:{bubbled:E({onReset:!0}),captured:E({onResetCapture:!0})}},scroll:{phasedRegistrationNames:{bubbled:E({onScroll:!0}),captured:E({onScrollCapture:!0})}},seeked:{phasedRegistrationNames:{bubbled:E({onSeeked:!0}),captured:E({onSeekedCapture:!0})}},seeking:{phasedRegistrationNames:{bubbled:E({onSeeking:!0}),captured:E({onSeekingCapture:!0})}},stalled:{phasedRegistrationNames:{bubbled:E({onStalled:!0}),captured:E({onStalledCapture:!0})}},submit:{phasedRegistrationNames:{bubbled:E({onSubmit:!0}),captured:E({onSubmitCapture:!0})}},suspend:{phasedRegistrationNames:{bubbled:E({onSuspend:!0}),captured:E({onSuspendCapture:!0})}},timeUpdate:{phasedRegistrationNames:{bubbled:E({onTimeUpdate:!0}),captured:E({onTimeUpdateCapture:!0})}},touchCancel:{phasedRegistrationNames:{bubbled:E({onTouchCancel:!0}),captured:E({onTouchCancelCapture:!0})}},touchEnd:{phasedRegistrationNames:{bubbled:E({onTouchEnd:!0}),captured:E({onTouchEndCapture:!0})}},touchMove:{phasedRegistrationNames:{bubbled:E({onTouchMove:!0}),captured:E({onTouchMoveCapture:!0})}},touchStart:{phasedRegistrationNames:{bubbled:E({onTouchStart:!0}),captured:E({onTouchStartCapture:!0})}},transitionEnd:{phasedRegistrationNames:{bubbled:E({onTransitionEnd:!0}),captured:E({onTransitionEndCapture:!0})}},volumeChange:{phasedRegistrationNames:{bubbled:E({onVolumeChange:!0}),captured:E({onVolumeChangeCapture:!0})}},waiting:{phasedRegistrationNames:{bubbled:E({onWaiting:!0}),captured:E({onWaitingCapture:!0})}},wheel:{phasedRegistrationNames:{bubbled:E({onWheel:!0}),captured:E({onWheelCapture:!0})}}},D={topAbort:C.abort,topAnimationEnd:C.animationEnd,topAnimationIteration:C.animationIteration,topAnimationStart:C.animationStart,topBlur:C.blur,topCanPlay:C.canPlay,topCanPlayThrough:C.canPlayThrough,topClick:C.click,topContextMenu:C.contextMenu,topCopy:C.copy,topCut:C.cut,topDoubleClick:C.doubleClick,topDrag:C.drag,topDragEnd:C.dragEnd,topDragEnter:C.dragEnter,topDragExit:C.dragExit,topDragLeave:C.dragLeave,topDragOver:C.dragOver,topDragStart:C.dragStart,topDrop:C.drop,topDurationChange:C.durationChange,topEmptied:C.emptied,topEncrypted:C.encrypted,topEnded:C.ended,topError:C.error,topFocus:C.focus,topInput:C.input,topInvalid:C.invalid,topKeyDown:C.keyDown,topKeyPress:C.keyPress,topKeyUp:C.keyUp,topLoad:C.load,topLoadedData:C.loadedData,topLoadedMetadata:C.loadedMetadata,topLoadStart:C.loadStart,topMouseDown:C.mouseDown,topMouseMove:C.mouseMove,topMouseOut:C.mouseOut,topMouseOver:C.mouseOver,topMouseUp:C.mouseUp,topPaste:C.paste,topPause:C.pause,topPlay:C.play,topPlaying:C.playing,topProgress:C.progress,topRateChange:C.rateChange,topReset:C.reset,topScroll:C.scroll,topSeeked:C.seeked,topSeeking:C.seeking,topStalled:C.stalled,topSubmit:C.submit,topSuspend:C.suspend,topTimeUpdate:C.timeUpdate,topTouchCancel:C.touchCancel,topTouchEnd:C.touchEnd,topTouchMove:C.touchMove,topTouchStart:C.touchStart,topTransitionEnd:C.transitionEnd,topVolumeChange:C.volumeChange,topWaiting:C.waiting,topWheel:C.wheel};for(var P in D)D[P].dependencies=[P];var w=E({onClick:null}),N={},T={eventTypes:C,extractEvents:function(e,t,n,r){var o=D[e];if(!o)return null;var a;switch(e){case _.topAbort:case _.topCanPlay:case _.topCanPlayThrough:case _.topDurationChange:case _.topEmptied:case _.topEncrypted:case _.topEnded:case _.topError:case _.topInput:case _.topInvalid:case _.topLoad:case _.topLoadedData:case _.topLoadedMetadata:case _.topLoadStart:case _.topPause:case _.topPlay:case _.topPlaying:case _.topProgress:case _.topRateChange:case _.topReset:case _.topSeeked:case _.topSeeking:case _.topStalled:case _.topSubmit:case _.topSuspend:case _.topTimeUpdate:case _.topVolumeChange:case _.topWaiting:a=c;break;case _.topKeyPress:if(0===b(n))return null;case _.topKeyDown:case _.topKeyUp:a=p;break;case _.topBlur:case _.topFocus:a=l;break;case _.topClick:if(2===n.button)return null;case _.topContextMenu:case _.topDoubleClick:case _.topMouseDown:case _.topMouseMove:case _.topMouseOut:case _.topMouseOver:case _.topMouseUp:a=d;break;case _.topDrag:case _.topDragEnd:case _.topDragEnter:case _.topDragExit:case _.topDragLeave:case _.topDragOver:case _.topDragStart:case _.topDrop:a=f;break;case _.topTouchCancel:case _.topTouchEnd:case _.topTouchMove:case _.topTouchStart:a=h;break;case _.topAnimationEnd:case _.topAnimationIteration:case _.topAnimationStart:a=u;break;case _.topTransitionEnd:a=m;break;case _.topScroll:a=v;break;case _.topWheel:a=g;break;case _.topCopy:case _.topCut:case _.topPaste:a=s}a?void 0:x(!1);var y=a.getPooled(o,t,n,r);return i.accumulateTwoPhaseDispatches(y),y},didPutListener:function(e,t,n){if(t===w){var r=e._rootNodeID,i=a.getNodeFromInstance(e);N[r]||(N[r]=o.listen(i,"click",y))}},willDeleteListener:function(e,t){if(t===w){var n=e._rootNodeID;N[n].remove(),delete N[n]}}};n.exports=T}(e("16")),n.exports}),e.registerDynamic("81",["a","f","17","18","1a","2a","4b","11","52","53","5c","5d","5f","61","66","69","70","80"],!0,function(e,t,n){"use strict";function r(){_||(_=!0,g.EventEmitter.injectReactEventListener(v),g.EventPluginHub.injectEventPluginOrder(a),g.EventPluginUtils.injectComponentTree(p),g.EventPluginUtils.injectTreeTraversal(f),g.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:E,EnterLeaveEventPlugin:u,ChangeEventPlugin:i,SelectEventPlugin:x,BeforeInputEventPlugin:o}),g.NativeComponent.injectGenericComponentClass(l),g.NativeComponent.injectTextComponentClass(h),g.DOMProperty.injectDOMPropertyConfig(s),g.DOMProperty.injectDOMPropertyConfig(b),g.EmptyComponent.injectEmptyComponentFactory(function(e){return new d(e)}),g.Updates.injectReconcileTransaction(y),g.Updates.injectBatchingStrategy(m),g.Component.injectEnvironment(c))}var o=e("a"),i=e("f"),a=e("17"),u=e("18"),s=e("1a"),c=e("2a"),l=e("4b"),p=e("11"),d=e("52"),f=e("53"),h=e("5c"),m=e("5d"),v=e("5f"),g=e("61"),y=e("66"),b=e("69"),x=e("70"),E=e("80"),_=!1;return n.exports={inject:r},n.exports}),e.registerDynamic("82",["47","11","83","84","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){if(null==e)return null;if(1===e.nodeType)return e;var t=i.get(e);return t?(t=a(t),t?o.getNodeFromInstance(t):null):void u(("function"==typeof e.render,!1))}var o=(e("47"),e("11")),i=e("83"),a=e("84"),u=e("30");e("22");n.exports=r}(e("16")),n.exports}),e.registerDynamic("84",["85"],!0,function(e,t,n){"use strict";function r(e){for(var t;(t=e._renderedNodeType)===o.COMPOSITE;)e=e._renderedComponent;return t===o.NATIVE?e._renderedComponent:t===o.EMPTY?null:void 0}var o=e("85");return n.exports=r,n.exports}),e.registerDynamic("4d",[],!0,function(e,t,n){"use strict";var r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};return n.exports=r,n.exports}),e.registerDynamic("39",[],!0,function(e,t,n){"use strict";function r(e){return i[e]}function o(e){return(""+e).replace(a,r)}var i={"&":"&amp;",">":"&gt;","<":"&lt;",'"':"&quot;","'":"&#x27;"},a=/[&><"']/g;return n.exports=o,n.exports}),e.registerDynamic("5b",["d","39","5a"],!0,function(e,t,n){"use strict";var r=e("d"),o=e("39"),i=e("5a"),a=function(e,t){e.textContent=t};return r.canUseDOM&&("textContent"in document.documentElement||(a=function(e,t){i(e,o(t))})),n.exports=a,n.exports}),e.registerDynamic("4c",["4d","59","5b"],!0,function(e,t,n){"use strict";function r(e){if(m){var t=e.node,n=e.children;if(n.length)for(var r=0;r<n.length;r++)v(t,n[r],null);else null!=e.html?t.innerHTML=e.html:null!=e.text&&d(t,e.text)}}function o(e,t){e.parentNode.replaceChild(t.node,e),r(t)}function i(e,t){m?e.children.push(t):e.node.appendChild(t.node)}function a(e,t){m?e.html=t:e.node.innerHTML=t}function u(e,t){m?e.text=t:d(e.node,t)}function s(){return this.node.nodeName}function c(e){return{node:e,children:[],html:null,text:null,toString:s}}var l=e("4d"),p=e("59"),d=e("5b"),f=1,h=11,m="undefined"!=typeof document&&"number"==typeof document.documentMode||"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent&&/\bEdge\/\d/.test(navigator.userAgent),v=p(function(e,t,n){t.node.nodeType===h||t.node.nodeType===f&&"object"===t.node.nodeName.toLowerCase()&&(null==t.node.namespaceURI||t.node.namespaceURI===l.html)?(r(t),e.insertBefore(t.node,n)):(e.insertBefore(t.node,n),r(t))});return c.insertTreeBefore=v,c.replaceChildWithTree=o,c.queueChild=i,c.queueHTML=a,c.queueText=u,n.exports=c,n.exports}),e.registerDynamic("35",["30","16"],!0,function(e,t,n){return function(t){"use strict";function r(){if(u)for(var e in s){var t=s[e],n=u.indexOf(e);if(n>-1?void 0:a(!1),!c.plugins[n]){t.extractEvents?void 0:a(!1),c.plugins[n]=t;var r=t.eventTypes;for(var i in r)o(r[i],t,i)?void 0:a(!1)}}}function o(e,t,n){c.eventNameDispatchConfigs.hasOwnProperty(n)?a(!1):void 0,c.eventNameDispatchConfigs[n]=e;var r=e.phasedRegistrationNames;if(r){for(var o in r)if(r.hasOwnProperty(o)){var u=r[o];i(u,t,n)}return!0}return e.registrationName?(i(e.registrationName,t,n),!0):!1}function i(e,t,n){c.registrationNameModules[e]?a(!1):void 0,c.registrationNameModules[e]=t,c.registrationNameDependencies[e]=t.eventTypes[n].dependencies}var a=e("30"),u=null,s={},c={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:null,injectEventPluginOrder:function(e){u?a(!1):void 0,u=Array.prototype.slice.call(e),r()},injectEventPluginsByName:function(e){var t=!1;for(var n in e)if(e.hasOwnProperty(n)){var o=e[n];s.hasOwnProperty(n)&&s[n]===o||(s[n]?a(!1):void 0,s[n]=o,t=!0)}t&&r()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return c.registrationNameModules[t.registrationName]||null;for(var n in t.phasedRegistrationNames)if(t.phasedRegistrationNames.hasOwnProperty(n)){var r=c.registrationNameModules[t.phasedRegistrationNames[n]];if(r)return r}return null},_resetEventPlugins:function(){u=null;for(var e in s)s.hasOwnProperty(e)&&delete s[e];c.plugins.length=0;var t=c.eventNameDispatchConfigs;for(var n in t)t.hasOwnProperty(n)&&delete t[n];var r=c.registrationNameModules;for(var o in r)r.hasOwnProperty(o)&&delete r[o]}};n.exports=c}(e("16")),n.exports}),e.registerDynamic("b",["58"],!0,function(e,t,n){"use strict";var r=e("58"),o=r({bubbled:null,captured:null}),i=r({topAbort:null,topAnimationEnd:null,topAnimationIteration:null,topAnimationStart:null,topBlur:null,topCanPlay:null,topCanPlayThrough:null,topChange:null,topClick:null,topCompositionEnd:null,topCompositionStart:null,topCompositionUpdate:null,topContextMenu:null,topCopy:null,topCut:null,topDoubleClick:null,topDrag:null,topDragEnd:null,topDragEnter:null,topDragExit:null,topDragLeave:null,topDragOver:null,topDragStart:null,topDrop:null,topDurationChange:null,topEmptied:null,topEncrypted:null,topEnded:null,topError:null,topFocus:null,topInput:null,topInvalid:null,topKeyDown:null,topKeyPress:null,topKeyUp:null,topLoad:null,topLoadedData:null,topLoadedMetadata:null,topLoadStart:null,topMouseDown:null,topMouseMove:null,topMouseOut:null,topMouseOver:null,topMouseUp:null,topPaste:null,topPause:null,topPlay:null,topPlaying:null,topProgress:null,topRateChange:null,topReset:null,topScroll:null,topSeeked:null,topSeeking:null,topSelectionChange:null,topStalled:null,topSubmit:null,topSuspend:null,topTextInput:null,topTimeUpdate:null,topTouchCancel:null,topTouchEnd:null,topTouchMove:null,topTouchStart:null,topTransitionEnd:null,topVolumeChange:null,topWaiting:null,topWheel:null}),a={topLevelTypes:i,PropagationPhases:o};return n.exports=a,n.exports}),e.registerDynamic("62",["b","86","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){return e===y.topMouseUp||e===y.topTouchEnd||e===y.topTouchCancel}function o(e){return e===y.topMouseMove||e===y.topTouchMove}function i(e){return e===y.topMouseDown||e===y.topTouchStart}function a(e,t,n,r){var o=e.type||"unknown-event";e.currentTarget=b.getNodeFromInstance(r),t?m.invokeGuardedCallbackWithCatch(o,n,e):m.invokeGuardedCallback(o,n,e),e.currentTarget=null}function u(e,t){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)a(e,t,n[o],r[o]);else n&&a(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null}function s(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t)){for(var r=0;r<t.length&&!e.isPropagationStopped();r++)if(t[r](e,n[r]))return n[r]}else if(t&&t(e,n))return n;return null}function c(e){var t=s(e);return e._dispatchInstances=null,e._dispatchListeners=null,t}function l(e){var t=e._dispatchListeners,n=e._dispatchInstances;Array.isArray(t)?v(!1):void 0,e.currentTarget=t?b.getNodeFromInstance(n):null;var r=t?t(e):null;return e.currentTarget=null,e._dispatchListeners=null,e._dispatchInstances=null,r}function p(e){return!!e._dispatchListeners}var d,f,h=e("b"),m=e("86"),v=e("30"),g=(e("22"),{injectComponentTree:function(e){d=e},injectTreeTraversal:function(e){f=e}}),y=h.topLevelTypes,b={isEndish:r,isMoveish:o,isStartish:i,executeDirectDispatch:l,executeDispatchesInOrder:u,executeDispatchesInOrderStopAtTrue:c,hasDispatches:p,getInstanceFromNode:function(e){return d.getInstanceFromNode(e)},getNodeFromInstance:function(e){return d.getNodeFromInstance(e)},isAncestor:function(e,t){return f.isAncestor(e,t)},getLowestCommonAncestor:function(e,t){return f.getLowestCommonAncestor(e,t)},getParentInstance:function(e){return f.getParentInstance(e)},traverseTwoPhase:function(e,t,n){return f.traverseTwoPhase(e,t,n)},traverseEnterLeave:function(e,t,n,r,o){return f.traverseEnterLeave(e,t,n,r,o)},injection:g};n.exports=b}(e("16")),n.exports}),e.registerDynamic("71",["30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){if(null==t?o(!1):void 0,null==e)return t;var n=Array.isArray(e),r=Array.isArray(t);return n&&r?(e.push.apply(e,t),e):n?(e.push(t),e):r?[e].concat(t):[e,t]}var o=e("30");n.exports=r}(e("16")),n.exports}),e.registerDynamic("72",[],!0,function(e,t,n){"use strict";var r=function(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)};return n.exports=r,n.exports}),e.registerDynamic("10",["35","62","86","71","72","30","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("35"),o=e("62"),i=e("86"),a=e("71"),u=e("72"),s=e("30"),c={},l=null,p=function(e,t){e&&(o.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e))},d=function(e){return p(e,!0)},f=function(e){return p(e,!1)},h={injection:{injectEventPluginOrder:r.injectEventPluginOrder,injectEventPluginsByName:r.injectEventPluginsByName},putListener:function(e,t,n){"function"!=typeof n?s(!1):void 0;
var o=c[t]||(c[t]={});o[e._rootNodeID]=n;var i=r.registrationNameModules[t];i&&i.didPutListener&&i.didPutListener(e,t,n)},getListener:function(e,t){var n=c[t];return n&&n[e._rootNodeID]},deleteListener:function(e,t){var n=r.registrationNameModules[t];n&&n.willDeleteListener&&n.willDeleteListener(e,t);var o=c[t];o&&delete o[e._rootNodeID]},deleteAllListeners:function(e){for(var t in c)if(c[t][e._rootNodeID]){var n=r.registrationNameModules[t];n&&n.willDeleteListener&&n.willDeleteListener(e,t),delete c[t][e._rootNodeID]}},extractEvents:function(e,t,n,o){for(var i,u=r.plugins,s=0;s<u.length;s++){var c=u[s];if(c){var l=c.extractEvents(e,t,n,o);l&&(i=a(i,l))}}return i},enqueueEvents:function(e){e&&(l=a(l,e))},processEventQueue:function(e){var t=l;l=null,e?u(t,d):u(t,f),l?s(!1):void 0,i.rethrowCaughtError()},__purge:function(){c={}},__getListenerBank:function(){return c}};n.exports=h}(e("16")),n.exports}),e.registerDynamic("87",["10"],!0,function(e,t,n){"use strict";function r(e){o.enqueueEvents(e),o.processEventQueue(!1)}var o=e("10"),i={handleTopLevel:function(e,t,n,i){var a=o.extractEvents(e,t,n,i);r(a)}};return n.exports=i,n.exports}),e.registerDynamic("7e",[],!0,function(e,t,n){"use strict";var r={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(e){r.currentScrollLeft=e.x,r.currentScrollTop=e.y}};return n.exports=r,n.exports}),e.registerDynamic("88",["d"],!0,function(e,t,n){"use strict";function r(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}function o(e){if(u[e])return u[e];if(!a[e])return e;var t=a[e];for(var n in t)if(t.hasOwnProperty(n)&&n in s)return u[e]=t[n];return""}var i=e("d"),a={animationend:r("Animation","AnimationEnd"),animationiteration:r("Animation","AnimationIteration"),animationstart:r("Animation","AnimationStart"),transitionend:r("Transition","TransitionEnd")},u={},s={};return i.canUseDOM&&(s=document.createElement("div").style,"AnimationEvent"in window||(delete a.animationend.animation,delete a.animationiteration.animation,delete a.animationstart.animation),"TransitionEvent"in window||delete a.transitionend.transition),n.exports=o,n.exports}),e.registerDynamic("14",["d"],!0,function(e,t,n){"use strict";function r(e,t){if(!i.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,r=n in document;if(!r){var a=document.createElement("div");a.setAttribute(n,"return;"),r="function"==typeof a[n]}return!r&&o&&"wheel"===e&&(r=document.implementation.hasFeature("Events.wheel","3.0")),r}var o,i=e("d");return i.canUseDOM&&(o=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),n.exports=r,n.exports}),e.registerDynamic("4e",["6","b","35","87","7e","88","14","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){return Object.prototype.hasOwnProperty.call(e,v)||(e[v]=h++,d[e[v]]={}),d[e[v]]}var o,i=e("6"),a=e("b"),u=e("35"),s=e("87"),c=e("7e"),l=e("88"),p=e("14"),d={},f=!1,h=0,m={topAbort:"abort",topAnimationEnd:l("animationend")||"animationend",topAnimationIteration:l("animationiteration")||"animationiteration",topAnimationStart:l("animationstart")||"animationstart",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:l("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},v="_reactListenersID"+String(Math.random()).slice(2),g=i({},s,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(g.handleTopLevel),g.ReactEventListener=e}},setEnabled:function(e){g.ReactEventListener&&g.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!g.ReactEventListener||!g.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var n=t,o=r(n),i=u.registrationNameDependencies[e],s=a.topLevelTypes,c=0;c<i.length;c++){var l=i[c];o.hasOwnProperty(l)&&o[l]||(l===s.topWheel?p("wheel")?g.ReactEventListener.trapBubbledEvent(s.topWheel,"wheel",n):p("mousewheel")?g.ReactEventListener.trapBubbledEvent(s.topWheel,"mousewheel",n):g.ReactEventListener.trapBubbledEvent(s.topWheel,"DOMMouseScroll",n):l===s.topScroll?p("scroll",!0)?g.ReactEventListener.trapCapturedEvent(s.topScroll,"scroll",n):g.ReactEventListener.trapBubbledEvent(s.topScroll,"scroll",g.ReactEventListener.WINDOW_HANDLE):l===s.topFocus||l===s.topBlur?(p("focus",!0)?(g.ReactEventListener.trapCapturedEvent(s.topFocus,"focus",n),g.ReactEventListener.trapCapturedEvent(s.topBlur,"blur",n)):p("focusin")&&(g.ReactEventListener.trapBubbledEvent(s.topFocus,"focusin",n),g.ReactEventListener.trapBubbledEvent(s.topBlur,"focusout",n)),o[s.topBlur]=!0,o[s.topFocus]=!0):m.hasOwnProperty(l)&&g.ReactEventListener.trapBubbledEvent(l,m[l],n),o[l]=!0)}},trapBubbledEvent:function(e,t,n){return g.ReactEventListener.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return g.ReactEventListener.trapCapturedEvent(e,t,n)},ensureScrollValueMonitoring:function(){if(void 0===o&&(o=document.createEvent&&"pageX"in document.createEvent("MouseEvent")),!o&&!f){var e=c.refreshScrollValues;g.ReactEventListener.monitorScrollValue(e),f=!0}}});n.exports=g}(e("16")),n.exports}),e.registerDynamic("1b",["30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){return(e&t)===t}var o=e("30"),i={MUST_USE_PROPERTY:1,HAS_SIDE_EFFECTS:2,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,injectDOMPropertyConfig:function(e){var t=i,n=e.Properties||{},a=e.DOMAttributeNamespaces||{},s=e.DOMAttributeNames||{},c=e.DOMPropertyNames||{},l=e.DOMMutationMethods||{};e.isCustomAttribute&&u._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var p in n){u.properties.hasOwnProperty(p)?o(!1):void 0;var d=p.toLowerCase(),f=n[p],h={attributeName:d,attributeNamespace:null,propertyName:p,mutationMethod:null,mustUseProperty:r(f,t.MUST_USE_PROPERTY),hasSideEffects:r(f,t.HAS_SIDE_EFFECTS),hasBooleanValue:r(f,t.HAS_BOOLEAN_VALUE),hasNumericValue:r(f,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:r(f,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:r(f,t.HAS_OVERLOADED_BOOLEAN_VALUE)};if(!h.mustUseProperty&&h.hasSideEffects?o(!1):void 0,h.hasBooleanValue+h.hasNumericValue+h.hasOverloadedBooleanValue<=1?void 0:o(!1),s.hasOwnProperty(p)){var m=s[p];h.attributeName=m}a.hasOwnProperty(p)&&(h.attributeNamespace=a[p]),c.hasOwnProperty(p)&&(h.propertyName=c[p]),l.hasOwnProperty(p)&&(h.mutationMethod=l[p]),u.properties[p]=h}}},a=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",u={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:a,ATTRIBUTE_NAME_CHAR:a+"\\-.0-9\\uB7\\u0300-\\u036F\\u203F-\\u2040",properties:{},getPossibleStandardName:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<u._isCustomAttributeFunctions.length;t++){var n=u._isCustomAttributeFunctions[t];if(n(e))return!0}return!1},injection:i};n.exports=u}(e("16")),n.exports}),e.registerDynamic("4f",[],!0,function(e,t,n){"use strict";var r={hasCachedChildNodes:1};return n.exports=r,n.exports}),e.registerDynamic("11",["1b","4f","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){for(var t;t=e._renderedComponent;)e=t;return e}function o(e,t){var n=r(e);n._nativeNode=t,t[m]=n}function i(e){var t=e._nativeNode;t&&(delete t[m],e._nativeNode=null)}function a(e,t){if(!(e._flags&h.hasCachedChildNodes)){var n=e._renderedChildren,i=t.firstChild;e:for(var a in n)if(n.hasOwnProperty(a)){var u=n[a],s=r(u)._domID;if(null!=s){for(;null!==i;i=i.nextSibling)if(1===i.nodeType&&i.getAttribute(f)===String(s)||8===i.nodeType&&i.nodeValue===" react-text: "+s+" "||8===i.nodeType&&i.nodeValue===" react-empty: "+s+" "){o(u,i);continue e}d(!1)}}e._flags|=h.hasCachedChildNodes}}function u(e){if(e[m])return e[m];for(var t=[];!e[m];){if(t.push(e),!e.parentNode)return null;e=e.parentNode}for(var n,r;e&&(r=e[m]);e=t.pop())n=r,t.length&&a(r,e);return n}function s(e){var t=u(e);return null!=t&&t._nativeNode===e?t:null}function c(e){if(void 0===e._nativeNode?d(!1):void 0,e._nativeNode)return e._nativeNode;for(var t=[];!e._nativeNode;)t.push(e),e._nativeParent?void 0:d(!1),e=e._nativeParent;for(;t.length;e=t.pop())a(e,e._nativeNode);return e._nativeNode}var l=e("1b"),p=e("4f"),d=e("30"),f=l.ID_ATTRIBUTE_NAME,h=p,m="__reactInternalInstance$"+Math.random().toString(36).slice(2),v={getClosestInstanceFromNode:u,getInstanceFromNode:s,getNodeFromInstance:c,precacheChildNodes:a,precacheNode:o,uncacheNode:i};n.exports=v}(e("16")),n.exports}),e.registerDynamic("50",["6","48","22","16"],!0,function(e,t,n){return function(t){"use strict";var r=(e("6"),e("48")),o=(e("22"),r);n.exports=o}(e("16")),n.exports}),e.registerDynamic("89",["50","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){var n={_topLevelWrapper:e,_idCounter:1,_ownerDocument:t?t.nodeType===o?t:t.ownerDocument:null,_node:t,_tag:t?t.nodeName.toLowerCase():null,_namespaceURI:t?t.namespaceURI:null};return n}var o=(e("50"),9);n.exports=r}(e("16")),n.exports}),e.registerDynamic("8a",[],!0,function(e,t,n){"use strict";var r={useCreateElement:!0};return n.exports=r,n.exports}),e.registerDynamic("8b",[],!0,function(e,t,n){"use strict";function r(e){for(var t=1,n=0,r=0,i=e.length,a=-4&i;a>r;){for(var u=Math.min(r+4096,a);u>r;r+=4)n+=(t+=e.charCodeAt(r))+(t+=e.charCodeAt(r+1))+(t+=e.charCodeAt(r+2))+(t+=e.charCodeAt(r+3));t%=o,n%=o}for(;i>r;r++)n+=t+=e.charCodeAt(r);return t%=o,n%=o,t|n<<16}var o=65521;return n.exports=r,n.exports}),e.registerDynamic("8c",["8b"],!0,function(e,t,n){"use strict";var r=e("8b"),o=/\/?>/,i=/^<\!\-\-/,a={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=r(e);return i.test(e)?e:e.replace(o," "+a.CHECKSUM_ATTR_NAME+'="'+t+'"$&')},canReuseMarkup:function(e,t){var n=t.getAttribute(a.CHECKSUM_ATTR_NAME);n=n&&parseInt(n,10);var o=r(e);return o===n}};return n.exports=a,n.exports}),e.registerDynamic("45",["30","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("30"),o=!1,i={unmountIDFromEnvironment:null,replaceNodeWithMarkup:null,processChildrenUpdates:null,injection:{injectEnvironment:function(e){o?r(!1):void 0,i.unmountIDFromEnvironment=e.unmountIDFromEnvironment,i.replaceNodeWithMarkup=e.replaceNodeWithMarkup,i.processChildrenUpdates=e.processChildrenUpdates,o=!0}}};n.exports=i}(e("16")),n.exports}),e.registerDynamic("86",["16"],!0,function(e,t,n){return function(e){"use strict";function t(e,t,n,o){try{return t(n,o)}catch(i){return void(null===r&&(r=i))}}var r=null,o={invokeGuardedCallback:t,invokeGuardedCallbackWithCatch:t,rethrowCaughtError:function(){if(r){var e=r;throw r=null,e}}};n.exports=o}(e("16")),n.exports}),e.registerDynamic("85",["8d","30","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("8d"),o=e("30"),i={NATIVE:0,COMPOSITE:1,EMPTY:2,getType:function(e){return null===e||e===!1?i.EMPTY:r.isValidElement(e)?"function"==typeof e.type?i.COMPOSITE:i.NATIVE:void o(!1)}};n.exports=i}(e("16")),n.exports}),e.registerDynamic("83",[],!0,function(e,t,n){"use strict";var r={remove:function(e){e._reactInternalInstance=void 0},get:function(e){return e._reactInternalInstance},has:function(e){return void 0!==e._reactInternalInstance},set:function(e,t){e._reactInternalInstance=t}};return n.exports=r,n.exports}),e.registerDynamic("67",["6","4","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(){this._callbacks=null,this._contexts=null}var o=e("6"),i=e("4"),a=e("30");o(r.prototype,{enqueue:function(e,t){this._callbacks=this._callbacks||[],this._contexts=this._contexts||[],this._callbacks.push(e),this._contexts.push(t)},notifyAll:function(){var e=this._callbacks,t=this._contexts;if(e){e.length!==t.length?a(!1):void 0,this._callbacks=null,this._contexts=null;for(var n=0;n<e.length;n++)e[n].call(t[n]);e.length=0,t.length=0}},checkpoint:function(){return this._callbacks?this._callbacks.length:0},rollback:function(e){this._callbacks&&(this._callbacks.length=e,this._contexts.length=e)},reset:function(){this._callbacks=null,this._contexts=null},destructor:function(){this.reset()}}),i.addPoolingTo(r),n.exports=r}(e("16")),n.exports}),e.registerDynamic("8e",[],!0,function(e,t,n){"use strict";var r={logTopLevelRenders:!1};return n.exports=r,n.exports}),e.registerDynamic("8f",["30","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("30"),o={isValidOwner:function(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)},addComponentAsRefTo:function(e,t,n){o.isValidOwner(n)?void 0:r(!1),n.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,n){o.isValidOwner(n)?void 0:r(!1);var i=n.getPublicInstance();i&&i.refs[t]===e.getPublicInstance()&&n.detachRef(t)}};n.exports=o}(e("16")),n.exports}),e.registerDynamic("90",["8f","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n){"function"==typeof e?e(t.getPublicInstance()):i.addComponentAsRefTo(t,e,n)}function o(e,t,n){"function"==typeof e?e(null):i.removeComponentAsRefFrom(t,e,n)}var i=e("8f"),a={};a.attachRefs=function(e,t){if(null!==t&&t!==!1){var n=t.ref;null!=n&&r(n,e,t._owner)}},a.shouldUpdateRefs=function(e,t){var n=null===e||e===!1,r=null===t||t===!1;return n||r||t._owner!==e._owner||t.ref!==e.ref},a.detachRefs=function(e,t){if(null!==t&&t!==!1){var n=t.ref;null!=n&&o(n,e,t._owner)}},n.exports=a}(e("16")),n.exports}),e.registerDynamic("3e",["90","27","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(){o.attachRefs(this,this._currentElement)}var o=e("90"),i=(e("27"),e("30")),a={mountComponent:function(e,t,n,o,i){var a=e.mountComponent(t,n,o,i);return e._currentElement&&null!=e._currentElement.ref&&t.getReactMountReady().enqueue(r,e),a},getNativeNode:function(e){return e.getNativeNode()},unmountComponent:function(e,t){o.detachRefs(e,e._currentElement),e.unmountComponent(t)},receiveComponent:function(e,t,n,i){var a=e._currentElement;if(t!==a||i!==e._context){var u=o.shouldUpdateRefs(a,t);u&&o.detachRefs(e,a),e.receiveComponent(t,n,i),u&&e._currentElement&&null!=e._currentElement.ref&&n.getReactMountReady().enqueue(r,e)}},performUpdateIfNecessary:function(e,t,n){return e._updateBatchNumber!==n?void(null!=e._updateBatchNumber&&e._updateBatchNumber!==n+1?i(!1):void 0):void e.performUpdateIfNecessary(t)}};n.exports=a}(e("16")),n.exports}),e.registerDynamic("4a",["30","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("30"),o={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,t,n,o,i,a,u,s){this.isInTransaction()?r(!1):void 0;var c,l;try{this._isInTransaction=!0,c=!0,this.initializeAll(0),l=e.call(t,n,o,i,a,u,s),c=!1}finally{try{if(c)try{this.closeAll(0)}catch(p){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return l},initializeAll:function(e){for(var t=this.transactionWrappers,n=e;n<t.length;n++){var r=t[n];try{this.wrapperInitData[n]=i.OBSERVED_ERROR,this.wrapperInitData[n]=r.initialize?r.initialize.call(this):null}finally{if(this.wrapperInitData[n]===i.OBSERVED_ERROR)try{this.initializeAll(n+1)}catch(o){}}}},closeAll:function(e){this.isInTransaction()?void 0:r(!1);for(var t=this.transactionWrappers,n=e;n<t.length;n++){var o,a=t[n],u=this.wrapperInitData[n];try{o=!0,u!==i.OBSERVED_ERROR&&a.close&&a.close.call(this,u),o=!1}finally{if(o)try{this.closeAll(n+1)}catch(s){}}}this.wrapperInitData.length=0}},i={Mixin:o,OBSERVED_ERROR:{}};n.exports=i}(e("16")),n.exports}),e.registerDynamic("12",["6","67","4","8e","27","3e","4a","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(){N.ReactReconcileTransaction&&E?void 0:v(!1)}function o(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=p.getPooled(),this.reconcileTransaction=N.ReactReconcileTransaction.getPooled(!0)}function i(e,t,n,o,i,a){r(),E.batchedUpdates(e,t,n,o,i,a)}function a(e,t){return e._mountOrder-t._mountOrder}function u(e){var t=e.dirtyComponentsLength;t!==g.length?v(!1):void 0,g.sort(a),y++;for(var n=0;t>n;n++){var r=g[n],o=r._pendingCallbacks;r._pendingCallbacks=null;var i;if(f.logTopLevelRenders){var u=r;r._currentElement.props===r._renderedComponent._currentElement&&(u=r._renderedComponent),i="React update: "+u.getName(),console.time(i)}if(h.performUpdateIfNecessary(r,e.reconcileTransaction,y),i&&console.timeEnd(i),o)for(var s=0;s<o.length;s++)e.callbackQueue.enqueue(o[s],r.getPublicInstance())}}function s(e){return r(),E.isBatchingUpdates?(g.push(e),void(null==e._updateBatchNumber&&(e._updateBatchNumber=y+1))):void E.batchedUpdates(s,e)}function c(e,t){E.isBatchingUpdates?void 0:v(!1),b.enqueue(e,t),x=!0}var l=e("6"),p=e("67"),d=e("4"),f=e("8e"),h=(e("27"),e("3e")),m=e("4a"),v=e("30"),g=[],y=0,b=p.getPooled(),x=!1,E=null,_={initialize:function(){this.dirtyComponentsLength=g.length},close:function(){this.dirtyComponentsLength!==g.length?(g.splice(0,this.dirtyComponentsLength),P()):g.length=0}},C={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},D=[_,C];l(o.prototype,m.Mixin,{getTransactionWrappers:function(){return D},destructor:function(){this.dirtyComponentsLength=null,p.release(this.callbackQueue),this.callbackQueue=null,N.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,n){return m.Mixin.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,n)}}),d.addPoolingTo(o);var P=function(){for(;g.length||x;){if(g.length){var e=o.getPooled();e.perform(u,null,e),o.release(e)}if(x){x=!1;var t=b;b=p.getPooled(),t.notifyAll(),p.release(t)}}},w={injectReconcileTransaction:function(e){e?void 0:v(!1),N.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){e?void 0:v(!1),"function"!=typeof e.batchedUpdates?v(!1):void 0,"boolean"!=typeof e.isBatchingUpdates?v(!1):void 0,E=e}},N={ReactReconcileTransaction:null,batchedUpdates:i,enqueueUpdate:s,flushBatchedUpdates:P,injection:w,asap:c};n.exports=N}(e("16")),n.exports}),e.registerDynamic("91",["47","83","12","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){a.enqueueUpdate(e)}function o(e,t){var n=i.get(e);return n?n:null}var i=(e("47"),e("83")),a=e("12"),u=e("30"),s=(e("22"),{isMounted:function(e){var t=i.get(e);return t?!!t._renderedComponent:!1},enqueueCallback:function(e,t,n){s.validateCallback(t,n);var i=o(e);return i?(i._pendingCallbacks?i._pendingCallbacks.push(t):i._pendingCallbacks=[t],void r(i)):null},enqueueCallbackInternal:function(e,t){e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t],r(e)},enqueueForceUpdate:function(e){var t=o(e,"forceUpdate");t&&(t._pendingForceUpdate=!0,r(t))},enqueueReplaceState:function(e,t){var n=o(e,"replaceState");n&&(n._pendingStateQueue=[t],n._pendingReplaceState=!0,r(n))},enqueueSetState:function(e,t){var n=o(e,"setState");if(n){var i=n._pendingStateQueue||(n._pendingStateQueue=[]);i.push(t),r(n)}},enqueueElementInternal:function(e,t){e._pendingElement=t,r(e)},validateCallback:function(e,t){e&&"function"!=typeof e?u(!1):void 0}});n.exports=s}(e("16")),n.exports}),e.registerDynamic("92",["6","45","47","8d","86","83","27","85","3b","93","3e","91","94","30","41","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" Check the render method of `"+n+"`."}return""}function o(e){}function i(e,t){}function a(e){return e.prototype&&e.prototype.isReactComponent}var u=e("6"),s=e("45"),c=e("47"),l=e("8d"),p=e("86"),d=e("83"),f=(e("27"),e("85")),h=e("3b"),m=(e("93"),e("3e")),v=e("91"),g=e("94"),y=e("30"),b=e("41");e("22");o.prototype.render=function(){var e=d.get(this)._currentElement.type,t=e(this.props,this.context,this.updater);return i(e,t),t};var x=1,E={construct:function(e){this._currentElement=e,this._rootNodeID=null,this._instance=null,this._nativeParent=null,this._nativeContainerInfo=null,this._updateBatchNumber=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedNodeType=null,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null,this._calledComponentWillUnmount=!1},mountComponent:function(e,t,n,r){this._context=r,this._mountOrder=x++,this._nativeParent=t,this._nativeContainerInfo=n;var u,s=this._processProps(this._currentElement.props),c=this._processContext(r),p=this._currentElement.type,f=this._constructComponent(s,c);a(p)||null!=f&&null!=f.render||(u=f,i(p,u),null===f||f===!1||l.isValidElement(f)?void 0:y(!1),f=new o(p));f.props=s,f.context=c,f.refs=g,f.updater=v,this._instance=f,d.set(f,this);var h=f.state;void 0===h&&(f.state=h=null),"object"!=typeof h||Array.isArray(h)?y(!1):void 0,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1;var m;return m=f.unstable_handleError?this.performInitialMountWithErrorHandling(u,t,n,e,r):this.performInitialMount(u,t,n,e,r),f.componentDidMount&&e.getReactMountReady().enqueue(f.componentDidMount,f),m},_constructComponent:function(e,t){return this._constructComponentWithoutOwner(e,t)},_constructComponentWithoutOwner:function(e,t){var n,r=this._currentElement.type;return n=a(r)?new r(e,t,v):r(e,t,v)},performInitialMountWithErrorHandling:function(e,t,n,r,o){var i,a=r.checkpoint();try{i=this.performInitialMount(e,t,n,r,o)}catch(u){r.rollback(a),this._instance.unstable_handleError(u),this._pendingStateQueue&&(this._instance.state=this._processPendingState(this._instance.props,this._instance.context)),a=r.checkpoint(),this._renderedComponent.unmountComponent(!0),r.rollback(a),i=this.performInitialMount(e,t,n,r,o)}return i},performInitialMount:function(e,t,n,r,o){var i=this._instance;i.componentWillMount&&(i.componentWillMount(),this._pendingStateQueue&&(i.state=this._processPendingState(i.props,i.context))),void 0===e&&(e=this._renderValidatedComponent()),this._renderedNodeType=f.getType(e),this._renderedComponent=this._instantiateReactComponent(e);var a=m.mountComponent(this._renderedComponent,r,t,n,this._processChildContext(o));return a},getNativeNode:function(){return m.getNativeNode(this._renderedComponent)},unmountComponent:function(e){if(this._renderedComponent){var t=this._instance;if(t.componentWillUnmount&&!t._calledComponentWillUnmount)if(t._calledComponentWillUnmount=!0,e){var n=this.getName()+".componentWillUnmount()";p.invokeGuardedCallback(n,t.componentWillUnmount.bind(t))}else t.componentWillUnmount();this._renderedComponent&&(m.unmountComponent(this._renderedComponent,e),this._renderedNodeType=null,this._renderedComponent=null,this._instance=null),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=null,this._topLevelWrapper=null,d.remove(t)}},_maskContext:function(e){var t=this._currentElement.type,n=t.contextTypes;if(!n)return g;var r={};for(var o in n)r[o]=e[o];return r},_processContext:function(e){var t=this._maskContext(e);return t},_processChildContext:function(e){var t=this._currentElement.type,n=this._instance,r=n.getChildContext&&n.getChildContext();if(r){"object"!=typeof t.childContextTypes?y(!1):void 0;for(var o in r)o in t.childContextTypes?void 0:y(!1);return u({},e,r)}return e},_processProps:function(e){return e},_checkPropTypes:function(e,t,n){var o=this.getName();for(var i in e)if(e.hasOwnProperty(i)){var a;try{"function"!=typeof e[i]?y(!1):void 0,a=e[i](t,i,o,n)}catch(u){a=u}if(a instanceof Error){r(this);n===h.prop}}},receiveComponent:function(e,t,n){var r=this._currentElement,o=this._context;this._pendingElement=null,this.updateComponent(t,r,e,o,n)},performUpdateIfNecessary:function(e){null!=this._pendingElement?m.receiveComponent(this,this._pendingElement,e,this._context):null!==this._pendingStateQueue||this._pendingForceUpdate?this.updateComponent(e,this._currentElement,this._currentElement,this._context,this._context):this._updateBatchNumber=null},updateComponent:function(e,t,n,r,o){var i,a,u=this._instance,s=!1;this._context===o?i=u.context:(i=this._processContext(o),s=!0),t===n?a=n.props:(a=this._processProps(n.props),s=!0),s&&u.componentWillReceiveProps&&u.componentWillReceiveProps(a,i);var c=this._processPendingState(a,i),l=!0;!this._pendingForceUpdate&&u.shouldComponentUpdate&&(l=u.shouldComponentUpdate(a,c,i)),this._updateBatchNumber=null,l?(this._pendingForceUpdate=!1,this._performComponentUpdate(n,a,c,i,e,o)):(this._currentElement=n,this._context=o,u.props=a,u.state=c,u.context=i)},_processPendingState:function(e,t){var n=this._instance,r=this._pendingStateQueue,o=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!r)return n.state;if(o&&1===r.length)return r[0];for(var i=u({},o?r[0]:n.state),a=o?1:0;a<r.length;a++){var s=r[a];u(i,"function"==typeof s?s.call(n,i,e,t):s)}return i},_performComponentUpdate:function(e,t,n,r,o,i){var a,u,s,c=this._instance,l=Boolean(c.componentDidUpdate);l&&(a=c.props,u=c.state,s=c.context),c.componentWillUpdate&&c.componentWillUpdate(t,n,r),this._currentElement=e,this._context=i,c.props=t,c.state=n,c.context=r,this._updateRenderedComponent(o,i),l&&o.getReactMountReady().enqueue(c.componentDidUpdate.bind(c,a,u,s),c)},_updateRenderedComponent:function(e,t){var n=this._renderedComponent,r=n._currentElement,o=this._renderValidatedComponent();if(b(r,o))m.receiveComponent(n,o,e,this._processChildContext(t));else{var i=m.getNativeNode(n);m.unmountComponent(n,!1),this._renderedNodeType=f.getType(o),this._renderedComponent=this._instantiateReactComponent(o);var a=m.mountComponent(this._renderedComponent,e,this._nativeParent,this._nativeContainerInfo,this._processChildContext(t));this._replaceNodeWithMarkup(i,a,n)}},_replaceNodeWithMarkup:function(e,t,n){s.replaceNodeWithMarkup(e,t,n)},_renderValidatedComponentWithoutOwnerOrContext:function(){var e=this._instance,t=e.render();return t},_renderValidatedComponent:function(){var e;c.current=this;try{e=this._renderValidatedComponentWithoutOwnerOrContext()}finally{c.current=null}return null===e||e===!1||l.isValidElement(e)?void 0:y(!1),e},attachRef:function(e,t){var n=this.getPublicInstance();null==n?y(!1):void 0;var r=t.getPublicInstance(),o=n.refs===g?n.refs={}:n.refs;o[e]=r},detachRef:function(e){var t=this.getPublicInstance().refs;delete t[e]},getName:function(){var e=this._currentElement.type,t=this._instance&&this._instance.constructor;return e.displayName||t&&t.displayName||e.name||t&&t.name||null},getPublicInstance:function(){var e=this._instance;return e instanceof o?null:e},_instantiateReactComponent:null},_={Mixin:E};n.exports=_}(e("16")),n.exports}),e.registerDynamic("64",[],!0,function(e,t,n){"use strict";var r,o={injectEmptyComponentFactory:function(e){r=e}},i={create:function(e){return r(e)}};return i.injection=o,n.exports=i,n.exports}),e.registerDynamic("65",["6","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){if("function"==typeof e.type)return e.type;var t=e.type,n=p[t];return null==n&&(p[t]=n=c(t)),n}function o(e){return l?void 0:s(!1),new l(e)}function i(e){return new d(e)}function a(e){return e instanceof d}var u=e("6"),s=e("30"),c=null,l=null,p={},d=null,f={injectGenericComponentClass:function(e){l=e},injectTextComponentClass:function(e){d=e},injectComponentClasses:function(e){u(p,e)}},h={getComponentClassForElement:r,createInternalComponent:o,createInstanceForText:i,isTextComponent:a,injection:f};n.exports=h}(e("16")),n.exports}),e.registerDynamic("3f",["6","92","64","65","27","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){return"function"==typeof e&&"undefined"!=typeof e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent}function o(e){var t,n=null===e||e===!1;if(n)t=u.create(o);else if("object"==typeof e){var i=e;!i||"function"!=typeof i.type&&"string"!=typeof i.type?c(!1):void 0,t="string"==typeof i.type?s.createInternalComponent(i):r(i.type)?new i.type(i):new l(i)}else"string"==typeof e||"number"==typeof e?t=s.createInstanceForText(e):c(!1);t._mountIndex=0,t._mountImage=null;return t}var i=e("6"),a=e("92"),u=e("64"),s=e("65"),c=(e("27"),e("30")),l=(e("22"),function(e){this.construct(e)});i(l.prototype,a.Mixin,{_instantiateReactComponent:o});n.exports=o}(e("16")),n.exports}),e.registerDynamic("59",[],!0,function(e,t,n){"use strict";var r=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,o)})}:e};return n.exports=r,n.exports}),e.registerDynamic("5a",["d","59","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("d"),o=/^[ \r\n\t\f]/,i=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,a=e("59"),u=a(function(e,t){e.innerHTML=t});if(r.canUseDOM){var s=document.createElement("div");s.innerHTML=" ",""===s.innerHTML&&(u=function(e,t){if(e.parentNode&&e.parentNode.replaceChild(e,e),o.test(t)||"<"===t[0]&&i.test(t)){e.innerHTML=String.fromCharCode(65279)+t;var n=e.firstChild;1===n.data.length?e.removeChild(n):n.deleteData(0,1)}else e.innerHTML=t}),s=null}n.exports=u}(e("16")),n.exports}),e.registerDynamic("41",[],!0,function(e,t,n){"use strict";function r(e,t){var n=null===e||e===!1,r=null===t||t===!1;if(n||r)return n===r;var o=typeof e,i=typeof t;return"string"===o||"number"===o?"string"===i||"number"===i:"object"===i&&e.type===t.type&&e.key===t.key}return n.exports=r,n.exports}),e.registerDynamic("95",["4c","1b","4e","47","11","89","8a","8d","8e","27","8c","3e","91","12","94","3f","30","5a","41","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){for(var n=Math.min(e.length,t.length),r=0;n>r;r++)if(e.charAt(r)!==t.charAt(r))return r;return e.length===t.length?-1:n}function o(e){return e?e.nodeType===O?e.documentElement:e.firstChild:null}function i(e){return e.getAttribute&&e.getAttribute(S)||""}function a(e,t,n,r,o){var i;if(b.logTopLevelRenders){var a=e._currentElement.props,u=a.type;i="React mount: "+("string"==typeof u?u:u.displayName||u.name),console.time(i)}var s=E.mountComponent(e,n,null,v(e,t),o);i&&console.timeEnd(i),e._renderedComponent._topLevelWrapper=e,U._mountImageIntoNode(s,t,e,r,n)}function u(e,t,n,r){var o=C.ReactReconcileTransaction.getPooled(!n&&g.useCreateElement);
o.perform(a,null,e,t,o,n,r),C.ReactReconcileTransaction.release(o)}function s(e,t,n){for(E.unmountComponent(e,n),t.nodeType===O&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)}function c(e){var t=o(e);if(t){var n=m.getInstanceFromNode(t);return!(!n||!n._nativeParent)}}function l(e){var t=o(e),n=t&&m.getInstanceFromNode(t);return n&&!n._nativeParent?n:null}function p(e){var t=l(e);return t?t._nativeContainerInfo._topLevelWrapper:null}var d=e("4c"),f=e("1b"),h=e("4e"),m=(e("47"),e("11")),v=e("89"),g=e("8a"),y=e("8d"),b=e("8e"),x=(e("27"),e("8c")),E=e("3e"),_=e("91"),C=e("12"),D=e("94"),P=e("3f"),w=e("30"),N=e("5a"),T=e("41"),S=(e("22"),f.ID_ATTRIBUTE_NAME),M=f.ROOT_ATTRIBUTE_NAME,k=1,O=9,I=11,A={},R=1,L=function(){this.rootID=R++};L.prototype.isReactComponent={},L.prototype.render=function(){return this.props};var U={TopLevelWrapper:L,_instancesByReactRootID:A,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,n,r){return U.scrollMonitor(n,function(){_.enqueueElementInternal(e,t),r&&_.enqueueCallbackInternal(e,r)}),e},_renderNewRootComponent:function(e,t,n,r){!t||t.nodeType!==k&&t.nodeType!==O&&t.nodeType!==I?w(!1):void 0,h.ensureScrollValueMonitoring();var o=P(e);C.batchedUpdates(u,o,t,n,r);var i=o._instance.rootID;return A[i]=o,o},renderSubtreeIntoContainer:function(e,t,n,r){return null==e||null==e._reactInternalInstance?w(!1):void 0,U._renderSubtreeIntoContainer(e,t,n,r)},_renderSubtreeIntoContainer:function(e,t,n,r){_.validateCallback(r,"ReactDOM.render"),y.isValidElement(t)?void 0:w(!1);var a=y(L,null,null,null,null,null,t),u=p(n);if(u){var s=u._currentElement,l=s.props;if(T(l,t)){var d=u._renderedComponent.getPublicInstance(),f=r&&function(){r.call(d)};return U._updateRootComponent(u,a,n,f),d}U.unmountComponentAtNode(n)}var h=o(n),m=h&&!!i(h),v=c(n),g=m&&!u&&!v,b=U._renderNewRootComponent(a,n,g,null!=e?e._reactInternalInstance._processChildContext(e._reactInternalInstance._context):D)._renderedComponent.getPublicInstance();return r&&r.call(b),b},render:function(e,t,n){return U._renderSubtreeIntoContainer(null,e,t,n)},unmountComponentAtNode:function(e){!e||e.nodeType!==k&&e.nodeType!==O&&e.nodeType!==I?w(!1):void 0;var t=p(e);if(!t){c(e),1===e.nodeType&&e.hasAttribute(M);return!1}return delete A[t._instance.rootID],C.batchedUpdates(s,t,e,!1),!0},_mountImageIntoNode:function(e,t,n,i,a){if(!t||t.nodeType!==k&&t.nodeType!==O&&t.nodeType!==I?w(!1):void 0,i){var u=o(t);if(x.canReuseMarkup(e,u))return void m.precacheNode(n,u);var s=u.getAttribute(x.CHECKSUM_ATTR_NAME);u.removeAttribute(x.CHECKSUM_ATTR_NAME);var c=u.outerHTML;u.setAttribute(x.CHECKSUM_ATTR_NAME,s);var l=e,p=r(l,c);" (client) "+l.substring(p-20,p+20)+"\n (server) "+c.substring(p-20,p+20);t.nodeType===O?w(!1):void 0}if(t.nodeType===O?w(!1):void 0,a.useCreateElement){for(;t.lastChild;)t.removeChild(t.lastChild);d.insertTreeBefore(t,e,null)}else N(t,e),m.precacheNode(n,t.firstChild)}};n.exports=U}(e("16")),n.exports}),e.registerDynamic("96",["95"],!0,function(e,t,n){"use strict";var r=e("95");return n.exports=r.renderSubtreeIntoContainer,n.exports}),e.registerDynamic("97",["11","81","95","3e","12","98","82","84","96","22","d","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("11"),o=e("81"),i=e("95"),a=e("3e"),u=e("12"),s=e("98"),c=e("82"),l=e("84"),p=e("96");e("22");o.inject();var d={findDOMNode:c,render:i.render,unmountComponentAtNode:i.unmountComponentAtNode,version:s,unstable_batchedUpdates:u.batchedUpdates,unstable_renderSubtreeIntoContainer:p};"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({ComponentTree:{getClosestInstanceFromNode:r.getClosestInstanceFromNode,getNodeFromInstance:function(e){return e._renderedComponent&&(e=l(e)),e?r.getNodeFromInstance(e):null}},Mount:i,Reconciler:a});n.exports=d}(e("16")),n.exports}),e.registerDynamic("99",["97"],!0,function(e,t,n){"use strict";return n.exports=e("97"),n.exports}),e.registerDynamic("9a",["99"],!0,function(e,t,n){return n.exports=e("99"),n.exports}),e.register("9b",["9c"],function(e){"use strict";var t,n;return{setters:[function(e){t=e["default"]}],execute:function(){n=function(){return t.createElement("header",{className:"header",role:"banner"},t.createElement("a",{className:"logo",href:"./",role:"logo"},t.createElement("img",{src:"svg/logo.svg"})),t.createElement("a",{className:"btn-link",href:"https://github.com/frontendbr/eventos",title:"Anuncie seu evento"},"Anunciar Evento"))},e("default",n)}}}),e.register("9d",["9c","9e"],function(e){"use strict";var t,n,r,o;return{setters:[function(e){t=e["default"],n=e.PropTypes},function(e){r=e["default"]}],execute:function(){o=function(e){var n=e.link,o=e.title,i=e.date,a=e.image;return t.createElement("a",{className:"banner-box",href:n,title:o+" "+i},!!a&&t.createElement(r,{src:a,alt:o}),t.createElement("h2",{className:"title"},o+" ",t.createElement("span",{className:"date"},i)))},o.defaultProps={link:"#"},o.propTypes={title:n.string.isRequired,date:n.string.isRequired,link:n.string,image:n.string},e("default",o)}}}),e.register("9f",["9c","9d"],function(e){"use strict";var t,n,r,o,i;return{setters:[function(e){t=e["default"],n=e.PropTypes},function(e){r=e["default"]}],execute:function(){o=function(e){return e.day+" - "+e.month},i=function(e){var n=e.events;return t.createElement("section",{className:"banner"},t.createElement("div",{className:"banner-main"},t.createElement(r,{link:n[0].link,title:n[0].title,date:o(n[0].date),image:n[0].image})),t.createElement("div",{key:0,className:"banner-aside"},n.slice(1,3).map(function(e,n){return t.createElement(r,{key:n,link:e.link,title:e.title,date:o(e.date)})})),t.createElement("div",{key:1,className:"banner-aside"},n.slice(3).map(function(e,n){return t.createElement(r,{key:n,link:e.link,title:e.title,date:o(e.date)})})))},i.propTypes={events:n.array.isRequired},e("default",i)}}}),e.register("a0",["a3","a4","a5","a6","9c","a2","9f","a1"],function(e){var t,n,r,o,i,a,u,s,c,l,p,d;return{setters:[function(e){t=e["default"]},function(e){n=e["default"]},function(e){r=e["default"]},function(e){o=e["default"]},function(e){i=e["default"],a=e.PropTypes,u=e.Component},function(e){s=e.connect},function(e){c=e["default"]},function(e){l=e.fetchEvents}],execute:function(){"use strict";p=function(e){function a(){o(this,a),t(Object.getPrototypeOf(a.prototype),"constructor",this).apply(this,arguments)}return n(a,e),r(a,[{key:"componentDidMount",value:function(){this.props.dispatch(l())}},{key:"render",value:function(){return i.createElement("header",{className:"wellness"},i.createElement("h1",{className:"title"},"Encontre eventos de Front-End em todo o Brasil"),i.createElement(c,{events:this.props.events}))}}]),a}(u),p.propTypes={events:a.shape.isRequired},d=function(e){return{events:e.events.events.filter(function(e,t){return 5>t})}},e("default",s(d)(p))}}}),e.registerDynamic("a7",["aa","a8","a9","16"],!0,function(e,t,n){return function(n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.__esModule=!0,t["default"]=void 0;var u=e("aa"),s=e("a8"),c=r(s),l=e("a9"),p=(r(l),function(e){function t(n,r){o(this,t);var a=i(this,e.call(this,n,r));return a.store=n.store,a}return a(t,e),t.prototype.getChildContext=function(){return{store:this.store}},t.prototype.render=function(){var e=this.props.children;return u.Children.only(e)},t}(u.Component));t["default"]=p,p.propTypes={store:c["default"].isRequired,children:u.PropTypes.element.isRequired},p.childContextTypes={store:c["default"].isRequired}}(e("16")),n.exports}),e.registerDynamic("ab",["30","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("30"),o=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},i=function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},a=function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},u=function(e,t,n,r){var o=this;if(o.instancePool.length){var i=o.instancePool.pop();return o.call(i,e,t,n,r),i}return new o(e,t,n,r)},s=function(e,t,n,r,o){var i=this;if(i.instancePool.length){var a=i.instancePool.pop();return i.call(a,e,t,n,r,o),a}return new i(e,t,n,r,o)},c=function(e){var t=this;e instanceof t?void 0:r(!1),e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},l=10,p=o,d=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||p,n.poolSize||(n.poolSize=l),n.release=c,n},f={addPoolingTo:d,oneArgumentPooler:o,twoArgumentPooler:i,threeArgumentPooler:a,fourArgumentPooler:u,fiveArgumentPooler:s};n.exports=f}(e("16")),n.exports}),e.registerDynamic("ac",[],!0,function(e,t,n){"use strict";function r(e){var t=/[=:]/g,n={"=":"=0",":":"=2"},r=(""+e).replace(t,function(e){return n[e]});return"$"+r}function o(e){var t=/(=0|=2)/g,n={"=0":"=","=2":":"},r="."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1);return(""+r).replace(t,function(e){return n[e]})}var i={escape:r,unescape:o};return n.exports=i,n.exports}),e.registerDynamic("ad",["ae","af","b0","30","ac","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){return e&&"object"==typeof e&&null!=e.key?c.escape(e.key):t.toString(36)}function o(e,t,n,i){var d=typeof e;if("undefined"!==d&&"boolean"!==d||(e=null),null===e||"string"===d||"number"===d||a.isValidElement(e))return n(i,e,""===t?l+r(e,0):t),1;var f,h,m=0,v=""===t?l:t+p;if(Array.isArray(e))for(var g=0;g<e.length;g++)f=e[g],h=v+r(f,g),m+=o(f,h,n,i);else{var y=u(e);if(y){var b,x=y.call(e);if(y!==e.entries)for(var E=0;!(b=x.next()).done;)f=b.value,h=v+r(f,E++),m+=o(f,h,n,i);else for(;!(b=x.next()).done;){var _=b.value;_&&(f=_[1],h=v+c.escape(_[0])+p+r(f,0),m+=o(f,h,n,i))}}else if("object"===d){String(e);s(!1)}}return m}function i(e,t,n){return null==e?0:o(e,"",t,n)}var a=(e("ae"),e("af")),u=e("b0"),s=e("30"),c=e("ac"),l=(e("22"),"."),p=":";n.exports=i}(e("16")),n.exports}),e.registerDynamic("b1",["ab","af","48","ad"],!0,function(e,t,n){"use strict";function r(e){return(""+e).replace(x,"$&/")}function o(e,t){this.func=e,this.context=t,this.count=0}function i(e,t,n){var r=e.func,o=e.context;r.call(o,t,e.count++)}function a(e,t,n){if(null==e)return e;var r=o.getPooled(t,n);g(e,i,r),o.release(r)}function u(e,t,n,r){this.result=e,this.keyPrefix=t,this.func=n,this.context=r,this.count=0}function s(e,t,n){var o=e.result,i=e.keyPrefix,a=e.func,u=e.context,s=a.call(u,t,e.count++);Array.isArray(s)?c(s,o,n,v.thatReturnsArgument):null!=s&&(m.isValidElement(s)&&(s=m.cloneAndReplaceKey(s,i+(!s.key||t&&t.key===s.key?"":r(s.key)+"/")+n)),o.push(s))}function c(e,t,n,o,i){var a="";null!=n&&(a=r(n)+"/");var c=u.getPooled(t,a,o,i);g(e,s,c),u.release(c)}function l(e,t,n){if(null==e)return e;var r=[];return c(e,r,null,t,n),r}function p(e,t,n){return null}function d(e,t){return g(e,p,null)}function f(e){var t=[];return c(e,t,null,v.thatReturnsArgument),t}var h=e("ab"),m=e("af"),v=e("48"),g=e("ad"),y=h.twoArgumentPooler,b=h.fourArgumentPooler,x=/\/+/g;o.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},h.addPoolingTo(o,y),u.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},h.addPoolingTo(u,b);var E={forEach:a,map:l,mapIntoWithKeyPrefixInternal:c,count:d,toArray:f};return n.exports=E,n.exports}),e.registerDynamic("b2",["22","16"],!0,function(e,t,n){return function(t){"use strict";var r,o,i=(e("22"),{onBeginProcessingChildContext:function(){r=!0},onEndProcessingChildContext:function(){r=!1},onSetState:function(){o()}});n.exports=i}(e("16")),n.exports}),e.registerDynamic("b3",["b2","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n,r,o,i){}var o=e("b2"),i=(e("22"),[]),a={addDevtool:function(e){i.push(e)},removeDevtool:function(e){for(var t=0;t<i.length;t++)i[t]===e&&(i.splice(t,1),t--)},onBeginProcessingChildContext:function(){r("onBeginProcessingChildContext")},onEndProcessingChildContext:function(){r("onEndProcessingChildContext")},onSetState:function(){r("onSetState")},onMountRootComponent:function(e){r("onMountRootComponent",e)},onMountComponent:function(e){r("onMountComponent",e)},onUpdateComponent:function(e){r("onUpdateComponent",e)},onUnmountComponent:function(e){r("onUnmountComponent",e)}};a.addDevtool(o),n.exports=a}(e("16")),n.exports}),e.registerDynamic("b4",["b3"],!0,function(e,t,n){"use strict";var r=e("b3");return n.exports={debugTool:r},n.exports}),e.registerDynamic("b5",["b6","b4","b7","94","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||o}var o=e("b6"),i=(e("b4"),e("b7"),e("94")),a=e("30");e("22");r.prototype.isReactComponent={},r.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e?a(!1):void 0,this.updater.enqueueSetState(this,e),t&&this.updater.enqueueCallback(this,t,"setState")},r.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e,"forceUpdate")};n.exports=r}(e("16")),n.exports}),e.registerDynamic("b6",["22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){}var o=(e("22"),{isMounted:function(e){return!1},enqueueCallback:function(e,t){},enqueueForceUpdate:function(e){r(e,"forceUpdate")},enqueueReplaceState:function(e,t){r(e,"replaceState")},enqueueSetState:function(e,t){r(e,"setState")}});n.exports=o}(e("16")),n.exports}),e.registerDynamic("b8",["6","b5","af","b9","ba","b6","94","30","58","e","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){var n=_.hasOwnProperty(t)?_[t]:null;D.hasOwnProperty(t)&&(n!==x.OVERRIDE_BASE?v(!1):void 0),e&&(n!==x.DEFINE_MANY&&n!==x.DEFINE_MANY_MERGED?v(!1):void 0)}function o(e,t){if(t){"function"==typeof t?v(!1):void 0,f.isValidElement(t)?v(!1):void 0;var n=e.prototype,o=n.__reactAutoBindPairs;t.hasOwnProperty(b)&&C.mixins(e,t.mixins);for(var i in t)if(t.hasOwnProperty(i)&&i!==b){var a=t[i],c=n.hasOwnProperty(i);if(r(c,i),C.hasOwnProperty(i))C[i](e,a);else{var l=_.hasOwnProperty(i),p="function"==typeof a,d=p&&!l&&!c&&t.autobind!==!1;if(d)o.push(i,a),n[i]=a;else if(c){var h=_[i];!l||h!==x.DEFINE_MANY_MERGED&&h!==x.DEFINE_MANY?v(!1):void 0,h===x.DEFINE_MANY_MERGED?n[i]=u(n[i],a):h===x.DEFINE_MANY&&(n[i]=s(n[i],a))}else n[i]=a}}}}function i(e,t){if(t)for(var n in t){var r=t[n];if(t.hasOwnProperty(n)){var o=n in C;o?v(!1):void 0;var i=n in e;i?v(!1):void 0,e[n]=r}}}function a(e,t){e&&t&&"object"==typeof e&&"object"==typeof t?void 0:v(!1);for(var n in t)t.hasOwnProperty(n)&&(void 0!==e[n]?v(!1):void 0,e[n]=t[n]);return e}function u(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return a(o,n),a(o,r),o}}function s(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function c(e,t){var n=t.bind(e);return n}function l(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var r=t[n],o=t[n+1];e[r]=c(e,o)}}var p=e("6"),d=e("b5"),f=e("af"),h=(e("b9"),e("ba"),e("b6")),m=e("94"),v=e("30"),g=e("58"),y=e("e"),b=(e("22"),y({mixins:null})),x=g({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),E=[],_={mixins:x.DEFINE_MANY,statics:x.DEFINE_MANY,propTypes:x.DEFINE_MANY,contextTypes:x.DEFINE_MANY,childContextTypes:x.DEFINE_MANY,getDefaultProps:x.DEFINE_MANY_MERGED,getInitialState:x.DEFINE_MANY_MERGED,getChildContext:x.DEFINE_MANY_MERGED,render:x.DEFINE_ONCE,componentWillMount:x.DEFINE_MANY,componentDidMount:x.DEFINE_MANY,componentWillReceiveProps:x.DEFINE_MANY,shouldComponentUpdate:x.DEFINE_ONCE,componentWillUpdate:x.DEFINE_MANY,componentDidUpdate:x.DEFINE_MANY,componentWillUnmount:x.DEFINE_MANY,updateComponent:x.OVERRIDE_BASE},C={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)o(e,t[n])},childContextTypes:function(e,t){e.childContextTypes=p({},e.childContextTypes,t)},contextTypes:function(e,t){e.contextTypes=p({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=u(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,t){e.propTypes=p({},e.propTypes,t)},statics:function(e,t){i(e,t)},autobind:function(){}},D={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e),t&&this.updater.enqueueCallback(this,t,"replaceState")},isMounted:function(){return this.updater.isMounted(this)}},P=function(){};p(P.prototype,d.prototype,D);var w={createClass:function(e){var t=function(e,t,n){this.__reactAutoBindPairs.length&&l(this),this.props=e,this.context=t,this.refs=m,this.updater=n||h,this.state=null;var r=this.getInitialState?this.getInitialState():null;"object"!=typeof r||Array.isArray(r)?v(!1):void 0,this.state=r};t.prototype=new P,t.prototype.constructor=t,t.prototype.__reactAutoBindPairs=[],E.forEach(o.bind(null,t)),o(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),t.prototype.render?void 0:v(!1);for(var n in _)t.prototype[n]||(t.prototype[n]=null);return t},injection:{injectMixin:function(e){E.push(e)}}};n.exports=w}(e("16")),n.exports}),e.registerDynamic("bb",["af","bc","bd","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){return o.createFactory(e)}var o=e("af"),i=(e("bc"),e("bd")),a=i({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hgroup:"hgroup",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",image:"image",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},r);n.exports=a}(e("16")),n.exports}),e.registerDynamic("b9",["58"],!0,function(e,t,n){"use strict";var r=e("58"),o=r({prop:null,context:null,childContext:null});return n.exports=o,n.exports}),e.registerDynamic("bc",["af","b9","ba","ae","b7","b0","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(){if(p.current){var e=p.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function o(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;i("uniqueKey",e,t)}}function i(e,t,n){var o=r();if(!o){var i="string"==typeof n?n:n.displayName||n.name;i&&(o=" Check the top-level render call using <"+i+">.")}var a=h[e]||(h[e]={});if(a[o])return null;a[o]=!0;var u={parentOrOwner:o,url:" See https://fb.me/react-warning-keys for more information.",childOwner:null};return t&&t._owner&&t._owner!==p.current&&(u.childOwner=" It was passed a child from "+t._owner.getName()+"."),u}function a(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];c.isValidElement(r)&&o(r,t)}else if(c.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var i=d(e);if(i&&i!==e.entries)for(var a,u=i.call(e);!(a=u.next()).done;)c.isValidElement(a.value)&&o(a.value,t)}}function u(e,t,n,o){for(var i in t)if(t.hasOwnProperty(i)){var a;try{"function"!=typeof t[i]?f(!1):void 0,a=t[i](n,i,e,o)}catch(u){a=u}if(a instanceof Error&&!(a.message in m)){m[a.message]=!0;r()}}}function s(e){var t=e.type;if("function"==typeof t){var n=t.displayName||t.name;t.propTypes&&u(n,t.propTypes,e.props,l.prop),"function"==typeof t.getDefaultProps}}var c=e("af"),l=e("b9"),p=(e("ba"),e("ae")),d=(e("b7"),e("b0")),f=e("30"),h=(e("22"),{}),m={},v={createElement:function(e,t,n){var r="string"==typeof e||"function"==typeof e,o=c.createElement.apply(this,arguments);if(null==o)return o;if(r)for(var i=2;i<arguments.length;i++)a(arguments[i],e);return s(o),o},createFactory:function(e){var t=v.createElement.bind(null,e);return t.type=e,t},cloneElement:function(e,t,n){for(var r=c.cloneElement.apply(this,arguments),o=2;o<arguments.length;o++)a(arguments[o],r.type);return s(r),r}};n.exports=v}(e("16")),n.exports}),e.registerDynamic("ba",["16"],!0,function(e,t,n){return function(e){"use strict";var t={};n.exports=t}(e("16")),n.exports}),e.registerDynamic("b0",[],!0,function(e,t,n){"use strict";function r(e){var t=e&&(o&&e[o]||e[i]);return"function"==typeof t?t:void 0}var o="function"==typeof Symbol&&Symbol.iterator,i="@@iterator";return n.exports=r,n.exports}),e.registerDynamic("be",["af","ba","48","b0"],!0,function(e,t,n){"use strict";function r(e,t){return e===t?0!==e||1/e===1/t:e!==e&&t!==t}function o(e){function t(t,n,r,o,i,a){if(o=o||C,a=a||r,null==n[r]){var u=x[i];return t?new Error("Required "+u+" `"+a+"` was not specified in "+("`"+o+"`.")):null}return e(n,r,o,i,a)}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function i(e){function t(t,n,r,o,i){var a=t[n],u=v(a);if(u!==e){var s=x[o],c=g(a);return new Error("Invalid "+s+" `"+i+"` of type "+("`"+c+"` supplied to `"+r+"`, expected ")+("`"+e+"`."))}return null}return o(t)}function a(){return o(E.thatReturns(null))}function u(e){function t(t,n,r,o,i){if("function"!=typeof e)return new Error("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var a=t[n];if(!Array.isArray(a)){var u=x[o],s=v(a);return new Error("Invalid "+u+" `"+i+"` of type "+("`"+s+"` supplied to `"+r+"`, expected an array."))}for(var c=0;c<a.length;c++){var l=e(a,c,r,o,i+"["+c+"]");if(l instanceof Error)return l}return null}return o(t)}function s(){function e(e,t,n,r,o){if(!b.isValidElement(e[t])){var i=x[r];return new Error("Invalid "+i+" `"+o+"` supplied to "+("`"+n+"`, expected a single ReactElement."))}return null}return o(e)}function c(e){function t(t,n,r,o,i){if(!(t[n]instanceof e)){var a=x[o],u=e.name||C,s=y(t[n]);return new Error("Invalid "+a+" `"+i+"` of type "+("`"+s+"` supplied to `"+r+"`, expected ")+("instance of `"+u+"`."))}return null}return o(t)}function l(e){function t(t,n,o,i,a){for(var u=t[n],s=0;s<e.length;s++)if(r(u,e[s]))return null;var c=x[i],l=JSON.stringify(e);return new Error("Invalid "+c+" `"+a+"` of value `"+u+"` "+("supplied to `"+o+"`, expected one of "+l+"."))}return o(Array.isArray(e)?t:function(){return new Error("Invalid argument supplied to oneOf, expected an instance of array.")})}function p(e){function t(t,n,r,o,i){if("function"!=typeof e)return new Error("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var a=t[n],u=v(a);if("object"!==u){var s=x[o];return new Error("Invalid "+s+" `"+i+"` of type "+("`"+u+"` supplied to `"+r+"`, expected an object."))}for(var c in a)if(a.hasOwnProperty(c)){var l=e(a,c,r,o,i+"."+c);if(l instanceof Error)return l}return null}return o(t)}function d(e){function t(t,n,r,o,i){for(var a=0;a<e.length;a++){var u=e[a];if(null==u(t,n,r,o,i))return null}var s=x[o];return new Error("Invalid "+s+" `"+i+"` supplied to "+("`"+r+"`."))}return o(Array.isArray(e)?t:function(){return new Error("Invalid argument supplied to oneOfType, expected an instance of array.")})}function f(){function e(e,t,n,r,o){if(!m(e[t])){var i=x[r];return new Error("Invalid "+i+" `"+o+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return null}return o(e)}function h(e){function t(t,n,r,o,i){var a=t[n],u=v(a);if("object"!==u){var s=x[o];return new Error("Invalid "+s+" `"+i+"` of type `"+u+"` "+("supplied to `"+r+"`, expected `object`."))}for(var c in e){var l=e[c];if(l){var p=l(a,c,r,o,i+"."+c);if(p)return p}}return null}return o(t)}function m(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(m);if(null===e||b.isValidElement(e))return!0;var t=_(e);if(!t)return!1;var n,r=t.call(e);if(t!==e.entries){for(;!(n=r.next()).done;)if(!m(n.value))return!1}else for(;!(n=r.next()).done;){var o=n.value;if(o&&!m(o[1]))return!1}return!0;default:return!1}}function v(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":t}function g(e){var t=v(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function y(e){return e.constructor&&e.constructor.name?e.constructor.name:C}var b=e("af"),x=e("ba"),E=e("48"),_=e("b0"),C="<<anonymous>>",D={array:i("array"),bool:i("boolean"),func:i("function"),number:i("number"),object:i("object"),string:i("string"),any:a(),arrayOf:u,element:s(),instanceOf:c,node:f(),objectOf:p,oneOf:l,oneOfType:d,shape:h};return n.exports=D,n.exports}),e.registerDynamic("bf",[],!0,function(e,t,n){"use strict";return n.exports="15.0.2",n.exports}),e.registerDynamic("ae",[],!0,function(e,t,n){"use strict";var r={current:null};return n.exports=r,n.exports}),e.registerDynamic("b7",["16"],!0,function(e,t,n){return function(e){"use strict";var t=!1;n.exports=t}(e("16")),n.exports}),e.registerDynamic("af",["6","ae","22","b7","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("6"),o=e("ae"),i=(e("22"),e("b7"),"function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103),a={key:!0,ref:!0,__self:!0,__source:!0},u=function(e,t,n,r,o,a,u){var s={$$typeof:i,type:e,key:t,ref:n,props:u,_owner:a};return s};u.createElement=function(e,t,n){var r,i={},s=null,c=null,l=null,p=null;if(null!=t){c=void 0===t.ref?null:t.ref,s=void 0===t.key?null:""+t.key,l=void 0===t.__self?null:t.__self,p=void 0===t.__source?null:t.__source;for(r in t)t.hasOwnProperty(r)&&!a.hasOwnProperty(r)&&(i[r]=t[r])}var d=arguments.length-2;if(1===d)i.children=n;else if(d>1){for(var f=Array(d),h=0;d>h;h++)f[h]=arguments[h+2];i.children=f}if(e&&e.defaultProps){var m=e.defaultProps;for(r in m)void 0===i[r]&&(i[r]=m[r])}return u(e,s,c,l,p,o.current,i)},u.createFactory=function(e){var t=u.createElement.bind(null,e);return t.type=e,t},u.cloneAndReplaceKey=function(e,t){var n=u(e.type,t,e.ref,e._self,e._source,e._owner,e.props);return n},u.cloneElement=function(e,t,n){var i,s=r({},e.props),c=e.key,l=e.ref,p=e._self,d=e._source,f=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,f=o.current),void 0!==t.key&&(c=""+t.key);var h;e.type&&e.type.defaultProps&&(h=e.type.defaultProps);for(i in t)t.hasOwnProperty(i)&&!a.hasOwnProperty(i)&&(void 0===t[i]&&void 0!==h?s[i]=h[i]:s[i]=t[i])}var m=arguments.length-2;if(1===m)s.children=n;else if(m>1){for(var v=Array(m),g=0;m>g;g++)v[g]=arguments[g+2];s.children=v}return u(e.type,c,l,p,d,f,s)},u.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},n.exports=u}(e("16")),n.exports}),e.registerDynamic("c0",["af","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){return o.isValidElement(e)?void 0:i(!1),e}var o=e("af"),i=e("30");n.exports=r}(e("16")),n.exports}),e.registerDynamic("c1",["6","b1","b5","b8","bb","af","bc","be","bf","c0","22","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("6"),o=e("b1"),i=e("b5"),a=e("b8"),u=e("bb"),s=e("af"),c=(e("bc"),e("be")),l=e("bf"),p=e("c0"),d=(e("22"),s.createElement),f=s.createFactory,h=s.cloneElement,m=r,v={Children:{map:o.map,forEach:o.forEach,count:o.count,toArray:o.toArray,only:p},Component:i,createElement:d,cloneElement:h,isValidElement:s.isValidElement,PropTypes:c,createClass:a.createClass,createFactory:f,createMixin:function(e){return e},DOM:u,version:l,__spread:m};n.exports=v}(e("16")),n.exports}),e.registerDynamic("c2",["c1"],!0,function(e,t,n){"use strict";return n.exports=e("c1"),n.exports}),e.registerDynamic("aa",["c2"],!0,function(e,t,n){return n.exports=e("c2"),n.exports}),e.registerDynamic("a8",["aa"],!0,function(e,t,n){"use strict";t.__esModule=!0;var r=e("aa");return t["default"]=r.PropTypes.shape({subscribe:r.PropTypes.func.isRequired,dispatch:r.PropTypes.func.isRequired,getState:r.PropTypes.func.isRequired}),n.exports}),e.registerDynamic("c3",[],!0,function(e,t,n){"use strict";function r(e,t){if(e===t)return!0;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=Object.prototype.hasOwnProperty,i=0;i<n.length;i++)if(!o.call(t,n[i])||e[n[i]]!==t[n[i]])return!1;return!0}return t.__esModule=!0,t["default"]=r,n.exports}),e.registerDynamic("c4",["c5"],!0,function(e,t,n){"use strict";function r(e){return function(t){return(0,o.bindActionCreators)(e,t)}}t.__esModule=!0,t["default"]=r;var o=e("c5");return n.exports}),e.registerDynamic("a9",[],!0,function(e,t,n){"use strict";function r(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e);try{throw new Error(e)}catch(t){}}return t.__esModule=!0,t["default"]=r,n.exports}),e.registerDynamic("c6",[],!0,function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,arguments:!0,arity:!0};return n.exports=function(e,t){for(var n=Object.getOwnPropertyNames(t),i=0;i<n.length;++i)if(!r[n[i]]&&!o[n[i]])try{e[n[i]]=t[n[i]]}catch(a){}return e},n.exports}),e.registerDynamic("c7",["c6"],!0,function(e,t,n){return n.exports=e("c6"),n.exports}),e.registerDynamic("c8",["16"],!0,function(e,t,n){return function(e){"use strict";var t=function(e,t,n,r,o,i,a,u){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],l=0;s=new Error(t.replace(/%s/g,function(){return c[l++]})),s.name="Invariant Violation"}throw s.framesToPop=1,s}};n.exports=t}(e("16")),n.exports}),e.registerDynamic("c9",["c8"],!0,function(e,t,n){return n.exports=e("c8"),n.exports}),e.registerDynamic("ca",["aa","a8","c3","c4","a9","cb","c7","c9","16"],!0,function(e,t,n){return function(n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,
writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function u(e){return e.displayName||e.name||"Component"}function s(e,t){try{return e.apply(t)}catch(n){return N.value=n,N}}function c(e,t,n){var r=arguments.length<=3||void 0===arguments[3]?{}:arguments[3],c=Boolean(e),d=e||D,h=void 0;h="function"==typeof t?t:t?(0,g["default"])(t):P;var v=n||w,y=r.pure,b=void 0===y?!0:y,x=r.withRef,_=void 0===x?!1:x,S=b&&v!==w,M=T++;return function(e){function t(e,t,n){var r=v(e,t,n);return r}var n="Connect("+u(e)+")",r=function(r){function u(e,t){o(this,u);var a=i(this,r.call(this,e,t));a.version=M,a.store=e.store||t.store,(0,C["default"])(a.store,'Could not find "store" in either the context or '+('props of "'+n+'". ')+"Either wrap the root component in a <Provider>, "+('or explicitly pass "store" as a prop to "'+n+'".'));var s=a.store.getState();return a.state={storeState:s},a.clearCache(),a}return a(u,r),u.prototype.shouldComponentUpdate=function(){return!b||this.haveOwnPropsChanged||this.hasStoreStateChanged},u.prototype.computeStateProps=function(e,t){if(!this.finalMapStateToProps)return this.configureFinalMapState(e,t);var n=e.getState(),r=this.doStatePropsDependOnOwnProps?this.finalMapStateToProps(n,t):this.finalMapStateToProps(n);return r},u.prototype.configureFinalMapState=function(e,t){var n=d(e.getState(),t),r="function"==typeof n;return this.finalMapStateToProps=r?n:d,this.doStatePropsDependOnOwnProps=1!==this.finalMapStateToProps.length,r?this.computeStateProps(e,t):n},u.prototype.computeDispatchProps=function(e,t){if(!this.finalMapDispatchToProps)return this.configureFinalMapDispatch(e,t);var n=e.dispatch,r=this.doDispatchPropsDependOnOwnProps?this.finalMapDispatchToProps(n,t):this.finalMapDispatchToProps(n);return r},u.prototype.configureFinalMapDispatch=function(e,t){var n=h(e.dispatch,t),r="function"==typeof n;return this.finalMapDispatchToProps=r?n:h,this.doDispatchPropsDependOnOwnProps=1!==this.finalMapDispatchToProps.length,r?this.computeDispatchProps(e,t):n},u.prototype.updateStatePropsIfNeeded=function(){var e=this.computeStateProps(this.store,this.props);return this.stateProps&&(0,m["default"])(e,this.stateProps)?!1:(this.stateProps=e,!0)},u.prototype.updateDispatchPropsIfNeeded=function(){var e=this.computeDispatchProps(this.store,this.props);return this.dispatchProps&&(0,m["default"])(e,this.dispatchProps)?!1:(this.dispatchProps=e,!0)},u.prototype.updateMergedPropsIfNeeded=function(){var e=t(this.stateProps,this.dispatchProps,this.props);return this.mergedProps&&S&&(0,m["default"])(e,this.mergedProps)?!1:(this.mergedProps=e,!0)},u.prototype.isSubscribed=function(){return"function"==typeof this.unsubscribe},u.prototype.trySubscribe=function(){c&&!this.unsubscribe&&(this.unsubscribe=this.store.subscribe(this.handleChange.bind(this)),this.handleChange())},u.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null)},u.prototype.componentDidMount=function(){this.trySubscribe()},u.prototype.componentWillReceiveProps=function(e){b&&(0,m["default"])(e,this.props)||(this.haveOwnPropsChanged=!0)},u.prototype.componentWillUnmount=function(){this.tryUnsubscribe(),this.clearCache()},u.prototype.clearCache=function(){this.dispatchProps=null,this.stateProps=null,this.mergedProps=null,this.haveOwnPropsChanged=!0,this.hasStoreStateChanged=!0,this.haveStatePropsBeenPrecalculated=!1,this.statePropsPrecalculationError=null,this.renderedElement=null,this.finalMapDispatchToProps=null,this.finalMapStateToProps=null},u.prototype.handleChange=function(){if(this.unsubscribe){var e=this.store.getState(),t=this.state.storeState;if(!b||t!==e){if(b&&!this.doStatePropsDependOnOwnProps){var n=s(this.updateStatePropsIfNeeded,this);if(!n)return;n===N&&(this.statePropsPrecalculationError=N.value),this.haveStatePropsBeenPrecalculated=!0}this.hasStoreStateChanged=!0,this.setState({storeState:e})}}},u.prototype.getWrappedInstance=function(){return(0,C["default"])(_,"To access the wrapped instance, you need to specify { withRef: true } as the fourth argument of the connect() call."),this.refs.wrappedInstance},u.prototype.render=function(){var t=this.haveOwnPropsChanged,n=this.hasStoreStateChanged,r=this.haveStatePropsBeenPrecalculated,o=this.statePropsPrecalculationError,i=this.renderedElement;if(this.haveOwnPropsChanged=!1,this.hasStoreStateChanged=!1,this.haveStatePropsBeenPrecalculated=!1,this.statePropsPrecalculationError=null,o)throw o;var a=!0,u=!0;b&&i&&(a=n||t&&this.doStatePropsDependOnOwnProps,u=t&&this.doDispatchPropsDependOnOwnProps);var s=!1,c=!1;r?s=!0:a&&(s=this.updateStatePropsIfNeeded()),u&&(c=this.updateDispatchPropsIfNeeded());var d=!0;return d=s||c||t?this.updateMergedPropsIfNeeded():!1,!d&&i?i:(_?this.renderedElement=(0,p.createElement)(e,l({},this.mergedProps,{ref:"wrappedInstance"})):this.renderedElement=(0,p.createElement)(e,this.mergedProps),this.renderedElement)},u}(p.Component);return r.displayName=n,r.WrappedComponent=e,r.contextTypes={store:f["default"]},r.propTypes={store:f["default"]},(0,E["default"])(r,e)}}var l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.__esModule=!0,t["default"]=c;var p=e("aa"),d=e("a8"),f=r(d),h=e("c3"),m=r(h),v=e("c4"),g=r(v),y=e("a9"),b=(r(y),e("cb")),x=(r(b),e("c7")),E=r(x),_=e("c9"),C=r(_),D=function(e){return{}},P=function(e){return{dispatch:e}},w=function(e,t,n){return l({},n,e,t)},N={value:null},T=0}(e("16")),n.exports}),e.registerDynamic("cc",["a7","ca"],!0,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0,t.connect=t.Provider=void 0;var o=e("a7"),i=r(o),a=e("ca"),u=r(a);return t.Provider=i["default"],t.connect=u["default"],n.exports}),e.registerDynamic("a2",["cc"],!0,function(e,t,n){return n.exports=e("cc"),n.exports}),e.registerDynamic("cd",["ce","cf","d0"],!0,function(e,t,n){var r=e("ce"),o=e("cf"),i=e("d0");return n.exports=function(e,t){var n=(o.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*i(function(){n(1)}),"Object",a)},n.exports}),e.registerDynamic("d1",["d2","cd"],!0,function(e,t,n){var r=e("d2");return e("cd")("getOwnPropertyDescriptor",function(e){return function(t,n){return e(r(t),n)}}),n.exports}),e.registerDynamic("d3",["d4","d1"],!0,function(e,t,n){var r=e("d4");return e("d1"),n.exports=function(e,t){return r.getDesc(e,t)},n.exports}),e.registerDynamic("d5",["d3"],!0,function(e,t,n){return n.exports={"default":e("d3"),__esModule:!0},n.exports}),e.registerDynamic("a3",["d5"],!0,function(e,t,n){"use strict";var r=e("d5")["default"];return t["default"]=function(e,t,n){for(var o=!0;o;){var i=e,a=t,u=n;o=!1,null===i&&(i=Function.prototype);var s=r(i,a);if(void 0!==s){if("value"in s)return s.value;var c=s.get;if(void 0===c)return;return c.call(u)}var l=Object.getPrototypeOf(i);if(null===l)return;e=l,t=a,n=u,o=!0,s=l=void 0}},t.__esModule=!0,n.exports}),e.registerDynamic("d6",["d4"],!0,function(e,t,n){var r=e("d4");return n.exports=function(e,t){return r.create(e,t)},n.exports}),e.registerDynamic("d7",["d6"],!0,function(e,t,n){return n.exports={"default":e("d6"),__esModule:!0},n.exports}),e.registerDynamic("d8",["ce","d9"],!0,function(e,t,n){var r=e("ce");return r(r.S,"Object",{setPrototypeOf:e("d9").set}),n.exports}),e.registerDynamic("da",["d8","cf"],!0,function(e,t,n){return e("d8"),n.exports=e("cf").Object.setPrototypeOf,n.exports}),e.registerDynamic("db",["da"],!0,function(e,t,n){return n.exports={"default":e("da"),__esModule:!0},n.exports}),e.registerDynamic("a4",["d7","db"],!0,function(e,t,n){"use strict";var r=e("d7")["default"],o=e("db")["default"];return t["default"]=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=r(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(o?o(e,t):e.__proto__=t)},t.__esModule=!0,n.exports}),e.registerDynamic("dc",["d4"],!0,function(e,t,n){var r=e("d4");return n.exports=function(e,t,n){return r.setDesc(e,t,n)},n.exports}),e.registerDynamic("dd",["dc"],!0,function(e,t,n){return n.exports={"default":e("dc"),__esModule:!0},n.exports}),e.registerDynamic("a5",["dd"],!0,function(e,t,n){"use strict";var r=e("dd")["default"];return t["default"]=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),r(e,o.key,o)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),t.__esModule=!0,n.exports}),e.registerDynamic("a6",[],!0,function(e,t,n){"use strict";return t["default"]=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},t.__esModule=!0,n.exports}),e.register("9e",["a3","a4","a5","a6","9c"],function(e){var t,n,r,o,i,a,u,s;return{setters:[function(e){t=e["default"]},function(e){n=e["default"]},function(e){r=e["default"]},function(e){o=e["default"]},function(e){i=e["default"],a=e.PropTypes,u=e.Component}],execute:function(){"use strict";s=function(e){function a(){o(this,a),t(Object.getPrototypeOf(a.prototype),"constructor",this).apply(this,arguments)}return n(a,e),r(a,[{key:"componentWillMount",value:function(){this.setState({isLoaded:!1})}},{key:"handleLoad",value:function(){this.setState({isLoaded:!0})}},{key:"render",value:function(){var e=this;return i.createElement("img",{className:(this.state.isLoaded?"lazyloaded":"lazyload")+" lazyblur",src:this.props.src,onLoad:function(){return e.handleLoad()},alt:this.props.alt})}}]),a}(u),s.defaultProps={alt:""},s.propTypes={src:a.string.isRequired,alt:a.string},e("default",s)}}}),e.register("de",["9c"],function(e){"use strict";var t,n,r;return{setters:[function(e){t=e["default"],n=e.PropTypes}],execute:function(){r=function(e){var n=e.id,r=e.label;return t.createElement("svg",{className:"icon","aria-hidden":"true","aria-label":r},t.createElement("use",{xlinkHref:"svg/icons.svg#"+n}))},r.defaultProps={label:""},r.propTypes={id:n.string.isRequired,label:n.string},e("default",r)}}}),e.register("df",["9c","9e","de"],function(e){"use strict";var t,n,r,o,i,a,u;return{setters:[function(e){t=e["default"],n=e.PropTypes},function(e){r=e["default"]},function(e){o=e["default"]}],execute:function(){i=function(e){var t=["Janeiro","Fevereiro","Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro","Novembro","Dezembro"],n=t.indexOf(e)+1;return(10>n?"0":"")+n},a=function(e){var t=e.day,n=e.month,r=e.year;return t+"/"+i(n)+"/"+r},u=function(e){var n=e.title,i=e.image,u=(e.innerLink,e.link),s=e.date,c=e.price,l=e.location,p=e.locationUrl,d=e.shortDescription;return t.createElement("article",{className:"event"},t.createElement("a",{className:"event-media",href:u,title:"Ver evento"},t.createElement(r,{src:i||"svg/logo.svg",alt:n})),t.createElement("div",{className:"event-main"},t.createElement("a",{className:"content",href:u,title:"Ver evento"},t.createElement("h2",null,n),t.createElement("p",null,d)),!!u&&t.createElement("a",{className:"btn-link",href:u,target:"_blank",title:"Visitar site oficial"},t.createElement(o,{id:"link",label:"Link"}),u),t.createElement("ul",{className:"event-list"},t.createElement("li",{className:"event-list--item"},t.createElement(o,{id:"date",label:"Data"}),a(s)),t.createElement("li",{className:"event-list--item"},t.createElement(o,{id:"price",label:"Preço"}),c),!!p&&t.createElement("li",{className:"event-list--item"},t.createElement(o,{id:"location",label:"Local"}),t.createElement("a",{href:p,target:"_blank"},l)))))},u.defaultProps={date:{day:"00",month:"xx",year:"0000"},price:"Grátis"},u.propTypes={title:n.string.isRequired,image:n.string,innerLink:n.string.isRequired,link:n.string,date:n.shape({day:n.number.isRequired,month:n.string.isRequired,year:n.number.isRequired}).isRequired,price:n.string,location:n.string,locationUrl:n.string,shortDescription:n.string.isRequired},e("default",u)}}}),e.register("e0",["e1","9c","a2","df"],function(e){var t,n,r,o,i,a,u;return{setters:[function(e){t=e["default"]},function(e){n=e["default"],r=e.PropTypes},function(e){o=e.connect},function(e){i=e["default"]}],execute:function(){"use strict";a=function(e){var r=e.events;return n.createElement("section",{className:"page"},n.createElement("header",{className:"page-header"},n.createElement("h3",{className:"title"},"Próximos Eventos")),n.createElement("div",{className:"page-wrap"},r.map(function(e,r){return n.createElement(i,t({key:r},e))})))},a.propTypes={events:r.shape.isRequired},u=function(e){return{events:e.events.events.filter(function(e,t){return t>=5})}},e("default",o(u)(a))}}}),e.register("e2",["9c"],function(e){"use strict";var t,n;return{setters:[function(e){t=e["default"]}],execute:function(){n=function(){return t.createElement("aside",{className:"disclaimer"},t.createElement("div",{className:"disclaimer-inner"},t.createElement("h2",{className:"title"},"Conhece algum evento de Front-End que não está listado?"),t.createElement("a",{href:"https://github.com/frontendbr/eventos/issues",className:"btn","aria-label":"Anunciar Evento",title:"Anuncie seu evento"},"Anunciar Evento")))},e("default",n)}}}),e.register("e3",["9c","a0","e0","e2"],function(e){"use strict";var t,n,r,o,i;return{setters:[function(e){t=e["default"]},function(e){n=e["default"]},function(e){r=e["default"]},function(e){o=e["default"]}],execute:function(){i=function(){return t.createElement("main",{className:"main",role:"main"},t.createElement(n,null),t.createElement(r,null),t.createElement(o,null))},e("default",i)}}}),e.registerDynamic("4",["30","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("30"),o=function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)},i=function(e,t){var n=this;if(n.instancePool.length){var r=n.instancePool.pop();return n.call(r,e,t),r}return new n(e,t)},a=function(e,t,n){var r=this;if(r.instancePool.length){var o=r.instancePool.pop();return r.call(o,e,t,n),o}return new r(e,t,n)},u=function(e,t,n,r){var o=this;if(o.instancePool.length){var i=o.instancePool.pop();return o.call(i,e,t,n,r),i}return new o(e,t,n,r)},s=function(e,t,n,r,o){var i=this;if(i.instancePool.length){var a=i.instancePool.pop();return i.call(a,e,t,n,r,o),a}return new i(e,t,n,r,o)},c=function(e){var t=this;e instanceof t?void 0:r(!1),e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},l=10,p=o,d=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||p,n.poolSize||(n.poolSize=l),n.release=c,n},f={addPoolingTo:d,oneArgumentPooler:o,twoArgumentPooler:i,threeArgumentPooler:a,fourArgumentPooler:u,fiveArgumentPooler:s};n.exports=f}(e("16")),n.exports}),e.registerDynamic("40",[],!0,function(e,t,n){"use strict";function r(e){var t=/[=:]/g,n={"=":"=0",":":"=2"},r=(""+e).replace(t,function(e){return n[e]});return"$"+r}function o(e){var t=/(=0|=2)/g,n={"=0":"=","=2":":"},r="."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1);return(""+r).replace(t,function(e){return n[e]})}var i={escape:r,unescape:o};return n.exports=i,n.exports}),e.registerDynamic("42",["47","8d","e4","30","40","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){return e&&"object"==typeof e&&null!=e.key?c.escape(e.key):t.toString(36)}function o(e,t,n,i){var d=typeof e;if("undefined"!==d&&"boolean"!==d||(e=null),null===e||"string"===d||"number"===d||a.isValidElement(e))return n(i,e,""===t?l+r(e,0):t),1;var f,h,m=0,v=""===t?l:t+p;if(Array.isArray(e))for(var g=0;g<e.length;g++)f=e[g],h=v+r(f,g),m+=o(f,h,n,i);else{var y=u(e);if(y){var b,x=y.call(e);if(y!==e.entries)for(var E=0;!(b=x.next()).done;)f=b.value,h=v+r(f,E++),m+=o(f,h,n,i);else for(;!(b=x.next()).done;){var _=b.value;_&&(f=_[1],h=v+c.escape(_[0])+p+r(f,0),m+=o(f,h,n,i))}}else if("object"===d){String(e);s(!1)}}return m}function i(e,t,n){return null==e?0:o(e,"",t,n)}var a=(e("47"),e("8d")),u=e("e4"),s=e("30"),c=e("40"),l=(e("22"),"."),p=":";n.exports=i}(e("16")),n.exports}),e.registerDynamic("32",["4","8d","48","42"],!0,function(e,t,n){"use strict";function r(e){return(""+e).replace(x,"$&/")}function o(e,t){this.func=e,this.context=t,this.count=0}function i(e,t,n){var r=e.func,o=e.context;r.call(o,t,e.count++)}function a(e,t,n){if(null==e)return e;var r=o.getPooled(t,n);g(e,i,r),o.release(r)}function u(e,t,n,r){this.result=e,this.keyPrefix=t,this.func=n,this.context=r,this.count=0}function s(e,t,n){var o=e.result,i=e.keyPrefix,a=e.func,u=e.context,s=a.call(u,t,e.count++);Array.isArray(s)?c(s,o,n,v.thatReturnsArgument):null!=s&&(m.isValidElement(s)&&(s=m.cloneAndReplaceKey(s,i+(!s.key||t&&t.key===s.key?"":r(s.key)+"/")+n)),o.push(s))}function c(e,t,n,o,i){var a="";null!=n&&(a=r(n)+"/");var c=u.getPooled(t,a,o,i);g(e,s,c),u.release(c)}function l(e,t,n){if(null==e)return e;var r=[];return c(e,r,null,t,n),r}function p(e,t,n){return null}function d(e,t){return g(e,p,null)}function f(e){var t=[];return c(e,t,null,v.thatReturnsArgument),t}var h=e("4"),m=e("8d"),v=e("48"),g=e("42"),y=h.twoArgumentPooler,b=h.fourArgumentPooler,x=/\/+/g;o.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},h.addPoolingTo(o,y),u.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},h.addPoolingTo(u,b);var E={forEach:a,map:l,mapIntoWithKeyPrefixInternal:c,count:d,toArray:f};return n.exports=E,n.exports}),e.registerDynamic("d",[],!0,function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};return n.exports=o,n.exports}),e.registerDynamic("e5",["d"],!0,function(e,t,n){"use strict";var r,o=e("d");return o.canUseDOM&&(r=window.performance||window.msPerformance||window.webkitPerformance),n.exports=r||{},n.exports}),e.registerDynamic("e6",["e5"],!0,function(e,t,n){"use strict";var r,o=e("e5");return r=o.now?function(){return o.now()}:function(){return Date.now()},n.exports=r,n.exports}),e.registerDynamic("e7",["22","16"],!0,function(e,t,n){return function(t){"use strict";var r,o,i=(e("22"),{onBeginProcessingChildContext:function(){r=!0},onEndProcessingChildContext:function(){r=!1},onSetState:function(){o()}});n.exports=i}(e("16")),n.exports}),e.registerDynamic("e8",[],!0,function(e,t,n){"use strict";var r=[],o={onNativeOperation:function(e,t,n){r.push({instanceID:e,type:t,payload:n})},clearHistory:function(){o._preventClearing||(r=[])},getHistory:function(){return r}};return n.exports=o,n.exports}),e.registerDynamic("e9",["30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){a[e]||(a[e]={parentID:null,ownerID:null,text:null,childIDs:[],displayName:"Unknown",isMounted:!1,updateCount:0}),t(a[e])}function o(e){var t=a[e];if(t){var n=t.childIDs;delete a[e],n.forEach(o)}}var i=e("30"),a={},u=[],s={onSetDisplayName:function(e,t){r(e,function(e){return e.displayName=t})},onSetChildren:function(e,t){r(e,function(n){var r=n.childIDs;n.childIDs=t,t.forEach(function(t){var n=a[t];n?void 0:i(!1),null==n.displayName?i(!1):void 0,null==n.childIDs&&null==n.text?i(!1):void 0,n.isMounted?void 0:i(!1),-1===r.indexOf(t)&&(n.parentID=e)})})},onSetOwner:function(e,t){r(e,function(e){return e.ownerID=t})},onSetText:function(e,t){r(e,function(e){return e.text=t})},onMountComponent:function(e){r(e,function(e){return e.isMounted=!0})},onMountRootComponent:function(e){u.push(e)},onUpdateComponent:function(e){r(e,function(e){return e.updateCount++})},onUnmountComponent:function(e){r(e,function(e){return e.isMounted=!1}),u=u.filter(function(t){return t!==e})},purgeUnmountedComponents:function(){s._preventPurging||Object.keys(a).filter(function(e){return!a[e].isMounted}).forEach(o)},isMounted:function(e){var t=a[e];return t?t.isMounted:!1},getChildIDs:function(e){var t=a[e];return t?t.childIDs:[]},getDisplayName:function(e){var t=a[e];return t?t.displayName:"Unknown"},getOwnerID:function(e){var t=a[e];return t?t.ownerID:null},getParentID:function(e){var t=a[e];return t?t.parentID:null},getText:function(e){var t=a[e];return t?t.text:null},getUpdateCount:function(e){var t=a[e];return t?t.updateCount:0},getRootIDs:function(){return u},getRegisteredIDs:function(){return Object.keys(a)}};n.exports=s}(e("16")),n.exports}),e.registerDynamic("ea",["d","e6","22","e7","e8","e9","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n,r,o,i){}function o(e){}var i=(e("d"),e("e6"),e("22"),[]),a={addDevtool:function(e){i.push(e)},removeDevtool:function(e){for(var t=0;t<i.length;t++)i[t]===e&&(i.splice(t,1),t--)},beginProfiling:function(){},endProfiling:function(){},getFlushHistory:function(){},onBeginFlush:function(){r("onBeginFlush")},onEndFlush:function(){r("onEndFlush")},onBeginLifeCycleTimer:function(e,t){o(e),r("onBeginLifeCycleTimer",e,t)},onEndLifeCycleTimer:function(e,t){o(e),r("onEndLifeCycleTimer",e,t)},onBeginReconcilerTimer:function(e,t){o(e),r("onBeginReconcilerTimer",e,t)},onEndReconcilerTimer:function(e,t){o(e),r("onEndReconcilerTimer",e,t)},onBeginProcessingChildContext:function(){r("onBeginProcessingChildContext")},onEndProcessingChildContext:function(){r("onEndProcessingChildContext")},onNativeOperation:function(e,t,n){o(e),r("onNativeOperation",e,t,n)},onSetState:function(){r("onSetState")},onSetDisplayName:function(e,t){o(e),r("onSetDisplayName",e,t)},onSetChildren:function(e,t){o(e),r("onSetChildren",e,t)},onSetOwner:function(e,t){o(e),r("onSetOwner",e,t)},onSetText:function(e,t){o(e),r("onSetText",e,t)},onMountRootComponent:function(e){o(e),r("onMountRootComponent",e)},onMountComponent:function(e){o(e),r("onMountComponent",e)},onUpdateComponent:function(e){o(e),r("onUpdateComponent",e)},onUnmountComponent:function(e){o(e),r("onUnmountComponent",e)}};n.exports=a}(e("16")),n.exports}),e.registerDynamic("27",["ea"],!0,function(e,t,n){"use strict";var r=e("ea");return n.exports={debugTool:r},n.exports}),e.registerDynamic("eb",["ec","27","ed","94","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||o}var o=e("ec"),i=(e("27"),e("ed"),e("94")),a=e("30");e("22");r.prototype.isReactComponent={},r.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e?a(!1):void 0,this.updater.enqueueSetState(this,e),t&&this.updater.enqueueCallback(this,t,"setState")},r.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e,"forceUpdate")};n.exports=r}(e("16")),n.exports}),e.registerDynamic("ec",["22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){}var o=(e("22"),{isMounted:function(e){return!1},enqueueCallback:function(e,t){},enqueueForceUpdate:function(e){r(e,"forceUpdate")},enqueueReplaceState:function(e,t){r(e,"replaceState")},enqueueSetState:function(e,t){r(e,"setState")}});n.exports=o}(e("16")),n.exports}),e.registerDynamic("94",["16"],!0,function(e,t,n){return function(e){"use strict";var t={};n.exports=t}(e("16")),n.exports}),e.registerDynamic("e",[],!0,function(e,t,n){"use strict";var r=function(e){var t;for(t in e)if(e.hasOwnProperty(t))return t;return null};return n.exports=r,n.exports}),e.registerDynamic("63",["6","eb","8d","3b","93","ec","94","30","58","e","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(e,t){var n=_.hasOwnProperty(t)?_[t]:null;D.hasOwnProperty(t)&&(n!==x.OVERRIDE_BASE?v(!1):void 0),e&&(n!==x.DEFINE_MANY&&n!==x.DEFINE_MANY_MERGED?v(!1):void 0)}function o(e,t){if(t){"function"==typeof t?v(!1):void 0,f.isValidElement(t)?v(!1):void 0;var n=e.prototype,o=n.__reactAutoBindPairs;t.hasOwnProperty(b)&&C.mixins(e,t.mixins);for(var i in t)if(t.hasOwnProperty(i)&&i!==b){var a=t[i],c=n.hasOwnProperty(i);if(r(c,i),C.hasOwnProperty(i))C[i](e,a);else{var l=_.hasOwnProperty(i),p="function"==typeof a,d=p&&!l&&!c&&t.autobind!==!1;if(d)o.push(i,a),n[i]=a;else if(c){var h=_[i];!l||h!==x.DEFINE_MANY_MERGED&&h!==x.DEFINE_MANY?v(!1):void 0,h===x.DEFINE_MANY_MERGED?n[i]=u(n[i],a):h===x.DEFINE_MANY&&(n[i]=s(n[i],a))}else n[i]=a}}}}function i(e,t){if(t)for(var n in t){var r=t[n];if(t.hasOwnProperty(n)){var o=n in C;o?v(!1):void 0;var i=n in e;i?v(!1):void 0,e[n]=r}}}function a(e,t){e&&t&&"object"==typeof e&&"object"==typeof t?void 0:v(!1);for(var n in t)t.hasOwnProperty(n)&&(void 0!==e[n]?v(!1):void 0,e[n]=t[n]);return e}function u(e,t){return function(){var n=e.apply(this,arguments),r=t.apply(this,arguments);if(null==n)return r;if(null==r)return n;var o={};return a(o,n),a(o,r),o}}function s(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function c(e,t){var n=t.bind(e);return n}function l(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var r=t[n],o=t[n+1];e[r]=c(e,o)}}var p=e("6"),d=e("eb"),f=e("8d"),h=(e("3b"),e("93"),e("ec")),m=e("94"),v=e("30"),g=e("58"),y=e("e"),b=(e("22"),y({mixins:null})),x=g({DEFINE_ONCE:null,DEFINE_MANY:null,OVERRIDE_BASE:null,DEFINE_MANY_MERGED:null}),E=[],_={mixins:x.DEFINE_MANY,statics:x.DEFINE_MANY,propTypes:x.DEFINE_MANY,contextTypes:x.DEFINE_MANY,childContextTypes:x.DEFINE_MANY,getDefaultProps:x.DEFINE_MANY_MERGED,getInitialState:x.DEFINE_MANY_MERGED,getChildContext:x.DEFINE_MANY_MERGED,render:x.DEFINE_ONCE,componentWillMount:x.DEFINE_MANY,componentDidMount:x.DEFINE_MANY,componentWillReceiveProps:x.DEFINE_MANY,shouldComponentUpdate:x.DEFINE_ONCE,componentWillUpdate:x.DEFINE_MANY,componentDidUpdate:x.DEFINE_MANY,componentWillUnmount:x.DEFINE_MANY,updateComponent:x.OVERRIDE_BASE},C={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)o(e,t[n])},childContextTypes:function(e,t){e.childContextTypes=p({},e.childContextTypes,t)},contextTypes:function(e,t){e.contextTypes=p({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=u(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,t){e.propTypes=p({},e.propTypes,t)},statics:function(e,t){i(e,t)},autobind:function(){}},D={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e),t&&this.updater.enqueueCallback(this,t,"replaceState")},isMounted:function(){return this.updater.isMounted(this)}},P=function(){};p(P.prototype,d.prototype,D);var w={createClass:function(e){var t=function(e,t,n){this.__reactAutoBindPairs.length&&l(this),this.props=e,this.context=t,this.refs=m,this.updater=n||h,this.state=null;var r=this.getInitialState?this.getInitialState():null;"object"!=typeof r||Array.isArray(r)?v(!1):void 0,this.state=r};t.prototype=new P,t.prototype.constructor=t,t.prototype.__reactAutoBindPairs=[],E.forEach(o.bind(null,t)),o(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),t.prototype.render?void 0:v(!1);for(var n in _)t.prototype[n]||(t.prototype[n]=null);return t},injection:{injectMixin:function(e){E.push(e)}}};n.exports=w}(e("16")),n.exports}),e.registerDynamic("bd",[],!0,function(e,t,n){"use strict";function r(e,t,n){if(!e)return null;var r={};for(var i in e)o.call(e,i)&&(r[i]=t.call(n,e[i],i,e));return r}var o=Object.prototype.hasOwnProperty;return n.exports=r,n.exports}),e.registerDynamic("ee",["8d","ef","bd","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){return o.createFactory(e)}var o=e("8d"),i=(e("ef"),e("bd")),a=i({a:"a",abbr:"abbr",address:"address",area:"area",article:"article",aside:"aside",audio:"audio",b:"b",base:"base",bdi:"bdi",bdo:"bdo",big:"big",blockquote:"blockquote",body:"body",br:"br",button:"button",canvas:"canvas",caption:"caption",cite:"cite",code:"code",col:"col",colgroup:"colgroup",data:"data",datalist:"datalist",dd:"dd",del:"del",details:"details",dfn:"dfn",dialog:"dialog",div:"div",dl:"dl",dt:"dt",em:"em",embed:"embed",fieldset:"fieldset",figcaption:"figcaption",figure:"figure",footer:"footer",form:"form",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",head:"head",header:"header",hgroup:"hgroup",hr:"hr",html:"html",i:"i",iframe:"iframe",img:"img",input:"input",ins:"ins",kbd:"kbd",keygen:"keygen",label:"label",legend:"legend",li:"li",link:"link",main:"main",map:"map",mark:"mark",menu:"menu",menuitem:"menuitem",meta:"meta",meter:"meter",nav:"nav",noscript:"noscript",object:"object",ol:"ol",optgroup:"optgroup",option:"option",output:"output",p:"p",param:"param",picture:"picture",pre:"pre",progress:"progress",q:"q",rp:"rp",rt:"rt",ruby:"ruby",s:"s",samp:"samp",script:"script",section:"section",select:"select",small:"small",source:"source",span:"span",strong:"strong",style:"style",sub:"sub",summary:"summary",sup:"sup",table:"table",tbody:"tbody",td:"td",textarea:"textarea",tfoot:"tfoot",th:"th",thead:"thead",time:"time",title:"title",tr:"tr",track:"track",u:"u",ul:"ul","var":"var",video:"video",wbr:"wbr",circle:"circle",clipPath:"clipPath",defs:"defs",ellipse:"ellipse",g:"g",image:"image",line:"line",linearGradient:"linearGradient",mask:"mask",path:"path",pattern:"pattern",polygon:"polygon",polyline:"polyline",radialGradient:"radialGradient",rect:"rect",stop:"stop",svg:"svg",text:"text",tspan:"tspan"},r);n.exports=a}(e("16")),n.exports}),e.registerDynamic("58",["30","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("30"),o=function(e){var t,n={};e instanceof Object&&!Array.isArray(e)?void 0:r(!1);for(t in e)e.hasOwnProperty(t)&&(n[t]=t);return n};n.exports=o}(e("16")),n.exports}),e.registerDynamic("3b",["58"],!0,function(e,t,n){"use strict";var r=e("58"),o=r({prop:null,context:null,childContext:null});return n.exports=o,n.exports}),e.registerDynamic("ef",["8d","3b","93","47","ed","e4","30","22","16"],!0,function(e,t,n){return function(t){"use strict";function r(){if(p.current){var e=p.current.getName();if(e)return" Check the render method of `"+e+"`."}return""}function o(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;i("uniqueKey",e,t)}}function i(e,t,n){var o=r();if(!o){var i="string"==typeof n?n:n.displayName||n.name;i&&(o=" Check the top-level render call using <"+i+">.")}var a=h[e]||(h[e]={});if(a[o])return null;a[o]=!0;var u={parentOrOwner:o,url:" See https://fb.me/react-warning-keys for more information.",childOwner:null};return t&&t._owner&&t._owner!==p.current&&(u.childOwner=" It was passed a child from "+t._owner.getName()+"."),u}function a(e,t){if("object"==typeof e)if(Array.isArray(e))for(var n=0;n<e.length;n++){var r=e[n];c.isValidElement(r)&&o(r,t)}else if(c.isValidElement(e))e._store&&(e._store.validated=!0);else if(e){var i=d(e);if(i&&i!==e.entries)for(var a,u=i.call(e);!(a=u.next()).done;)c.isValidElement(a.value)&&o(a.value,t)}}function u(e,t,n,o){for(var i in t)if(t.hasOwnProperty(i)){var a;try{"function"!=typeof t[i]?f(!1):void 0,a=t[i](n,i,e,o)}catch(u){a=u}if(a instanceof Error&&!(a.message in m)){m[a.message]=!0;r()}}}function s(e){var t=e.type;if("function"==typeof t){var n=t.displayName||t.name;t.propTypes&&u(n,t.propTypes,e.props,l.prop),"function"==typeof t.getDefaultProps}}var c=e("8d"),l=e("3b"),p=(e("93"),e("47")),d=(e("ed"),e("e4")),f=e("30"),h=(e("22"),{}),m={},v={createElement:function(e,t,n){var r="string"==typeof e||"function"==typeof e,o=c.createElement.apply(this,arguments);if(null==o)return o;if(r)for(var i=2;i<arguments.length;i++)a(arguments[i],e);return s(o),o},createFactory:function(e){var t=v.createElement.bind(null,e);return t.type=e,t},cloneElement:function(e,t,n){for(var r=c.cloneElement.apply(this,arguments),o=2;o<arguments.length;o++)a(arguments[o],r.type);return s(r),r}};n.exports=v}(e("16")),n.exports}),e.registerDynamic("93",["16"],!0,function(e,t,n){return function(e){"use strict";var t={};n.exports=t}(e("16")),n.exports}),e.registerDynamic("e4",[],!0,function(e,t,n){"use strict";function r(e){var t=e&&(o&&e[o]||e[i]);return"function"==typeof t?t:void 0}var o="function"==typeof Symbol&&Symbol.iterator,i="@@iterator";return n.exports=r,n.exports}),e.registerDynamic("3a",["8d","93","48","e4"],!0,function(e,t,n){
"use strict";function r(e,t){return e===t?0!==e||1/e===1/t:e!==e&&t!==t}function o(e){function t(t,n,r,o,i,a){if(o=o||C,a=a||r,null==n[r]){var u=x[i];return t?new Error("Required "+u+" `"+a+"` was not specified in "+("`"+o+"`.")):null}return e(n,r,o,i,a)}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function i(e){function t(t,n,r,o,i){var a=t[n],u=v(a);if(u!==e){var s=x[o],c=g(a);return new Error("Invalid "+s+" `"+i+"` of type "+("`"+c+"` supplied to `"+r+"`, expected ")+("`"+e+"`."))}return null}return o(t)}function a(){return o(E.thatReturns(null))}function u(e){function t(t,n,r,o,i){if("function"!=typeof e)return new Error("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside arrayOf.");var a=t[n];if(!Array.isArray(a)){var u=x[o],s=v(a);return new Error("Invalid "+u+" `"+i+"` of type "+("`"+s+"` supplied to `"+r+"`, expected an array."))}for(var c=0;c<a.length;c++){var l=e(a,c,r,o,i+"["+c+"]");if(l instanceof Error)return l}return null}return o(t)}function s(){function e(e,t,n,r,o){if(!b.isValidElement(e[t])){var i=x[r];return new Error("Invalid "+i+" `"+o+"` supplied to "+("`"+n+"`, expected a single ReactElement."))}return null}return o(e)}function c(e){function t(t,n,r,o,i){if(!(t[n]instanceof e)){var a=x[o],u=e.name||C,s=y(t[n]);return new Error("Invalid "+a+" `"+i+"` of type "+("`"+s+"` supplied to `"+r+"`, expected ")+("instance of `"+u+"`."))}return null}return o(t)}function l(e){function t(t,n,o,i,a){for(var u=t[n],s=0;s<e.length;s++)if(r(u,e[s]))return null;var c=x[i],l=JSON.stringify(e);return new Error("Invalid "+c+" `"+a+"` of value `"+u+"` "+("supplied to `"+o+"`, expected one of "+l+"."))}return o(Array.isArray(e)?t:function(){return new Error("Invalid argument supplied to oneOf, expected an instance of array.")})}function p(e){function t(t,n,r,o,i){if("function"!=typeof e)return new Error("Property `"+i+"` of component `"+r+"` has invalid PropType notation inside objectOf.");var a=t[n],u=v(a);if("object"!==u){var s=x[o];return new Error("Invalid "+s+" `"+i+"` of type "+("`"+u+"` supplied to `"+r+"`, expected an object."))}for(var c in a)if(a.hasOwnProperty(c)){var l=e(a,c,r,o,i+"."+c);if(l instanceof Error)return l}return null}return o(t)}function d(e){function t(t,n,r,o,i){for(var a=0;a<e.length;a++){var u=e[a];if(null==u(t,n,r,o,i))return null}var s=x[o];return new Error("Invalid "+s+" `"+i+"` supplied to "+("`"+r+"`."))}return o(Array.isArray(e)?t:function(){return new Error("Invalid argument supplied to oneOfType, expected an instance of array.")})}function f(){function e(e,t,n,r,o){if(!m(e[t])){var i=x[r];return new Error("Invalid "+i+" `"+o+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return null}return o(e)}function h(e){function t(t,n,r,o,i){var a=t[n],u=v(a);if("object"!==u){var s=x[o];return new Error("Invalid "+s+" `"+i+"` of type `"+u+"` "+("supplied to `"+r+"`, expected `object`."))}for(var c in e){var l=e[c];if(l){var p=l(a,c,r,o,i+"."+c);if(p)return p}}return null}return o(t)}function m(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(m);if(null===e||b.isValidElement(e))return!0;var t=_(e);if(!t)return!1;var n,r=t.call(e);if(t!==e.entries){for(;!(n=r.next()).done;)if(!m(n.value))return!1}else for(;!(n=r.next()).done;){var o=n.value;if(o&&!m(o[1]))return!1}return!0;default:return!1}}function v(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":t}function g(e){var t=v(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function y(e){return e.constructor&&e.constructor.name?e.constructor.name:C}var b=e("8d"),x=e("93"),E=e("48"),_=e("e4"),C="<<anonymous>>",D={array:i("array"),bool:i("boolean"),func:i("function"),number:i("number"),object:i("object"),string:i("string"),any:a(),arrayOf:u,element:s(),instanceOf:c,node:f(),objectOf:p,oneOf:l,oneOfType:d,shape:h};return n.exports=D,n.exports}),e.registerDynamic("98",[],!0,function(e,t,n){"use strict";return n.exports="15.1.0",n.exports}),e.registerDynamic("f0",[],!0,function(e,t,n){"use strict";function r(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}function o(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;10>n;n++)t["_"+String.fromCharCode(n)]=n;var r=Object.getOwnPropertyNames(t).map(function(e){return t[e]});if("0123456789"!==r.join(""))return!1;var o={};return"abcdefghijklmnopqrst".split("").forEach(function(e){o[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},o)).join("")}catch(i){return!1}}var i=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;return n.exports=o()?Object.assign:function(e,t){for(var n,o,u=r(e),s=1;s<arguments.length;s++){n=Object(arguments[s]);for(var c in n)i.call(n,c)&&(u[c]=n[c]);if(Object.getOwnPropertySymbols){o=Object.getOwnPropertySymbols(n);for(var l=0;l<o.length;l++)a.call(n,o[l])&&(u[o[l]]=n[o[l]])}}return u},n.exports}),e.registerDynamic("6",["f0"],!0,function(e,t,n){return n.exports=e("f0"),n.exports}),e.registerDynamic("47",[],!0,function(e,t,n){"use strict";var r={current:null};return n.exports=r,n.exports}),e.registerDynamic("ed",["16"],!0,function(e,t,n){return function(e){"use strict";var t=!1;n.exports=t}(e("16")),n.exports}),e.registerDynamic("8d",["6","47","22","ed","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("6"),o=e("47"),i=(e("22"),e("ed"),"function"==typeof Symbol&&Symbol["for"]&&Symbol["for"]("react.element")||60103),a={key:!0,ref:!0,__self:!0,__source:!0},u=function(e,t,n,r,o,a,u){var s={$$typeof:i,type:e,key:t,ref:n,props:u,_owner:a};return s};u.createElement=function(e,t,n){var r,i={},s=null,c=null,l=null,p=null;if(null!=t){c=void 0===t.ref?null:t.ref,s=void 0===t.key?null:""+t.key,l=void 0===t.__self?null:t.__self,p=void 0===t.__source?null:t.__source;for(r in t)t.hasOwnProperty(r)&&!a.hasOwnProperty(r)&&(i[r]=t[r])}var d=arguments.length-2;if(1===d)i.children=n;else if(d>1){for(var f=Array(d),h=0;d>h;h++)f[h]=arguments[h+2];i.children=f}if(e&&e.defaultProps){var m=e.defaultProps;for(r in m)void 0===i[r]&&(i[r]=m[r])}return u(e,s,c,l,p,o.current,i)},u.createFactory=function(e){var t=u.createElement.bind(null,e);return t.type=e,t},u.cloneAndReplaceKey=function(e,t){var n=u(e.type,t,e.ref,e._self,e._source,e._owner,e.props);return n},u.cloneElement=function(e,t,n){var i,s=r({},e.props),c=e.key,l=e.ref,p=e._self,d=e._source,f=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,f=o.current),void 0!==t.key&&(c=""+t.key);var h;e.type&&e.type.defaultProps&&(h=e.type.defaultProps);for(i in t)t.hasOwnProperty(i)&&!a.hasOwnProperty(i)&&(void 0===t[i]&&void 0!==h?s[i]=h[i]:s[i]=t[i])}var m=arguments.length-2;if(1===m)s.children=n;else if(m>1){for(var v=Array(m),g=0;m>g;g++)v[g]=arguments[g+2];s.children=v}return u(e.type,c,l,p,d,f,s)},u.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},n.exports=u}(e("16")),n.exports}),e.registerDynamic("30",["16"],!0,function(e,t,n){return function(e){"use strict";function t(e,t,n,r,o,i,a,u){if(!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,u],l=0;s=new Error(t.replace(/%s/g,function(){return c[l++]})),s.name="Invariant Violation"}throw s.framesToPop=1,s}}n.exports=t}(e("16")),n.exports}),e.registerDynamic("f1",["8d","30","16"],!0,function(e,t,n){return function(t){"use strict";function r(e){return o.isValidElement(e)?void 0:i(!1),e}var o=e("8d"),i=e("30");n.exports=r}(e("16")),n.exports}),e.registerDynamic("48",[],!0,function(e,t,n){"use strict";function r(e){return function(){return e}}function o(){}return o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},n.exports=o,n.exports}),e.registerDynamic("22",["48","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("48"),o=r;n.exports=o}(e("16")),n.exports}),e.registerDynamic("f2",["6","32","eb","63","ee","8d","ef","3a","98","f1","22","16"],!0,function(e,t,n){return function(t){"use strict";var r=e("6"),o=e("32"),i=e("eb"),a=e("63"),u=e("ee"),s=e("8d"),c=(e("ef"),e("3a")),l=e("98"),p=e("f1"),d=(e("22"),s.createElement),f=s.createFactory,h=s.cloneElement,m=r,v={Children:{map:o.map,forEach:o.forEach,count:o.count,toArray:o.toArray,only:p},Component:i,createElement:d,cloneElement:h,isValidElement:s.isValidElement,PropTypes:c,createClass:a.createClass,createFactory:f,createMixin:function(e){return e},DOM:u,version:l,__spread:m};n.exports=v}(e("16")),n.exports}),e.registerDynamic("f3",["f2"],!0,function(e,t,n){"use strict";return n.exports=e("f2"),n.exports}),e.registerDynamic("9c",["f3"],!0,function(e,t,n){return n.exports=e("f3"),n.exports}),e.register("f4",["9c"],function(e){"use strict";var t,n,r;return{setters:[function(e){t=e["default"]}],execute:function(){n=[{href:"https://github.com/frontendbr/forum",title:"Acesso nosso fórum",content:"Fórum"},{href:"https://github.com/frontendbr/vagas",title:"Publique ou encontre uma vaga",content:"Vagas"}],r=function(){return t.createElement("footer",{className:"footer",role:"contentinfo"},t.createElement("div",{className:"footer-inner"},t.createElement("div",{className:"container-flex"},t.createElement("div",{className:"footer-inner--main"},t.createElement("p",null,"Esse projeto é uma iniciativa da organização "," ",t.createElement("a",{href:"https://github.com/frontendbr"},"Front-End Brasil do GitHub."))),t.createElement("ul",{className:"footer-inner--nav"},n.map(function(e){var n=e.href,r=e.title,o=e.content;return t.createElement("li",null,t.createElement("a",{className:"btn-link",href:n,title:r},o))})))),t.createElement("div",{className:"footer-hold"},t.createElement("div",{className:"container"},t.createElement("p",null,"© 2016 "," ",t.createElement("a",{href:"https://github.com/frontendbr/"},"Front-End Brasil")))))},e("default",r)}}}),e.register("f5",["9c","9b","e3","f4"],function(e){"use strict";var t,n,r,o,i;return{setters:[function(e){t=e["default"]},function(e){n=e["default"]},function(e){r=e["default"]},function(e){o=e["default"]}],execute:function(){i=function(){return t.createElement("div",null,t.createElement(n,null),t.createElement(r,null),t.createElement(o,null))},e("default",i)}}}),e.registerDynamic("f6",[],!0,function(e,t,n){"use strict";return n.exports=function(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t},n.exports}),e.registerDynamic("f7",["f6"],!0,function(e,t,n){"use strict";var r=this;return n.exports=e("f6")(r||window||this),n.exports}),e.registerDynamic("f8",["f7"],!0,function(e,t,n){return n.exports=e("f7"),n.exports}),e.registerDynamic("f9",["cb","f8"],!0,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){function r(){g===v&&(g=v.slice())}function i(){return m}function u(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var t=!0;return r(),g.push(e),function(){if(t){t=!1,r();var n=g.indexOf(e);g.splice(n,1)}}}function l(e){if(!(0,a["default"])(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if("undefined"==typeof e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(y)throw new Error("Reducers may not dispatch actions.");try{y=!0,m=h(m,e)}finally{y=!1}for(var t=v=g,n=0;n<t.length;n++)t[n]();return e}function p(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");h=e,l({type:c.INIT})}function d(){var e,t=u;return e={subscribe:function(e){function n(){e.next&&e.next(i())}if("object"!=typeof e)throw new TypeError("Expected the observer to be an object.");n();var r=t(n);return{unsubscribe:r}}},e[s["default"]]=function(){return this},e}var f;if("function"==typeof t&&"undefined"==typeof n&&(n=t,t=void 0),"undefined"!=typeof n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(o)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var h=e,m=t,v=[],g=v,y=!1;return l({type:c.INIT}),f={dispatch:l,subscribe:u,getState:i,replaceReducer:p},f[s["default"]]=d,f}t.__esModule=!0,t.ActionTypes=void 0,t["default"]=o;var i=e("cb"),a=r(i),u=e("f8"),s=r(u),c=t.ActionTypes={INIT:"@@redux/INIT"};return n.exports}),e.registerDynamic("fa",[],!0,function(e,t,n){function r(e){return o(Object(e))}var o=Object.getPrototypeOf;return n.exports=r,n.exports}),e.registerDynamic("fb",[],!0,function(e,t,n){function r(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(n){}return t}return n.exports=r,n.exports}),e.registerDynamic("fc",[],!0,function(e,t,n){function r(e){return!!e&&"object"==typeof e}return n.exports=r,n.exports}),e.registerDynamic("cb",["fa","fb","fc"],!0,function(e,t,n){function r(e){if(!a(e)||d.call(e)!=u||i(e))return!1;var t=o(e);if(null===t)return!0;var n=l.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&c.call(n)==p}var o=e("fa"),i=e("fb"),a=e("fc"),u="[object Object]",s=Object.prototype,c=Function.prototype.toString,l=s.hasOwnProperty,p=c.call(Object),d=s.toString;return n.exports=r,n.exports}),e.registerDynamic("fd",["f9","cb","fe","16"],!0,function(e,t,n){return function(n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){var n=t&&t.type,r=n&&'"'+n.toString()+'"'||"an action";return"Given action "+r+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state.'}function i(e){Object.keys(e).forEach(function(t){var n=e[t],r=n(void 0,{type:u.ActionTypes.INIT});if("undefined"==typeof r)throw new Error('Reducer "'+t+'" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined.');var o="@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".");if("undefined"==typeof n(void 0,{type:o}))throw new Error('Reducer "'+t+'" returned undefined when probed with a random type. '+("Don't try to handle "+u.ActionTypes.INIT+' or other actions in "redux/*" ')+"namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined.")})}function a(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];"function"==typeof e[a]&&(n[a]=e[a])}var u,s=Object.keys(n);try{i(n)}catch(c){u=c}return function(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],t=arguments[1];if(u)throw u;for(var r=!1,i={},a=0;a<s.length;a++){var c=s[a],l=n[c],p=e[c],d=l(p,t);if("undefined"==typeof d){var f=o(c,t);throw new Error(f)}i[c]=d,r=r||d!==p}return r?i:e}}t.__esModule=!0,t["default"]=a;var u=e("f9"),s=e("cb"),c=(r(s),e("fe"));r(c)}(e("16")),n.exports}),e.registerDynamic("ff",[],!0,function(e,t,n){"use strict";function r(e,t){return function(){return t(e.apply(void 0,arguments))}}function o(e,t){if("function"==typeof e)return r(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),o={},i=0;i<n.length;i++){var a=n[i],u=e[a];"function"==typeof u&&(o[a]=r(u,t))}return o}return t.__esModule=!0,t["default"]=o,n.exports}),e.registerDynamic("100",["101"],!0,function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}function o(){for(var e=arguments.length,t=Array(e),n=0;e>n;n++)t[n]=arguments[n];return function(e){return function(n,r,o){var a=e(n,r,o),s=a.dispatch,c=[],l={getState:a.getState,dispatch:function(e){return s(e)}};return c=t.map(function(e){return e(l)}),s=u["default"].apply(void 0,c)(a.dispatch),i({},a,{dispatch:s})}}}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t["default"]=o;var a=e("101"),u=r(a);return n.exports}),e.registerDynamic("101",[],!0,function(e,t,n){"use strict";function r(){for(var e=arguments.length,t=Array(e),n=0;e>n;n++)t[n]=arguments[n];if(0===t.length)return function(e){return e};var r=function(){var e=t[t.length-1],n=t.slice(0,-1);return{v:function(){return n.reduceRight(function(e,t){return t(e)},e.apply(void 0,arguments))}}}();return"object"==typeof r?r.v:void 0}return t.__esModule=!0,t["default"]=r,n.exports}),e.registerDynamic("fe",[],!0,function(e,t,n){"use strict";function r(e){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(e);try{throw new Error(e)}catch(t){}}return t.__esModule=!0,t["default"]=r,n.exports}),e.registerDynamic("102",["f9","fd","ff","100","101","fe","16"],!0,function(e,t,n){return function(n){"use strict";function r(e){return e&&e.__esModule?e:{"default":e}}t.__esModule=!0,t.compose=t.applyMiddleware=t.bindActionCreators=t.combineReducers=t.createStore=void 0;var o=e("f9"),i=r(o),a=e("fd"),u=r(a),s=e("ff"),c=r(s),l=e("100"),p=r(l),d=e("101"),f=r(d),h=e("fe");r(h);t.createStore=i["default"],t.combineReducers=u["default"],t.bindActionCreators=c["default"],t.applyMiddleware=p["default"],t.compose=f["default"]}(e("16")),n.exports}),e.registerDynamic("c5",["102"],!0,function(e,t,n){return n.exports=e("102"),n.exports}),e.registerDynamic("103",[],!0,function(e,t,n){"use strict";function r(e){var t=e.dispatch,n=e.getState;return function(e){return function(r){return"function"==typeof r?r(t,n):e(r)}}}return t.__esModule=!0,t["default"]=r,n.exports}),e.registerDynamic("104",["103"],!0,function(e,t,n){return n.exports=e("103"),n.exports}),e.register("105",["104","106","e1","c5"],function(e){var t,n,r,o,i,a,u;return{setters:[function(e){t=e["default"]},function(e){n=e["default"]},function(e){r=e["default"]},function(e){o=e.createStore,i=e.compose,a=e.applyMiddleware,u=e.combineReducers}],execute:function(){"use strict";e("default",function(e){var s=e.initialState,c=void 0===s?{}:s,l=e.reducers,p=e.middlewares,d=void 0===p?[]:p,f=u(r({},l));return i(a.apply(void 0,[t].concat(n(d))))(o)(f,c)})}}}),e.registerDynamic("107",["d4","108","109","d0"],!0,function(e,t,n){var r=e("d4"),o=e("108"),i=e("109");return n.exports=e("d0")(function(){var e=Object.assign,t={},n={},r=Symbol(),o="abcdefghijklmnopqrst";return t[r]=7,o.split("").forEach(function(e){n[e]=e}),7!=e({},t)[r]||Object.keys(e({},n)).join("")!=o})?function(e,t){for(var n=o(e),a=arguments,u=a.length,s=1,c=r.getKeys,l=r.getSymbols,p=r.isEnum;u>s;)for(var d,f=i(a[s++]),h=l?c(f).concat(l(f)):c(f),m=h.length,v=0;m>v;)p.call(f,d=h[v++])&&(n[d]=f[d]);return n}:Object.assign,n.exports}),e.registerDynamic("10a",["ce","107"],!0,function(e,t,n){var r=e("ce");return r(r.S+r.F,"Object",{assign:e("107")}),n.exports}),e.registerDynamic("10b",["10a","cf"],!0,function(e,t,n){return e("10a"),n.exports=e("cf").Object.assign,n.exports}),e.registerDynamic("10c",["10b"],!0,function(e,t,n){return n.exports={"default":e("10b"),__esModule:!0},n.exports}),e.registerDynamic("e1",["10c"],!0,function(e,t,n){"use strict";var r=e("10c")["default"];return t["default"]=r||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},t.__esModule=!0,n.exports}),e.registerDynamic("108",["10d"],!0,function(e,t,n){var r=e("10d");return n.exports=function(e){return Object(r(e))},n.exports}),e.registerDynamic("10e",["10f","ce","108","110","111","112","113","114"],!0,function(e,t,n){"use strict";var r=e("10f"),o=e("ce"),i=e("108"),a=e("110"),u=e("111"),s=e("112"),c=e("113");return o(o.S+o.F*!e("114")(function(e){Array.from(e)}),"Array",{from:function(e){var t,n,o,l,p=i(e),d="function"==typeof this?this:Array,f=arguments,h=f.length,m=h>1?f[1]:void 0,v=void 0!==m,g=0,y=c(p);if(v&&(m=r(m,h>2?f[2]:void 0,2)),void 0==y||d==Array&&u(y))for(t=s(p.length),n=new d(t);t>g;g++)n[g]=v?m(p[g],g):p[g];else for(l=y.call(p),n=new d;!(o=l.next()).done;g++)n[g]=v?a(l,m,[o.value,g],!0):o.value;return n.length=g,n}}),n.exports}),e.registerDynamic("115",["116","10e","cf"],!0,function(e,t,n){return e("116"),e("10e"),n.exports=e("cf").Array.from,n.exports}),e.registerDynamic("117",["115"],!0,function(e,t,n){return n.exports={"default":e("115"),__esModule:!0},n.exports}),e.registerDynamic("106",["117"],!0,function(e,t,n){"use strict";var r=e("117")["default"];return t["default"]=function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return r(e)},t.__esModule=!0,n.exports}),e.registerDynamic("118",[],!0,function(e,t,n){return n.exports}),e.registerDynamic("119",["11a","10d"],!0,function(e,t,n){var r=e("11a"),o=e("10d");return n.exports=function(e){return function(t,n){var i,a,u=String(o(t)),s=r(n),c=u.length;return 0>s||s>=c?e?"":void 0:(i=u.charCodeAt(s),55296>i||i>56319||s+1===c||(a=u.charCodeAt(s+1))<56320||a>57343?e?u.charAt(s):i:e?u.slice(s,s+2):(i-55296<<10)+(a-56320)+65536)}},n.exports}),e.registerDynamic("116",["119","11b"],!0,function(e,t,n){"use strict";var r=e("119")(!0);return e("11b")(String,"String",function(e){this._t=String(e),this._i=0},function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})}),n.exports}),e.registerDynamic("11c",[],!0,function(e,t,n){return n.exports=function(){},n.exports}),e.registerDynamic("11d",[],!0,function(e,t,n){return n.exports=function(e,t){return{value:t,done:!!e}},n.exports}),e.registerDynamic("109",["11e"],!0,function(e,t,n){var r=e("11e");return n.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)},n.exports}),e.registerDynamic("10d",[],!0,function(e,t,n){return n.exports=function(e){if(void 0==e)throw TypeError("Can't call method on  "+e);return e},n.exports}),e.registerDynamic("d2",["109","10d"],!0,function(e,t,n){var r=e("109"),o=e("10d");return n.exports=function(e){return r(o(e))},n.exports}),e.registerDynamic("11f",["d4","120","121","122","123"],!0,function(e,t,n){"use strict";var r=e("d4"),o=e("120"),i=e("121"),a={};return e("122")(a,e("123")("iterator"),function(){return this}),n.exports=function(e,t,n){e.prototype=r.create(a,{next:o(1,n)}),i(e,t+" Iterator")},n.exports}),e.registerDynamic("11b",["124","ce","125","122","126","127","11f","121","d4","123"],!0,function(e,t,n){"use strict";var r=e("124"),o=e("ce"),i=e("125"),a=e("122"),u=e("126"),s=e("127"),c=e("11f"),l=e("121"),p=e("d4").getProto,d=e("123")("iterator"),f=!([].keys&&"next"in[].keys()),h="@@iterator",m="keys",v="values",g=function(){return this};return n.exports=function(e,t,n,y,b,x,E){c(n,t,y);var _,C,D=function(e){if(!f&&e in T)return T[e];switch(e){case m:return function(){return new n(this,e)};case v:return function(){return new n(this,e)}}return function(){return new n(this,e)}},P=t+" Iterator",w=b==v,N=!1,T=e.prototype,S=T[d]||T[h]||b&&T[b],M=S||D(b);if(S){var k=p(M.call(new e));l(k,P,!0),!r&&u(T,h)&&a(k,d,g),w&&S.name!==v&&(N=!0,M=function(){return S.call(this)})}if(r&&!E||!f&&!N&&T[d]||a(T,d,M),s[t]=M,s[P]=g,b)if(_={values:w?M:D(v),keys:x?M:D(m),entries:w?D("entries"):M},E)for(C in _)C in T||i(T,C,_[C]);else o(o.P+o.F*(f||N),t,_);return _},n.exports}),e.registerDynamic("128",["11c","11d","127","d2","11b"],!0,function(e,t,n){"use strict";var r=e("11c"),o=e("11d"),i=e("127"),a=e("d2");return n.exports=e("11b")(Array,"Array",function(e,t){this._t=a(e),this._i=0,this._k=t},function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,o(1)):"keys"==t?o(0,n):"values"==t?o(0,e[n]):o(0,[n,e[n]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries"),n.exports}),e.registerDynamic("129",["128","127"],!0,function(e,t,n){e("128");var r=e("127");return r.NodeList=r.HTMLCollection=r.Array,n.exports}),e.registerDynamic("124",[],!0,function(e,t,n){return n.exports=!0,n.exports}),e.registerDynamic("ce",["12a","cf","10f"],!0,function(e,t,n){var r=this,r=e("12a"),o=e("cf"),i=e("10f"),a="prototype",u=function(e,t,n){var s,c,l,p=e&u.F,d=e&u.G,f=e&u.S,h=e&u.P,m=e&u.B,v=e&u.W,g=d?o:o[t]||(o[t]={}),y=d?r:f?r[t]:(r[t]||{})[a];d&&(n=t);for(s in n)c=!p&&y&&s in y,c&&s in g||(l=c?y[s]:n[s],g[s]=d&&"function"!=typeof y[s]?n[s]:m&&c?i(l,r):v&&y[s]==l?function(e){var t=function(t){return this instanceof e?new e(t):e(t)};return t[a]=e[a],t}(l):h&&"function"==typeof l?i(Function.call,l):l,h&&((g[a]||(g[a]={}))[s]=l))};return u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,n.exports=u,n.exports}),e.registerDynamic("12b",[],!0,function(e,t,n){return n.exports=function(e,t,n){if(!(e instanceof t))throw TypeError(n+": use the 'new' operator!");return e},n.exports}),e.registerDynamic("110",["12c"],!0,function(e,t,n){var r=e("12c");return n.exports=function(e,t,n,o){try{return o?t(r(n)[0],n[1]):t(n)}catch(i){var a=e["return"];throw void 0!==a&&r(a.call(e)),i}},n.exports}),e.registerDynamic("111",["127","123"],!0,function(e,t,n){var r=e("127"),o=e("123")("iterator"),i=Array.prototype;return n.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)},n.exports}),e.registerDynamic("11a",[],!0,function(e,t,n){var r=Math.ceil,o=Math.floor;return n.exports=function(e){return isNaN(e=+e)?0:(e>0?o:r)(e)},n.exports}),e.registerDynamic("112",["11a"],!0,function(e,t,n){var r=e("11a"),o=Math.min;return n.exports=function(e){return e>0?o(r(e),9007199254740991):0},n.exports}),e.registerDynamic("12d",["11e","123"],!0,function(e,t,n){var r=e("11e"),o=e("123")("toStringTag"),i="Arguments"==r(function(){return arguments}());return n.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=(t=Object(e))[o])?n:i?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a},n.exports}),e.registerDynamic("127",[],!0,function(e,t,n){return n.exports={},n.exports}),e.registerDynamic("113",["12d","123","127","cf"],!0,function(e,t,n){var r=e("12d"),o=e("123")("iterator"),i=e("127");return n.exports=e("cf").getIteratorMethod=function(e){return void 0!=e?e[o]||e["@@iterator"]||i[r(e)]:void 0},n.exports}),e.registerDynamic("12e",["10f","110","111","12c","112","113"],!0,function(e,t,n){var r=e("10f"),o=e("110"),i=e("111"),a=e("12c"),u=e("112"),s=e("113");return n.exports=function(e,t,n,c){var l,p,d,f=s(e),h=r(n,c,t?2:1),m=0;if("function"!=typeof f)throw TypeError(e+" is not iterable!");if(i(f))for(l=u(e.length);l>m;m++)t?h(a(p=e[m])[0],p[1]):h(e[m]);else for(d=f.call(e);!(p=d.next()).done;)o(d,h,p.value,t)},n.exports}),e.registerDynamic("d9",["d4","12f","12c","10f"],!0,function(e,t,n){var r=e("d4").getDesc,o=e("12f"),i=e("12c"),a=function(e,t){if(i(e),!o(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};return n.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,o){try{o=e("10f")(Function.call,r(Object.prototype,"__proto__").set,2),o(t,[]),n=!(t instanceof Array)}catch(i){n=!0}return function(e,t){return a(e,t),n?e.__proto__=t:o(e,t),e}}({},!1):void 0),check:a},n.exports}),e.registerDynamic("130",[],!0,function(e,t,n){return n.exports=Object.is||function(e,t){return e===t?0!==e||1/e===1/t:e!=e&&t!=t},n.exports}),e.registerDynamic("12c",["12f"],!0,function(e,t,n){var r=e("12f");return n.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e},n.exports}),e.registerDynamic("131",["12c","132","123"],!0,function(e,t,n){var r=e("12c"),o=e("132"),i=e("123")("species");return n.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||void 0==(n=r(a)[i])?t:o(n)},n.exports}),e.registerDynamic("132",[],!0,function(e,t,n){return n.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e},n.exports}),e.registerDynamic("10f",["132"],!0,function(e,t,n){var r=e("132");return n.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,o){return e.call(t,n,r,o)}}return function(){return e.apply(t,arguments)}},n.exports}),e.registerDynamic("133",[],!0,function(e,t,n){return n.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)},n.exports}),e.registerDynamic("134",["12a"],!0,function(e,t,n){return n.exports=e("12a").document&&document.documentElement,n.exports}),e.registerDynamic("12f",[],!0,function(e,t,n){return n.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e},n.exports}),e.registerDynamic("135",["12f","12a"],!0,function(e,t,n){var r=e("12f"),o=e("12a").document,i=r(o)&&r(o.createElement);return n.exports=function(e){return i?o.createElement(e):{}},n.exports}),e.registerDynamic("136",["10f","133","134","135","12a","11e","16"],!0,function(e,t,n){return function(t){var r,o,i,a=e("10f"),u=e("133"),s=e("134"),c=e("135"),l=e("12a"),t=l.process,p=l.setImmediate,d=l.clearImmediate,f=l.MessageChannel,h=0,m={},v="onreadystatechange",g=function(){var e=+this;if(m.hasOwnProperty(e)){var t=m[e];delete m[e],t()}},y=function(e){g.call(e.data)};p&&d||(p=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return m[++h]=function(){u("function"==typeof e?e:Function(e),t)},r(h),h},d=function(e){delete m[e]},"process"==e("11e")(t)?r=function(e){t.nextTick(a(g,e,1))}:f?(o=new f,i=o.port2,o.port1.onmessage=y,r=a(i.postMessage,i,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(e){l.postMessage(e+"","*")},l.addEventListener("message",y,!1)):r=v in c("script")?function(e){s.appendChild(c("script"))[v]=function(){s.removeChild(this),g.call(e)}}:function(e){setTimeout(a(g,e,1),0)}),n.exports={set:p,clear:d}}(e("16")),n.exports}),e.registerDynamic("11e",[],!0,function(e,t,n){var r={}.toString;return n.exports=function(e){return r.call(e).slice(8,-1)},n.exports}),e.registerDynamic("137",["12a","136","11e","16"],!0,function(e,t,n){return function(t){var r,o,i,a=e("12a"),u=e("136").set,s=a.MutationObserver||a.WebKitMutationObserver,t=a.process,c=a.Promise,l="process"==e("11e")(t),p=function(){var e,n,i;for(l&&(e=t.domain)&&(t.domain=null,e.exit());r;)n=r.domain,i=r.fn,n&&n.enter(),i(),n&&n.exit(),r=r.next;o=void 0,e&&e.enter()};if(l)i=function(){t.nextTick(p)};else if(s){var d=1,f=document.createTextNode("");new s(p).observe(f,{characterData:!0}),i=function(){f.data=d=-d}}else i=c&&c.resolve?function(){c.resolve().then(p)}:function(){u.call(a,p)};n.exports=function(e){var n={fn:e,next:void 0,domain:l&&t.domain};o&&(o.next=n),r||(r=n,i()),o=n}}(e("16")),n.exports}),e.registerDynamic("120",[],!0,function(e,t,n){return n.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},n.exports}),e.registerDynamic("122",["d4","120","138"],!0,function(e,t,n){var r=e("d4"),o=e("120");return n.exports=e("138")?function(e,t,n){return r.setDesc(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e},n.exports}),e.registerDynamic("125",["122"],!0,function(e,t,n){return n.exports=e("122"),n.exports}),e.registerDynamic("139",["125"],!0,function(e,t,n){var r=e("125");return n.exports=function(e,t){for(var n in t)r(e,n,t[n]);return e},n.exports}),e.registerDynamic("126",[],!0,function(e,t,n){var r={}.hasOwnProperty;return n.exports=function(e,t){return r.call(e,t)},n.exports;
}),e.registerDynamic("121",["d4","126","123"],!0,function(e,t,n){var r=e("d4").setDesc,o=e("126"),i=e("123")("toStringTag");return n.exports=function(e,t,n){e&&!o(e=n?e:e.prototype,i)&&r(e,i,{configurable:!0,value:t})},n.exports}),e.registerDynamic("d4",[],!0,function(e,t,n){var r=Object;return n.exports={create:r.create,getProto:r.getPrototypeOf,isEnum:{}.propertyIsEnumerable,getDesc:r.getOwnPropertyDescriptor,setDesc:r.defineProperty,setDescs:r.defineProperties,getKeys:r.keys,getNames:r.getOwnPropertyNames,getSymbols:r.getOwnPropertySymbols,each:[].forEach},n.exports}),e.registerDynamic("d0",[],!0,function(e,t,n){return n.exports=function(e){try{return!!e()}catch(t){return!0}},n.exports}),e.registerDynamic("138",["d0"],!0,function(e,t,n){return n.exports=!e("d0")(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}),n.exports}),e.registerDynamic("13a",["cf","d4","138","123"],!0,function(e,t,n){"use strict";var r=e("cf"),o=e("d4"),i=e("138"),a=e("123")("species");return n.exports=function(e){var t=r[e];i&&t&&!t[a]&&o.setDesc(t,a,{configurable:!0,get:function(){return this}})},n.exports}),e.registerDynamic("13b",["12a"],!0,function(e,t,n){var r=this,r=e("12a"),o="__core-js_shared__",i=r[o]||(r[o]={});return n.exports=function(e){return i[e]||(i[e]={})},n.exports}),e.registerDynamic("13c",[],!0,function(e,t,n){var r=0,o=Math.random();return n.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++r+o).toString(36))},n.exports}),e.registerDynamic("12a",[],!0,function(e,t,n){var r=this,r=n.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();return"number"==typeof __g&&(__g=r),n.exports}),e.registerDynamic("123",["13b","13c","12a"],!0,function(e,t,n){var r=e("13b")("wks"),o=e("13c"),i=e("12a").Symbol;return n.exports=function(e){return r[e]||(r[e]=i&&i[e]||(i||o)("Symbol."+e))},n.exports}),e.registerDynamic("114",["123"],!0,function(e,t,n){var r=e("123")("iterator"),o=!1;try{var i=[7][r]();i["return"]=function(){o=!0},Array.from(i,function(){throw 2})}catch(a){}return n.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i=[7],a=i[r]();a.next=function(){n=!0},i[r]=function(){return a},e(i)}catch(u){}return n},n.exports}),e.registerDynamic("13d",[],!0,function(e,t,n){function r(){l&&u&&(l=!1,u.length?c=u.concat(c):p=-1,c.length&&o())}function o(){if(!l){var e=setTimeout(r);l=!0;for(var t=c.length;t;){for(u=c,c=[];++p<t;)u&&u[p].run();p=-1,t=c.length}u=null,l=!1,clearTimeout(e)}}function i(e,t){this.fun=e,this.array=t}function a(){}var u,s=n.exports={},c=[],l=!1,p=-1;return s.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new i(e,t)),1!==c.length||l||setTimeout(o,0)},i.prototype.run=function(){this.fun.apply(null,this.array)},s.title="browser",s.browser=!0,s.env={},s.argv=[],s.version="",s.versions={},s.on=a,s.addListener=a,s.once=a,s.off=a,s.removeListener=a,s.removeAllListeners=a,s.emit=a,s.binding=function(e){throw new Error("process.binding is not supported")},s.cwd=function(){return"/"},s.chdir=function(e){throw new Error("process.chdir is not supported")},s.umask=function(){return 0},n.exports}),e.registerDynamic("13e",["13d"],!0,function(e,t,n){return n.exports=e("13d"),n.exports}),e.registerDynamic("13f",["13e"],!0,function(t,n,r){return r.exports=e._nodeRequire?process:t("13e"),r.exports}),e.registerDynamic("16",["13f"],!0,function(e,t,n){return n.exports=e("13f"),n.exports}),e.registerDynamic("140",["d4","124","12a","10f","12d","ce","12f","12c","132","12b","12e","d9","130","123","131","137","138","139","121","13a","cf","114","16"],!0,function(e,t,n){return function(t){"use strict";var n,r=e("d4"),o=e("124"),i=e("12a"),a=e("10f"),u=e("12d"),s=e("ce"),c=e("12f"),l=e("12c"),p=e("132"),d=e("12b"),f=e("12e"),h=e("d9").set,m=e("130"),v=e("123")("species"),g=e("131"),y=e("137"),b="Promise",t=i.process,x="process"==u(t),E=i[b],_=function(e){var t=new E(function(){});return e&&(t.constructor=Object),E.resolve(t)===t},C=function(){function t(e){var n=new E(e);return h(n,t.prototype),n}var n=!1;try{if(n=E&&E.resolve&&_(),h(t,E),t.prototype=r.create(E.prototype,{constructor:{value:t}}),t.resolve(5).then(function(){})instanceof t||(n=!1),n&&e("138")){var o=!1;E.resolve(r.setDesc({},"then",{get:function(){o=!0}})),n=o}}catch(i){n=!1}return n}(),D=function(e,t){return o&&e===E&&t===n?!0:m(e,t)},P=function(e){var t=l(e)[v];return void 0!=t?t:e},w=function(e){var t;return c(e)&&"function"==typeof(t=e.then)?t:!1},N=function(e){var t,n;this.promise=new e(function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r}),this.resolve=p(t),this.reject=p(n)},T=function(e){try{e()}catch(t){return{error:t}}},S=function(e,n){if(!e.n){e.n=!0;var r=e.c;y(function(){for(var o=e.v,a=1==e.s,u=0,s=function(t){var n,r,i=a?t.ok:t.fail,u=t.resolve,s=t.reject;try{i?(a||(e.h=!0),n=i===!0?o:i(o),n===t.promise?s(TypeError("Promise-chain cycle")):(r=w(n))?r.call(n,u,s):u(n)):s(o)}catch(c){s(c)}};r.length>u;)s(r[u++]);r.length=0,e.n=!1,n&&setTimeout(function(){var n,r,a=e.p;M(a)&&(x?t.emit("unhandledRejection",o,a):(n=i.onunhandledrejection)?n({promise:a,reason:o}):(r=i.console)&&r.error&&r.error("Unhandled promise rejection",o)),e.a=void 0},1)})}},M=function(e){var t,n=e._d,r=n.a||n.c,o=0;if(n.h)return!1;for(;r.length>o;)if(t=r[o++],t.fail||!M(t.promise))return!1;return!0},k=function(e){var t=this;t.d||(t.d=!0,t=t.r||t,t.v=e,t.s=2,t.a=t.c.slice(),S(t,!0))},O=function(e){var t,n=this;if(!n.d){n.d=!0,n=n.r||n;try{if(n.p===e)throw TypeError("Promise can't be resolved itself");(t=w(e))?y(function(){var r={r:n,d:!1};try{t.call(e,a(O,r,1),a(k,r,1))}catch(o){k.call(r,o)}}):(n.v=e,n.s=1,S(n,!1))}catch(r){k.call({r:n,d:!1},r)}}};C||(E=function(e){p(e);var t=this._d={p:d(this,E,b),c:[],a:void 0,s:0,d:!1,v:void 0,h:!1,n:!1};try{e(a(O,t,1),a(k,t,1))}catch(n){k.call(t,n)}},e("139")(E.prototype,{then:function(e,t){var n=new N(g(this,E)),r=n.promise,o=this._d;return n.ok="function"==typeof e?e:!0,n.fail="function"==typeof t&&t,o.c.push(n),o.a&&o.a.push(n),o.s&&S(o,!1),r},"catch":function(e){return this.then(void 0,e)}})),s(s.G+s.W+s.F*!C,{Promise:E}),e("121")(E,b),e("13a")(b),n=e("cf")[b],s(s.S+s.F*!C,b,{reject:function(e){var t=new N(this),n=t.reject;return n(e),t.promise}}),s(s.S+s.F*(!C||_(!0)),b,{resolve:function(e){if(e instanceof E&&D(e.constructor,this))return e;var t=new N(this),n=t.resolve;return n(e),t.promise}}),s(s.S+s.F*!(C&&e("114")(function(e){E.all(e)["catch"](function(){})})),b,{all:function(e){var t=P(this),n=new N(t),o=n.resolve,i=n.reject,a=[],u=T(function(){f(e,!1,a.push,a);var n=a.length,u=Array(n);n?r.each.call(a,function(e,r){var a=!1;t.resolve(e).then(function(e){a||(a=!0,u[r]=e,--n||o(u))},i)}):o(u)});return u&&i(u.error),n.promise},race:function(e){var t=P(this),n=new N(t),r=n.reject,o=T(function(){f(e,!1,function(e){t.resolve(e).then(n.resolve,r)})});return o&&r(o.error),n.promise}})}(e("16")),n.exports}),e.registerDynamic("cf",[],!0,function(e,t,n){var r=n.exports={version:"1.2.6"};return"number"==typeof __e&&(__e=r),n.exports}),e.registerDynamic("141",["118","116","129","140","cf"],!0,function(e,t,n){return e("118"),e("116"),e("129"),e("140"),n.exports=e("cf").Promise,n.exports}),e.registerDynamic("142",["141"],!0,function(e,t,n){return n.exports={"default":e("141"),__esModule:!0},n.exports}),e.registerDynamic("143",[],!0,function(e,t,n){var r;return!function(e,o){"use strict";"function"==typeof r&&r.amd?r("ajax",o):"object"==typeof t?t=n.exports=o():e.ajax=o()}(this,function(){"use strict";function e(e){var r=["get","post","put","delete"];return e=e||{},e.baseUrl=e.baseUrl||"",e.method&&e.url?n(e.method,e.baseUrl+e.url,t(e.data),e):r.reduce(function(r,o){return r[o]=function(r,i){return n(o,e.baseUrl+r,t(i),e)},r},{})}function t(e){return e||null}function n(e,t,n,o){var a=["then","catch","always"],s=a.reduce(function(e,t){return e[t]=function(n){return e[t]=n,e},e},{}),c=new XMLHttpRequest;return c.open(e,t,!0),r(c,o.headers),c.addEventListener("readystatechange",i(s,c),!1),c.send(u(n)),s}function r(e,t){t=t||{},o(t)||(t["Content-Type"]="application/x-www-form-urlencoded"),Object.keys(t).forEach(function(n){t[n]&&e.setRequestHeader(n,t[n])})}function o(e){return Object.keys(e).some(function(e){return"content-type"===e.toLowerCase()})}function i(e,t){return function n(){t.readyState===t.DONE&&(t.removeEventListener("readystatechange",n,!1),e.always.apply(e,a(t)),t.status>=200&&t.status<300?e.then.apply(e,a(t)):e["catch"].apply(e,a(t)))}}function a(e){var t;try{t=JSON.parse(e.responseText)}catch(n){t=e.responseText}return[t,e]}function u(e){return s(e)?c(e):e}function s(e){return"[object Object]"===Object.prototype.toString.call(e)}function c(e){return Object.keys(e).reduce(function(t,n){var r=t?t+"&":"";return r+l(n)+"="+l(e[n])},"")}function l(e){return encodeURIComponent(e)}return e}),n.exports}),e.registerDynamic("144",["143"],!0,function(e,t,n){return n.exports=e("143"),n.exports}),e.register("2",["142","144","a1"],function(e){var t,n,r,o,i,a;return{setters:[function(e){t=e["default"]},function(e){n=e["default"]},function(e){r=e.FETCH_EVENTS,o=e.EVENTS_SUCCESS,i=e.EVENTS_FAILED}],execute:function(){"use strict";a=function(){return function(e,a){var u=a().events.isFetching;return u?t.resolve():(e({type:r}),void n().get("data/events.json").then(function(t){e({type:o,payload:t})})["catch"](function(t){e({type:i})}))}},e("fetchEvents",a)}}}),e.register("a1",["2"],function(e){"use strict";var t,n,r;return{setters:[function(t){var n={};n.fetchEvents=t.fetchEvents,e(n)}],execute:function(){t="FETCH_EVENTS",e("FETCH_EVENTS",t),n="EVENTS_SUCCESS",e("EVENTS_SUCCESS",n),r="EVENTS_FAILED",e("EVENTS_FAILED",r)}}}),e.register("145",["106","e1","a1"],function(e){var t,n,r,o,i,a,u;return{setters:[function(e){t=e["default"]},function(e){n=e["default"]},function(e){r=e.FETCH_EVENTS,o=e.EVENTS_SUCCESS,i=e.EVENTS_FAILED}],execute:function(){"use strict";a={events:[{title:"...",date:{day:0,month:"",year:0},image:""},{title:"...",date:{day:0,month:"",year:0}},{title:"...",date:{day:0,month:"",year:0}},{title:"...",date:{day:0,month:"",year:0}},{title:"...",date:{day:0,month:"",year:0}}],isFetching:!1},u=function(e,u){switch(void 0===e&&(e=a),u.type){case r:return n({},e,{isFetching:!0});case o:return n({},e,{events:[].concat(t(u.payload)),isFetching:!1});case i:return n({},e,{isFetching:!1})}return e},e("default",u)}}}),e.register("146",["145"],function(e){"use strict";var t;return{setters:[function(e){t=e["default"]}],execute:function(){e("default",{events:t})}}}),e.register("1",["105","146","9c","9a","a2","f5"],function(e){"use strict";var t,n,r,o,i,a,u;return{setters:[function(e){t=e["default"]},function(e){n=e["default"]},function(e){r=e["default"]},function(e){o=e.render},function(e){i=e.Provider},function(e){a=e["default"]}],execute:function(){u=t({reducers:n}),o(r.createElement(i,{store:u},r.createElement(a,null)),document.querySelector('[data-js="app"]'))}}})})(function(e){e()});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4ubWluLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9GYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1N5bnRoZXRpY0lucHV0RXZlbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL0NoYW5nZUV2ZW50UGx1Z2luLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9EZWZhdWx0RXZlbnRQbHVnaW5PcmRlci5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9IVE1MRE9NUHJvcGVydHlDb25maWcuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL0F1dG9Gb2N1c1V0aWxzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vZmJqc0AwLjguMi9saWIvY2FtZWxpemUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9mYmpzQDAuOC4yL2xpYi9jYW1lbGl6ZVN0eWxlTmFtZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvQ1NTUHJvcGVydHkuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL2Rhbmdlcm91c1N0eWxlVmFsdWUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9mYmpzQDAuOC4yL2xpYi9oeXBoZW5hdGUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9mYmpzQDAuOC4yL2xpYi9oeXBoZW5hdGVTdHlsZU5hbWUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9mYmpzQDAuOC4yL2xpYi9tZW1vaXplU3RyaW5nT25seS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvQ1NTUHJvcGVydHlPcGVyYXRpb25zLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdERPTUlET3BlcmF0aW9ucy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0RE9NQnV0dG9uLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdERPTUlucHV0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdERPTU9wdGlvbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RET01TZWxlY3QuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL0Rpc2FibGVkSW5wdXRVdGlscy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RET01Vbmtub3duUHJvcGVydHlEZXZ0b29sLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdERPTURlYnVnVG9vbC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RET01JbnN0cnVtZW50YXRpb24uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9ET01Qcm9wZXJ0eU9wZXJhdGlvbnMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL0xpbmtlZFZhbHVlVXRpbHMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0RE9NVGV4dGFyZWEuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0Q2hpbGRSZWNvbmNpbGVyLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9mbGF0dGVuQ2hpbGRyZW4uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0TXVsdGlDaGlsZC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RET01Db21wb25lbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0RE9NRW1wdHlDb21wb25lbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0RE9NVHJlZVRyYXZlcnNhbC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ZianNAMC44LjIvbGliL2NyZWF0ZUFycmF5RnJvbU1peGVkLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vZmJqc0AwLjguMi9saWIvY3JlYXRlTm9kZXNGcm9tTWFya3VwLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vZmJqc0AwLjguMi9saWIvZ2V0TWFya3VwV3JhcC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvRGFuZ2VyLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdERPTVRleHRDb21wb25lbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9mYmpzQDAuOC4yL2xpYi9nZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RFdmVudExpc3RlbmVyLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdEluamVjdGlvbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvU1ZHRE9NUHJvcGVydHlDb25maWcuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL2dldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL2dldFRleHRDb250ZW50QWNjZXNzb3IuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0RE9NU2VsZWN0aW9uLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vZmJqc0AwLjguMi9saWIvaXNOb2RlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vZmJqc0AwLjguMi9saWIvaXNUZXh0Tm9kZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ZianNAMC44LjIvbGliL2NvbnRhaW5zTm9kZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ZianNAMC44LjIvbGliL2ZvY3VzTm9kZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RJbnB1dFNlbGVjdGlvbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ZianNAMC44LjIvbGliL2dldEFjdGl2ZUVsZW1lbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL2lzVGV4dElucHV0RWxlbWVudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ZianNAMC44LjIvbGliL3NoYWxsb3dFcXVhbC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvU2VsZWN0RXZlbnRQbHVnaW4uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9mYmpzQDAuOC4yL2xpYi9FdmVudExpc3RlbmVyLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9FdmVudFByb3BhZ2F0b3JzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9TeW50aGV0aWNBbmltYXRpb25FdmVudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvU3ludGhldGljQ2xpcGJvYXJkRXZlbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1N5bnRoZXRpY0ZvY3VzRXZlbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL2dldEV2ZW50S2V5LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9TeW50aGV0aWNLZXlib2FyZEV2ZW50LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9TeW50aGV0aWNEcmFnRXZlbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1N5bnRoZXRpY1RvdWNoRXZlbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1N5bnRoZXRpY1RyYW5zaXRpb25FdmVudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvU3ludGhldGljRXZlbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL2dldEV2ZW50VGFyZ2V0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9TeW50aGV0aWNVSUV2ZW50LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9nZXRFdmVudE1vZGlmaWVyU3RhdGUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1N5bnRoZXRpY01vdXNlRXZlbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1N5bnRoZXRpY1doZWVsRXZlbnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL2dldEV2ZW50Q2hhckNvZGUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1NpbXBsZUV2ZW50UGx1Z2luLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdERlZmF1bHRJbmplY3Rpb24uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL2ZpbmRET01Ob2RlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9nZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9ET01OYW1lc3BhY2VzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL3NldFRleHRDb250ZW50LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9ET01MYXp5VHJlZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvRXZlbnRQbHVnaW5SZWdpc3RyeS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvRXZlbnRDb25zdGFudHMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL0V2ZW50UGx1Z2luVXRpbHMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL2FjY3VtdWxhdGVJbnRvLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9mb3JFYWNoQWNjdW11bGF0ZWQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL0V2ZW50UGx1Z2luSHViLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdEV2ZW50RW1pdHRlck1peGluLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9WaWV3cG9ydE1ldHJpY3MuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL2dldFZlbmRvclByZWZpeGVkRXZlbnROYW1lLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9pc0V2ZW50U3VwcG9ydGVkLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL0RPTVByb3BlcnR5LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdERPTUNvbXBvbmVudEZsYWdzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdERPTUNvbXBvbmVudFRyZWUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL3ZhbGlkYXRlRE9NTmVzdGluZy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RET01Db250YWluZXJJbmZvLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdERPTUZlYXR1cmVGbGFncy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvYWRsZXIzMi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RNYXJrdXBDaGVja3N1bS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RFcnJvclV0aWxzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdE5vZGVUeXBlcy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RJbnN0YW5jZU1hcC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvQ2FsbGJhY2tRdWV1ZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RGZWF0dXJlRmxhZ3MuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0T3duZXIuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0UmVmLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdFJlY29uY2lsZXIuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1RyYW5zYWN0aW9uLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdFVwZGF0ZXMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0VXBkYXRlUXVldWUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdEVtcHR5Q29tcG9uZW50LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdE5hdGl2ZUNvbXBvbmVudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvc2V0SW5uZXJIVE1MLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RNb3VudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvcmVuZGVyU3VidHJlZUludG9Db250YWluZXIuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0RE9NLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3QtZG9tQDE1LjEuMC9pbmRleC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0LWRvbUAxNS4xLjAuanMiLCJjb250YWluZXJzL2FwcC9tYWluLWhlYWRlci5qcyIsImNvbXBvbmVudHMvYmFubmVyLWJveC5qcyIsImNvbnRhaW5lcnMvbWFpbi1jb250ZW50L2hlYWRlci1iYW5uZXIuanMiLCJjb250YWluZXJzL21haW4tY29udGVudC9oZWFkZXIuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdC1yZWR1eEA0LjQuNS9saWIvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjAuMi9saWIvUG9vbGVkQ2xhc3MuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4wLjIvbGliL0tleUVzY2FwZVV0aWxzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMC4yL2xpYi90cmF2ZXJzZUFsbENoaWxkcmVuLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMC4yL2xpYi9SZWFjdENoaWxkcmVuLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMC4yL2xpYi9SZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMC4yL2xpYi9SZWFjdERlYnVnVG9vbC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjAuMi9saWIvUmVhY3RJbnN0cnVtZW50YXRpb24uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4wLjIvbGliL1JlYWN0Q29tcG9uZW50LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMC4yL2xpYi9SZWFjdE5vb3BVcGRhdGVRdWV1ZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjAuMi9saWIvUmVhY3RDbGFzcy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjAuMi9saWIvUmVhY3RET01GYWN0b3JpZXMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4wLjIvbGliL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4wLjIvbGliL1JlYWN0RWxlbWVudFZhbGlkYXRvci5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjAuMi9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4wLjIvbGliL2dldEl0ZXJhdG9yRm4uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4wLjIvbGliL1JlYWN0UHJvcFR5cGVzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMC4yL2xpYi9SZWFjdFZlcnNpb24uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4wLjIvbGliL1JlYWN0Q3VycmVudE93bmVyLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMC4yL2xpYi9jYW5EZWZpbmVQcm9wZXJ0eS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjAuMi9saWIvUmVhY3RFbGVtZW50LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMC4yL2xpYi9vbmx5Q2hpbGQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4wLjIvbGliL1JlYWN0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMC4yL3JlYWN0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMC4yLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3QtcmVkdXhANC40LjUvbGliL3V0aWxzL3N0b3JlU2hhcGUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdC1yZWR1eEA0LjQuNS9saWIvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3QtcmVkdXhANC40LjUvbGliL3V0aWxzL3dyYXBBY3Rpb25DcmVhdG9ycy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0LXJlZHV4QDQuNC41L2xpYi91dGlscy93YXJuaW5nLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3NAMS4wLjUvaW5kZXguanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9ob2lzdC1ub24tcmVhY3Qtc3RhdGljc0AxLjAuNS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ludmFyaWFudEAyLjIuMS9icm93c2VyLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vaW52YXJpYW50QDIuMi4xLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3QtcmVkdXhANC40LjUvbGliL2NvbXBvbmVudHMvY29ubmVjdC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0LXJlZHV4QDQuNC41L2xpYi9pbmRleC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0LXJlZHV4QDQuNC41LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5vYmplY3Qtc2FwLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvZm4vb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2JhYmVsLXJ1bnRpbWVANS44LjM4L2NvcmUtanMvb2JqZWN0L2dldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2JhYmVsLXJ1bnRpbWVANS44LjM4L2hlbHBlcnMvZ2V0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9iYWJlbC1ydW50aW1lQDUuOC4zOC9jb3JlLWpzL29iamVjdC9jcmVhdGUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvZm4vb2JqZWN0L3NldC1wcm90b3R5cGUtb2YuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9iYWJlbC1ydW50aW1lQDUuOC4zOC9jb3JlLWpzL29iamVjdC9zZXQtcHJvdG90eXBlLW9mLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vYmFiZWwtcnVudGltZUA1LjguMzgvaGVscGVycy9pbmhlcml0cy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9mbi9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vYmFiZWwtcnVudGltZUA1LjguMzgvY29yZS1qcy9vYmplY3QvZGVmaW5lLXByb3BlcnR5LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vYmFiZWwtcnVudGltZUA1LjguMzgvaGVscGVycy9jcmVhdGUtY2xhc3MuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9iYWJlbC1ydW50aW1lQDUuOC4zOC9oZWxwZXJzL2NsYXNzLWNhbGwtY2hlY2suanMiLCJjb21wb25lbnRzL2xhenktaW1nLmpzIiwiY29tcG9uZW50cy9zdmctaWNvbi5qcyIsImNvbXBvbmVudHMvZXZlbnQtbGlzdC1pdGVtLmpzIiwiY29udGFpbmVycy9tYWluLWNvbnRlbnQvcGFnZS5qcyIsImNvbnRhaW5lcnMvbWFpbi1jb250ZW50L2FzaWRlLmpzIiwiY29udGFpbmVycy9tYWluLWNvbnRlbnQvaW5kZXguanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1Bvb2xlZENsYXNzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9LZXlFc2NhcGVVdGlscy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvdHJhdmVyc2VBbGxDaGlsZHJlbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RDaGlsZHJlbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ZianNAMC44LjIvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vZmJqc0AwLjguMi9saWIvcGVyZm9ybWFuY2UuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9mYmpzQDAuOC4yL2xpYi9wZXJmb3JtYW5jZU5vdy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RJbnZhbGlkU2V0U3RhdGVXYXJuaW5nRGV2VG9vbC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3ROYXRpdmVPcGVyYXRpb25IaXN0b3J5RGV2dG9vbC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3REZWJ1Z1Rvb2wuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0SW5zdHJ1bWVudGF0aW9uLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdENvbXBvbmVudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3ROb29wVXBkYXRlUXVldWUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9mYmpzQDAuOC4yL2xpYi9lbXB0eU9iamVjdC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ZianNAMC44LjIvbGliL2tleU9mLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdENsYXNzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vZmJqc0AwLjguMi9saWIvbWFwT2JqZWN0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdERPTUZhY3Rvcmllcy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ZianNAMC44LjIvbGliL2tleU1pcnJvci5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RFbGVtZW50VmFsaWRhdG9yLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvZ2V0SXRlcmF0b3JGbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvUmVhY3RQcm9wVHlwZXMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0VmVyc2lvbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL29iamVjdC1hc3NpZ25ANC4xLjAvaW5kZXguanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9vYmplY3QtYXNzaWduQDQuMS4wLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL2xpYi9SZWFjdEN1cnJlbnRPd25lci5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvY2FuRGVmaW5lUHJvcGVydHkuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0RWxlbWVudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ZianNAMC44LjIvbGliL2ludmFyaWFudC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlYWN0QDE1LjEuMC9saWIvb25seUNoaWxkLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vZmJqc0AwLjguMi9saWIvZW1wdHlGdW5jdGlvbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2ZianNAMC44LjIvbGliL3dhcm5pbmcuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWFjdEAxNS4xLjAvbGliL1JlYWN0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wL3JlYWN0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVhY3RAMTUuMS4wLmpzIiwiY29udGFpbmVycy9hcHAvbWFpbi1mb290ZXIuanMiLCJjb250YWluZXJzL2FwcC9pbmRleC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3N5bWJvbC1vYnNlcnZhYmxlQDAuMi40L3BvbnlmaWxsLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vc3ltYm9sLW9ic2VydmFibGVAMC4yLjQvaW5kZXguanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9zeW1ib2wtb2JzZXJ2YWJsZUAwLjIuNC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlZHV4QDMuNS4yL2xpYi9jcmVhdGVTdG9yZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2xvZGFzaEA0LjExLjEvX2dldFByb3RvdHlwZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2xvZGFzaEA0LjExLjEvX2lzSG9zdE9iamVjdC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2xvZGFzaEA0LjExLjEvaXNPYmplY3RMaWtlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vbG9kYXNoQDQuMTEuMS9pc1BsYWluT2JqZWN0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVkdXhAMy41LjIvbGliL2NvbWJpbmVSZWR1Y2Vycy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlZHV4QDMuNS4yL2xpYi9iaW5kQWN0aW9uQ3JlYXRvcnMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWR1eEAzLjUuMi9saWIvYXBwbHlNaWRkbGV3YXJlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVkdXhAMy41LjIvbGliL2NvbXBvc2UuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9yZWR1eEAzLjUuMi9saWIvdXRpbHMvd2FybmluZy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlZHV4QDMuNS4yL2xpYi9pbmRleC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3JlZHV4QDMuNS4yLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVkdXgtdGh1bmtAMi4wLjEvbGliL2luZGV4LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vcmVkdXgtdGh1bmtAMi4wLjEuanMiLCJzdG9yZS9jb25maWd1cmUtc3RvcmUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLm9iamVjdC1hc3NpZ24uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9mbi9vYmplY3QvYXNzaWduLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vYmFiZWwtcnVudGltZUA1LjguMzgvY29yZS1qcy9vYmplY3QvYXNzaWduLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vYmFiZWwtcnVudGltZUA1LjguMzgvaGVscGVycy9leHRlbmRzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC50by1vYmplY3QuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9mbi9hcnJheS9mcm9tLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vYmFiZWwtcnVudGltZUA1LjguMzgvY29yZS1qcy9hcnJheS9mcm9tLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vYmFiZWwtcnVudGltZUA1LjguMzgvaGVscGVycy90by1jb25zdW1hYmxlLWFycmF5LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLnN0cmluZy1hdC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLmFkZC10by11bnNjb3BhYmxlcy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQuaXRlci1zdGVwLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5pb2JqZWN0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5kZWZpbmVkLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC50by1pb2JqZWN0LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5pdGVyLWNyZWF0ZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQuaXRlci1kZWZpbmUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5saWJyYXJ5LmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5leHBvcnQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLnN0cmljdC1uZXcuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLml0ZXItY2FsbC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQuaXMtYXJyYXktaXRlci5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQudG8taW50ZWdlci5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQudG8tbGVuZ3RoLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5jbGFzc29mLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5pdGVyYXRvcnMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLmZvci1vZi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQuc2V0LXByb3RvLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5zYW1lLXZhbHVlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5hbi1vYmplY3QuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLnNwZWNpZXMtY29uc3RydWN0b3IuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLmEtZnVuY3Rpb24uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLmN0eC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQuaW52b2tlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5odG1sLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5pcy1vYmplY3QuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLmRvbS1jcmVhdGUuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLnRhc2suanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLmNvZi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQubWljcm90YXNrLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5wcm9wZXJ0eS1kZXNjLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5oaWRlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5yZWRlZmluZS5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQucmVkZWZpbmUtYWxsLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5oYXMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLnNldC10by1zdHJpbmctdGFnLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQuZmFpbHMuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLmRlc2NyaXB0b3JzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5zZXQtc3BlY2llcy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQuc2hhcmVkLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC51aWQuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9jb3JlLWpzQDEuMi42L2xpYnJhcnkvbW9kdWxlcy8kLmdsb2JhbC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzLyQud2tzLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5pdGVyLWRldGVjdC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL3Byb2Nlc3NAMC4xMS4zL2Jyb3dzZXIuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9wcm9jZXNzQDAuMTEuMy5qcyIsIi4uL2pzcG1fcGFja2FnZXMvZ2l0aHViL2pzcG0vbm9kZWxpYnMtcHJvY2Vzc0AwLjEuMi9pbmRleC5qcyIsIi4uL2pzcG1fcGFja2FnZXMvZ2l0aHViL2pzcG0vbm9kZWxpYnMtcHJvY2Vzc0AwLjEuMi5qcyIsIi4uL2pzcG1fcGFja2FnZXMvbnBtL2NvcmUtanNAMS4yLjYvbGlicmFyeS9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L21vZHVsZXMvJC5jb3JlLmpzIiwiLi4vanNwbV9wYWNrYWdlcy9ucG0vY29yZS1qc0AxLjIuNi9saWJyYXJ5L2ZuL3Byb21pc2UuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9iYWJlbC1ydW50aW1lQDUuOC4zOC9jb3JlLWpzL3Byb21pc2UuanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9AZmRhY2l1ay9hamF4QDIuMC4xL2Rpc3QvYWpheC5taW4uanMiLCIuLi9qc3BtX3BhY2thZ2VzL25wbS9AZmRhY2l1ay9hamF4QDIuMC4xLmpzIiwiYWN0aW9ucy9ldmVudHMuanMiLCJhY3Rpb25zL2luZGV4LmpzIiwicmVkdWNlcnMvZXZlbnRzLmpzIiwicmVkdWNlcnMvaW5kZXguanMiLCJpbmRleC5qcyJdLCJuYW1lcyI6WyJlIiwiciIsIm8iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ0IiwiYXBwbHkiLCJ0aGlzIiwibiIsImRlY2xhcmF0aXZlIiwiZGVwcyIsImRlY2xhcmUiLCJleGVjdXRpbmdSZXF1aXJlIiwiZXhlY3V0ZSIsIm5hbWUiLCJnIiwibm9ybWFsaXplZERlcHMiLCJncm91cEluZGV4IiwibSIsImNhbGwiLCJwdXNoIiwiYSIsInUiLCJldmFsdWF0ZWQiLCJkIiwic3BsaWNlIiwiVHlwZUVycm9yIiwiaSIsInMiLCJsIiwiRCIsImRlcGVuZGVuY2llcyIsImV4cG9ydHMiLCJpbXBvcnRlcnMiLCJtb2R1bGUiLCJsb2NrZWQiLCJzZXR0ZXJzIiwiYyIsImYiLCJlc01vZHVsZSIsInYiLCJwIiwiRXJyb3IiLCJfX3VzZURlZmF1bHQiLCJpZCIsIl9fZXNNb2R1bGUiLCJoYXNPd25Qcm9wZXJ0eSIsImgiLCJ5IiwidmFsdWUiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJJIiwic3Vic3RyIiwiXyIsIkFycmF5IiwicHJvdG90eXBlIiwiaW5kZXhPZiIsIngiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIlN5c3RlbSIsIl9ub2RlUmVxdWlyZSIsInJlcXVpcmUiLCJyZXNvbHZlIiwicHJvY2VzcyIsIkBlbXB0eSIsInJlZ2lzdGVyIiwicmVnaXN0ZXJEeW5hbWljIiwic2V0IiwibmV3TW9kdWxlIiwic2VsZiIsImdsb2JhbCIsIiRfX1N5c3RlbSIsIiRfX3JlcXVpcmUiLCJGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUiLCJyb290IiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiZ2V0VGV4dCIsIl9mYWxsYmFja1RleHQiLCJfYXNzaWduIiwiUG9vbGVkQ2xhc3MiLCJnZXRUZXh0Q29udGVudEFjY2Vzc29yIiwiZGVzdHJ1Y3RvciIsImdldERhdGEiLCJzdGFydCIsImVuZCIsInN0YXJ0VmFsdWUiLCJzdGFydExlbmd0aCIsImVuZFZhbHVlIiwiZW5kTGVuZ3RoIiwibWluRW5kIiwic2xpY2VUYWlsIiwidW5kZWZpbmVkIiwic2xpY2UiLCJhZGRQb29saW5nVG8iLCJTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50IiwiZGlzcGF0Y2hDb25maWciLCJkaXNwYXRjaE1hcmtlciIsIm5hdGl2ZUV2ZW50IiwibmF0aXZlRXZlbnRUYXJnZXQiLCJTeW50aGV0aWNFdmVudCIsIkNvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UiLCJkYXRhIiwiYXVnbWVudENsYXNzIiwiU3ludGhldGljSW5wdXRFdmVudCIsIklucHV0RXZlbnRJbnRlcmZhY2UiLCJpc1ByZXN0byIsIm9wZXJhIiwid2luZG93IiwidmVyc2lvbiIsInBhcnNlSW50IiwiaXNLZXlwcmVzc0NvbW1hbmQiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImdldENvbXBvc2l0aW9uRXZlbnRUeXBlIiwidG9wTGV2ZWxUeXBlIiwidG9wTGV2ZWxUeXBlcyIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJldmVudFR5cGVzIiwiY29tcG9zaXRpb25TdGFydCIsInRvcENvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25FbmQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsImNvbXBvc2l0aW9uVXBkYXRlIiwiaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQiLCJ0b3BLZXlEb3duIiwia2V5Q29kZSIsIlNUQVJUX0tFWUNPREUiLCJpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQiLCJ0b3BLZXlVcCIsIkVORF9LRVlDT0RFUyIsInRvcEtleVByZXNzIiwidG9wTW91c2VEb3duIiwidG9wQmx1ciIsImdldERhdGFGcm9tQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJleHRyYWN0Q29tcG9zaXRpb25FdmVudCIsInRhcmdldEluc3QiLCJldmVudFR5cGUiLCJmYWxsYmFja0RhdGEiLCJjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IiwiY3VycmVudENvbXBvc2l0aW9uIiwidXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEiLCJnZXRQb29sZWQiLCJldmVudCIsImN1c3RvbURhdGEiLCJFdmVudFByb3BhZ2F0b3JzIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyIsImdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMiLCJ3aGljaCIsIlNQQUNFQkFSX0NPREUiLCJoYXNTcGFjZUtleXByZXNzIiwiU1BBQ0VCQVJfQ0hBUiIsInRvcFRleHRJbnB1dCIsImNoYXJzIiwiZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzIiwicmVsZWFzZSIsInRvcFBhc3RlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQiLCJjYW5Vc2VUZXh0SW5wdXRFdmVudCIsImJlZm9yZUlucHV0IiwiRXZlbnRDb25zdGFudHMiLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImtleU9mIiwiY2FuVXNlRE9NIiwiZG9jdW1lbnRNb2RlIiwiZG9jdW1lbnQiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImJ1YmJsZWQiLCJvbkJlZm9yZUlucHV0IiwiY2FwdHVyZWQiLCJvbkJlZm9yZUlucHV0Q2FwdHVyZSIsIm9uQ29tcG9zaXRpb25FbmQiLCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmUiLCJvbkNvbXBvc2l0aW9uVXBkYXRlIiwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmUiLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwiZXh0cmFjdEV2ZW50cyIsInNob3VsZFVzZUNoYW5nZUV2ZW50IiwiZWxlbSIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJ0eXBlIiwibWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCIsImNoYW5nZSIsImFjdGl2ZUVsZW1lbnRJbnN0IiwiZ2V0RXZlbnRUYXJnZXQiLCJSZWFjdFVwZGF0ZXMiLCJiYXRjaGVkVXBkYXRlcyIsInJ1bkV2ZW50SW5CYXRjaCIsIkV2ZW50UGx1Z2luSHViIiwiZW5xdWV1ZUV2ZW50cyIsInByb2Nlc3NFdmVudFF1ZXVlIiwic3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4IiwidGFyZ2V0IiwiYWN0aXZlRWxlbWVudCIsImF0dGFjaEV2ZW50Iiwic3RvcFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgiLCJkZXRhY2hFdmVudCIsImdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudCIsInRvcENoYW5nZSIsImhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4IiwidG9wRm9jdXMiLCJzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJhY3RpdmVFbGVtZW50VmFsdWUiLCJhY3RpdmVFbGVtZW50VmFsdWVQcm9wIiwiY29uc3RydWN0b3IiLCJuZXdWYWx1ZVByb3AiLCJoYW5kbGVQcm9wZXJ0eUNoYW5nZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwcm9wZXJ0eU5hbWUiLCJzcmNFbGVtZW50IiwiZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnQiLCJ0b3BJbnB1dCIsImhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRJRSIsImdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50SUUiLCJ0b3BTZWxlY3Rpb25DaGFuZ2UiLCJzaG91bGRVc2VDbGlja0V2ZW50IiwiZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQiLCJ0b3BDbGljayIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsImlzRXZlbnRTdXBwb3J0ZWQiLCJpc1RleHRJbnB1dEVsZW1lbnQiLCJvbkNoYW5nZSIsIm9uQ2hhbmdlQ2FwdHVyZSIsImRvZXNDaGFuZ2VFdmVudEJ1YmJsZSIsImlzSW5wdXRFdmVudFN1cHBvcnRlZCIsInZhbCIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiZ2V0VGFyZ2V0SW5zdEZ1bmMiLCJoYW5kbGVFdmVudEZ1bmMiLCJ0YXJnZXROb2RlIiwiZ2V0Tm9kZUZyb21JbnN0YW5jZSIsImluc3QiLCJEZWZhdWx0RXZlbnRQbHVnaW5PcmRlciIsIlJlc3BvbmRlckV2ZW50UGx1Z2luIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJUYXBFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiU3ludGhldGljTW91c2VFdmVudCIsIm1vdXNlRW50ZXIiLCJyZWdpc3RyYXRpb25OYW1lIiwib25Nb3VzZUVudGVyIiwidG9wTW91c2VPdXQiLCJ0b3BNb3VzZU92ZXIiLCJtb3VzZUxlYXZlIiwib25Nb3VzZUxlYXZlIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50Iiwid2luIiwiZG9jIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHRWaWV3IiwicGFyZW50V2luZG93IiwiZnJvbSIsInRvIiwicmVsYXRlZCIsInRvRWxlbWVudCIsImdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlIiwiZnJvbU5vZGUiLCJ0b05vZGUiLCJsZWF2ZSIsImVudGVyIiwiYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzIiwiRE9NUHJvcGVydHkiLCJNVVNUX1VTRV9QUk9QRVJUWSIsImluamVjdGlvbiIsIkhBU19CT09MRUFOX1ZBTFVFIiwiSEFTX1NJREVfRUZGRUNUUyIsIkhBU19OVU1FUklDX1ZBTFVFIiwiSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUiLCJIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFIiwiSFRNTERPTVByb3BlcnR5Q29uZmlnIiwiaXNDdXN0b21BdHRyaWJ1dGUiLCJSZWdFeHAiLCJ0ZXN0IiwiYmluZCIsIkFUVFJJQlVURV9OQU1FX0NIQVIiLCJQcm9wZXJ0aWVzIiwiYWNjZXB0IiwiYWNjZXB0Q2hhcnNldCIsImFjY2Vzc0tleSIsImFjdGlvbiIsImFsbG93RnVsbFNjcmVlbiIsImFsbG93VHJhbnNwYXJlbmN5IiwiYWx0IiwiYXN5bmMiLCJhdXRvQ29tcGxldGUiLCJhdXRvUGxheSIsImNhcHR1cmUiLCJjZWxsUGFkZGluZyIsImNlbGxTcGFjaW5nIiwiY2hhclNldCIsImNoYWxsZW5nZSIsImNoZWNrZWQiLCJjaXRlIiwiY2xhc3NJRCIsImNsYXNzTmFtZSIsImNvbHMiLCJjb2xTcGFuIiwiY29udGVudCIsImNvbnRlbnRFZGl0YWJsZSIsImNvbnRleHRNZW51IiwiY29udHJvbHMiLCJjb29yZHMiLCJjcm9zc09yaWdpbiIsImRhdGVUaW1lIiwiZGVmYXVsdCIsImRlZmVyIiwiZGlyIiwiZGlzYWJsZWQiLCJkb3dubG9hZCIsImRyYWdnYWJsZSIsImVuY1R5cGUiLCJmb3JtIiwiZm9ybUFjdGlvbiIsImZvcm1FbmNUeXBlIiwiZm9ybU1ldGhvZCIsImZvcm1Ob1ZhbGlkYXRlIiwiZm9ybVRhcmdldCIsImZyYW1lQm9yZGVyIiwiaGVhZGVycyIsImhlaWdodCIsImhpZGRlbiIsImhpZ2giLCJocmVmIiwiaHJlZkxhbmciLCJodG1sRm9yIiwiaHR0cEVxdWl2IiwiaWNvbiIsImlucHV0TW9kZSIsImludGVncml0eSIsImlzIiwia2V5UGFyYW1zIiwia2V5VHlwZSIsImtpbmQiLCJsYWJlbCIsImxhbmciLCJsaXN0IiwibG9vcCIsImxvdyIsIm1hbmlmZXN0IiwibWFyZ2luSGVpZ2h0IiwibWFyZ2luV2lkdGgiLCJtYXgiLCJtYXhMZW5ndGgiLCJtZWRpYSIsIm1lZGlhR3JvdXAiLCJtZXRob2QiLCJtaW4iLCJtaW5MZW5ndGgiLCJtdWx0aXBsZSIsIm11dGVkIiwibm9uY2UiLCJub1ZhbGlkYXRlIiwib3BlbiIsIm9wdGltdW0iLCJwYXR0ZXJuIiwicGxhY2Vob2xkZXIiLCJwb3N0ZXIiLCJwcmVsb2FkIiwicHJvZmlsZSIsInJhZGlvR3JvdXAiLCJyZWFkT25seSIsInJlbCIsInJlcXVpcmVkIiwicmV2ZXJzZWQiLCJyb2xlIiwicm93cyIsInJvd1NwYW4iLCJzYW5kYm94Iiwic2NvcGUiLCJzY29wZWQiLCJzY3JvbGxpbmciLCJzZWFtbGVzcyIsInNlbGVjdGVkIiwic2hhcGUiLCJzaXplIiwic2l6ZXMiLCJzcGFuIiwic3BlbGxDaGVjayIsInNyYyIsInNyY0RvYyIsInNyY0xhbmciLCJzcmNTZXQiLCJzdGVwIiwic3R5bGUiLCJzdW1tYXJ5IiwidGFiSW5kZXgiLCJ0aXRsZSIsInVzZU1hcCIsIndpZHRoIiwid21vZGUiLCJ3cmFwIiwiYWJvdXQiLCJkYXRhdHlwZSIsImlubGlzdCIsInByZWZpeCIsInByb3BlcnR5IiwicmVzb3VyY2UiLCJ0eXBlb2YiLCJ2b2NhYiIsImF1dG9DYXBpdGFsaXplIiwiYXV0b0NvcnJlY3QiLCJhdXRvU2F2ZSIsImNvbG9yIiwiaXRlbVByb3AiLCJpdGVtU2NvcGUiLCJpdGVtVHlwZSIsIml0ZW1JRCIsIml0ZW1SZWYiLCJyZXN1bHRzIiwic2VjdXJpdHkiLCJ1bnNlbGVjdGFibGUiLCJET01BdHRyaWJ1dGVOYW1lcyIsIkRPTVByb3BlcnR5TmFtZXMiLCJmb2N1c05vZGUiLCJBdXRvRm9jdXNVdGlscyIsImZvY3VzRE9NQ29tcG9uZW50IiwiY2FtZWxpemUiLCJzdHJpbmciLCJyZXBsYWNlIiwiX2h5cGhlblBhdHRlcm4iLCJjaGFyYWN0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsaXplU3R5bGVOYW1lIiwibXNQYXR0ZXJuIiwicHJlZml4S2V5Iiwia2V5IiwiY2hhckF0Iiwic3Vic3RyaW5nIiwiaXNVbml0bGVzc051bWJlciIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZENvbHVtbiIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicHJlZml4ZXMiLCJrZXlzIiwiZm9yRWFjaCIsInByb3AiLCJzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnMiLCJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZEF0dGFjaG1lbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kUG9zaXRpb25YIiwiYmFja2dyb3VuZFBvc2l0aW9uWSIsImJhY2tncm91bmRSZXBlYXQiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJib3JkZXIiLCJib3JkZXJXaWR0aCIsImJvcmRlclN0eWxlIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJCb3R0b20iLCJib3JkZXJCb3R0b21XaWR0aCIsImJvcmRlckJvdHRvbVN0eWxlIiwiYm9yZGVyQm90dG9tQ29sb3IiLCJib3JkZXJMZWZ0IiwiYm9yZGVyTGVmdFdpZHRoIiwiYm9yZGVyTGVmdFN0eWxlIiwiYm9yZGVyTGVmdENvbG9yIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJSaWdodFdpZHRoIiwiYm9yZGVyUmlnaHRTdHlsZSIsImJvcmRlclJpZ2h0Q29sb3IiLCJib3JkZXJUb3AiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclRvcFN0eWxlIiwiYm9yZGVyVG9wQ29sb3IiLCJmb250IiwiZm9udFN0eWxlIiwiZm9udFZhcmlhbnQiLCJmb250U2l6ZSIsImZvbnRGYW1pbHkiLCJvdXRsaW5lIiwib3V0bGluZVdpZHRoIiwib3V0bGluZVN0eWxlIiwib3V0bGluZUNvbG9yIiwiQ1NTUHJvcGVydHkiLCJkYW5nZXJvdXNTdHlsZVZhbHVlIiwiY29tcG9uZW50IiwiaXNFbXB0eSIsImlzTm9uTnVtZXJpYyIsImlzTmFOIiwidHJpbSIsImh5cGhlbmF0ZSIsIl91cHBlcmNhc2VQYXR0ZXJuIiwiaHlwaGVuYXRlU3R5bGVOYW1lIiwibWVtb2l6ZVN0cmluZ09ubHkiLCJjYWxsYmFjayIsImNhY2hlIiwicHJvY2Vzc1N0eWxlTmFtZSIsInN0eWxlTmFtZSIsImhhc1Nob3J0aGFuZFByb3BlcnR5QnVnIiwic3R5bGVGbG9hdEFjY2Vzc29yIiwidGVtcFN0eWxlIiwiY3JlYXRlRWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsImNzc0Zsb2F0IiwiQ1NTUHJvcGVydHlPcGVyYXRpb25zIiwiY3JlYXRlTWFya3VwRm9yU3R5bGVzIiwic3R5bGVzIiwic2VyaWFsaXplZCIsInN0eWxlVmFsdWUiLCJzZXRWYWx1ZUZvclN0eWxlcyIsIm5vZGUiLCJleHBhbnNpb24iLCJpbmRpdmlkdWFsU3R5bGVOYW1lIiwiRE9NQ2hpbGRyZW5PcGVyYXRpb25zIiwiUmVhY3RET01JRE9wZXJhdGlvbnMiLCJkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXMiLCJwYXJlbnRJbnN0IiwidXBkYXRlcyIsInByb2Nlc3NVcGRhdGVzIiwiUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQiLCJwcm9jZXNzQ2hpbGRyZW5VcGRhdGVzIiwicmVwbGFjZU5vZGVXaXRoTWFya3VwIiwiZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAiLCJ1bm1vdW50SURGcm9tRW52aXJvbm1lbnQiLCJyb290Tm9kZUlEIiwiRGlzYWJsZWRJbnB1dFV0aWxzIiwiUmVhY3RET01CdXR0b24iLCJnZXROYXRpdmVQcm9wcyIsImZvcmNlVXBkYXRlSWZNb3VudGVkIiwiX3Jvb3ROb2RlSUQiLCJSZWFjdERPTUlucHV0IiwidXBkYXRlV3JhcHBlciIsIl9oYW5kbGVDaGFuZ2UiLCJwcm9wcyIsIl9jdXJyZW50RWxlbWVudCIsInJldHVyblZhbHVlIiwiTGlua2VkVmFsdWVVdGlscyIsImV4ZWN1dGVPbkNoYW5nZSIsImFzYXAiLCJyb290Tm9kZSIsInF1ZXJ5Um9vdCIsInBhcmVudE5vZGUiLCJncm91cCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJKU09OIiwic3RyaW5naWZ5Iiwib3RoZXJOb2RlIiwib3RoZXJJbnN0YW5jZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJpbnZhcmlhbnQiLCJET01Qcm9wZXJ0eU9wZXJhdGlvbnMiLCJnZXRWYWx1ZSIsImdldENoZWNrZWQiLCJuYXRpdmVQcm9wcyIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxWYWx1ZSIsImluaXRpYWxDaGVja2VkIiwibW91bnRXcmFwcGVyIiwibGlzdGVuZXJzIiwic2V0VmFsdWVGb3JQcm9wZXJ0eSIsIlJlYWN0Q2hpbGRyZW4iLCJSZWFjdERPTVNlbGVjdCIsIlJlYWN0RE9NT3B0aW9uIiwibmF0aXZlUGFyZW50Iiwic2VsZWN0VmFsdWUiLCJzZWxlY3RQYXJlbnQiLCJfdGFnIiwiX25hdGl2ZVBhcmVudCIsImdldFNlbGVjdFZhbHVlQ29udGV4dCIsImlzQXJyYXkiLCJwb3N0TW91bnRXcmFwcGVyIiwic2V0QXR0cmlidXRlIiwiY2hpbGRyZW4iLCJjaGlsZCIsInVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkIiwicGVuZGluZ1VwZGF0ZSIsInVwZGF0ZU9wdGlvbnMiLCJCb29sZWFuIiwicHJvcFZhbHVlIiwic2VsZWN0ZWRWYWx1ZSIsIm9wdGlvbnMiLCJkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUiLCJ3YXNNdWx0aXBsZSIsInBvc3RVcGRhdGVXcmFwcGVyIiwiZGlzYWJsZWFibGVNb3VzZUxpc3RlbmVyTmFtZXMiLCJvbkNsaWNrIiwib25Eb3VibGVDbGljayIsIm9uTW91c2VEb3duIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJvbkNsaWNrQ2FwdHVyZSIsIm9uRG91YmxlQ2xpY2tDYXB0dXJlIiwib25Nb3VzZURvd25DYXB0dXJlIiwib25Nb3VzZU1vdmVDYXB0dXJlIiwib25Nb3VzZVVwQ2FwdHVyZSIsIndhcm5Vbmtub3duUHJvcGVydHkiLCJSZWFjdERPTVVua25vd25Qcm9wZXJ0eURldnRvb2wiLCJvbkNyZWF0ZU1hcmt1cEZvclByb3BlcnR5Iiwib25TZXRWYWx1ZUZvclByb3BlcnR5Iiwib25EZWxldGVWYWx1ZUZvclByb3BlcnR5IiwiZW1pdEV2ZW50IiwiaGFuZGxlckZ1bmN0aW9uTmFtZSIsImFyZzEiLCJhcmcyIiwiYXJnMyIsImFyZzQiLCJhcmc1IiwiZXZlbnRIYW5kbGVycyIsIlJlYWN0RE9NRGVidWdUb29sIiwiYWRkRGV2dG9vbCIsImRldnRvb2wiLCJyZW1vdmVEZXZ0b29sIiwiZGVidWdUb29sIiwicXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIiLCJlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIiLCJpc0F0dHJpYnV0ZU5hbWVTYWZlIiwiYXR0cmlidXRlTmFtZSIsInZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZSIsImlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCIsInNob3VsZElnbm9yZVZhbHVlIiwicHJvcGVydHlJbmZvIiwiaGFzQm9vbGVhblZhbHVlIiwiaGFzTnVtZXJpY1ZhbHVlIiwiaGFzUG9zaXRpdmVOdW1lcmljVmFsdWUiLCJoYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIiwiQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiIsImNyZWF0ZU1hcmt1cEZvcklEIiwiSURfQVRUUklCVVRFX05BTUUiLCJzZXRBdHRyaWJ1dGVGb3JJRCIsImNyZWF0ZU1hcmt1cEZvclJvb3QiLCJST09UX0FUVFJJQlVURV9OQU1FIiwic2V0QXR0cmlidXRlRm9yUm9vdCIsImNyZWF0ZU1hcmt1cEZvclByb3BlcnR5IiwicHJvcGVydGllcyIsImNyZWF0ZU1hcmt1cEZvckN1c3RvbUF0dHJpYnV0ZSIsIm11dGF0aW9uTWV0aG9kIiwiZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BOYW1lIiwiaGFzU2lkZUVmZmVjdHMiLCJuYW1lc3BhY2UiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJzZXRBdHRyaWJ1dGVOUyIsInNldFZhbHVlRm9yQXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiX2Fzc2VydFNpbmdsZUxpbmsiLCJpbnB1dFByb3BzIiwiY2hlY2tlZExpbmsiLCJ2YWx1ZUxpbmsiLCJfYXNzZXJ0VmFsdWVMaW5rIiwiX2Fzc2VydENoZWNrZWRMaW5rIiwiZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtIiwib3duZXIiLCJnZXROYW1lIiwiUmVhY3RQcm9wVHlwZXMiLCJSZWFjdFByb3BUeXBlTG9jYXRpb25zIiwiaGFzUmVhZE9ubHlWYWx1ZSIsImJ1dHRvbiIsImNoZWNrYm94IiwiaW1hZ2UiLCJyYWRpbyIsInJlc2V0Iiwic3VibWl0IiwicHJvcFR5cGVzIiwiY29tcG9uZW50TmFtZSIsImZ1bmMiLCJsb2dnZWRUeXBlRmFpbHVyZXMiLCJjaGVja1Byb3BUeXBlcyIsInRhZ05hbWUiLCJlcnJvciIsIm1lc3NhZ2UiLCJyZXF1ZXN0Q2hhbmdlIiwiUmVhY3RET01UZXh0YXJlYSIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaW5zdGFudGlhdGVDaGlsZCIsImNoaWxkSW5zdGFuY2VzIiwia2V5VW5pcXVlIiwiaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCIsIlJlYWN0UmVjb25jaWxlciIsInNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50IiwidHJhdmVyc2VBbGxDaGlsZHJlbiIsIlJlYWN0Q2hpbGRSZWNvbmNpbGVyIiwiaW5zdGFudGlhdGVDaGlsZHJlbiIsIm5lc3RlZENoaWxkTm9kZXMiLCJ0cmFuc2FjdGlvbiIsImNvbnRleHQiLCJ1cGRhdGVDaGlsZHJlbiIsInByZXZDaGlsZHJlbiIsIm5leHRDaGlsZHJlbiIsInJlbW92ZWROb2RlcyIsInByZXZDaGlsZCIsInByZXZFbGVtZW50IiwibmV4dEVsZW1lbnQiLCJyZWNlaXZlQ29tcG9uZW50IiwiZ2V0TmF0aXZlTm9kZSIsInVubW91bnRDb21wb25lbnQiLCJuZXh0Q2hpbGRJbnN0YW5jZSIsInVubW91bnRDaGlsZHJlbiIsInJlbmRlcmVkQ2hpbGRyZW4iLCJzYWZlbHkiLCJyZW5kZXJlZENoaWxkIiwiZmxhdHRlblNpbmdsZUNoaWxkSW50b0NvbnRleHQiLCJ0cmF2ZXJzZUNvbnRleHQiLCJyZXN1bHQiLCJmbGF0dGVuQ2hpbGRyZW4iLCJtYWtlSW5zZXJ0TWFya3VwIiwibWFya3VwIiwiYWZ0ZXJOb2RlIiwidG9JbmRleCIsIlJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzIiwiSU5TRVJUX01BUktVUCIsImZyb21JbmRleCIsIm1ha2VNb3ZlIiwiTU9WRV9FWElTVElORyIsIl9tb3VudEluZGV4IiwibWFrZVJlbW92ZSIsIlJFTU9WRV9OT0RFIiwibWFrZVNldE1hcmt1cCIsIlNFVF9NQVJLVVAiLCJtYWtlVGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsIlRFWFRfQ09OVEVOVCIsImVucXVldWUiLCJxdWV1ZSIsInVwZGF0ZSIsInByb2Nlc3NRdWV1ZSIsInVwZGF0ZVF1ZXVlIiwiUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCIsIlJlYWN0TXVsdGlDaGlsZCIsIk1peGluIiwiX3JlY29uY2lsZXJJbnN0YW50aWF0ZUNoaWxkcmVuIiwibmVzdGVkQ2hpbGRyZW4iLCJfcmVjb25jaWxlclVwZGF0ZUNoaWxkcmVuIiwibmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMiLCJtb3VudENoaWxkcmVuIiwiX3JlbmRlcmVkQ2hpbGRyZW4iLCJtb3VudEltYWdlcyIsImluZGV4IiwibW91bnRJbWFnZSIsIm1vdW50Q29tcG9uZW50IiwiX25hdGl2ZUNvbnRhaW5lckluZm8iLCJ1cGRhdGVUZXh0Q29udGVudCIsIm5leHRDb250ZW50IiwidXBkYXRlTWFya3VwIiwibmV4dE1hcmt1cCIsIl91cGRhdGVDaGlsZHJlbiIsImxhc3RJbmRleCIsIm5leHRJbmRleCIsImxhc3RQbGFjZWROb2RlIiwibmV4dENoaWxkIiwibW92ZUNoaWxkIiwiTWF0aCIsIl9tb3VudENoaWxkQXRJbmRleCIsIl91bm1vdW50Q2hpbGQiLCJjcmVhdGVDaGlsZCIsInJlbW92ZUNoaWxkIiwiUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbiIsInJlbmRlclRvU3RhdGljTWFya3VwIiwicmVpbml0aWFsaXplVHJhbnNhY3Rpb24iLCJ1c2VDcmVhdGVFbGVtZW50IiwiVHJhbnNhY3Rpb24iLCJUUkFOU0FDVElPTl9XUkFQUEVSUyIsIm5vb3BDYWxsYmFja1F1ZXVlIiwiZ2V0VHJhbnNhY3Rpb25XcmFwcGVycyIsImdldFJlYWN0TW91bnRSZWFkeSIsImNoZWNrcG9pbnQiLCJyb2xsYmFjayIsImFzc2VydFZhbGlkUHJvcHMiLCJ2b2lkRWxlbWVudFRhZ3MiLCJIVE1MIiwiZW5xdWV1ZVB1dExpc3RlbmVyIiwibGlzdGVuZXIiLCJjb250YWluZXJJbmZvIiwiaXNEb2N1bWVudEZyYWdtZW50IiwiX25vZGUiLCJub2RlVHlwZSIsIkRPQ19GUkFHTUVOVF9UWVBFIiwiX293bmVyRG9jdW1lbnQiLCJsaXN0ZW5UbyIsInB1dExpc3RlbmVyIiwibGlzdGVuZXJUb1B1dCIsIm9wdGlvblBvc3RNb3VudCIsInRyYXBCdWJibGVkRXZlbnRzTG9jYWwiLCJnZXROb2RlIiwiUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyIiwidHJhcEJ1YmJsZWRFdmVudCIsInRvcExvYWQiLCJtZWRpYUV2ZW50cyIsInRvcEVycm9yIiwidG9wUmVzZXQiLCJ0b3BTdWJtaXQiLCJ0b3BJbnZhbGlkIiwicG9zdFVwZGF0ZVNlbGVjdFdyYXBwZXIiLCJ2YWxpZGF0ZURhbmdlcm91c1RhZyIsInRhZyIsInZhbGlkYXRlZFRhZ0NhY2hlIiwiVkFMSURfVEFHX1JFR0VYIiwiaXNDdXN0b21Db21wb25lbnQiLCJSZWFjdERPTUNvbXBvbmVudCIsImVsZW1lbnQiLCJfbmFtZXNwYWNlVVJJIiwiX3ByZXZpb3VzU3R5bGUiLCJfcHJldmlvdXNTdHlsZUNvcHkiLCJfbmF0aXZlTm9kZSIsIl9kb21JRCIsIl90b3BMZXZlbFdyYXBwZXIiLCJfZmxhZ3MiLCJET01MYXp5VHJlZSIsIkRPTU5hbWVzcGFjZXMiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiUmVhY3RET01Db21wb25lbnRGbGFncyIsIkZsYWdzIiwiZGVsZXRlTGlzdGVuZXIiLCJyZWdpc3RyYXRpb25OYW1lTW9kdWxlcyIsIkNPTlRFTlRfVFlQRVMiLCJudW1iZXIiLCJTVFlMRSIsIl9faHRtbCIsIlJFU0VSVkVEX1BST1BTIiwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIiwidG9wQWJvcnQiLCJ0b3BDYW5QbGF5IiwidG9wQ2FuUGxheVRocm91Z2giLCJ0b3BEdXJhdGlvbkNoYW5nZSIsInRvcEVtcHRpZWQiLCJ0b3BFbmNyeXB0ZWQiLCJ0b3BFbmRlZCIsInRvcExvYWRlZERhdGEiLCJ0b3BMb2FkZWRNZXRhZGF0YSIsInRvcExvYWRTdGFydCIsInRvcFBhdXNlIiwidG9wUGxheSIsInRvcFBsYXlpbmciLCJ0b3BQcm9ncmVzcyIsInRvcFJhdGVDaGFuZ2UiLCJ0b3BTZWVrZWQiLCJ0b3BTZWVraW5nIiwidG9wU3RhbGxlZCIsInRvcFN1c3BlbmQiLCJ0b3BUaW1lVXBkYXRlIiwidG9wVm9sdW1lQ2hhbmdlIiwidG9wV2FpdGluZyIsIm9taXR0ZWRDbG9zZVRhZ3MiLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInNvdXJjZSIsInRyYWNrIiwid2JyIiwibmV3bGluZUVhdGluZ1RhZ3MiLCJsaXN0aW5nIiwicHJlIiwidGV4dGFyZWEiLCJtZW51aXRlbSIsImdsb2JhbElkQ291bnRlciIsImRpc3BsYXlOYW1lIiwibmF0aXZlQ29udGFpbmVySW5mbyIsIl9pZENvdW50ZXIiLCJuYW1lc3BhY2VVUkkiLCJwYXJlbnRUYWciLCJzdmciLCJodG1sIiwibWF0aG1sIiwiZWwiLCJkaXYiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwiY3JlYXRlRWxlbWVudE5TIiwicHJlY2FjaGVOb2RlIiwiaGFzQ2FjaGVkQ2hpbGROb2RlcyIsIl91cGRhdGVET01Qcm9wZXJ0aWVzIiwibGF6eVRyZWUiLCJfY3JlYXRlSW5pdGlhbENoaWxkcmVuIiwidGFnT3BlbiIsIl9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzIiwidGFnQ29udGVudCIsIl9jcmVhdGVDb250ZW50TWFya3VwIiwiYXV0b0ZvY3VzIiwicmV0IiwicHJvcEtleSIsImNvbnRlbnRUb1VzZSIsImNoaWxkcmVuVG9Vc2UiLCJqb2luIiwicXVldWVIVE1MIiwicXVldWVUZXh0IiwicXVldWVDaGlsZCIsInVwZGF0ZUNvbXBvbmVudCIsImxhc3RQcm9wcyIsIm5leHRQcm9wcyIsIl91cGRhdGVET01DaGlsZHJlbiIsInN0eWxlVXBkYXRlcyIsImxhc3RTdHlsZSIsIm5leHRQcm9wIiwibGFzdFByb3AiLCJsYXN0Q29udGVudCIsImxhc3RIdG1sIiwibmV4dEh0bWwiLCJsYXN0Q2hpbGRyZW4iLCJsYXN0SGFzQ29udGVudE9ySHRtbCIsIm5leHRIYXNDb250ZW50T3JIdG1sIiwicmVtb3ZlIiwidW5jYWNoZU5vZGUiLCJkZWxldGVBbGxMaXN0ZW5lcnMiLCJnZXRQdWJsaWNJbnN0YW5jZSIsIlJlYWN0RE9NRW1wdHlDb21wb25lbnQiLCJpbnN0YW50aWF0ZSIsImRvbUlEIiwibm9kZVZhbHVlIiwiY3JlYXRlQ29tbWVudCIsImdldExvd2VzdENvbW1vbkFuY2VzdG9yIiwiaW5zdEEiLCJpbnN0QiIsImRlcHRoQSIsInRlbXBBIiwiZGVwdGhCIiwidGVtcEIiLCJkZXB0aCIsImlzQW5jZXN0b3IiLCJnZXRQYXJlbnRJbnN0YW5jZSIsInRyYXZlcnNlVHdvUGhhc2UiLCJmbiIsImFyZyIsInBhdGgiLCJ0cmF2ZXJzZUVudGVyTGVhdmUiLCJhcmdGcm9tIiwiYXJnVG8iLCJjb21tb24iLCJwYXRoRnJvbSIsInBhdGhUbyIsInRvQXJyYXkiLCJvYmoiLCJjYWxsZWUiLCJpaSIsImhhc0FycmF5TmF0dXJlIiwiY3JlYXRlQXJyYXlGcm9tTWl4ZWQiLCJnZXROb2RlTmFtZSIsIm5vZGVOYW1lTWF0Y2giLCJtYXRjaCIsIm5vZGVOYW1lUGF0dGVybiIsImNyZWF0ZU5vZGVzRnJvbU1hcmt1cCIsImhhbmRsZVNjcmlwdCIsImR1bW15Tm9kZSIsImdldE1hcmt1cFdyYXAiLCJ3cmFwRGVwdGgiLCJsYXN0Q2hpbGQiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJub2RlcyIsImNoaWxkTm9kZXMiLCJtYXJrdXBXcmFwIiwic2hvdWxkV3JhcCIsInNlbGVjdFdyYXAiLCJ0YWJsZVdyYXAiLCJ0cldyYXAiLCJzdmdXcmFwIiwiKiIsImxlZ2VuZCIsInRyIiwib3B0Z3JvdXAiLCJvcHRpb24iLCJjYXB0aW9uIiwiY29sZ3JvdXAiLCJ0Ym9keSIsInRmb290IiwidGhlYWQiLCJ0ZCIsInRoIiwic3ZnRWxlbWVudHMiLCJlbXB0eUZ1bmN0aW9uIiwiT1BFTl9UQUdfTkFNRV9FWFAiLCJSRVNVTFRfSU5ERVhfQVRUUiIsIkRhbmdlciIsImRhbmdlcm91c2x5UmVuZGVyTWFya3VwIiwibWFya3VwTGlzdCIsIm1hcmt1cEJ5Tm9kZU5hbWUiLCJyZXN1bHRMaXN0IiwicmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCIsInJlc3VsdEluZGV4IiwibWFya3VwTGlzdEJ5Tm9kZU5hbWUiLCJyZW5kZXJOb2RlcyIsImoiLCJyZW5kZXJOb2RlIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwib2xkQ2hpbGQiLCJuZXdDaGlsZCIsInJlcGxhY2VDaGlsZCIsInJlcGxhY2VDaGlsZFdpdGhUcmVlIiwia2V5TWlycm9yIiwiZ2V0Tm9kZUFmdGVyIiwibmV4dFNpYmxpbmciLCJpbnNlcnRMYXp5VHJlZUNoaWxkQXQiLCJjaGlsZFRyZWUiLCJyZWZlcmVuY2VOb2RlIiwiaW5zZXJ0VHJlZUJlZm9yZSIsImNoaWxkTm9kZSIsIm1vdmVEZWxpbWl0ZWRUZXh0IiwiaW5zZXJ0Q2hpbGRBdCIsImNsb3NpbmdDb21tZW50IiwicmVtb3ZlRGVsaW1pdGVkVGV4dCIsIm9wZW5pbmdDb21tZW50IiwibmV4dE5vZGUiLCJzdGFydE5vZGUiLCJyZXBsYWNlRGVsaW1pdGVkVGV4dCIsInN0cmluZ1RleHQiLCJub2RlQWZ0ZXJDb21tZW50IiwiY3JlYXRlVGV4dE5vZGUiLCJzZXRUZXh0Q29udGVudCIsImNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24iLCJzZXRJbm5lckhUTUwiLCJpbnNlcnRCZWZvcmUiLCJrIiwiUmVhY3RET01UZXh0Q29tcG9uZW50IiwidGV4dCIsIl9zdHJpbmdUZXh0IiwiX2Nsb3NpbmdDb21tZW50IiwiX2NvbW1lbnROb2RlcyIsIm9wZW5pbmdWYWx1ZSIsImNsb3NpbmdWYWx1ZSIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJlc2NhcGVkVGV4dCIsIm5leHRUZXh0IiwibmV4dFN0cmluZ1RleHQiLCJjb21tZW50Tm9kZXMiLCJuYXRpdmVOb2RlIiwiUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uIiwiUkVTRVRfQkFUQ0hFRF9VUERBVEVTIiwiaW5pdGlhbGl6ZSIsImNsb3NlIiwiUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneSIsImlzQmF0Y2hpbmdVcGRhdGVzIiwiRkxVU0hfQkFUQ0hFRF9VUERBVEVTIiwiZmx1c2hCYXRjaGVkVXBkYXRlcyIsImIiLCJhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzIiwicGVyZm9ybSIsImdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uIiwic2Nyb2xsYWJsZSIsInBhZ2VYT2Zmc2V0Iiwic2Nyb2xsTGVmdCIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwiZmluZFBhcmVudCIsImNvbnRhaW5lciIsIlRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZyIsImFuY2VzdG9ycyIsImhhbmRsZVRvcExldmVsSW1wbCIsImJvb2tLZWVwaW5nIiwiYW5jZXN0b3IiLCJSZWFjdEV2ZW50TGlzdGVuZXIiLCJfaGFuZGxlVG9wTGV2ZWwiLCJzY3JvbGxWYWx1ZU1vbml0b3IiLCJjYiIsInNjcm9sbFBvc2l0aW9uIiwiRXZlbnRMaXN0ZW5lciIsInR3b0FyZ3VtZW50UG9vbGVyIiwiX2VuYWJsZWQiLCJXSU5ET1dfSEFORExFIiwic2V0SGFuZGxlVG9wTGV2ZWwiLCJoYW5kbGVUb3BMZXZlbCIsInNldEVuYWJsZWQiLCJlbmFibGVkIiwiaXNFbmFibGVkIiwiaGFuZGxlckJhc2VOYW1lIiwiaGFuZGxlIiwibGlzdGVuIiwiZGlzcGF0Y2hFdmVudCIsInRyYXBDYXB0dXJlZEV2ZW50IiwibW9uaXRvclNjcm9sbFZhbHVlIiwicmVmcmVzaCIsIkV2ZW50UGx1Z2luVXRpbHMiLCJSZWFjdENsYXNzIiwiUmVhY3RFbXB0eUNvbXBvbmVudCIsIlJlYWN0TmF0aXZlQ29tcG9uZW50IiwiUmVhY3RJbmplY3Rpb24iLCJDb21wb25lbnQiLCJDbGFzcyIsIkVtcHR5Q29tcG9uZW50IiwiRXZlbnRFbWl0dGVyIiwiTmF0aXZlQ29tcG9uZW50IiwiVXBkYXRlcyIsIlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24iLCJyZWFjdE1vdW50UmVhZHkiLCJDYWxsYmFja1F1ZXVlIiwiUmVhY3RJbnB1dFNlbGVjdGlvbiIsIlNFTEVDVElPTl9SRVNUT1JBVElPTiIsImdldFNlbGVjdGlvbkluZm9ybWF0aW9uIiwicmVzdG9yZVNlbGVjdGlvbiIsIkVWRU5UX1NVUFBSRVNTSU9OIiwiY3VycmVudGx5RW5hYmxlZCIsInByZXZpb3VzbHlFbmFibGVkIiwiT05fRE9NX1JFQURZX1FVRVVFSU5HIiwibm90aWZ5QWxsIiwiTlMiLCJ4bGluayIsInhtbCIsIkFUVFJTIiwiYWNjZW50SGVpZ2h0IiwiYWNjdW11bGF0ZSIsImFkZGl0aXZlIiwiYWxpZ25tZW50QmFzZWxpbmUiLCJhbGxvd1Jlb3JkZXIiLCJhbHBoYWJldGljIiwiYW1wbGl0dWRlIiwiYXJhYmljRm9ybSIsImFzY2VudCIsImF0dHJpYnV0ZVR5cGUiLCJhdXRvUmV2ZXJzZSIsImF6aW11dGgiLCJiYXNlRnJlcXVlbmN5IiwiYmFzZVByb2ZpbGUiLCJiYXNlbGluZVNoaWZ0IiwiYmJveCIsImJlZ2luIiwiYmlhcyIsImJ5IiwiY2FsY01vZGUiLCJjYXBIZWlnaHQiLCJjbGlwIiwiY2xpcFBhdGgiLCJjbGlwUnVsZSIsImNsaXBQYXRoVW5pdHMiLCJjb2xvckludGVycG9sYXRpb24iLCJjb2xvckludGVycG9sYXRpb25GaWx0ZXJzIiwiY29sb3JQcm9maWxlIiwiY29sb3JSZW5kZXJpbmciLCJjb250ZW50U2NyaXB0VHlwZSIsImNvbnRlbnRTdHlsZVR5cGUiLCJjdXJzb3IiLCJjeCIsImN5IiwiZGVjZWxlcmF0ZSIsImRlc2NlbnQiLCJkaWZmdXNlQ29uc3RhbnQiLCJkaXJlY3Rpb24iLCJkaXNwbGF5IiwiZGl2aXNvciIsImRvbWluYW50QmFzZWxpbmUiLCJkdXIiLCJkeCIsImR5IiwiZWRnZU1vZGUiLCJlbGV2YXRpb24iLCJlbmFibGVCYWNrZ3JvdW5kIiwiZXhwb25lbnQiLCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkIiwiZmlsbCIsImZpbGxSdWxlIiwiZmlsdGVyIiwiZmlsdGVyUmVzIiwiZmlsdGVyVW5pdHMiLCJmbG9vZENvbG9yIiwiZm9jdXNhYmxlIiwiZm9udFNpemVBZGp1c3QiLCJmb250U3RyZXRjaCIsImZvcm1hdCIsImZ4IiwiZnkiLCJnMSIsImcyIiwiZ2x5cGhOYW1lIiwiZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWwiLCJnbHlwaE9yaWVudGF0aW9uVmVydGljYWwiLCJnbHlwaFJlZiIsImdyYWRpZW50VHJhbnNmb3JtIiwiZ3JhZGllbnRVbml0cyIsImhhbmdpbmciLCJob3JpekFkdlgiLCJob3Jpek9yaWdpblgiLCJpZGVvZ3JhcGhpYyIsImltYWdlUmVuZGVyaW5nIiwiaW4iLCJpbjIiLCJpbnRlcmNlcHQiLCJrMSIsImsyIiwiazMiLCJrNCIsImtlcm5lbE1hdHJpeCIsImtlcm5lbFVuaXRMZW5ndGgiLCJrZXJuaW5nIiwia2V5UG9pbnRzIiwia2V5U3BsaW5lcyIsImtleVRpbWVzIiwibGVuZ3RoQWRqdXN0IiwibGV0dGVyU3BhY2luZyIsImxpZ2h0aW5nQ29sb3IiLCJsaW1pdGluZ0NvbmVBbmdsZSIsImxvY2FsIiwibWFya2VyRW5kIiwibWFya2VyTWlkIiwibWFya2VyU3RhcnQiLCJtYXJrZXJIZWlnaHQiLCJtYXJrZXJVbml0cyIsIm1hcmtlcldpZHRoIiwibWFzayIsIm1hc2tDb250ZW50VW5pdHMiLCJtYXNrVW5pdHMiLCJtYXRoZW1hdGljYWwiLCJtb2RlIiwibnVtT2N0YXZlcyIsIm9mZnNldCIsIm9wZXJhdG9yIiwib3JpZW50Iiwib3JpZW50YXRpb24iLCJvcmlnaW4iLCJvdmVyZmxvdyIsIm92ZXJsaW5lUG9zaXRpb24iLCJvdmVybGluZVRoaWNrbmVzcyIsInBhaW50T3JkZXIiLCJwYW5vc2UxIiwicGF0aExlbmd0aCIsInBhdHRlcm5Db250ZW50VW5pdHMiLCJwYXR0ZXJuVHJhbnNmb3JtIiwicGF0dGVyblVuaXRzIiwicG9pbnRlckV2ZW50cyIsInBvaW50cyIsInBvaW50c0F0WCIsInBvaW50c0F0WSIsInBvaW50c0F0WiIsInByZXNlcnZlQWxwaGEiLCJwcmVzZXJ2ZUFzcGVjdFJhdGlvIiwicHJpbWl0aXZlVW5pdHMiLCJyYWRpdXMiLCJyZWZYIiwicmVmWSIsInJlbmRlcmluZ0ludGVudCIsInJlcGVhdENvdW50IiwicmVwZWF0RHVyIiwicmVxdWlyZWRFeHRlbnNpb25zIiwicmVxdWlyZWRGZWF0dXJlcyIsInJlc3RhcnQiLCJyb3RhdGUiLCJyeCIsInJ5Iiwic2NhbGUiLCJzZWVkIiwic2hhcGVSZW5kZXJpbmciLCJzbG9wZSIsInNwYWNpbmciLCJzcGVjdWxhckNvbnN0YW50Iiwic3BlY3VsYXJFeHBvbmVudCIsInNwZWVkIiwic3ByZWFkTWV0aG9kIiwic3RhcnRPZmZzZXQiLCJzdGREZXZpYXRpb24iLCJzdGVtaCIsInN0ZW12Iiwic3RpdGNoVGlsZXMiLCJzdG9wQ29sb3IiLCJzdHJpa2V0aHJvdWdoUG9zaXRpb24iLCJzdHJpa2V0aHJvdWdoVGhpY2tuZXNzIiwic3Ryb2tlIiwic3Ryb2tlTGluZWNhcCIsInN0cm9rZUxpbmVqb2luIiwic3VyZmFjZVNjYWxlIiwic3lzdGVtTGFuZ3VhZ2UiLCJ0YWJsZVZhbHVlcyIsInRhcmdldFgiLCJ0YXJnZXRZIiwidGV4dEFuY2hvciIsInRleHREZWNvcmF0aW9uIiwidGV4dFJlbmRlcmluZyIsInRleHRMZW5ndGgiLCJ0cmFuc2Zvcm0iLCJ1MSIsInUyIiwidW5kZXJsaW5lUG9zaXRpb24iLCJ1bmRlcmxpbmVUaGlja25lc3MiLCJ1bmljb2RlIiwidW5pY29kZUJpZGkiLCJ1bmljb2RlUmFuZ2UiLCJ1bml0c1BlckVtIiwidkFscGhhYmV0aWMiLCJ2SGFuZ2luZyIsInZJZGVvZ3JhcGhpYyIsInZNYXRoZW1hdGljYWwiLCJ2YWx1ZXMiLCJ2ZWN0b3JFZmZlY3QiLCJ2ZXJ0QWR2WSIsInZlcnRPcmlnaW5YIiwidmVydE9yaWdpblkiLCJ2aWV3Qm94Iiwidmlld1RhcmdldCIsInZpc2liaWxpdHkiLCJ3aWR0aHMiLCJ3b3JkU3BhY2luZyIsIndyaXRpbmdNb2RlIiwieEhlaWdodCIsIngxIiwieDIiLCJ4Q2hhbm5lbFNlbGVjdG9yIiwieGxpbmtBY3R1YXRlIiwieGxpbmtBcmNyb2xlIiwieGxpbmtIcmVmIiwieGxpbmtSb2xlIiwieGxpbmtTaG93IiwieGxpbmtUaXRsZSIsInhsaW5rVHlwZSIsInhtbEJhc2UiLCJ4bWxMYW5nIiwieG1sU3BhY2UiLCJ5MSIsInkyIiwieUNoYW5uZWxTZWxlY3RvciIsInoiLCJ6b29tQW5kUGFuIiwiU1ZHRE9NUHJvcGVydHlDb25maWciLCJET01BdHRyaWJ1dGVOYW1lc3BhY2VzIiwiZ2V0TGVhZk5vZGUiLCJnZXRTaWJsaW5nTm9kZSIsImdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQiLCJub2RlU3RhcnQiLCJub2RlRW5kIiwiY29udGVudEtleSIsImlzQ29sbGFwc2VkIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzT2Zmc2V0IiwiZ2V0SUVPZmZzZXRzIiwic2VsZWN0aW9uIiwic2VsZWN0ZWRSYW5nZSIsImNyZWF0ZVJhbmdlIiwic2VsZWN0ZWRMZW5ndGgiLCJmcm9tU3RhcnQiLCJkdXBsaWNhdGUiLCJtb3ZlVG9FbGVtZW50VGV4dCIsInNldEVuZFBvaW50IiwiZW5kT2Zmc2V0IiwiZ2V0TW9kZXJuT2Zmc2V0cyIsImdldFNlbGVjdGlvbiIsInJhbmdlQ291bnQiLCJjdXJyZW50UmFuZ2UiLCJnZXRSYW5nZUF0Iiwic3RhcnRDb250YWluZXIiLCJlbmRDb250YWluZXIiLCJpc1NlbGVjdGlvbkNvbGxhcHNlZCIsInJhbmdlTGVuZ3RoIiwidG9TdHJpbmciLCJ0ZW1wUmFuZ2UiLCJjbG9uZVJhbmdlIiwic2VsZWN0Tm9kZUNvbnRlbnRzIiwic2V0RW5kIiwiaXNUZW1wUmFuZ2VDb2xsYXBzZWQiLCJkZXRlY3Rpb25SYW5nZSIsInNldFN0YXJ0IiwiaXNCYWNrd2FyZCIsImNvbGxhcHNlZCIsInNldElFT2Zmc2V0cyIsIm9mZnNldHMiLCJyYW5nZSIsIm1vdmVTdGFydCIsIm1vdmVFbmQiLCJzZWxlY3QiLCJzZXRNb2Rlcm5PZmZzZXRzIiwiZXh0ZW5kIiwidGVtcCIsInN0YXJ0TWFya2VyIiwiZW5kTWFya2VyIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJ1c2VJRU9mZnNldHMiLCJSZWFjdERPTVNlbGVjdGlvbiIsImdldE9mZnNldHMiLCJzZXRPZmZzZXRzIiwiaXNOb2RlIiwib2JqZWN0IiwiTm9kZSIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZm9jdXMiLCJpc0luRG9jdW1lbnQiLCJnZXRBY3RpdmVFbGVtZW50IiwiaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsInByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24iLCJjdXJGb2N1c2VkRWxlbSIsInByaW9yRm9jdXNlZEVsZW0iLCJwcmlvclNlbGVjdGlvblJhbmdlIiwic2V0U2VsZWN0aW9uIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJwYXJlbnRFbGVtZW50IiwiY3JlYXRlVGV4dFJhbmdlIiwiY29sbGFwc2UiLCJib2R5Iiwic3VwcG9ydGVkSW5wdXRUeXBlcyIsImRhdGUiLCJkYXRldGltZSIsImRhdGV0aW1lLWxvY2FsIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwic2VhcmNoIiwidGVsIiwidGltZSIsInVybCIsIndlZWsiLCJzaGFsbG93RXF1YWwiLCJvYmpBIiwib2JqQiIsImtleXNBIiwia2V5c0IiLCJ0b3AiLCJib3VuZGluZ1RvcCIsImxlZnQiLCJib3VuZGluZ0xlZnQiLCJjb25zdHJ1Y3RTZWxlY3RFdmVudCIsIm1vdXNlRG93biIsImN1cnJlbnRTZWxlY3Rpb24iLCJsYXN0U2VsZWN0aW9uIiwic3ludGhldGljRXZlbnQiLCJza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQiLCJvblNlbGVjdCIsIm9uU2VsZWN0Q2FwdHVyZSIsInRvcENvbnRleHRNZW51IiwidG9wTW91c2VVcCIsImhhc0xpc3RlbmVyIiwiT05fU0VMRUNUX0tFWSIsImRpZFB1dExpc3RlbmVyIiwicmVnaXN0ZXJEZWZhdWx0IiwibGlzdGVuZXJBdFBoYXNlIiwicHJvcGFnYXRpb25QaGFzZSIsImdldExpc3RlbmVyIiwiYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcyIsInVwd2FyZHMiLCJwaGFzZSIsIlByb3BhZ2F0aW9uUGhhc2VzIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiYWNjdW11bGF0ZUludG8iLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlIiwiX3RhcmdldEluc3QiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlU2tpcFRhcmdldCIsImFjY3VtdWxhdGVEaXNwYXRjaGVzIiwiaWdub3JlZERpcmVjdGlvbiIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzU2luZ2xlIiwiZXZlbnRzIiwiZm9yRWFjaEFjY3VtdWxhdGVkIiwiYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQiLCJhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyIsIlN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50IiwiQW5pbWF0aW9uRXZlbnRJbnRlcmZhY2UiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiU3ludGhldGljQ2xpcGJvYXJkRXZlbnQiLCJDbGlwYm9hcmRFdmVudEludGVyZmFjZSIsImNsaXBib2FyZERhdGEiLCJTeW50aGV0aWNGb2N1c0V2ZW50IiwiU3ludGhldGljVUlFdmVudCIsIkZvY3VzRXZlbnRJbnRlcmZhY2UiLCJnZXRFdmVudEtleSIsIm5vcm1hbGl6ZUtleSIsImNoYXJDb2RlIiwiZ2V0RXZlbnRDaGFyQ29kZSIsInRyYW5zbGF0ZVRvS2V5IiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsOCw5LDEyLDEzLDE2LDE3LDE4LDE5LDIwLDI3LDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQ1LDQ2LDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzLDE0NCwxNDUsMjI0LCJTeW50aGV0aWNLZXlib2FyZEV2ZW50IiwiZ2V0RXZlbnRNb2RpZmllclN0YXRlIiwiS2V5Ym9hcmRFdmVudEludGVyZmFjZSIsImxvY2F0aW9uIiwic2hpZnRLZXkiLCJyZXBlYXQiLCJsb2NhbGUiLCJnZXRNb2RpZmllclN0YXRlIiwiU3ludGhldGljRHJhZ0V2ZW50IiwiRHJhZ0V2ZW50SW50ZXJmYWNlIiwiZGF0YVRyYW5zZmVyIiwiU3ludGhldGljVG91Y2hFdmVudCIsIlRvdWNoRXZlbnRJbnRlcmZhY2UiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiU3ludGhldGljVHJhbnNpdGlvbkV2ZW50IiwiVHJhbnNpdGlvbkV2ZW50SW50ZXJmYWNlIiwiSW50ZXJmYWNlIiwibm9ybWFsaXplIiwiZGVmYXVsdFByZXZlbnRlZCIsImlzRGVmYXVsdFByZXZlbnRlZCIsInRoYXRSZXR1cm5zVHJ1ZSIsInRoYXRSZXR1cm5zRmFsc2UiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzIiwiUHJveHkiLCJFdmVudEludGVyZmFjZSIsImN1cnJlbnRUYXJnZXQiLCJ0aGF0UmV0dXJuc051bGwiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50IiwiU3VwZXIiLCJFIiwiZm91ckFyZ3VtZW50UG9vbGVyIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJVSUV2ZW50SW50ZXJmYWNlIiwidmlldyIsIm1vZGlmaWVyU3RhdGVHZXR0ZXIiLCJrZXlBcmciLCJrZXlQcm9wIiwibW9kaWZpZXJLZXlUb1Byb3AiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiVmlld3BvcnRNZXRyaWNzIiwiTW91c2VFdmVudEludGVyZmFjZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJidXR0b25zIiwicGFnZVgiLCJjdXJyZW50U2Nyb2xsTGVmdCIsInBhZ2VZIiwiY3VycmVudFNjcm9sbFRvcCIsIlN5bnRoZXRpY1doZWVsRXZlbnQiLCJXaGVlbEV2ZW50SW50ZXJmYWNlIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJhYm9ydCIsIm9uQWJvcnQiLCJvbkFib3J0Q2FwdHVyZSIsImFuaW1hdGlvbkVuZCIsIm9uQW5pbWF0aW9uRW5kIiwib25BbmltYXRpb25FbmRDYXB0dXJlIiwiYW5pbWF0aW9uSXRlcmF0aW9uIiwib25BbmltYXRpb25JdGVyYXRpb24iLCJvbkFuaW1hdGlvbkl0ZXJhdGlvbkNhcHR1cmUiLCJhbmltYXRpb25TdGFydCIsIm9uQW5pbWF0aW9uU3RhcnQiLCJvbkFuaW1hdGlvblN0YXJ0Q2FwdHVyZSIsImJsdXIiLCJvbkJsdXIiLCJvbkJsdXJDYXB0dXJlIiwiY2FuUGxheSIsIm9uQ2FuUGxheSIsIm9uQ2FuUGxheUNhcHR1cmUiLCJjYW5QbGF5VGhyb3VnaCIsIm9uQ2FuUGxheVRocm91Z2giLCJvbkNhblBsYXlUaHJvdWdoQ2FwdHVyZSIsImNsaWNrIiwib25Db250ZXh0TWVudSIsIm9uQ29udGV4dE1lbnVDYXB0dXJlIiwiY29weSIsIm9uQ29weSIsIm9uQ29weUNhcHR1cmUiLCJjdXQiLCJvbkN1dCIsIm9uQ3V0Q2FwdHVyZSIsImRvdWJsZUNsaWNrIiwiZHJhZyIsIm9uRHJhZyIsIm9uRHJhZ0NhcHR1cmUiLCJkcmFnRW5kIiwib25EcmFnRW5kIiwib25EcmFnRW5kQ2FwdHVyZSIsImRyYWdFbnRlciIsIm9uRHJhZ0VudGVyIiwib25EcmFnRW50ZXJDYXB0dXJlIiwiZHJhZ0V4aXQiLCJvbkRyYWdFeGl0Iiwib25EcmFnRXhpdENhcHR1cmUiLCJkcmFnTGVhdmUiLCJvbkRyYWdMZWF2ZSIsIm9uRHJhZ0xlYXZlQ2FwdHVyZSIsImRyYWdPdmVyIiwib25EcmFnT3ZlciIsIm9uRHJhZ092ZXJDYXB0dXJlIiwiZHJhZ1N0YXJ0Iiwib25EcmFnU3RhcnQiLCJvbkRyYWdTdGFydENhcHR1cmUiLCJkcm9wIiwib25Ecm9wIiwib25Ecm9wQ2FwdHVyZSIsImR1cmF0aW9uQ2hhbmdlIiwib25EdXJhdGlvbkNoYW5nZSIsIm9uRHVyYXRpb25DaGFuZ2VDYXB0dXJlIiwiZW1wdGllZCIsIm9uRW1wdGllZCIsIm9uRW1wdGllZENhcHR1cmUiLCJlbmNyeXB0ZWQiLCJvbkVuY3J5cHRlZCIsIm9uRW5jcnlwdGVkQ2FwdHVyZSIsImVuZGVkIiwib25FbmRlZCIsIm9uRW5kZWRDYXB0dXJlIiwib25FcnJvciIsIm9uRXJyb3JDYXB0dXJlIiwib25Gb2N1cyIsIm9uRm9jdXNDYXB0dXJlIiwib25JbnB1dCIsIm9uSW5wdXRDYXB0dXJlIiwiaW52YWxpZCIsIm9uSW52YWxpZCIsIm9uSW52YWxpZENhcHR1cmUiLCJrZXlEb3duIiwib25LZXlEb3duIiwib25LZXlEb3duQ2FwdHVyZSIsImtleVByZXNzIiwib25LZXlQcmVzcyIsIm9uS2V5UHJlc3NDYXB0dXJlIiwia2V5VXAiLCJvbktleVVwIiwib25LZXlVcENhcHR1cmUiLCJsb2FkIiwib25Mb2FkIiwib25Mb2FkQ2FwdHVyZSIsImxvYWRlZERhdGEiLCJvbkxvYWRlZERhdGEiLCJvbkxvYWRlZERhdGFDYXB0dXJlIiwibG9hZGVkTWV0YWRhdGEiLCJvbkxvYWRlZE1ldGFkYXRhIiwib25Mb2FkZWRNZXRhZGF0YUNhcHR1cmUiLCJsb2FkU3RhcnQiLCJvbkxvYWRTdGFydCIsIm9uTG9hZFN0YXJ0Q2FwdHVyZSIsIm1vdXNlTW92ZSIsIm1vdXNlT3V0Iiwib25Nb3VzZU91dCIsIm9uTW91c2VPdXRDYXB0dXJlIiwibW91c2VPdmVyIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlT3ZlckNhcHR1cmUiLCJtb3VzZVVwIiwicGFzdGUiLCJvblBhc3RlIiwib25QYXN0ZUNhcHR1cmUiLCJwYXVzZSIsIm9uUGF1c2UiLCJvblBhdXNlQ2FwdHVyZSIsInBsYXkiLCJvblBsYXkiLCJvblBsYXlDYXB0dXJlIiwicGxheWluZyIsIm9uUGxheWluZyIsIm9uUGxheWluZ0NhcHR1cmUiLCJwcm9ncmVzcyIsIm9uUHJvZ3Jlc3MiLCJvblByb2dyZXNzQ2FwdHVyZSIsInJhdGVDaGFuZ2UiLCJvblJhdGVDaGFuZ2UiLCJvblJhdGVDaGFuZ2VDYXB0dXJlIiwib25SZXNldCIsIm9uUmVzZXRDYXB0dXJlIiwic2Nyb2xsIiwib25TY3JvbGwiLCJvblNjcm9sbENhcHR1cmUiLCJzZWVrZWQiLCJvblNlZWtlZCIsIm9uU2Vla2VkQ2FwdHVyZSIsInNlZWtpbmciLCJvblNlZWtpbmciLCJvblNlZWtpbmdDYXB0dXJlIiwic3RhbGxlZCIsIm9uU3RhbGxlZCIsIm9uU3RhbGxlZENhcHR1cmUiLCJvblN1Ym1pdCIsIm9uU3VibWl0Q2FwdHVyZSIsInN1c3BlbmQiLCJvblN1c3BlbmQiLCJvblN1c3BlbmRDYXB0dXJlIiwidGltZVVwZGF0ZSIsIm9uVGltZVVwZGF0ZSIsIm9uVGltZVVwZGF0ZUNhcHR1cmUiLCJ0b3VjaENhbmNlbCIsIm9uVG91Y2hDYW5jZWwiLCJvblRvdWNoQ2FuY2VsQ2FwdHVyZSIsInRvdWNoRW5kIiwib25Ub3VjaEVuZCIsIm9uVG91Y2hFbmRDYXB0dXJlIiwidG91Y2hNb3ZlIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoTW92ZUNhcHR1cmUiLCJ0b3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0Iiwib25Ub3VjaFN0YXJ0Q2FwdHVyZSIsInRyYW5zaXRpb25FbmQiLCJvblRyYW5zaXRpb25FbmQiLCJvblRyYW5zaXRpb25FbmRDYXB0dXJlIiwidm9sdW1lQ2hhbmdlIiwib25Wb2x1bWVDaGFuZ2UiLCJvblZvbHVtZUNoYW5nZUNhcHR1cmUiLCJ3YWl0aW5nIiwib25XYWl0aW5nIiwib25XYWl0aW5nQ2FwdHVyZSIsIndoZWVsIiwib25XaGVlbCIsIm9uV2hlZWxDYXB0dXJlIiwidG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnIiwidG9wQW5pbWF0aW9uRW5kIiwidG9wQW5pbWF0aW9uSXRlcmF0aW9uIiwidG9wQW5pbWF0aW9uU3RhcnQiLCJ0b3BDb3B5IiwidG9wQ3V0IiwidG9wRG91YmxlQ2xpY2siLCJ0b3BEcmFnIiwidG9wRHJhZ0VuZCIsInRvcERyYWdFbnRlciIsInRvcERyYWdFeGl0IiwidG9wRHJhZ0xlYXZlIiwidG9wRHJhZ092ZXIiLCJ0b3BEcmFnU3RhcnQiLCJ0b3BEcm9wIiwidG9wTW91c2VNb3ZlIiwidG9wU2Nyb2xsIiwidG9wVG91Y2hDYW5jZWwiLCJ0b3BUb3VjaEVuZCIsInRvcFRvdWNoTW92ZSIsInRvcFRvdWNoU3RhcnQiLCJ0b3BUcmFuc2l0aW9uRW5kIiwidG9wV2hlZWwiLCJPTl9DTElDS19LRVkiLCJvbkNsaWNrTGlzdGVuZXJzIiwiRXZlbnRDb25zdHJ1Y3RvciIsIndpbGxEZWxldGVMaXN0ZW5lciIsImluamVjdCIsImFscmVhZHlJbmplY3RlZCIsImluamVjdFJlYWN0RXZlbnRMaXN0ZW5lciIsImluamVjdEV2ZW50UGx1Z2luT3JkZXIiLCJpbmplY3RDb21wb25lbnRUcmVlIiwiaW5qZWN0VHJlZVRyYXZlcnNhbCIsIlJlYWN0RE9NVHJlZVRyYXZlcnNhbCIsImluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSIsImluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzcyIsImluamVjdFRleHRDb21wb25lbnRDbGFzcyIsImluamVjdERPTVByb3BlcnR5Q29uZmlnIiwiaW5qZWN0RW1wdHlDb21wb25lbnRGYWN0b3J5IiwiaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb24iLCJpbmplY3RCYXRjaGluZ1N0cmF0ZWd5IiwiaW5qZWN0RW52aXJvbm1lbnQiLCJmaW5kRE9NTm9kZSIsImNvbXBvbmVudE9yRWxlbWVudCIsIlJlYWN0SW5zdGFuY2VNYXAiLCJnZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlIiwicmVuZGVyIiwiX3JlbmRlcmVkTm9kZVR5cGUiLCJSZWFjdE5vZGVUeXBlcyIsIkNPTVBPU0lURSIsIl9yZW5kZXJlZENvbXBvbmVudCIsIk5BVElWRSIsIkVNUFRZIiwiZXNjYXBlciIsIkVTQ0FQRV9MT09LVVAiLCJFU0NBUEVfUkVHRVgiLCImIiwiPiIsIjwiLCJcIiIsIiciLCJpbnNlcnRUcmVlQ2hpbGRyZW4iLCJ0cmVlIiwiZW5hYmxlTGF6eSIsIm9sZE5vZGUiLCJuZXdUcmVlIiwicGFyZW50VHJlZSIsImFwcGVuZENoaWxkIiwiRUxFTUVOVF9OT0RFX1RZUEUiLCJET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJyZWNvbXB1dGVQbHVnaW5PcmRlcmluZyIsIkV2ZW50UGx1Z2luT3JkZXIiLCJwbHVnaW5OYW1lIiwibmFtZXNUb1BsdWdpbnMiLCJQbHVnaW5Nb2R1bGUiLCJwbHVnaW5JbmRleCIsInBsdWdpbnMiLCJwdWJsaXNoZWRFdmVudHMiLCJldmVudE5hbWUiLCJwdWJsaXNoRXZlbnRGb3JQbHVnaW4iLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJwaGFzZU5hbWUiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lIiwicHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUiLCJyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsIkluamVjdGVkRXZlbnRQbHVnaW5PcmRlciIsImluamVjdGVkTmFtZXNUb1BsdWdpbnMiLCJpc09yZGVyaW5nRGlydHkiLCJnZXRQbHVnaW5Nb2R1bGVGb3JFdmVudCIsIl9yZXNldEV2ZW50UGx1Z2lucyIsImlzRW5kaXNoIiwiaXNNb3ZlaXNoIiwiaXNTdGFydGlzaCIsImV4ZWN1dGVEaXNwYXRjaCIsInNpbXVsYXRlZCIsIlJlYWN0RXJyb3JVdGlscyIsImludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaCIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlciIsImRpc3BhdGNoTGlzdGVuZXJzIiwiZGlzcGF0Y2hJbnN0YW5jZXMiLCJleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbCIsImV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWUiLCJleGVjdXRlRGlyZWN0RGlzcGF0Y2giLCJkaXNwYXRjaExpc3RlbmVyIiwiZGlzcGF0Y2hJbnN0YW5jZSIsInJlcyIsImhhc0Rpc3BhdGNoZXMiLCJDb21wb25lbnRUcmVlIiwiVHJlZVRyYXZlcnNhbCIsIkluamVjdGVkIiwiY3VycmVudCIsIm5leHQiLCJjdXJyZW50SXNBcnJheSIsIm5leHRJc0FycmF5IiwiY29uY2F0IiwiYXJyIiwibGlzdGVuZXJCYW5rIiwiZXZlbnRRdWV1ZSIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCIsImV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsIiwiYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUiLCJwb3NzaWJsZVBsdWdpbiIsImV4dHJhY3RlZEV2ZW50cyIsInByb2Nlc3NpbmdFdmVudFF1ZXVlIiwicmV0aHJvd0NhdWdodEVycm9yIiwiX19wdXJnZSIsIl9fZ2V0TGlzdGVuZXJCYW5rIiwicnVuRXZlbnRRdWV1ZUluQmF0Y2giLCJSZWFjdEV2ZW50RW1pdHRlck1peGluIiwicmVmcmVzaFNjcm9sbFZhbHVlcyIsIm1ha2VQcmVmaXhNYXAiLCJzdHlsZVByb3AiLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsInByZWZpeGVkRXZlbnROYW1lcyIsInZlbmRvclByZWZpeGVzIiwicHJlZml4TWFwIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsImV2ZW50TmFtZVN1ZmZpeCIsImlzU3VwcG9ydGVkIiwidXNlSGFzRmVhdHVyZSIsImltcGxlbWVudGF0aW9uIiwiaGFzRmVhdHVyZSIsImdldExpc3RlbmluZ0ZvckRvY3VtZW50IiwibW91bnRBdCIsInRvcExpc3RlbmVyc0lES2V5IiwicmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyIiwiYWxyZWFkeUxpc3RlbmluZ1RvIiwiaGFzRXZlbnRQYWdlWFkiLCJpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSIsInRvcEV2ZW50TWFwcGluZyIsInJhbmRvbSIsImNvbnRlbnREb2N1bWVudEhhbmRsZSIsImlzTGlzdGVuaW5nIiwiZGVwZW5kZW5jeSIsImVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZyIsImNyZWF0ZUV2ZW50IiwiY2hlY2tNYXNrIiwiYml0bWFzayIsIkRPTVByb3BlcnR5SW5qZWN0aW9uIiwiZG9tUHJvcGVydHlDb25maWciLCJJbmplY3Rpb24iLCJET01NdXRhdGlvbk1ldGhvZHMiLCJfaXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnMiLCJsb3dlckNhc2VkIiwicHJvcENvbmZpZyIsImdldFBvc3NpYmxlU3RhbmRhcmROYW1lIiwiaXNDdXN0b21BdHRyaWJ1dGVGbiIsImdldFJlbmRlcmVkTmF0aXZlT3JUZXh0RnJvbUNvbXBvbmVudCIsInJlbmRlcmVkIiwibmF0aXZlSW5zdCIsImludGVybmFsSW5zdGFuY2VLZXkiLCJwcmVjYWNoZUNoaWxkTm9kZXMiLCJvdXRlciIsImNoaWxkSW5zdCIsImNoaWxkSUQiLCJBVFRSX05BTUUiLCJwYXJlbnRzIiwiY2xvc2VzdCIsInBvcCIsInZhbGlkYXRlRE9NTmVzdGluZyIsIlJlYWN0RE9NQ29udGFpbmVySW5mbyIsInRvcExldmVsV3JhcHBlciIsImluZm8iLCJET0NfTk9ERV9UWVBFIiwiUmVhY3RET01GZWF0dXJlRmxhZ3MiLCJhZGxlcjMyIiwiY2hhckNvZGVBdCIsIk1PRCIsIlRBR19FTkQiLCJDT01NRU5UX1NUQVJUIiwiUmVhY3RNYXJrdXBDaGVja3N1bSIsIkNIRUNLU1VNX0FUVFJfTkFNRSIsImFkZENoZWNrc3VtVG9NYXJrdXAiLCJjaGVja3N1bSIsImNhblJldXNlTWFya3VwIiwiZXhpc3RpbmdDaGVja3N1bSIsIm1hcmt1cENoZWNrc3VtIiwiaW5qZWN0ZWQiLCJlbnZpcm9ubWVudCIsImNhdWdodEVycm9yIiwiUmVhY3RFbGVtZW50IiwiZ2V0VHlwZSIsImlzVmFsaWRFbGVtZW50IiwiX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSIsImhhcyIsIl9jYWxsYmFja3MiLCJfY29udGV4dHMiLCJjYWxsYmFja3MiLCJjb250ZXh0cyIsImxlbiIsIlJlYWN0RmVhdHVyZUZsYWdzIiwibG9nVG9wTGV2ZWxSZW5kZXJzIiwiUmVhY3RPd25lciIsImlzVmFsaWRPd25lciIsImF0dGFjaFJlZiIsImRldGFjaFJlZiIsImFkZENvbXBvbmVudEFzUmVmVG8iLCJyZWYiLCJyZW1vdmVDb21wb25lbnRBc1JlZkZyb20iLCJvd25lclB1YmxpY0luc3RhbmNlIiwicmVmcyIsIlJlYWN0UmVmIiwiYXR0YWNoUmVmcyIsImluc3RhbmNlIiwiX293bmVyIiwic2hvdWxkVXBkYXRlUmVmcyIsInByZXZFbXB0eSIsIm5leHRFbXB0eSIsImRldGFjaFJlZnMiLCJpbnRlcm5hbEluc3RhbmNlIiwiX2NvbnRleHQiLCJyZWZzQ2hhbmdlZCIsInBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSIsInVwZGF0ZUJhdGNoTnVtYmVyIiwiX3VwZGF0ZUJhdGNoTnVtYmVyIiwidHJhbnNhY3Rpb25XcmFwcGVycyIsIndyYXBwZXJJbml0RGF0YSIsIl9pc0luVHJhbnNhY3Rpb24iLCJpc0luVHJhbnNhY3Rpb24iLCJlcnJvclRocm93biIsImluaXRpYWxpemVBbGwiLCJjbG9zZUFsbCIsImVyciIsInN0YXJ0SW5kZXgiLCJ3cmFwcGVyIiwiT0JTRVJWRURfRVJST1IiLCJpbml0RGF0YSIsImVuc3VyZUluamVjdGVkIiwiYmF0Y2hpbmdTdHJhdGVneSIsIlJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24iLCJkaXJ0eUNvbXBvbmVudHNMZW5ndGgiLCJjYWxsYmFja1F1ZXVlIiwicmVjb25jaWxlVHJhbnNhY3Rpb24iLCJtb3VudE9yZGVyQ29tcGFyYXRvciIsImMxIiwiYzIiLCJfbW91bnRPcmRlciIsInJ1bkJhdGNoZWRVcGRhdGVzIiwiZGlydHlDb21wb25lbnRzIiwic29ydCIsIl9wZW5kaW5nQ2FsbGJhY2tzIiwibWFya2VyTmFtZSIsIm5hbWVkQ29tcG9uZW50IiwiY29uc29sZSIsInRpbWVFbmQiLCJlbnF1ZXVlVXBkYXRlIiwiYXNhcENhbGxiYWNrUXVldWUiLCJhc2FwRW5xdWV1ZWQiLCJORVNURURfVVBEQVRFUyIsIlVQREFURV9RVUVVRUlORyIsIlJlYWN0VXBkYXRlc0luamVjdGlvbiIsIlJlY29uY2lsZVRyYW5zYWN0aW9uIiwiX2JhdGNoaW5nU3RyYXRlZ3kiLCJnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUiLCJwdWJsaWNJbnN0YW5jZSIsImNhbGxlck5hbWUiLCJSZWFjdFVwZGF0ZVF1ZXVlIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUNhbGxiYWNrIiwidmFsaWRhdGVDYWxsYmFjayIsImVucXVldWVDYWxsYmFja0ludGVybmFsIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiX3BlbmRpbmdGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJjb21wbGV0ZVN0YXRlIiwiX3BlbmRpbmdTdGF0ZVF1ZXVlIiwiX3BlbmRpbmdSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJwYXJ0aWFsU3RhdGUiLCJlbnF1ZXVlRWxlbWVudEludGVybmFsIiwibmV3RWxlbWVudCIsIl9wZW5kaW5nRWxlbWVudCIsIlN0YXRlbGVzc0NvbXBvbmVudCIsIndhcm5JZkludmFsaWRFbGVtZW50Iiwic2hvdWxkQ29uc3RydWN0IiwiaXNSZWFjdENvbXBvbmVudCIsIlJlYWN0Q3VycmVudE93bmVyIiwiZW1wdHlPYmplY3QiLCJ1cGRhdGVyIiwibmV4dE1vdW50SUQiLCJSZWFjdENvbXBvc2l0ZUNvbXBvbmVudE1peGluIiwiY29uc3RydWN0IiwiX2luc3RhbmNlIiwiX2NhbGxlZENvbXBvbmVudFdpbGxVbm1vdW50IiwicmVuZGVyZWRFbGVtZW50IiwicHVibGljUHJvcHMiLCJfcHJvY2Vzc1Byb3BzIiwicHVibGljQ29udGV4dCIsIl9wcm9jZXNzQ29udGV4dCIsIl9jb25zdHJ1Y3RDb21wb25lbnQiLCJpbml0aWFsU3RhdGUiLCJzdGF0ZSIsInVuc3RhYmxlX2hhbmRsZUVycm9yIiwicGVyZm9ybUluaXRpYWxNb3VudFdpdGhFcnJvckhhbmRsaW5nIiwicGVyZm9ybUluaXRpYWxNb3VudCIsImNvbXBvbmVudERpZE1vdW50IiwiX2NvbnN0cnVjdENvbXBvbmVudFdpdGhvdXRPd25lciIsImluc3RhbmNlT3JFbGVtZW50IiwiX3Byb2Nlc3NQZW5kaW5nU3RhdGUiLCJjb21wb25lbnRXaWxsTW91bnQiLCJfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50IiwiX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQiLCJfcHJvY2Vzc0NoaWxkQ29udGV4dCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiX21hc2tDb250ZXh0IiwiY29udGV4dFR5cGVzIiwibWFza2VkQ29udGV4dCIsImNvbnRleHROYW1lIiwiY3VycmVudENvbnRleHQiLCJjaGlsZENvbnRleHQiLCJnZXRDaGlsZENvbnRleHQiLCJjaGlsZENvbnRleHRUeXBlcyIsIm5ld1Byb3BzIiwiX2NoZWNrUHJvcFR5cGVzIiwiZXgiLCJuZXh0Q29udGV4dCIsInByZXZDb250ZXh0IiwicHJldlBhcmVudEVsZW1lbnQiLCJuZXh0UGFyZW50RWxlbWVudCIsInByZXZVbm1hc2tlZENvbnRleHQiLCJuZXh0VW5tYXNrZWRDb250ZXh0Iiwid2lsbFJlY2VpdmUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFN0YXRlIiwic2hvdWxkVXBkYXRlIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiX3BlcmZvcm1Db21wb25lbnRVcGRhdGUiLCJwYXJ0aWFsIiwidW5tYXNrZWRDb250ZXh0IiwicHJldlByb3BzIiwicHJldlN0YXRlIiwiaGFzQ29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIl91cGRhdGVSZW5kZXJlZENvbXBvbmVudCIsInByZXZDb21wb25lbnRJbnN0YW5jZSIsInByZXZSZW5kZXJlZEVsZW1lbnQiLCJuZXh0UmVuZGVyZWRFbGVtZW50Iiwib2xkTmF0aXZlTm9kZSIsIl9yZXBsYWNlTm9kZVdpdGhNYXJrdXAiLCJwcmV2SW5zdGFuY2UiLCJfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50V2l0aG91dE93bmVyT3JDb250ZXh0IiwicmVuZGVyZWRDb21wb25lbnQiLCJwdWJsaWNDb21wb25lbnRJbnN0YW5jZSIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50IiwiZW1wdHlDb21wb25lbnRGYWN0b3J5IiwiUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbiIsImZhY3RvcnkiLCJjcmVhdGUiLCJnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQiLCJjb21wb25lbnRDbGFzcyIsInRhZ1RvQ29tcG9uZW50Q2xhc3MiLCJhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3MiLCJjcmVhdGVJbnRlcm5hbENvbXBvbmVudCIsImdlbmVyaWNDb21wb25lbnRDbGFzcyIsImNyZWF0ZUluc3RhbmNlRm9yVGV4dCIsInRleHRDb21wb25lbnRDbGFzcyIsImlzVGV4dENvbXBvbmVudCIsIlJlYWN0TmF0aXZlQ29tcG9uZW50SW5qZWN0aW9uIiwiaW5qZWN0Q29tcG9uZW50Q2xhc3NlcyIsImNvbXBvbmVudENsYXNzZXMiLCJpc0ludGVybmFsQ29tcG9uZW50VHlwZSIsIlJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlciIsIl9tb3VudEltYWdlIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsImFyZzAiLCJXSElURVNQQUNFX1RFU1QiLCJOT05WSVNJQkxFX1RFU1QiLCJ0ZXN0RWxlbWVudCIsInRleHROb2RlIiwiZGVsZXRlRGF0YSIsInByZXZUeXBlIiwibmV4dFR5cGUiLCJmaXJzdERpZmZlcmVuY2VJbmRleCIsInN0cmluZzEiLCJzdHJpbmcyIiwibWluTGVuIiwiZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyIiwiaW50ZXJuYWxHZXRJRCIsIm1vdW50Q29tcG9uZW50SW50b05vZGUiLCJ3cmFwcGVySW5zdGFuY2UiLCJzaG91bGRSZXVzZU1hcmt1cCIsIndyYXBwZWRFbGVtZW50IiwiUmVhY3RNb3VudCIsIl9tb3VudEltYWdlSW50b05vZGUiLCJiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZSIsImNvbXBvbmVudEluc3RhbmNlIiwidW5tb3VudENvbXBvbmVudEZyb21Ob2RlIiwiaGFzTm9uUm9vdFJlYWN0Q2hpbGQiLCJyb290RWwiLCJnZXROYXRpdmVSb290SW5zdGFuY2VJbkNvbnRhaW5lciIsInByZXZOYXRpdmVJbnN0YW5jZSIsImdldFRvcExldmVsV3JhcHBlckluQ29udGFpbmVyIiwiUk9PVF9BVFRSX05BTUUiLCJpbnN0YW5jZXNCeVJlYWN0Um9vdElEIiwidG9wTGV2ZWxSb290Q291bnRlciIsIlRvcExldmVsV3JhcHBlciIsInJvb3RJRCIsIl9pbnN0YW5jZXNCeVJlYWN0Um9vdElEIiwic2Nyb2xsTW9uaXRvciIsInJlbmRlckNhbGxiYWNrIiwiX3VwZGF0ZVJvb3RDb21wb25lbnQiLCJwcmV2Q29tcG9uZW50IiwiX3JlbmRlck5ld1Jvb3RDb21wb25lbnQiLCJ3cmFwcGVySUQiLCJyZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsInBhcmVudENvbXBvbmVudCIsIl9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIm5leHRXcmFwcGVkRWxlbWVudCIsInByZXZXcmFwcGVkRWxlbWVudCIsInB1YmxpY0luc3QiLCJ1cGRhdGVkQ2FsbGJhY2siLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwicmVhY3RSb290RWxlbWVudCIsImNvbnRhaW5lckhhc1JlYWN0TWFya3VwIiwiY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQiLCJyb290RWxlbWVudCIsInJvb3RNYXJrdXAiLCJvdXRlckhUTUwiLCJub3JtYWxpemVkTWFya3VwIiwiZGlmZkluZGV4IiwiUmVhY3REZWZhdWx0SW5qZWN0aW9uIiwiUmVhY3RWZXJzaW9uIiwiUmVhY3QiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiTW91bnQiLCJSZWNvbmNpbGVyIiwiX2V4cG9ydCIsIk1haW5IZWFkZXIiLCJfYyIsIlByb3BUeXBlcyIsIkxhenlJbWciLCJCYW5uZXJCb3giLCJfZSIsIl9yZWYiLCJkZWZhdWx0UHJvcHMiLCJpc1JlcXVpcmVkIiwiZ2V0RGF0ZSIsIkhlYWRlckJhbm5lciIsIl9kIiwiZGF5IiwibWFwIiwiYXJyYXkiLCJfZ2V0IiwiX2luaGVyaXRzIiwiX2NyZWF0ZUNsYXNzIiwiX2NsYXNzQ2FsbENoZWNrIiwiY29ubmVjdCIsImZldGNoRXZlbnRzIiwiSGVhZGVyIiwibWFwU3RhdGVUb1Byb3BzIiwiX2EzIiwiX2E0IiwiX2E1IiwiX2E2IiwiX2EyIiwiX2YiLCJfYTEiLCJfQ29tcG9uZW50IiwiZ2V0UHJvdG90eXBlT2YiLCJkaXNwYXRjaCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJDb25zdHJ1Y3RvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUmVmZXJlbmNlRXJyb3IiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9yZWFjdCIsIl9zdG9yZVNoYXBlIiwiX3N0b3JlU2hhcGUyIiwiX3dhcm5pbmciLCJQcm92aWRlciIsIl90aGlzIiwic3RvcmUiLCJDaGlsZHJlbiIsIm9ubHkiLCJvbmVBcmd1bWVudFBvb2xlciIsImNvcHlGaWVsZHNGcm9tIiwiS2xhc3MiLCJpbnN0YW5jZVBvb2wiLCJhMSIsImEyIiwidGhyZWVBcmd1bWVudFBvb2xlciIsImEzIiwiYTQiLCJmaXZlQXJndW1lbnRQb29sZXIiLCJhNSIsInN0YW5kYXJkUmVsZWFzZXIiLCJwb29sU2l6ZSIsIkRFRkFVTFRfUE9PTF9TSVpFIiwiREVGQVVMVF9QT09MRVIiLCJDb3B5Q29uc3RydWN0b3IiLCJwb29sZXIiLCJOZXdLbGFzcyIsImVzY2FwZSIsImVzY2FwZVJlZ2V4IiwiZXNjYXBlckxvb2t1cCIsIj0iLCI6IiwiZXNjYXBlZFN0cmluZyIsInVuZXNjYXBlIiwidW5lc2NhcGVSZWdleCIsInVuZXNjYXBlckxvb2t1cCIsIj0wIiwiPTIiLCJrZXlTdWJzdHJpbmciLCJLZXlFc2NhcGVVdGlscyIsImdldENvbXBvbmVudEtleSIsInRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsIiwibmFtZVNvRmFyIiwiU0VQQVJBVE9SIiwibmV4dE5hbWUiLCJzdWJ0cmVlQ291bnQiLCJuZXh0TmFtZVByZWZpeCIsIlNVQlNFUEFSQVRPUiIsIml0ZXJhdG9yRm4iLCJnZXRJdGVyYXRvckZuIiwiaXRlcmF0b3IiLCJlbnRyaWVzIiwiZG9uZSIsImVudHJ5IiwiZXNjYXBlVXNlclByb3ZpZGVkS2V5IiwidXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgiLCJGb3JFYWNoQm9va0tlZXBpbmciLCJmb3JFYWNoRnVuY3Rpb24iLCJmb3JFYWNoQ29udGV4dCIsImNvdW50IiwiZm9yRWFjaFNpbmdsZUNoaWxkIiwiZm9yRWFjaENoaWxkcmVuIiwiZm9yRWFjaEZ1bmMiLCJNYXBCb29rS2VlcGluZyIsIm1hcFJlc3VsdCIsImtleVByZWZpeCIsIm1hcEZ1bmN0aW9uIiwibWFwQ29udGV4dCIsIm1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQiLCJjaGlsZEtleSIsIm1hcHBlZENoaWxkIiwibWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCIsInRoYXRSZXR1cm5zQXJndW1lbnQiLCJjbG9uZUFuZFJlcGxhY2VLZXkiLCJlc2NhcGVkUHJlZml4IiwibWFwQ2hpbGRyZW4iLCJmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSIsImNvdW50Q2hpbGRyZW4iLCJwcm9jZXNzaW5nQ2hpbGRDb250ZXh0Iiwid2FybkludmFsaWRTZXRTdGF0ZSIsIlJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0RldlRvb2wiLCJvbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dCIsIm9uRW5kUHJvY2Vzc2luZ0NoaWxkQ29udGV4dCIsIm9uU2V0U3RhdGUiLCJSZWFjdERlYnVnVG9vbCIsIm9uTW91bnRSb290Q29tcG9uZW50Iiwib25Nb3VudENvbXBvbmVudCIsIm9uVXBkYXRlQ29tcG9uZW50Iiwib25Vbm1vdW50Q29tcG9uZW50IiwiUmVhY3RDb21wb25lbnQiLCJSZWFjdE5vb3BVcGRhdGVRdWV1ZSIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJ3YXJuVERaIiwidmFsaWRhdGVNZXRob2RPdmVycmlkZSIsImlzQWxyZWFkeURlZmluZWQiLCJzcGVjUG9saWN5IiwiUmVhY3RDbGFzc0ludGVyZmFjZSIsIlJlYWN0Q2xhc3NNaXhpbiIsIlNwZWNQb2xpY3kiLCJPVkVSUklERV9CQVNFIiwiREVGSU5FX01BTlkiLCJERUZJTkVfTUFOWV9NRVJHRUQiLCJtaXhTcGVjSW50b0NvbXBvbmVudCIsInNwZWMiLCJwcm90byIsImF1dG9CaW5kUGFpcnMiLCJfX3JlYWN0QXV0b0JpbmRQYWlycyIsIk1JWElOU19LRVkiLCJSRVNFUlZFRF9TUEVDX0tFWVMiLCJtaXhpbnMiLCJpc1JlYWN0Q2xhc3NNZXRob2QiLCJpc0Z1bmN0aW9uIiwic2hvdWxkQXV0b0JpbmQiLCJhdXRvYmluZCIsImNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uIiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwibWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQiLCJzdGF0aWNzIiwiaXNSZXNlcnZlZCIsImlzSW5oZXJpdGVkIiwibWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyIsIm9uZSIsInR3byIsImJpbmRBdXRvQmluZE1ldGhvZCIsImJvdW5kTWV0aG9kIiwiYmluZEF1dG9CaW5kTWV0aG9kcyIsInBhaXJzIiwiYXV0b0JpbmRLZXkiLCJERUZJTkVfT05DRSIsImluamVjdGVkTWl4aW5zIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0SW5pdGlhbFN0YXRlIiwicmVwbGFjZVN0YXRlIiwibmV3U3RhdGUiLCJSZWFjdENsYXNzQ29tcG9uZW50IiwiY3JlYXRlQ2xhc3MiLCJtZXRob2ROYW1lIiwiaW5qZWN0TWl4aW4iLCJtaXhpbiIsImNyZWF0ZURPTUZhY3RvcnkiLCJjcmVhdGVGYWN0b3J5IiwibWFwT2JqZWN0IiwiUmVhY3RET01GYWN0b3JpZXMiLCJhYmJyIiwiYWRkcmVzcyIsImFydGljbGUiLCJhc2lkZSIsImF1ZGlvIiwiYmRpIiwiYmRvIiwiYmlnIiwiYmxvY2txdW90ZSIsImNhbnZhcyIsImNvZGUiLCJkYXRhbGlzdCIsImRkIiwiZGVsIiwiZGV0YWlscyIsImRmbiIsImRpYWxvZyIsImRsIiwiZHQiLCJlbSIsImZpZWxkc2V0IiwiZmlnY2FwdGlvbiIsImZpZ3VyZSIsImZvb3RlciIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImhlYWQiLCJoZWFkZXIiLCJoZ3JvdXAiLCJpZnJhbWUiLCJpbnMiLCJrYmQiLCJsaSIsIm1haW4iLCJtYXJrIiwibWVudSIsIm1ldGVyIiwibmF2Iiwibm9zY3JpcHQiLCJvbCIsIm91dHB1dCIsInBpY3R1cmUiLCJxIiwicnAiLCJydCIsInJ1YnkiLCJzYW1wIiwic2NyaXB0Iiwic2VjdGlvbiIsInNtYWxsIiwic3Ryb25nIiwic3ViIiwic3VwIiwidGFibGUiLCJ1bCIsInZhciIsInZpZGVvIiwiY2lyY2xlIiwiZGVmcyIsImVsbGlwc2UiLCJsaW5lIiwibGluZWFyR3JhZGllbnQiLCJwb2x5Z29uIiwicG9seWxpbmUiLCJyYWRpYWxHcmFkaWVudCIsInJlY3QiLCJzdG9wIiwidHNwYW4iLCJ2YWxpZGF0ZUV4cGxpY2l0S2V5IiwicGFyZW50VHlwZSIsIl9zdG9yZSIsInZhbGlkYXRlZCIsImdldEFkZGVuZGFGb3JLZXlVc2UiLCJtZXNzYWdlVHlwZSIsImFkZGVuZHVtIiwicGFyZW50TmFtZSIsIm1lbW9pemVyIiwib3duZXJIYXNLZXlVc2VXYXJuaW5nIiwiYWRkZW5kYSIsInBhcmVudE9yT3duZXIiLCJjaGlsZE93bmVyIiwidmFsaWRhdGVDaGlsZEtleXMiLCJ2YWxpZGF0ZVByb3BUeXBlcyIsIlJlYWN0RWxlbWVudFZhbGlkYXRvciIsInZhbGlkVHlwZSIsInZhbGlkYXRlZEZhY3RvcnkiLCJjbG9uZUVsZW1lbnQiLCJSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyIsIm1heWJlSXRlcmFibGUiLCJJVEVSQVRPUl9TWU1CT0wiLCJGQVVYX0lURVJBVE9SX1NZTUJPTCIsIlN5bWJvbCIsImNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyIiwidmFsaWRhdGUiLCJjaGVja1R5cGUiLCJwcm9wRnVsbE5hbWUiLCJBTk9OWU1PVVMiLCJsb2NhdGlvbk5hbWUiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIiLCJleHBlY3RlZFR5cGUiLCJwcm9wVHlwZSIsImdldFByb3BUeXBlIiwicHJlY2lzZVR5cGUiLCJnZXRQcmVjaXNlVHlwZSIsImNyZWF0ZUFueVR5cGVDaGVja2VyIiwidGhhdFJldHVybnMiLCJjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIiLCJ0eXBlQ2hlY2tlciIsImNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlciIsImNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIiLCJleHBlY3RlZENsYXNzIiwiZXhwZWN0ZWRDbGFzc05hbWUiLCJhY3R1YWxDbGFzc05hbWUiLCJnZXRDbGFzc05hbWUiLCJjcmVhdGVFbnVtVHlwZUNoZWNrZXIiLCJleHBlY3RlZFZhbHVlcyIsInZhbHVlc1N0cmluZyIsImNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIiLCJjcmVhdGVVbmlvblR5cGVDaGVja2VyIiwiYXJyYXlPZlR5cGVDaGVja2VycyIsImNoZWNrZXIiLCJjcmVhdGVOb2RlQ2hlY2tlciIsImNyZWF0ZVNoYXBlVHlwZUNoZWNrZXIiLCJzaGFwZVR5cGVzIiwiZXZlcnkiLCJib29sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwiY2FuRGVmaW5lUHJvcGVydHkiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIiQkdHlwZW9mIiwiY29uZmlnIiwiY2hpbGRyZW5MZW5ndGgiLCJjaGlsZEFycmF5Iiwib2xkRWxlbWVudCIsIm5ld0tleSIsIl9zZWxmIiwiX3NvdXJjZSIsIm9ubHlDaGlsZCIsIl9fc3ByZWFkIiwiY3JlYXRlTWl4aW4iLCJET00iLCJzdWJzY3JpYmUiLCJnZXRTdGF0ZSIsImhhc093biIsIndyYXBBY3Rpb25DcmVhdG9ycyIsImFjdGlvbkNyZWF0b3JzIiwiX3JlZHV4IiwiYmluZEFjdGlvbkNyZWF0b3JzIiwid2FybmluZyIsIlJFQUNUX1NUQVRJQ1MiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiYXJpdHkiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uZGl0aW9uIiwiYXJncyIsImFyZ0luZGV4IiwiZnJhbWVzVG9Qb3AiLCJnZXREaXNwbGF5TmFtZSIsIldyYXBwZWRDb21wb25lbnQiLCJ0cnlDYXRjaCIsImN0eCIsImVycm9yT2JqZWN0IiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwibWVyZ2VQcm9wcyIsInNob3VsZFN1YnNjcmliZSIsIm1hcFN0YXRlIiwiZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcyIsIm1hcERpc3BhdGNoIiwiX3dyYXBBY3Rpb25DcmVhdG9yczIiLCJkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiZmluYWxNZXJnZVByb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJfb3B0aW9ucyRwdXJlIiwicHVyZSIsIl9vcHRpb25zJHdpdGhSZWYiLCJ3aXRoUmVmIiwiY2hlY2tNZXJnZWRFcXVhbHMiLCJuZXh0VmVyc2lvbiIsImNvbXB1dGVNZXJnZWRQcm9wcyIsInN0YXRlUHJvcHMiLCJkaXNwYXRjaFByb3BzIiwicGFyZW50UHJvcHMiLCJtZXJnZWRQcm9wcyIsImNvbm5lY3REaXNwbGF5TmFtZSIsIkNvbm5lY3QiLCJfaW52YXJpYW50MiIsInN0b3JlU3RhdGUiLCJjbGVhckNhY2hlIiwiaGF2ZU93blByb3BzQ2hhbmdlZCIsImhhc1N0b3JlU3RhdGVDaGFuZ2VkIiwiY29tcHV0ZVN0YXRlUHJvcHMiLCJmaW5hbE1hcFN0YXRlVG9Qcm9wcyIsImNvbmZpZ3VyZUZpbmFsTWFwU3RhdGUiLCJkb1N0YXRlUHJvcHNEZXBlbmRPbk93blByb3BzIiwibWFwcGVkU3RhdGUiLCJpc0ZhY3RvcnkiLCJjb21wdXRlRGlzcGF0Y2hQcm9wcyIsImZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzIiwiY29uZmlndXJlRmluYWxNYXBEaXNwYXRjaCIsImRvRGlzcGF0Y2hQcm9wc0RlcGVuZE9uT3duUHJvcHMiLCJtYXBwZWREaXNwYXRjaCIsInVwZGF0ZVN0YXRlUHJvcHNJZk5lZWRlZCIsIm5leHRTdGF0ZVByb3BzIiwiX3NoYWxsb3dFcXVhbDIiLCJ1cGRhdGVEaXNwYXRjaFByb3BzSWZOZWVkZWQiLCJuZXh0RGlzcGF0Y2hQcm9wcyIsInVwZGF0ZU1lcmdlZFByb3BzSWZOZWVkZWQiLCJuZXh0TWVyZ2VkUHJvcHMiLCJpc1N1YnNjcmliZWQiLCJ1bnN1YnNjcmliZSIsInRyeVN1YnNjcmliZSIsImhhbmRsZUNoYW5nZSIsInRyeVVuc3Vic2NyaWJlIiwiaGF2ZVN0YXRlUHJvcHNCZWVuUHJlY2FsY3VsYXRlZCIsInN0YXRlUHJvcHNQcmVjYWxjdWxhdGlvbkVycm9yIiwicHJldlN0b3JlU3RhdGUiLCJoYXZlU3RhdGVQcm9wc0NoYW5nZWQiLCJnZXRXcmFwcGVkSW5zdGFuY2UiLCJ3cmFwcGVkSW5zdGFuY2UiLCJzaG91bGRVcGRhdGVTdGF0ZVByb3BzIiwic2hvdWxkVXBkYXRlRGlzcGF0Y2hQcm9wcyIsImhhdmVEaXNwYXRjaFByb3BzQ2hhbmdlZCIsImhhdmVNZXJnZWRQcm9wc0NoYW5nZWQiLCJfZXh0ZW5kcyIsIl9ob2lzdE5vblJlYWN0U3RhdGljczIiLCJhc3NpZ24iLCJfc2hhbGxvd0VxdWFsIiwiX3dyYXBBY3Rpb25DcmVhdG9ycyIsIl9pc1BsYWluT2JqZWN0IiwiX2hvaXN0Tm9uUmVhY3RTdGF0aWNzIiwiX2ludmFyaWFudCIsIl9Qcm92aWRlciIsIl9Qcm92aWRlcjIiLCJfY29ubmVjdCIsIl9jb25uZWN0MiIsIiRleHBvcnQiLCJjb3JlIiwiZmFpbHMiLCJLRVkiLCJleGVjIiwiZXhwIiwiUyIsIkYiLCJ0b0lPYmplY3QiLCIkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaXQiLCIkIiwiZ2V0RGVzYyIsIl9PYmplY3QkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX3giLCJfeDIiLCJfeDMiLCJfYWdhaW4iLCJyZWNlaXZlciIsIkZ1bmN0aW9uIiwiZGVzYyIsImdldHRlciIsInBhcmVudCIsIlAiLCJfT2JqZWN0JGNyZWF0ZSIsIl9PYmplY3Qkc2V0UHJvdG90eXBlT2YiLCJzZXREZXNjIiwiX09iamVjdCRkZWZpbmVQcm9wZXJ0eSIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiaXNMb2FkZWQiLCJoYW5kbGVMb2FkIiwiU3ZnSWNvbiIsImFyaWEtaGlkZGVuIiwiYXJpYS1sYWJlbCIsImdldE1vbnRoIiwiZm9ybWF0RGF0ZSIsIkV2ZW50TGlzdEl0ZW0iLCJfZGUiLCJtb250aHMiLCJ5ZWFyIiwiX3JlZjIiLCJpbm5lckxpbmsiLCJwcmljZSIsImxvY2F0aW9uVXJsIiwic2hvcnREZXNjcmlwdGlvbiIsIlBhZ2UiLCJfZTEiLCJfZGYiLCJBc2lkZSIsIk1haW5Db250ZW50IiwiX2EwIiwiX2UwIiwiX2UyIiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwicGVyZm9ybWFuY2UiLCJtc1BlcmZvcm1hbmNlIiwid2Via2l0UGVyZm9ybWFuY2UiLCJwZXJmb3JtYW5jZU5vdyIsImhpc3RvcnkiLCJSZWFjdE5hdGl2ZU9wZXJhdGlvbkhpc3RvcnlEZXZ0b29sIiwib25OYXRpdmVPcGVyYXRpb24iLCJkZWJ1Z0lEIiwicGF5bG9hZCIsImluc3RhbmNlSUQiLCJjbGVhckhpc3RvcnkiLCJfcHJldmVudENsZWFyaW5nIiwiZ2V0SGlzdG9yeSIsInVwZGF0ZVRyZWUiLCJwYXJlbnRJRCIsIm93bmVySUQiLCJjaGlsZElEcyIsInVwZGF0ZUNvdW50IiwicHVyZ2VEZWVwIiwiaXRlbSIsInJvb3RJRHMiLCJSZWFjdENvbXBvbmVudFRyZWVEZXZ0b29sIiwib25TZXREaXNwbGF5TmFtZSIsIm9uU2V0Q2hpbGRyZW4iLCJuZXh0Q2hpbGRJRHMiLCJwcmV2Q2hpbGRJRHMiLCJuZXh0Q2hpbGRJRCIsIm9uU2V0T3duZXIiLCJvblNldFRleHQiLCJwdXJnZVVubW91bnRlZENvbXBvbmVudHMiLCJfcHJldmVudFB1cmdpbmciLCJnZXRDaGlsZElEcyIsImdldE93bmVySUQiLCJnZXRQYXJlbnRJRCIsImdldFVwZGF0ZUNvdW50IiwiZ2V0Um9vdElEcyIsImdldFJlZ2lzdGVyZWRJRHMiLCJjaGVja0RlYnVnSUQiLCJiZWdpblByb2ZpbGluZyIsImVuZFByb2ZpbGluZyIsImdldEZsdXNoSGlzdG9yeSIsIm9uQmVnaW5GbHVzaCIsIm9uRW5kRmx1c2giLCJvbkJlZ2luTGlmZUN5Y2xlVGltZXIiLCJ0aW1lclR5cGUiLCJvbkVuZExpZmVDeWNsZVRpbWVyIiwib25CZWdpblJlY29uY2lsZXJUaW1lciIsIm9uRW5kUmVjb25jaWxlclRpbWVyIiwiY2hpbGREZWJ1Z0lEcyIsIm93bmVyRGVidWdJRCIsIm9uZUtleU9iaiIsInRvT2JqZWN0Iiwic2hvdWxkVXNlTmF0aXZlIiwidGVzdDEiLCJ0ZXN0MiIsIm9yZGVyMiIsInRlc3QzIiwic3BsaXQiLCJsZXR0ZXIiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJ0aGF0UmV0dXJuc1RoaXMiLCJmb290ZXJMaW5rcyIsIk1haW5Gb290ZXIiLCJBcHAiLCJfYiIsIl9lMyIsIl9mNCIsIm9ic2VydmFibGUiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJlbmhhbmNlciIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiY3VycmVudExpc3RlbmVycyIsImN1cnJlbnRTdGF0ZSIsIl9pc1BsYWluT2JqZWN0MiIsImlzRGlzcGF0Y2hpbmciLCJjdXJyZW50UmVkdWNlciIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiX3N5bWJvbE9ic2VydmFibGUyIiwiX3N5bWJvbE9ic2VydmFibGUiLCJnZXRQcm90b3R5cGUiLCJuYXRpdmVHZXRQcm90b3R5cGUiLCJpc0hvc3RPYmplY3QiLCJpc09iamVjdExpa2UiLCJpc1BsYWluT2JqZWN0Iiwib2JqZWN0VG9TdHJpbmciLCJvYmplY3RUYWciLCJDdG9yIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9iamVjdFByb3RvIiwiZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2UiLCJhY3Rpb25UeXBlIiwiYWN0aW9uTmFtZSIsImFzc2VydFJlZHVjZXJTYW5pdHkiLCJyZWR1Y2VycyIsIl9jcmVhdGVTdG9yZSIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJLZXlzIiwiZmluYWxSZWR1Y2VycyIsInNhbml0eUVycm9yIiwiZmluYWxSZWR1Y2VyS2V5cyIsImhhc0NoYW5nZWQiLCJwcmV2aW91c1N0YXRlRm9yS2V5IiwibmV4dFN0YXRlRm9yS2V5IiwiZXJyb3JNZXNzYWdlIiwiYmluZEFjdGlvbkNyZWF0b3IiLCJhY3Rpb25DcmVhdG9yIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImFwcGx5TWlkZGxld2FyZSIsIl9sZW4iLCJtaWRkbGV3YXJlcyIsIl9rZXkiLCJfZGlzcGF0Y2giLCJjaGFpbiIsIm1pZGRsZXdhcmVBUEkiLCJtaWRkbGV3YXJlIiwiX2NvbXBvc2UyIiwiX2NvbXBvc2UiLCJjb21wb3NlIiwiZnVuY3MiLCJfcmV0IiwibGFzdCIsInJlc3QiLCJyZWR1Y2VSaWdodCIsImNvbXBvc2VkIiwiX2NyZWF0ZVN0b3JlMiIsIl9jb21iaW5lUmVkdWNlcnMiLCJfY29tYmluZVJlZHVjZXJzMiIsIl9iaW5kQWN0aW9uQ3JlYXRvcnMiLCJfYmluZEFjdGlvbkNyZWF0b3JzMiIsIl9hcHBseU1pZGRsZXdhcmUiLCJfYXBwbHlNaWRkbGV3YXJlMiIsInRodW5rTWlkZGxld2FyZSIsIl90b0NvbnN1bWFibGVBcnJheSIsIl8yIiwiX2M1IiwiX3JlZiRpbml0aWFsU3RhdGUiLCJfcmVmJG1pZGRsZXdhcmVzIiwicm9vdFJlZHVjZXIiLCJJT2JqZWN0IiwiQSIsIkIiLCJLIiwiVCIsIiQkIiwiJCRsZW4iLCJnZXRLZXlzIiwiZ2V0U3ltYm9scyIsImlzRW51bSIsIl9PYmplY3QkYXNzaWduIiwiZGVmaW5lZCIsImlzQXJyYXlJdGVyIiwidG9MZW5ndGgiLCJnZXRJdGVyRm4iLCJpdGVyIiwiYXJyYXlMaWtlIiwiTyIsIkMiLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJfQXJyYXkkZnJvbSIsImFycjIiLCJ0b0ludGVnZXIiLCJUT19TVFJJTkciLCJ0aGF0IiwicG9zIiwiJGF0IiwiaXRlcmF0ZWQiLCJfdCIsIl9pIiwicG9pbnQiLCJjb2YiLCJzZXRUb1N0cmluZ1RhZyIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiTkFNRSIsIkxJQlJBUlkiLCJyZWRlZmluZSIsImhpZGUiLCJJdGVyYXRvcnMiLCIkaXRlckNyZWF0ZSIsImdldFByb3RvIiwiSVRFUkFUT1IiLCJCVUdHWSIsIkZGX0lURVJBVE9SIiwiS0VZUyIsIlZBTFVFUyIsInJldHVyblRoaXMiLCJCYXNlIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJnZXRNZXRob2QiLCJUQUciLCJERUZfVkFMVUVTIiwiVkFMVUVTX0JVRyIsIiRuYXRpdmUiLCIkZGVmYXVsdCIsImFkZFRvVW5zY29wYWJsZXMiLCJfayIsIkFyZ3VtZW50cyIsIk5vZGVMaXN0IiwiSFRNTENvbGxlY3Rpb24iLCJQUk9UT1RZUEUiLCJvd24iLCJvdXQiLCJJU19GT1JDRUQiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiSVNfV1JBUCIsIlciLCJhbk9iamVjdCIsIkFycmF5UHJvdG8iLCJjZWlsIiwiZmxvb3IiLCJBUkciLCJjbGFzc29mIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJpdGVyYWJsZSIsImlzT2JqZWN0IiwiY2hlY2siLCJidWdneSIsImFGdW5jdGlvbiIsIlNQRUNJRVMiLCJ1biIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiY2VsIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJjb3VudGVyIiwiT05SRUFEWVNUQVRFQ0hBTkdFIiwicnVuIiwibGlzdG5lciIsIm5leHRUaWNrIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInNldFRpbWVvdXQiLCJjbGVhciIsIm5vdGlmeSIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJQcm9taXNlIiwiZmx1c2giLCJkb21haW4iLCJleGl0IiwidG9nZ2xlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0aGVuIiwidGFzayIsImJpdG1hcCIsImNyZWF0ZURlc2MiLCJkZWYiLCJzdGF0IiwiJE9iamVjdCIsInNldERlc2NzIiwiZ2V0TmFtZXMiLCJlYWNoIiwiREVTQ1JJUFRPUlMiLCJTSEFSRUQiLCJweCIsIl9fZyIsInVpZCIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwic2tpcENsb3NpbmciLCJzYWZlIiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJJdGVtIiwiZnVuIiwibm9vcCIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiZW1pdCIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiV3JhcHBlciIsInN0cmljdE5ldyIsImZvck9mIiwic2V0UHJvdG8iLCJzYW1lIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiUFJPTUlTRSIsInRlc3RSZXNvbHZlIiwiVVNFX05BVElWRSIsIlAyIiwid29ya3MiLCJ0aGVuYWJsZVRoZW5Hb3R0ZW4iLCJzYW1lQ29uc3RydWN0b3IiLCJnZXRDb25zdHJ1Y3RvciIsImlzVGhlbmFibGUiLCJQcm9taXNlQ2FwYWJpbGl0eSIsInJlamVjdCIsInByb21pc2UiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsInJlY29yZCIsImlzUmVqZWN0Iiwib2siLCJyZWFjdGlvbiIsImhhbmRsZXIiLCJmYWlsIiwiaXNVbmhhbmRsZWQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIiRyZWplY3QiLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2F0Y2giLCJjYXBhYmlsaXR5IiwiYWxsIiwiYWJydXB0IiwicmVtYWluaW5nIiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJfX2UiLCJkZWZpbmUiLCJhbWQiLCJhamF4IiwiYmFzZVVybCIsInJlZHVjZSIsIlhNTEh0dHBSZXF1ZXN0Iiwic2VuZCIsInNldFJlcXVlc3RIZWFkZXIiLCJzb21lIiwicmVhZHlTdGF0ZSIsIkRPTkUiLCJhbHdheXMiLCJzdGF0dXMiLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImVuY29kZVVSSUNvbXBvbmVudCIsIl9Qcm9taXNlIiwiRkVUQ0hfRVZFTlRTIiwiRVZFTlRTX1NVQ0NFU1MiLCJFVkVOVFNfRkFJTEVEIiwiaXNGZXRjaGluZyIsIl9leHBvcnRPYmoiLCJjb25maWd1cmVTdG9yZSIsIl9hIiwiX2Y1IiwicXVlcnlTZWxlY3RvciJdLCJtYXBwaW5ncyI6IkNBQUMsU0FBU0EsR0FBRyxRQUFTQyxHQUFFRCxFQUFFQyxFQUFFQyxHQUFHLE1BQU8sS0FBSUMsVUFBVUMsT0FBT0MsRUFB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cmMsTUFDS3RqQixHQUNINC9CLFlBQVksSUFHbEIsTUFBTzUvQixJcFUwcWpCSDJJLEVBQVEsVW9VdnFqQkNyd0IsT3BVMnFqQmZ4NEMsRUFBVU4sU0FBUyxPQUFRLE9BQVEsU0FBVW1wRSxHcVVodWpCN0MsWXJVbXVqQkUsSUFBSXJ3QixFQUNKLFFBQ0U3NkMsU0FBVSxTQUFVa0IsR0FDbEIyNUMsRUFBUzM1QyxFQUFFLGFBRWJ6QyxRQUFTLFdBQ1B5c0UsRUFBUSxXcVVydWpCR3J3QixPQUFBQSxRclV5dWpCakJ4NEMsRUFBVU4sU0FBUyxLQUFNLE1BQU8sTUFBTyxLQUFNLEtBQU0sS0FBTSxNQUFPLFNBQVVtcEUsR3NVN3VqQjFFLFl0VWd2akJFLElBQUltM0IsR0FBZ0JwUixFQUFVcm1CLEVBQU94WixFQUFRK2MsRUFBVXVnQixFc1V2dWpCbkRyZ0IsQ3RVd3VqQkosUUFDRXJ1RSxTQUFVLFNBQVVrQixHQUNsQm1oRyxFQUFpQm5oRyxFQUFFLFlBQ2xCLFNBQVV1eUYsR0FDWHhDLEVBQVd3QyxFQUFHLFlBQ2IsU0FBVXJvQixHQUNYUixFQUFRUSxFQUFHLFlBQ1YsU0FBVWszQixHQUNYbHhDLEVBQVNreEMsRXNVdHZqQk5seEMsUXRVdXZqQkYsU0FBVTBiLEdBQ1hxQixFQUFXckIsRXNVdnZqQlJxQixVdFV3dmpCRixTQUFVbzBCLEdBQ1g3VCxFQUFNNlQsRUFBSSxhQUVaOWpHLFFBQVMsV3NVdHZqQlA0dkUsRUFBUWcwQixHQUFpQnBSLFNBQUFBLElBRS9CNy9CLEVBQ0V3WixFQUFBeHJELGNBQUMrdUQsR0FBU0UsTUFBT0EsR0FDZnpELEVBQUF4ckQsY0FBQ3N2RSxFQUFHLE9BRU5ubUYsU0FBU2k2RixjQUFjLDBCdFU0dmpCeEIsU0FBU3o4QixHQUNSQSIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbihlKXtmdW5jdGlvbiByKGUscixvKXtyZXR1cm4gND09PWFyZ3VtZW50cy5sZW5ndGg/dC5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dm9pZCBuKGUse2RlY2xhcmF0aXZlOiEwLGRlcHM6cixkZWNsYXJlOm99KX1mdW5jdGlvbiB0KGUscix0LG8pe24oZSx7ZGVjbGFyYXRpdmU6ITEsZGVwczpyLGV4ZWN1dGluZ1JlcXVpcmU6dCxleGVjdXRlOm99KX1mdW5jdGlvbiBuKGUscil7ci5uYW1lPWUsZSBpbiBnfHwoZ1tlXT1yKSxyLm5vcm1hbGl6ZWREZXBzPXIuZGVwc31mdW5jdGlvbiBvKGUscil7aWYocltlLmdyb3VwSW5kZXhdPXJbZS5ncm91cEluZGV4XXx8W10sLTE9PW0uY2FsbChyW2UuZ3JvdXBJbmRleF0sZSkpe3JbZS5ncm91cEluZGV4XS5wdXNoKGUpO2Zvcih2YXIgdD0wLG49ZS5ub3JtYWxpemVkRGVwcy5sZW5ndGg7bj50O3QrKyl7dmFyIGE9ZS5ub3JtYWxpemVkRGVwc1t0XSx1PWdbYV07aWYodSYmIXUuZXZhbHVhdGVkKXt2YXIgZD1lLmdyb3VwSW5kZXgrKHUuZGVjbGFyYXRpdmUhPWUuZGVjbGFyYXRpdmUpO2lmKHZvaWQgMD09PXUuZ3JvdXBJbmRleHx8dS5ncm91cEluZGV4PGQpe2lmKHZvaWQgMCE9PXUuZ3JvdXBJbmRleCYmKHJbdS5ncm91cEluZGV4XS5zcGxpY2UobS5jYWxsKHJbdS5ncm91cEluZGV4XSx1KSwxKSwwPT1yW3UuZ3JvdXBJbmRleF0ubGVuZ3RoKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiTWl4ZWQgZGVwZW5kZW5jeSBjeWNsZSBkZXRlY3RlZFwiKTt1Lmdyb3VwSW5kZXg9ZH1vKHUscil9fX19ZnVuY3Rpb24gYShlKXt2YXIgcj1nW2VdO3IuZ3JvdXBJbmRleD0wO3ZhciB0PVtdO28ocix0KTtmb3IodmFyIG49ISFyLmRlY2xhcmF0aXZlPT10Lmxlbmd0aCUyLGE9dC5sZW5ndGgtMTthPj0wO2EtLSl7Zm9yKHZhciB1PXRbYV0saT0wO2k8dS5sZW5ndGg7aSsrKXt2YXIgcz11W2ldO24/ZChzKTpsKHMpfW49IW59fWZ1bmN0aW9uIHUoZSl7cmV0dXJuIERbZV18fChEW2VdPXtuYW1lOmUsZGVwZW5kZW5jaWVzOltdLGV4cG9ydHM6e30saW1wb3J0ZXJzOltdfSl9ZnVuY3Rpb24gZChyKXtpZighci5tb2R1bGUpe3ZhciB0PXIubW9kdWxlPXUoci5uYW1lKSxuPXIubW9kdWxlLmV4cG9ydHMsbz1yLmRlY2xhcmUuY2FsbChlLGZ1bmN0aW9uKGUscil7aWYodC5sb2NrZWQ9ITAsXCJvYmplY3RcIj09dHlwZW9mIGUpZm9yKHZhciBvIGluIGUpbltvXT1lW29dO2Vsc2UgbltlXT1yO2Zvcih2YXIgYT0wLHU9dC5pbXBvcnRlcnMubGVuZ3RoO3U+YTthKyspe3ZhciBkPXQuaW1wb3J0ZXJzW2FdO2lmKCFkLmxvY2tlZClmb3IodmFyIGk9MDtpPGQuZGVwZW5kZW5jaWVzLmxlbmd0aDsrK2kpZC5kZXBlbmRlbmNpZXNbaV09PT10JiZkLnNldHRlcnNbaV0obil9cmV0dXJuIHQubG9ja2VkPSExLHJ9LHIubmFtZSk7dC5zZXR0ZXJzPW8uc2V0dGVycyx0LmV4ZWN1dGU9by5leGVjdXRlO2Zvcih2YXIgYT0wLGk9ci5ub3JtYWxpemVkRGVwcy5sZW5ndGg7aT5hO2ErKyl7dmFyIGwscz1yLm5vcm1hbGl6ZWREZXBzW2FdLGM9Z1tzXSxmPURbc107Zj9sPWYuZXhwb3J0czpjJiYhYy5kZWNsYXJhdGl2ZT9sPWMuZXNNb2R1bGU6Yz8oZChjKSxmPWMubW9kdWxlLGw9Zi5leHBvcnRzKTpsPXYocyksZiYmZi5pbXBvcnRlcnM/KGYuaW1wb3J0ZXJzLnB1c2godCksdC5kZXBlbmRlbmNpZXMucHVzaChmKSk6dC5kZXBlbmRlbmNpZXMucHVzaChudWxsKSx0LnNldHRlcnNbYV0mJnQuc2V0dGVyc1thXShsKX19fWZ1bmN0aW9uIGkoZSl7dmFyIHIsdD1nW2VdO2lmKHQpdC5kZWNsYXJhdGl2ZT9wKGUsW10pOnQuZXZhbHVhdGVkfHxsKHQpLHI9dC5tb2R1bGUuZXhwb3J0cztlbHNlIGlmKHI9dihlKSwhcil0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gbG9hZCBkZXBlbmRlbmN5IFwiK2UrXCIuXCIpO3JldHVybighdHx8dC5kZWNsYXJhdGl2ZSkmJnImJnIuX191c2VEZWZhdWx0P3JbXCJkZWZhdWx0XCJdOnJ9ZnVuY3Rpb24gbChyKXtpZighci5tb2R1bGUpe3ZhciB0PXt9LG49ci5tb2R1bGU9e2V4cG9ydHM6dCxpZDpyLm5hbWV9O2lmKCFyLmV4ZWN1dGluZ1JlcXVpcmUpZm9yKHZhciBvPTAsYT1yLm5vcm1hbGl6ZWREZXBzLmxlbmd0aDthPm87bysrKXt2YXIgdT1yLm5vcm1hbGl6ZWREZXBzW29dLGQ9Z1t1XTtkJiZsKGQpfXIuZXZhbHVhdGVkPSEwO3ZhciBjPXIuZXhlY3V0ZS5jYWxsKGUsZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj1yLmRlcHMubGVuZ3RoO24+dDt0KyspaWYoci5kZXBzW3RdPT1lKXJldHVybiBpKHIubm9ybWFsaXplZERlcHNbdF0pO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJNb2R1bGUgXCIrZStcIiBub3QgZGVjbGFyZWQgYXMgYSBkZXBlbmRlbmN5LlwiKX0sdCxuKTtjJiYobi5leHBvcnRzPWMpLHQ9bi5leHBvcnRzLHQmJnQuX19lc01vZHVsZT9yLmVzTW9kdWxlPXQ6ci5lc01vZHVsZT1zKHQpfX1mdW5jdGlvbiBzKGUpe3ZhciByPXt9O2lmKFwib2JqZWN0XCI9PXR5cGVvZiBlfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBlKXt2YXIgdD1lJiZlLmhhc093blByb3BlcnR5O2lmKGgpZm9yKHZhciBuIGluIGUpZihyLGUsbil8fGMocixlLG4sdCk7ZWxzZSBmb3IodmFyIG4gaW4gZSljKHIsZSxuLHQpfXJldHVybiByW1wiZGVmYXVsdFwiXT1lLHkocixcIl9fdXNlRGVmYXVsdFwiLHt2YWx1ZTohMH0pLHJ9ZnVuY3Rpb24gYyhlLHIsdCxuKXsoIW58fHIuaGFzT3duUHJvcGVydHkodCkpJiYoZVt0XT1yW3RdKX1mdW5jdGlvbiBmKGUscix0KXt0cnl7dmFyIG47cmV0dXJuKG49T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLHQpKSYmeShlLHQsbiksITB9Y2F0Y2gobyl7cmV0dXJuITF9fWZ1bmN0aW9uIHAocix0KXt2YXIgbj1nW3JdO2lmKG4mJiFuLmV2YWx1YXRlZCYmbi5kZWNsYXJhdGl2ZSl7dC5wdXNoKHIpO2Zvcih2YXIgbz0wLGE9bi5ub3JtYWxpemVkRGVwcy5sZW5ndGg7YT5vO28rKyl7dmFyIHU9bi5ub3JtYWxpemVkRGVwc1tvXTstMT09bS5jYWxsKHQsdSkmJihnW3VdP3AodSx0KTp2KHUpKX1uLmV2YWx1YXRlZHx8KG4uZXZhbHVhdGVkPSEwLG4ubW9kdWxlLmV4ZWN1dGUuY2FsbChlKSl9fWZ1bmN0aW9uIHYoZSl7aWYoSVtlXSlyZXR1cm4gSVtlXTtpZihcIkBub2RlL1wiPT1lLnN1YnN0cigwLDYpKXJldHVybiBfKGUuc3Vic3RyKDYpKTt2YXIgcj1nW2VdO2lmKCFyKXRocm93XCJNb2R1bGUgXCIrZStcIiBub3QgcHJlc2VudC5cIjtyZXR1cm4gYShlKSxwKGUsW10pLGdbZV09dm9pZCAwLHIuZGVjbGFyYXRpdmUmJnkoci5tb2R1bGUuZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxJW2VdPXIuZGVjbGFyYXRpdmU/ci5tb2R1bGUuZXhwb3J0czpyLmVzTW9kdWxlfXZhciBnPXt9LG09QXJyYXkucHJvdG90eXBlLmluZGV4T2Z8fGZ1bmN0aW9uKGUpe2Zvcih2YXIgcj0wLHQ9dGhpcy5sZW5ndGg7dD5yO3IrKylpZih0aGlzW3JdPT09ZSlyZXR1cm4gcjtyZXR1cm4tMX0saD0hMDt0cnl7T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih7YTowfSxcImFcIil9Y2F0Y2goeCl7aD0hMX12YXIgeTshZnVuY3Rpb24oKXt0cnl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LFwiYVwiLHt9KSYmKHk9T2JqZWN0LmRlZmluZVByb3BlcnR5KX1jYXRjaChlKXt5PWZ1bmN0aW9uKGUscix0KXt0cnl7ZVtyXT10LnZhbHVlfHx0LmdldC5jYWxsKGUpfWNhdGNoKG4pe319fX0oKTt2YXIgRD17fSxfPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeXN0ZW0mJlN5c3RlbS5fbm9kZVJlcXVpcmV8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLnJlc29sdmUmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZyZXF1aXJlLEk9e1wiQGVtcHR5XCI6e319O3JldHVybiBmdW5jdGlvbihlLG4sbyl7cmV0dXJuIGZ1bmN0aW9uKGEpe2EoZnVuY3Rpb24oYSl7Zm9yKHZhciB1PXtfbm9kZVJlcXVpcmU6XyxyZWdpc3RlcjpyLHJlZ2lzdGVyRHluYW1pYzp0LGdldDp2LHNldDpmdW5jdGlvbihlLHIpe0lbZV09cn0sbmV3TW9kdWxlOmZ1bmN0aW9uKGUpe3JldHVybiBlfX0sZD0wO2Q8bi5sZW5ndGg7ZCsrKShmdW5jdGlvbihlLHIpe3ImJnIuX19lc01vZHVsZT9JW2VdPXI6SVtlXT1zKHIpfSkobltkXSxhcmd1bWVudHNbZF0pO28odSk7dmFyIGk9dihlWzBdKTtpZihlLmxlbmd0aD4xKWZvcih2YXIgZD0xO2Q8ZS5sZW5ndGg7ZCsrKXYoZVtkXSk7cmV0dXJuIGkuX191c2VEZWZhdWx0P2lbXCJkZWZhdWx0XCJdOml9KX19fShcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOmdsb2JhbClcblxuKFtcIjFcIixcIjJcIl0sIFtdLCBmdW5jdGlvbigkX19TeXN0ZW0pIHtcbnZhciByZXF1aXJlID0gdGhpcy5yZXF1aXJlLCBleHBvcnRzID0gdGhpcy5leHBvcnRzLCBtb2R1bGUgPSB0aGlzLm1vZHVsZTtcbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIzXCIsIFtcIjZcIiwgXCI0XCIsIFwiNVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIF9hc3NpZ24gPSAkX19yZXF1aXJlKCc2Jyk7XG4gIHZhciBQb29sZWRDbGFzcyA9ICRfX3JlcXVpcmUoJzQnKTtcbiAgdmFyIGdldFRleHRDb250ZW50QWNjZXNzb3IgPSAkX19yZXF1aXJlKCc1Jyk7XG4gIGZ1bmN0aW9uIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZShyb290KSB7XG4gICAgdGhpcy5fcm9vdCA9IHJvb3Q7XG4gICAgdGhpcy5fc3RhcnRUZXh0ID0gdGhpcy5nZXRUZXh0KCk7XG4gICAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gbnVsbDtcbiAgfVxuICBfYXNzaWduKEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5wcm90b3R5cGUsIHtcbiAgICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xuICAgICAgdGhpcy5fc3RhcnRUZXh0ID0gbnVsbDtcbiAgICAgIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IG51bGw7XG4gICAgfSxcbiAgICBnZXRUZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICgndmFsdWUnIGluIHRoaXMuX3Jvb3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvb3QudmFsdWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fcm9vdFtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldO1xuICAgIH0sXG4gICAgZ2V0RGF0YTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fZmFsbGJhY2tUZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mYWxsYmFja1RleHQ7XG4gICAgICB9XG4gICAgICB2YXIgc3RhcnQ7XG4gICAgICB2YXIgc3RhcnRWYWx1ZSA9IHRoaXMuX3N0YXJ0VGV4dDtcbiAgICAgIHZhciBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoO1xuICAgICAgdmFyIGVuZDtcbiAgICAgIHZhciBlbmRWYWx1ZSA9IHRoaXMuZ2V0VGV4dCgpO1xuICAgICAgdmFyIGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcbiAgICAgIGZvciAoc3RhcnQgPSAwOyBzdGFydCA8IHN0YXJ0TGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICAgIGlmIChzdGFydFZhbHVlW3N0YXJ0XSAhPT0gZW5kVmFsdWVbc3RhcnRdKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBtaW5FbmQgPSBzdGFydExlbmd0aCAtIHN0YXJ0O1xuICAgICAgZm9yIChlbmQgPSAxOyBlbmQgPD0gbWluRW5kOyBlbmQrKykge1xuICAgICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydExlbmd0aCAtIGVuZF0gIT09IGVuZFZhbHVlW2VuZExlbmd0aCAtIGVuZF0pIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHNsaWNlVGFpbCA9IGVuZCA+IDEgPyAxIC0gZW5kIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gZW5kVmFsdWUuc2xpY2Uoc3RhcnQsIHNsaWNlVGFpbCk7XG4gICAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tUZXh0O1xuICAgIH1cbiAgfSk7XG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUpO1xuICBtb2R1bGUuZXhwb3J0cyA9IEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI3XCIsIFtcIjhcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBTeW50aGV0aWNFdmVudCA9ICRfX3JlcXVpcmUoJzgnKTtcbiAgdmFyIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UgPSB7ZGF0YTogbnVsbH07XG4gIGZ1bmN0aW9uIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICByZXR1cm4gU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIH1cbiAgU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQsIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UpO1xuICBtb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQ7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiOVwiLCBbXCI4XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgU3ludGhldGljRXZlbnQgPSAkX19yZXF1aXJlKCc4Jyk7XG4gIHZhciBJbnB1dEV2ZW50SW50ZXJmYWNlID0ge2RhdGE6IG51bGx9O1xuICBmdW5jdGlvbiBTeW50aGV0aWNJbnB1dEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICB9XG4gIFN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNJbnB1dEV2ZW50LCBJbnB1dEV2ZW50SW50ZXJmYWNlKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNJbnB1dEV2ZW50O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImFcIiwgW1wiYlwiLCBcImNcIiwgXCJkXCIsIFwiM1wiLCBcIjdcIiwgXCI5XCIsIFwiZVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIEV2ZW50Q29uc3RhbnRzID0gJF9fcmVxdWlyZSgnYicpO1xuICB2YXIgRXZlbnRQcm9wYWdhdG9ycyA9ICRfX3JlcXVpcmUoJ2MnKTtcbiAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gJF9fcmVxdWlyZSgnZCcpO1xuICB2YXIgRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlID0gJF9fcmVxdWlyZSgnMycpO1xuICB2YXIgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCA9ICRfX3JlcXVpcmUoJzcnKTtcbiAgdmFyIFN5bnRoZXRpY0lucHV0RXZlbnQgPSAkX19yZXF1aXJlKCc5Jyk7XG4gIHZhciBrZXlPZiA9ICRfX3JlcXVpcmUoJ2UnKTtcbiAgdmFyIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXTtcbiAgdmFyIFNUQVJUX0tFWUNPREUgPSAyMjk7XG4gIHZhciBjYW5Vc2VDb21wb3NpdGlvbkV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdDb21wb3NpdGlvbkV2ZW50JyBpbiB3aW5kb3c7XG4gIHZhciBkb2N1bWVudE1vZGUgPSBudWxsO1xuICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB7XG4gICAgZG9jdW1lbnRNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlO1xuICB9XG4gIHZhciBjYW5Vc2VUZXh0SW5wdXRFdmVudCA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnVGV4dEV2ZW50JyBpbiB3aW5kb3cgJiYgIWRvY3VtZW50TW9kZSAmJiAhaXNQcmVzdG8oKTtcbiAgdmFyIHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICghY2FuVXNlQ29tcG9zaXRpb25FdmVudCB8fCBkb2N1bWVudE1vZGUgJiYgZG9jdW1lbnRNb2RlID4gOCAmJiBkb2N1bWVudE1vZGUgPD0gMTEpO1xuICBmdW5jdGlvbiBpc1ByZXN0bygpIHtcbiAgICB2YXIgb3BlcmEgPSB3aW5kb3cub3BlcmE7XG4gICAgcmV0dXJuIHR5cGVvZiBvcGVyYSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9wZXJhLnZlcnNpb24gPT09ICdmdW5jdGlvbicgJiYgcGFyc2VJbnQob3BlcmEudmVyc2lvbigpLCAxMCkgPD0gMTI7XG4gIH1cbiAgdmFyIFNQQUNFQkFSX0NPREUgPSAzMjtcbiAgdmFyIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFNQQUNFQkFSX0NPREUpO1xuICB2YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG4gIHZhciBldmVudFR5cGVzID0ge1xuICAgIGJlZm9yZUlucHV0OiB7XG4gICAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25CZWZvcmVJbnB1dDogbnVsbH0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQmVmb3JlSW5wdXRDYXB0dXJlOiBudWxsfSlcbiAgICAgIH0sXG4gICAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kLCB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLCB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dCwgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZV1cbiAgICB9LFxuICAgIGNvbXBvc2l0aW9uRW5kOiB7XG4gICAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25Db21wb3NpdGlvbkVuZDogbnVsbH0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25FbmRDYXB0dXJlOiBudWxsfSlcbiAgICAgIH0sXG4gICAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcEJsdXIsIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25FbmQsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcywgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25dXG4gICAgfSxcbiAgICBjb21wb3NpdGlvblN0YXJ0OiB7XG4gICAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25Db21wb3NpdGlvblN0YXJ0OiBudWxsfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZTogbnVsbH0pXG4gICAgICB9LFxuICAgICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcywgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25dXG4gICAgfSxcbiAgICBjb21wb3NpdGlvblVwZGF0ZToge1xuICAgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25VcGRhdGU6IG51bGx9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZTogbnVsbH0pXG4gICAgICB9LFxuICAgICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uVXBkYXRlLCB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3MsIHRvcExldmVsVHlwZXMudG9wS2V5VXAsIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duXVxuICAgIH1cbiAgfTtcbiAgdmFyIGhhc1NwYWNlS2V5cHJlc3MgPSBmYWxzZTtcbiAgZnVuY3Rpb24gaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpIHtcbiAgICByZXR1cm4gKG5hdGl2ZUV2ZW50LmN0cmxLZXkgfHwgbmF0aXZlRXZlbnQuYWx0S2V5IHx8IG5hdGl2ZUV2ZW50Lm1ldGFLZXkpICYmICEobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpO1xuICB9XG4gIGZ1bmN0aW9uIGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSkge1xuICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25TdGFydDpcbiAgICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgICAgcmV0dXJuIGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQ7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29tcG9zaXRpb25VcGRhdGU6XG4gICAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gICAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duICYmIG5hdGl2ZUV2ZW50LmtleUNvZGUgPT09IFNUQVJUX0tFWUNPREU7XG4gIH1cbiAgZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVVwOlxuICAgICAgICByZXR1cm4gRU5EX0tFWUNPREVTLmluZGV4T2YobmF0aXZlRXZlbnQua2V5Q29kZSkgIT09IC0xO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICAgIHJldHVybiBuYXRpdmVFdmVudC5rZXlDb2RlICE9PSBTVEFSVF9LRVlDT0RFO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCkge1xuICAgIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gICAgaWYgKHR5cGVvZiBkZXRhaWwgPT09ICdvYmplY3QnICYmICdkYXRhJyBpbiBkZXRhaWwpIHtcbiAgICAgIHJldHVybiBkZXRhaWwuZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGN1cnJlbnRDb21wb3NpdGlvbiA9IG51bGw7XG4gIGZ1bmN0aW9uIGV4dHJhY3RDb21wb3NpdGlvbkV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdmFyIGV2ZW50VHlwZTtcbiAgICB2YXIgZmFsbGJhY2tEYXRhO1xuICAgIGlmIChjYW5Vc2VDb21wb3NpdGlvbkV2ZW50KSB7XG4gICAgICBldmVudFR5cGUgPSBnZXRDb21wb3NpdGlvbkV2ZW50VHlwZSh0b3BMZXZlbFR5cGUpO1xuICAgIH0gZWxzZSBpZiAoIWN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgICAgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0KHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIGV2ZW50VHlwZSA9IGV2ZW50VHlwZXMuY29tcG9zaXRpb25TdGFydDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlcy5jb21wb3NpdGlvbkVuZDtcbiAgICB9XG4gICAgaWYgKCFldmVudFR5cGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEpIHtcbiAgICAgIGlmICghY3VycmVudENvbXBvc2l0aW9uICYmIGV2ZW50VHlwZSA9PT0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0KSB7XG4gICAgICAgIGN1cnJlbnRDb21wb3NpdGlvbiA9IEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5nZXRQb29sZWQobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgfSBlbHNlIGlmIChldmVudFR5cGUgPT09IGV2ZW50VHlwZXMuY29tcG9zaXRpb25FbmQpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgICAgICAgIGZhbGxiYWNrRGF0YSA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGV2ZW50ID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGlmIChmYWxsYmFja0RhdGEpIHtcbiAgICAgIGV2ZW50LmRhdGEgPSBmYWxsYmFja0RhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjdXN0b21EYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG4gICAgICBpZiAoY3VzdG9tRGF0YSAhPT0gbnVsbCkge1xuICAgICAgICBldmVudC5kYXRhID0gY3VzdG9tRGF0YTtcbiAgICAgIH1cbiAgICB9XG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgICAgcmV0dXJuIGdldERhdGFGcm9tQ3VzdG9tRXZlbnQobmF0aXZlRXZlbnQpO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgICAgICB2YXIgd2hpY2ggPSBuYXRpdmVFdmVudC53aGljaDtcbiAgICAgICAgaWYgKHdoaWNoICE9PSBTUEFDRUJBUl9DT0RFKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaGFzU3BhY2VLZXlwcmVzcyA9IHRydWU7XG4gICAgICAgIHJldHVybiBTUEFDRUJBUl9DSEFSO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dDpcbiAgICAgICAgdmFyIGNoYXJzID0gbmF0aXZlRXZlbnQuZGF0YTtcbiAgICAgICAgaWYgKGNoYXJzID09PSBTUEFDRUJBUl9DSEFSICYmIGhhc1NwYWNlS2V5cHJlc3MpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhcnM7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RmFsbGJhY2tCZWZvcmVJbnB1dENoYXJzKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kIHx8IGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICB2YXIgY2hhcnMgPSBjdXJyZW50Q29tcG9zaXRpb24uZ2V0RGF0YSgpO1xuICAgICAgICBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUucmVsZWFzZShjdXJyZW50Q29tcG9zaXRpb24pO1xuICAgICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBudWxsO1xuICAgICAgICByZXR1cm4gY2hhcnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZTpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG4gICAgICAgIGlmIChuYXRpdmVFdmVudC53aGljaCAmJiAhaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUobmF0aXZlRXZlbnQud2hpY2gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kOlxuICAgICAgICByZXR1cm4gdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPyBudWxsIDogbmF0aXZlRXZlbnQuZGF0YTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBleHRyYWN0QmVmb3JlSW5wdXRFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHZhciBjaGFycztcbiAgICBpZiAoY2FuVXNlVGV4dElucHV0RXZlbnQpIHtcbiAgICAgIGNoYXJzID0gZ2V0TmF0aXZlQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hhcnMgPSBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gICAgfVxuICAgIGlmICghY2hhcnMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgZXZlbnQgPSBTeW50aGV0aWNJbnB1dEV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLmJlZm9yZUlucHV0LCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGV2ZW50LmRhdGEgPSBjaGFycztcbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgIHJldHVybiBldmVudDtcbiAgfVxuICB2YXIgQmVmb3JlSW5wdXRFdmVudFBsdWdpbiA9IHtcbiAgICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuICAgIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm4gW2V4dHJhY3RDb21wb3NpdGlvbkV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSwgZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpXTtcbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gQmVmb3JlSW5wdXRFdmVudFBsdWdpbjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJmXCIsIFtcImJcIiwgXCIxMFwiLCBcImNcIiwgXCJkXCIsIFwiMTFcIiwgXCIxMlwiLCBcIjhcIiwgXCIxM1wiLCBcIjE0XCIsIFwiMTVcIiwgXCJlXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIEV2ZW50Q29uc3RhbnRzID0gJF9fcmVxdWlyZSgnYicpO1xuICAgIHZhciBFdmVudFBsdWdpbkh1YiA9ICRfX3JlcXVpcmUoJzEwJyk7XG4gICAgdmFyIEV2ZW50UHJvcGFnYXRvcnMgPSAkX19yZXF1aXJlKCdjJyk7XG4gICAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gJF9fcmVxdWlyZSgnZCcpO1xuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSAkX19yZXF1aXJlKCcxMScpO1xuICAgIHZhciBSZWFjdFVwZGF0ZXMgPSAkX19yZXF1aXJlKCcxMicpO1xuICAgIHZhciBTeW50aGV0aWNFdmVudCA9ICRfX3JlcXVpcmUoJzgnKTtcbiAgICB2YXIgZ2V0RXZlbnRUYXJnZXQgPSAkX19yZXF1aXJlKCcxMycpO1xuICAgIHZhciBpc0V2ZW50U3VwcG9ydGVkID0gJF9fcmVxdWlyZSgnMTQnKTtcbiAgICB2YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gJF9fcmVxdWlyZSgnMTUnKTtcbiAgICB2YXIga2V5T2YgPSAkX19yZXF1aXJlKCdlJyk7XG4gICAgdmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuICAgIHZhciBldmVudFR5cGVzID0ge2NoYW5nZToge1xuICAgICAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNoYW5nZTogbnVsbH0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DaGFuZ2VDYXB0dXJlOiBudWxsfSlcbiAgICAgICAgfSxcbiAgICAgICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENoYW5nZSwgdG9wTGV2ZWxUeXBlcy50b3BDbGljaywgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cywgdG9wTGV2ZWxUeXBlcy50b3BJbnB1dCwgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLCB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLCB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZV1cbiAgICAgIH19O1xuICAgIHZhciBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICB2YXIgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xuICAgIHZhciBhY3RpdmVFbGVtZW50VmFsdWUgPSBudWxsO1xuICAgIHZhciBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gbnVsbDtcbiAgICBmdW5jdGlvbiBzaG91bGRVc2VDaGFuZ2VFdmVudChlbGVtKSB7XG4gICAgICB2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiBub2RlTmFtZSA9PT0gJ3NlbGVjdCcgfHwgbm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAnZmlsZSc7XG4gICAgfVxuICAgIHZhciBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBmYWxzZTtcbiAgICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gICAgICBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBpc0V2ZW50U3VwcG9ydGVkKCdjaGFuZ2UnKSAmJiAoISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gOCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQobmF0aXZlRXZlbnQpIHtcbiAgICAgIHZhciBldmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLmNoYW5nZSwgYWN0aXZlRWxlbWVudEluc3QsIG5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkpO1xuICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhydW5FdmVudEluQmF0Y2gsIGV2ZW50KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGV2ZW50KSB7XG4gICAgICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50KTtcbiAgICAgIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKGZhbHNlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3RhcnRXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICAgICAgYWN0aXZlRWxlbWVudCA9IHRhcmdldDtcbiAgICAgIGFjdGl2ZUVsZW1lbnRJbnN0ID0gdGFyZ2V0SW5zdDtcbiAgICAgIGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQoJ29uY2hhbmdlJywgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCkge1xuICAgICAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFjdGl2ZUVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uY2hhbmdlJywgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCk7XG4gICAgICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNoYW5nZUV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCkge1xuICAgICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BDaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvckNoYW5nZUV2ZW50SUU4KHRvcExldmVsVHlwZSwgdGFyZ2V0LCB0YXJnZXRJbnN0KSB7XG4gICAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzKSB7XG4gICAgICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gICAgICAgIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0YXJnZXQsIHRhcmdldEluc3QpO1xuICAgICAgfSBlbHNlIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgICAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG4gICAgaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgICAgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gaXNFdmVudFN1cHBvcnRlZCgnaW5wdXQnKSAmJiAoISgnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID4gMTEpO1xuICAgIH1cbiAgICB2YXIgbmV3VmFsdWVQcm9wID0ge1xuICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AuZ2V0LmNhbGwodGhpcyk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgYWN0aXZlRWxlbWVudFZhbHVlID0gJycgKyB2YWw7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3Auc2V0LmNhbGwodGhpcywgdmFsKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgICAgIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gICAgICBhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3Q7XG4gICAgICBhY3RpdmVFbGVtZW50VmFsdWUgPSB0YXJnZXQudmFsdWU7XG4gICAgICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQuY29uc3RydWN0b3IucHJvdG90eXBlLCAndmFsdWUnKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3RpdmVFbGVtZW50LCAndmFsdWUnLCBuZXdWYWx1ZVByb3ApO1xuICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQuYXR0YWNoRXZlbnQpIHtcbiAgICAgICAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpIHtcbiAgICAgIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBkZWxldGUgYWN0aXZlRWxlbWVudC52YWx1ZTtcbiAgICAgIGlmIChhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KSB7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnQuZGV0YWNoRXZlbnQoJ29ucHJvcGVydHljaGFuZ2UnLCBoYW5kbGVQcm9wZXJ0eUNoYW5nZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Byb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UsIGZhbHNlKTtcbiAgICAgIH1cbiAgICAgIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xuICAgICAgYWN0aXZlRWxlbWVudFZhbHVlID0gbnVsbDtcbiAgICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICAgICAgaWYgKG5hdGl2ZUV2ZW50LnByb3BlcnR5TmFtZSAhPT0gJ3ZhbHVlJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBuYXRpdmVFdmVudC5zcmNFbGVtZW50LnZhbHVlO1xuICAgICAgaWYgKHZhbHVlID09PSBhY3RpdmVFbGVtZW50VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYWN0aXZlRWxlbWVudFZhbHVlID0gdmFsdWU7XG4gICAgICBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0KSB7XG4gICAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcElucHV0KSB7XG4gICAgICAgIHJldHVybiB0YXJnZXRJbnN0O1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUUodG9wTGV2ZWxUeXBlLCB0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMpIHtcbiAgICAgICAgc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKTtcbiAgICAgICAgc3RhcnRXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKHRhcmdldCwgdGFyZ2V0SW5zdCk7XG4gICAgICB9IGVsc2UgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BCbHVyKSB7XG4gICAgICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50SUUodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0KSB7XG4gICAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZSB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5VXAgfHwgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24pIHtcbiAgICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC52YWx1ZSAhPT0gYWN0aXZlRWxlbWVudFZhbHVlKSB7XG4gICAgICAgICAgYWN0aXZlRWxlbWVudFZhbHVlID0gYWN0aXZlRWxlbWVudC52YWx1ZTtcbiAgICAgICAgICByZXR1cm4gYWN0aXZlRWxlbWVudEluc3Q7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc2hvdWxkVXNlQ2xpY2tFdmVudChlbGVtKSB7XG4gICAgICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgKGVsZW0udHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBlbGVtLnR5cGUgPT09ICdyYWRpbycpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpIHtcbiAgICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wQ2xpY2spIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBDaGFuZ2VFdmVudFBsdWdpbiA9IHtcbiAgICAgIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG4gICAgICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgICAgICB2YXIgdGFyZ2V0Tm9kZSA9IHRhcmdldEluc3QgPyBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcbiAgICAgICAgdmFyIGdldFRhcmdldEluc3RGdW5jLFxuICAgICAgICAgICAgaGFuZGxlRXZlbnRGdW5jO1xuICAgICAgICBpZiAoc2hvdWxkVXNlQ2hhbmdlRXZlbnQodGFyZ2V0Tm9kZSkpIHtcbiAgICAgICAgICBpZiAoZG9lc0NoYW5nZUV2ZW50QnViYmxlKSB7XG4gICAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGlzVGV4dElucHV0RWxlbWVudCh0YXJnZXROb2RlKSkge1xuICAgICAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRJRTtcbiAgICAgICAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRJRTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2hvdWxkVXNlQ2xpY2tFdmVudCh0YXJnZXROb2RlKSkge1xuICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdldFRhcmdldEluc3RGdW5jKSB7XG4gICAgICAgICAgdmFyIGluc3QgPSBnZXRUYXJnZXRJbnN0RnVuYyh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpO1xuICAgICAgICAgIGlmIChpbnN0KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5jaGFuZ2UsIGluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgICAgICBldmVudC50eXBlID0gJ2NoYW5nZSc7XG4gICAgICAgICAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnQpO1xuICAgICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlRXZlbnRGdW5jKSB7XG4gICAgICAgICAgaGFuZGxlRXZlbnRGdW5jKHRvcExldmVsVHlwZSwgdGFyZ2V0Tm9kZSwgdGFyZ2V0SW5zdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gQ2hhbmdlRXZlbnRQbHVnaW47XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjE3XCIsIFtcImVcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBrZXlPZiA9ICRfX3JlcXVpcmUoJ2UnKTtcbiAgdmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gW2tleU9mKHtSZXNwb25kZXJFdmVudFBsdWdpbjogbnVsbH0pLCBrZXlPZih7U2ltcGxlRXZlbnRQbHVnaW46IG51bGx9KSwga2V5T2Yoe1RhcEV2ZW50UGx1Z2luOiBudWxsfSksIGtleU9mKHtFbnRlckxlYXZlRXZlbnRQbHVnaW46IG51bGx9KSwga2V5T2Yoe0NoYW5nZUV2ZW50UGx1Z2luOiBudWxsfSksIGtleU9mKHtTZWxlY3RFdmVudFBsdWdpbjogbnVsbH0pLCBrZXlPZih7QmVmb3JlSW5wdXRFdmVudFBsdWdpbjogbnVsbH0pXTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlcjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxOFwiLCBbXCJiXCIsIFwiY1wiLCBcIjExXCIsIFwiMTlcIiwgXCJlXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgRXZlbnRDb25zdGFudHMgPSAkX19yZXF1aXJlKCdiJyk7XG4gIHZhciBFdmVudFByb3BhZ2F0b3JzID0gJF9fcmVxdWlyZSgnYycpO1xuICB2YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gJF9fcmVxdWlyZSgnMTEnKTtcbiAgdmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSAkX19yZXF1aXJlKCcxOScpO1xuICB2YXIga2V5T2YgPSAkX19yZXF1aXJlKCdlJyk7XG4gIHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbiAgdmFyIGV2ZW50VHlwZXMgPSB7XG4gICAgbW91c2VFbnRlcjoge1xuICAgICAgcmVnaXN0cmF0aW9uTmFtZToga2V5T2Yoe29uTW91c2VFbnRlcjogbnVsbH0pLFxuICAgICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJdXG4gICAgfSxcbiAgICBtb3VzZUxlYXZlOiB7XG4gICAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25Nb3VzZUxlYXZlOiBudWxsfSksXG4gICAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0LCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcl1cbiAgICB9XG4gIH07XG4gIHZhciBFbnRlckxlYXZlRXZlbnRQbHVnaW4gPSB7XG4gICAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcbiAgICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXIgJiYgKG5hdGl2ZUV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgbmF0aXZlRXZlbnQuZnJvbUVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHRvcExldmVsVHlwZSAhPT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCAmJiB0b3BMZXZlbFR5cGUgIT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIHdpbjtcbiAgICAgIGlmIChuYXRpdmVFdmVudFRhcmdldC53aW5kb3cgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICAgIHdpbiA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGRvYyA9IG5hdGl2ZUV2ZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aW4gPSB3aW5kb3c7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBmcm9tO1xuICAgICAgdmFyIHRvO1xuICAgICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCkge1xuICAgICAgICBmcm9tID0gdGFyZ2V0SW5zdDtcbiAgICAgICAgdmFyIHJlbGF0ZWQgPSBuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudDtcbiAgICAgICAgdG8gPSByZWxhdGVkID8gUmVhY3RET01Db21wb25lbnRUcmVlLmdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHJlbGF0ZWQpIDogbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyb20gPSBudWxsO1xuICAgICAgICB0byA9IHRhcmdldEluc3Q7XG4gICAgICB9XG4gICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgZnJvbU5vZGUgPSBmcm9tID09IG51bGwgPyB3aW4gOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShmcm9tKTtcbiAgICAgIHZhciB0b05vZGUgPSB0byA9PSBudWxsID8gd2luIDogUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UodG8pO1xuICAgICAgdmFyIGxlYXZlID0gU3ludGhldGljTW91c2VFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5tb3VzZUxlYXZlLCBmcm9tLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgbGVhdmUudHlwZSA9ICdtb3VzZWxlYXZlJztcbiAgICAgIGxlYXZlLnRhcmdldCA9IGZyb21Ob2RlO1xuICAgICAgbGVhdmUucmVsYXRlZFRhcmdldCA9IHRvTm9kZTtcbiAgICAgIHZhciBlbnRlciA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMubW91c2VFbnRlciwgdG8sIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICBlbnRlci50eXBlID0gJ21vdXNlZW50ZXInO1xuICAgICAgZW50ZXIudGFyZ2V0ID0gdG9Ob2RlO1xuICAgICAgZW50ZXIucmVsYXRlZFRhcmdldCA9IGZyb21Ob2RlO1xuICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXMobGVhdmUsIGVudGVyLCBmcm9tLCB0byk7XG4gICAgICByZXR1cm4gW2xlYXZlLCBlbnRlcl07XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IEVudGVyTGVhdmVFdmVudFBsdWdpbjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxYVwiLCBbXCIxYlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIERPTVByb3BlcnR5ID0gJF9fcmVxdWlyZSgnMWInKTtcbiAgdmFyIE1VU1RfVVNFX1BST1BFUlRZID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZO1xuICB2YXIgSEFTX0JPT0xFQU5fVkFMVUUgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUU7XG4gIHZhciBIQVNfU0lERV9FRkZFQ1RTID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19TSURFX0VGRkVDVFM7XG4gIHZhciBIQVNfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRTtcbiAgdmFyIEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFO1xuICB2YXIgSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFO1xuICB2YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0ge1xuICAgIGlzQ3VzdG9tQXR0cmlidXRlOiBSZWdFeHAucHJvdG90eXBlLnRlc3QuYmluZChuZXcgUmVnRXhwKCdeKGRhdGF8YXJpYSktWycgKyBET01Qcm9wZXJ0eS5BVFRSSUJVVEVfTkFNRV9DSEFSICsgJ10qJCcpKSxcbiAgICBQcm9wZXJ0aWVzOiB7XG4gICAgICBhY2NlcHQ6IDAsXG4gICAgICBhY2NlcHRDaGFyc2V0OiAwLFxuICAgICAgYWNjZXNzS2V5OiAwLFxuICAgICAgYWN0aW9uOiAwLFxuICAgICAgYWxsb3dGdWxsU2NyZWVuOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICAgIGFsbG93VHJhbnNwYXJlbmN5OiAwLFxuICAgICAgYWx0OiAwLFxuICAgICAgYXN5bmM6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgICAgYXV0b0NvbXBsZXRlOiAwLFxuICAgICAgYXV0b1BsYXk6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgICAgY2FwdHVyZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgICBjZWxsUGFkZGluZzogMCxcbiAgICAgIGNlbGxTcGFjaW5nOiAwLFxuICAgICAgY2hhclNldDogMCxcbiAgICAgIGNoYWxsZW5nZTogMCxcbiAgICAgIGNoZWNrZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgICBjaXRlOiAwLFxuICAgICAgY2xhc3NJRDogMCxcbiAgICAgIGNsYXNzTmFtZTogMCxcbiAgICAgIGNvbHM6IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgICAgY29sU3BhbjogMCxcbiAgICAgIGNvbnRlbnQ6IDAsXG4gICAgICBjb250ZW50RWRpdGFibGU6IDAsXG4gICAgICBjb250ZXh0TWVudTogMCxcbiAgICAgIGNvbnRyb2xzOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICAgIGNvb3JkczogMCxcbiAgICAgIGNyb3NzT3JpZ2luOiAwLFxuICAgICAgZGF0YTogMCxcbiAgICAgIGRhdGVUaW1lOiAwLFxuICAgICAgJ2RlZmF1bHQnOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICAgIGRlZmVyOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICAgIGRpcjogMCxcbiAgICAgIGRpc2FibGVkOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICAgIGRvd25sb2FkOiBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFLFxuICAgICAgZHJhZ2dhYmxlOiAwLFxuICAgICAgZW5jVHlwZTogMCxcbiAgICAgIGZvcm06IDAsXG4gICAgICBmb3JtQWN0aW9uOiAwLFxuICAgICAgZm9ybUVuY1R5cGU6IDAsXG4gICAgICBmb3JtTWV0aG9kOiAwLFxuICAgICAgZm9ybU5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgICAgZm9ybVRhcmdldDogMCxcbiAgICAgIGZyYW1lQm9yZGVyOiAwLFxuICAgICAgaGVhZGVyczogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIGhpZGRlbjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgICBoaWdoOiAwLFxuICAgICAgaHJlZjogMCxcbiAgICAgIGhyZWZMYW5nOiAwLFxuICAgICAgaHRtbEZvcjogMCxcbiAgICAgIGh0dHBFcXVpdjogMCxcbiAgICAgIGljb246IDAsXG4gICAgICBpZDogMCxcbiAgICAgIGlucHV0TW9kZTogMCxcbiAgICAgIGludGVncml0eTogMCxcbiAgICAgIGlzOiAwLFxuICAgICAga2V5UGFyYW1zOiAwLFxuICAgICAga2V5VHlwZTogMCxcbiAgICAgIGtpbmQ6IDAsXG4gICAgICBsYWJlbDogMCxcbiAgICAgIGxhbmc6IDAsXG4gICAgICBsaXN0OiAwLFxuICAgICAgbG9vcDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgICBsb3c6IDAsXG4gICAgICBtYW5pZmVzdDogMCxcbiAgICAgIG1hcmdpbkhlaWdodDogMCxcbiAgICAgIG1hcmdpbldpZHRoOiAwLFxuICAgICAgbWF4OiAwLFxuICAgICAgbWF4TGVuZ3RoOiAwLFxuICAgICAgbWVkaWE6IDAsXG4gICAgICBtZWRpYUdyb3VwOiAwLFxuICAgICAgbWV0aG9kOiAwLFxuICAgICAgbWluOiAwLFxuICAgICAgbWluTGVuZ3RoOiAwLFxuICAgICAgbXVsdGlwbGU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgICBtdXRlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICAgIG5hbWU6IDAsXG4gICAgICBub25jZTogMCxcbiAgICAgIG5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgICAgb3BlbjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgICBvcHRpbXVtOiAwLFxuICAgICAgcGF0dGVybjogMCxcbiAgICAgIHBsYWNlaG9sZGVyOiAwLFxuICAgICAgcG9zdGVyOiAwLFxuICAgICAgcHJlbG9hZDogMCxcbiAgICAgIHByb2ZpbGU6IDAsXG4gICAgICByYWRpb0dyb3VwOiAwLFxuICAgICAgcmVhZE9ubHk6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgICAgcmVsOiAwLFxuICAgICAgcmVxdWlyZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgICAgcmV2ZXJzZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgICAgcm9sZTogMCxcbiAgICAgIHJvd3M6IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgICAgcm93U3BhbjogSEFTX05VTUVSSUNfVkFMVUUsXG4gICAgICBzYW5kYm94OiAwLFxuICAgICAgc2NvcGU6IDAsXG4gICAgICBzY29wZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgICAgc2Nyb2xsaW5nOiAwLFxuICAgICAgc2VhbWxlc3M6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgICAgc2VsZWN0ZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgICBzaGFwZTogMCxcbiAgICAgIHNpemU6IEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFLFxuICAgICAgc2l6ZXM6IDAsXG4gICAgICBzcGFuOiBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICAgIHNwZWxsQ2hlY2s6IDAsXG4gICAgICBzcmM6IDAsXG4gICAgICBzcmNEb2M6IDAsXG4gICAgICBzcmNMYW5nOiAwLFxuICAgICAgc3JjU2V0OiAwLFxuICAgICAgc3RhcnQ6IEhBU19OVU1FUklDX1ZBTFVFLFxuICAgICAgc3RlcDogMCxcbiAgICAgIHN0eWxlOiAwLFxuICAgICAgc3VtbWFyeTogMCxcbiAgICAgIHRhYkluZGV4OiAwLFxuICAgICAgdGFyZ2V0OiAwLFxuICAgICAgdGl0bGU6IDAsXG4gICAgICB0eXBlOiAwLFxuICAgICAgdXNlTWFwOiAwLFxuICAgICAgdmFsdWU6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX1NJREVfRUZGRUNUUyxcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgd21vZGU6IDAsXG4gICAgICB3cmFwOiAwLFxuICAgICAgYWJvdXQ6IDAsXG4gICAgICBkYXRhdHlwZTogMCxcbiAgICAgIGlubGlzdDogMCxcbiAgICAgIHByZWZpeDogMCxcbiAgICAgIHByb3BlcnR5OiAwLFxuICAgICAgcmVzb3VyY2U6IDAsXG4gICAgICAndHlwZW9mJzogMCxcbiAgICAgIHZvY2FiOiAwLFxuICAgICAgYXV0b0NhcGl0YWxpemU6IDAsXG4gICAgICBhdXRvQ29ycmVjdDogMCxcbiAgICAgIGF1dG9TYXZlOiAwLFxuICAgICAgY29sb3I6IDAsXG4gICAgICBpdGVtUHJvcDogMCxcbiAgICAgIGl0ZW1TY29wZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgICBpdGVtVHlwZTogMCxcbiAgICAgIGl0ZW1JRDogMCxcbiAgICAgIGl0ZW1SZWY6IDAsXG4gICAgICByZXN1bHRzOiAwLFxuICAgICAgc2VjdXJpdHk6IDAsXG4gICAgICB1bnNlbGVjdGFibGU6IDBcbiAgICB9LFxuICAgIERPTUF0dHJpYnV0ZU5hbWVzOiB7XG4gICAgICBhY2NlcHRDaGFyc2V0OiAnYWNjZXB0LWNoYXJzZXQnLFxuICAgICAgY2xhc3NOYW1lOiAnY2xhc3MnLFxuICAgICAgaHRtbEZvcjogJ2ZvcicsXG4gICAgICBodHRwRXF1aXY6ICdodHRwLWVxdWl2J1xuICAgIH0sXG4gICAgRE9NUHJvcGVydHlOYW1lczoge31cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBIVE1MRE9NUHJvcGVydHlDb25maWc7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMWNcIiwgW1wiMTFcIiwgXCIxZFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9ICRfX3JlcXVpcmUoJzExJyk7XG4gIHZhciBmb2N1c05vZGUgPSAkX19yZXF1aXJlKCcxZCcpO1xuICB2YXIgQXV0b0ZvY3VzVXRpbHMgPSB7Zm9jdXNET01Db21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZm9jdXNOb2RlKFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpKTtcbiAgICB9fTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBBdXRvRm9jdXNVdGlscztcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxZVwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIF9oeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcbiAgZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF9oeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbihfLCBjaGFyYWN0ZXIpIHtcbiAgICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGNhbWVsaXplO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjFmXCIsIFtcIjFlXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgY2FtZWxpemUgPSAkX19yZXF1aXJlKCcxZScpO1xuICB2YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbiAgZnVuY3Rpb24gY2FtZWxpemVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGNhbWVsaXplKHN0cmluZy5yZXBsYWNlKG1zUGF0dGVybiwgJ21zLScpKTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGNhbWVsaXplU3R5bGVOYW1lO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjIwXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgICBhbmltYXRpb25JdGVyYXRpb25Db3VudDogdHJ1ZSxcbiAgICBib3JkZXJJbWFnZU91dHNldDogdHJ1ZSxcbiAgICBib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuICAgIGJvcmRlckltYWdlV2lkdGg6IHRydWUsXG4gICAgYm94RmxleDogdHJ1ZSxcbiAgICBib3hGbGV4R3JvdXA6IHRydWUsXG4gICAgYm94T3JkaW5hbEdyb3VwOiB0cnVlLFxuICAgIGNvbHVtbkNvdW50OiB0cnVlLFxuICAgIGZsZXg6IHRydWUsXG4gICAgZmxleEdyb3c6IHRydWUsXG4gICAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICAgIGZsZXhTaHJpbms6IHRydWUsXG4gICAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICAgIGZsZXhPcmRlcjogdHJ1ZSxcbiAgICBncmlkUm93OiB0cnVlLFxuICAgIGdyaWRDb2x1bW46IHRydWUsXG4gICAgZm9udFdlaWdodDogdHJ1ZSxcbiAgICBsaW5lQ2xhbXA6IHRydWUsXG4gICAgbGluZUhlaWdodDogdHJ1ZSxcbiAgICBvcGFjaXR5OiB0cnVlLFxuICAgIG9yZGVyOiB0cnVlLFxuICAgIG9ycGhhbnM6IHRydWUsXG4gICAgdGFiU2l6ZTogdHJ1ZSxcbiAgICB3aWRvd3M6IHRydWUsXG4gICAgekluZGV4OiB0cnVlLFxuICAgIHpvb206IHRydWUsXG4gICAgZmlsbE9wYWNpdHk6IHRydWUsXG4gICAgZmxvb2RPcGFjaXR5OiB0cnVlLFxuICAgIHN0b3BPcGFjaXR5OiB0cnVlLFxuICAgIHN0cm9rZURhc2hhcnJheTogdHJ1ZSxcbiAgICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICAgIHN0cm9rZU1pdGVybGltaXQ6IHRydWUsXG4gICAgc3Ryb2tlT3BhY2l0eTogdHJ1ZSxcbiAgICBzdHJva2VXaWR0aDogdHJ1ZVxuICB9O1xuICBmdW5jdGlvbiBwcmVmaXhLZXkocHJlZml4LCBrZXkpIHtcbiAgICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbiAgfVxuICB2YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdtcycsICdNb3onLCAnTyddO1xuICBPYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgICBwcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uKHByZWZpeCkge1xuICAgICAgaXNVbml0bGVzc051bWJlcltwcmVmaXhLZXkocHJlZml4LCBwcm9wKV0gPSBpc1VuaXRsZXNzTnVtYmVyW3Byb3BdO1xuICAgIH0pO1xuICB9KTtcbiAgdmFyIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9ucyA9IHtcbiAgICBiYWNrZ3JvdW5kOiB7XG4gICAgICBiYWNrZ3JvdW5kQXR0YWNobWVudDogdHJ1ZSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdHJ1ZSxcbiAgICAgIGJhY2tncm91bmRJbWFnZTogdHJ1ZSxcbiAgICAgIGJhY2tncm91bmRQb3NpdGlvblg6IHRydWUsXG4gICAgICBiYWNrZ3JvdW5kUG9zaXRpb25ZOiB0cnVlLFxuICAgICAgYmFja2dyb3VuZFJlcGVhdDogdHJ1ZVxuICAgIH0sXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uOiB7XG4gICAgICBiYWNrZ3JvdW5kUG9zaXRpb25YOiB0cnVlLFxuICAgICAgYmFja2dyb3VuZFBvc2l0aW9uWTogdHJ1ZVxuICAgIH0sXG4gICAgYm9yZGVyOiB7XG4gICAgICBib3JkZXJXaWR0aDogdHJ1ZSxcbiAgICAgIGJvcmRlclN0eWxlOiB0cnVlLFxuICAgICAgYm9yZGVyQ29sb3I6IHRydWVcbiAgICB9LFxuICAgIGJvcmRlckJvdHRvbToge1xuICAgICAgYm9yZGVyQm90dG9tV2lkdGg6IHRydWUsXG4gICAgICBib3JkZXJCb3R0b21TdHlsZTogdHJ1ZSxcbiAgICAgIGJvcmRlckJvdHRvbUNvbG9yOiB0cnVlXG4gICAgfSxcbiAgICBib3JkZXJMZWZ0OiB7XG4gICAgICBib3JkZXJMZWZ0V2lkdGg6IHRydWUsXG4gICAgICBib3JkZXJMZWZ0U3R5bGU6IHRydWUsXG4gICAgICBib3JkZXJMZWZ0Q29sb3I6IHRydWVcbiAgICB9LFxuICAgIGJvcmRlclJpZ2h0OiB7XG4gICAgICBib3JkZXJSaWdodFdpZHRoOiB0cnVlLFxuICAgICAgYm9yZGVyUmlnaHRTdHlsZTogdHJ1ZSxcbiAgICAgIGJvcmRlclJpZ2h0Q29sb3I6IHRydWVcbiAgICB9LFxuICAgIGJvcmRlclRvcDoge1xuICAgICAgYm9yZGVyVG9wV2lkdGg6IHRydWUsXG4gICAgICBib3JkZXJUb3BTdHlsZTogdHJ1ZSxcbiAgICAgIGJvcmRlclRvcENvbG9yOiB0cnVlXG4gICAgfSxcbiAgICBmb250OiB7XG4gICAgICBmb250U3R5bGU6IHRydWUsXG4gICAgICBmb250VmFyaWFudDogdHJ1ZSxcbiAgICAgIGZvbnRXZWlnaHQ6IHRydWUsXG4gICAgICBmb250U2l6ZTogdHJ1ZSxcbiAgICAgIGxpbmVIZWlnaHQ6IHRydWUsXG4gICAgICBmb250RmFtaWx5OiB0cnVlXG4gICAgfSxcbiAgICBvdXRsaW5lOiB7XG4gICAgICBvdXRsaW5lV2lkdGg6IHRydWUsXG4gICAgICBvdXRsaW5lU3R5bGU6IHRydWUsXG4gICAgICBvdXRsaW5lQ29sb3I6IHRydWVcbiAgICB9XG4gIH07XG4gIHZhciBDU1NQcm9wZXJ0eSA9IHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyOiBpc1VuaXRsZXNzTnVtYmVyLFxuICAgIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uczogc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zXG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gQ1NTUHJvcGVydHk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMjFcIiwgW1wiMjBcIiwgXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBDU1NQcm9wZXJ0eSA9ICRfX3JlcXVpcmUoJzIwJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBpc1VuaXRsZXNzTnVtYmVyID0gQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcjtcbiAgICB2YXIgc3R5bGVXYXJuaW5ncyA9IHt9O1xuICAgIGZ1bmN0aW9uIGRhbmdlcm91c1N0eWxlVmFsdWUobmFtZSwgdmFsdWUsIGNvbXBvbmVudCkge1xuICAgICAgdmFyIGlzRW1wdHkgPSB2YWx1ZSA9PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nIHx8IHZhbHVlID09PSAnJztcbiAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICAgIHZhciBpc05vbk51bWVyaWMgPSBpc05hTih2YWx1ZSk7XG4gICAgICBpZiAoaXNOb25OdW1lcmljIHx8IHZhbHVlID09PSAwIHx8IGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgaXNVbml0bGVzc051bWJlcltuYW1lXSkge1xuICAgICAgICByZXR1cm4gJycgKyB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgICAgICAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgICAgICB2YXIgb3duZXJOYW1lID0gb3duZXIgPyBvd25lci5nZXROYW1lKCkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKG93bmVyTmFtZSAmJiAhc3R5bGVXYXJuaW5nc1tvd25lck5hbWVdKSB7XG4gICAgICAgICAgICAgIHN0eWxlV2FybmluZ3Nbb3duZXJOYW1lXSA9IHt9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKG93bmVyTmFtZSkge1xuICAgICAgICAgICAgICB2YXIgd2FybmluZ3MgPSBzdHlsZVdhcm5pbmdzW293bmVyTmFtZV07XG4gICAgICAgICAgICAgIHdhcm5lZCA9IHdhcm5pbmdzW25hbWVdO1xuICAgICAgICAgICAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgICAgICAgICAgIHdhcm5pbmdzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdhIGAlc2AgdGFnIChvd25lcjogYCVzYCkgd2FzIHBhc3NlZCBhIG51bWVyaWMgc3RyaW5nIHZhbHVlICcgKyAnZm9yIENTUyBwcm9wZXJ0eSBgJXNgICh2YWx1ZTogYCVzYCkgd2hpY2ggd2lsbCBiZSB0cmVhdGVkICcgKyAnYXMgYSB1bml0bGVzcyBudW1iZXIgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBSZWFjdC4nLCBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50LnR5cGUsIG93bmVyTmFtZSB8fCAndW5rbm93bicsIG5hbWUsIHZhbHVlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWUgKyAncHgnO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGRhbmdlcm91c1N0eWxlVmFsdWU7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjIzXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgX3VwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xuICBmdW5jdGlvbiBoeXBoZW5hdGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKF91cHBlcmNhc2VQYXR0ZXJuLCAnLSQxJykudG9Mb3dlckNhc2UoKTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIyNFwiLCBbXCIyM1wiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGh5cGhlbmF0ZSA9ICRfX3JlcXVpcmUoJzIzJyk7XG4gIHZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG4gIGZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKHN0cmluZykucmVwbGFjZShtc1BhdHRlcm4sICctbXMtJyk7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMjVcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIGZ1bmN0aW9uIG1lbW9pemVTdHJpbmdPbmx5KGNhbGxiYWNrKSB7XG4gICAgdmFyIGNhY2hlID0ge307XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgaWYgKCFjYWNoZS5oYXNPd25Qcm9wZXJ0eShzdHJpbmcpKSB7XG4gICAgICAgIGNhY2hlW3N0cmluZ10gPSBjYWxsYmFjay5jYWxsKHRoaXMsIHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FjaGVbc3RyaW5nXTtcbiAgICB9O1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gbWVtb2l6ZVN0cmluZ09ubHk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMjZcIiwgW1wiMjBcIiwgXCJkXCIsIFwiMjdcIiwgXCIxZlwiLCBcIjIxXCIsIFwiMjRcIiwgXCIyNVwiLCBcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIENTU1Byb3BlcnR5ID0gJF9fcmVxdWlyZSgnMjAnKTtcbiAgICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSAkX19yZXF1aXJlKCdkJyk7XG4gICAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gJF9fcmVxdWlyZSgnMjcnKTtcbiAgICB2YXIgY2FtZWxpemVTdHlsZU5hbWUgPSAkX19yZXF1aXJlKCcxZicpO1xuICAgIHZhciBkYW5nZXJvdXNTdHlsZVZhbHVlID0gJF9fcmVxdWlyZSgnMjEnKTtcbiAgICB2YXIgaHlwaGVuYXRlU3R5bGVOYW1lID0gJF9fcmVxdWlyZSgnMjQnKTtcbiAgICB2YXIgbWVtb2l6ZVN0cmluZ09ubHkgPSAkX19yZXF1aXJlKCcyNScpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICB2YXIgcHJvY2Vzc1N0eWxlTmFtZSA9IG1lbW9pemVTdHJpbmdPbmx5KGZ1bmN0aW9uKHN0eWxlTmFtZSkge1xuICAgICAgcmV0dXJuIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHlsZU5hbWUpO1xuICAgIH0pO1xuICAgIHZhciBoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyA9IGZhbHNlO1xuICAgIHZhciBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnY3NzRmxvYXQnO1xuICAgIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICAgIHZhciB0ZW1wU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKS5zdHlsZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRlbXBTdHlsZS5mb250ID0gJyc7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhc1Nob3J0aGFuZFByb3BlcnR5QnVnID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuY3NzRmxvYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzdHlsZUZsb2F0QWNjZXNzb3IgPSAnc3R5bGVGbG9hdCc7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuID0gL14oPzp3ZWJraXR8bW96fG8pW0EtWl0vO1xuICAgICAgdmFyIGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiA9IC87XFxzKiQvO1xuICAgICAgdmFyIHdhcm5lZFN0eWxlTmFtZXMgPSB7fTtcbiAgICAgIHZhciB3YXJuZWRTdHlsZVZhbHVlcyA9IHt9O1xuICAgICAgdmFyIHdhcm5lZEZvck5hTlZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgd2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUgPSBmdW5jdGlvbihuYW1lLCBvd25lcikge1xuICAgICAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1Vuc3VwcG9ydGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JXMnLCBuYW1lLCBjYW1lbGl6ZVN0eWxlTmFtZShuYW1lKSwgY2hlY2tSZW5kZXJNZXNzYWdlKG93bmVyKSkgOiB2b2lkIDA7XG4gICAgICB9O1xuICAgICAgdmFyIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUsIG93bmVyKSB7XG4gICAgICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnVW5zdXBwb3J0ZWQgdmVuZG9yLXByZWZpeGVkIHN0eWxlIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JXMnLCBuYW1lLCBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSwgY2hlY2tSZW5kZXJNZXNzYWdlKG93bmVyKSkgOiB2b2lkIDA7XG4gICAgICB9O1xuICAgICAgdmFyIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBvd25lcikge1xuICAgICAgICBpZiAod2FybmVkU3R5bGVWYWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpICYmIHdhcm5lZFN0eWxlVmFsdWVzW3ZhbHVlXSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3YXJuZWRTdHlsZVZhbHVlc1t2YWx1ZV0gPSB0cnVlO1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1N0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuXFwndCBjb250YWluIGEgc2VtaWNvbG9uLiVzICcgKyAnVHJ5IFwiJXM6ICVzXCIgaW5zdGVhZC4nLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpLCBuYW1lLCB2YWx1ZS5yZXBsYWNlKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiwgJycpKSA6IHZvaWQgMDtcbiAgICAgIH07XG4gICAgICB2YXIgd2FyblN0eWxlVmFsdWVJc05hTiA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBvd25lcikge1xuICAgICAgICBpZiAod2FybmVkRm9yTmFOVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgd2FybmVkRm9yTmFOVmFsdWUgPSB0cnVlO1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2BOYU5gIGlzIGFuIGludmFsaWQgdmFsdWUgZm9yIHRoZSBgJXNgIGNzcyBzdHlsZSBwcm9wZXJ0eS4lcycsIG5hbWUsIGNoZWNrUmVuZGVyTWVzc2FnZShvd25lcikpIDogdm9pZCAwO1xuICAgICAgfTtcbiAgICAgIHZhciBjaGVja1JlbmRlck1lc3NhZ2UgPSBmdW5jdGlvbihvd25lcikge1xuICAgICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfTtcbiAgICAgIHZhciB3YXJuVmFsaWRTdHlsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBjb21wb25lbnQpIHtcbiAgICAgICAgdmFyIG93bmVyO1xuICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgb3duZXIgPSBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmFtZS5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgICAgIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKG5hbWUsIG93bmVyKTtcbiAgICAgICAgfSBlbHNlIGlmIChiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4udGVzdChuYW1lKSkge1xuICAgICAgICAgIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZShuYW1lLCBvd25lcik7XG4gICAgICAgIH0gZWxzZSBpZiAoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgd2FyblN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uKG5hbWUsIHZhbHVlLCBvd25lcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgd2FyblN0eWxlVmFsdWVJc05hTihuYW1lLCB2YWx1ZSwgb3duZXIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgQ1NTUHJvcGVydHlPcGVyYXRpb25zID0ge1xuICAgICAgY3JlYXRlTWFya3VwRm9yU3R5bGVzOiBmdW5jdGlvbihzdHlsZXMsIGNvbXBvbmVudCkge1xuICAgICAgICB2YXIgc2VyaWFsaXplZCA9ICcnO1xuICAgICAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5WYWxpZFN0eWxlKHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSwgY29tcG9uZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0eWxlVmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2VyaWFsaXplZCArPSBwcm9jZXNzU3R5bGVOYW1lKHN0eWxlTmFtZSkgKyAnOic7XG4gICAgICAgICAgICBzZXJpYWxpemVkICs9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlLCBjb21wb25lbnQpICsgJzsnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VyaWFsaXplZCB8fCBudWxsO1xuICAgICAgfSxcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzOiBmdW5jdGlvbihub2RlLCBzdHlsZXMsIGNvbXBvbmVudCkge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk5hdGl2ZU9wZXJhdGlvbihjb21wb25lbnQuX2RlYnVnSUQsICd1cGRhdGUgc3R5bGVzJywgc3R5bGVzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgICAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdLCBjb21wb25lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgc3R5bGVWYWx1ZSA9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZXNbc3R5bGVOYW1lXSwgY29tcG9uZW50KTtcbiAgICAgICAgICBpZiAoc3R5bGVOYW1lID09PSAnZmxvYXQnIHx8IHN0eWxlTmFtZSA9PT0gJ2Nzc0Zsb2F0Jykge1xuICAgICAgICAgICAgc3R5bGVOYW1lID0gc3R5bGVGbG9hdEFjY2Vzc29yO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3R5bGVWYWx1ZSkge1xuICAgICAgICAgICAgc3R5bGVbc3R5bGVOYW1lXSA9IHN0eWxlVmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBleHBhbnNpb24gPSBoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyAmJiBDU1NQcm9wZXJ0eS5zaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNbc3R5bGVOYW1lXTtcbiAgICAgICAgICAgIGlmIChleHBhbnNpb24pIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaW5kaXZpZHVhbFN0eWxlTmFtZSBpbiBleHBhbnNpb24pIHtcbiAgICAgICAgICAgICAgICBzdHlsZVtpbmRpdmlkdWFsU3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucztcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMjhcIiwgW1wiMjlcIiwgXCIxMVwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSAkX19yZXF1aXJlKCcyOScpO1xuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSAkX19yZXF1aXJlKCcxMScpO1xuICAgIHZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9IHtkYW5nZXJvdXNseVByb2Nlc3NDaGlsZHJlblVwZGF0ZXM6IGZ1bmN0aW9uKHBhcmVudEluc3QsIHVwZGF0ZXMpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShwYXJlbnRJbnN0KTtcbiAgICAgICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnByb2Nlc3NVcGRhdGVzKG5vZGUsIHVwZGF0ZXMpO1xuICAgICAgfX07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUlET3BlcmF0aW9ucztcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMmFcIiwgW1wiMjlcIiwgXCIyOFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSAkX19yZXF1aXJlKCcyOScpO1xuICAgIHZhciBSZWFjdERPTUlET3BlcmF0aW9ucyA9ICRfX3JlcXVpcmUoJzI4Jyk7XG4gICAgdmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0ge1xuICAgICAgcHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogUmVhY3RET01JRE9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzLFxuICAgICAgcmVwbGFjZU5vZGVXaXRoTWFya3VwOiBET01DaGlsZHJlbk9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAsXG4gICAgICB1bm1vdW50SURGcm9tRW52aXJvbm1lbnQ6IGZ1bmN0aW9uKHJvb3ROb2RlSUQpIHt9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50O1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIyYlwiLCBbXCIyY1wiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIERpc2FibGVkSW5wdXRVdGlscyA9ICRfX3JlcXVpcmUoJzJjJyk7XG4gIHZhciBSZWFjdERPTUJ1dHRvbiA9IHtnZXROYXRpdmVQcm9wczogRGlzYWJsZWRJbnB1dFV0aWxzLmdldE5hdGl2ZVByb3BzfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUJ1dHRvbjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIyZFwiLCBbXCI2XCIsIFwiMmNcIiwgXCIyZVwiLCBcIjJmXCIsIFwiMTFcIiwgXCIxMlwiLCBcIjMwXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgX2Fzc2lnbiA9ICRfX3JlcXVpcmUoJzYnKTtcbiAgICB2YXIgRGlzYWJsZWRJbnB1dFV0aWxzID0gJF9fcmVxdWlyZSgnMmMnKTtcbiAgICB2YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gJF9fcmVxdWlyZSgnMmUnKTtcbiAgICB2YXIgTGlua2VkVmFsdWVVdGlscyA9ICRfX3JlcXVpcmUoJzJmJyk7XG4gICAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9ICRfX3JlcXVpcmUoJzExJyk7XG4gICAgdmFyIFJlYWN0VXBkYXRlcyA9ICRfX3JlcXVpcmUoJzEyJyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBkaWRXYXJuVmFsdWVMaW5rID0gZmFsc2U7XG4gICAgdmFyIGRpZFdhcm5DaGVja2VkTGluayA9IGZhbHNlO1xuICAgIHZhciBkaWRXYXJuVmFsdWVOdWxsID0gZmFsc2U7XG4gICAgdmFyIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IGZhbHNlO1xuICAgIHZhciBkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkID0gZmFsc2U7XG4gICAgdmFyIGRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQgPSBmYWxzZTtcbiAgICB2YXIgZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIGZvcmNlVXBkYXRlSWZNb3VudGVkKCkge1xuICAgICAgaWYgKHRoaXMuX3Jvb3ROb2RlSUQpIHtcbiAgICAgICAgUmVhY3RET01JbnB1dC51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB3YXJuSWZWYWx1ZUlzTnVsbChwcm9wcykge1xuICAgICAgaWYgKHByb3BzICE9IG51bGwgJiYgcHJvcHMudmFsdWUgPT09IG51bGwgJiYgIWRpZFdhcm5WYWx1ZU51bGwpIHtcbiAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgdmFsdWVgIHByb3Agb24gYGlucHV0YCBzaG91bGQgbm90IGJlIG51bGwuICcgKyAnQ29uc2lkZXIgdXNpbmcgdGhlIGVtcHR5IHN0cmluZyB0byBjbGVhciB0aGUgY29tcG9uZW50IG9yIGB1bmRlZmluZWRgICcgKyAnZm9yIHVuY29udHJvbGxlZCBjb21wb25lbnRzLicpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuVmFsdWVOdWxsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIFJlYWN0RE9NSW5wdXQgPSB7XG4gICAgICBnZXROYXRpdmVQcm9wczogZnVuY3Rpb24oaW5zdCwgcHJvcHMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgICAgIHZhciBjaGVja2VkID0gTGlua2VkVmFsdWVVdGlscy5nZXRDaGVja2VkKHByb3BzKTtcbiAgICAgICAgdmFyIG5hdGl2ZVByb3BzID0gX2Fzc2lnbih7dHlwZTogdW5kZWZpbmVkfSwgRGlzYWJsZWRJbnB1dFV0aWxzLmdldE5hdGl2ZVByb3BzKGluc3QsIHByb3BzKSwge1xuICAgICAgICAgIGRlZmF1bHRDaGVja2VkOiB1bmRlZmluZWQsXG4gICAgICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgdmFsdWU6IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUsXG4gICAgICAgICAgY2hlY2tlZDogY2hlY2tlZCAhPSBudWxsID8gY2hlY2tlZCA6IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZCxcbiAgICAgICAgICBvbkNoYW5nZTogaW5zdC5fd3JhcHBlclN0YXRlLm9uQ2hhbmdlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmF0aXZlUHJvcHM7XG4gICAgICB9LFxuICAgICAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbihpbnN0LCBwcm9wcykge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIExpbmtlZFZhbHVlVXRpbHMuY2hlY2tQcm9wVHlwZXMoJ2lucHV0JywgcHJvcHMsIGluc3QuX2N1cnJlbnRFbGVtZW50Ll9vd25lcik7XG4gICAgICAgICAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICAgIGlmIChwcm9wcy52YWx1ZUxpbmsgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbHVlTGluaykge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgdmFsdWVMaW5rYCBwcm9wIG9uIGBpbnB1dGAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIGRpZFdhcm5WYWx1ZUxpbmsgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvcHMuY2hlY2tlZExpbmsgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FybkNoZWNrZWRMaW5rKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2BjaGVja2VkTGlua2AgcHJvcCBvbiBgaW5wdXRgIGlzIGRlcHJlY2F0ZWQ7IHNldCBgdmFsdWVgIGFuZCBgb25DaGFuZ2VgIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICBkaWRXYXJuQ2hlY2tlZExpbmsgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvcHMuY2hlY2tlZCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRDaGVja2VkICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQpIHtcbiAgICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMgY29udGFpbnMgYW4gaW5wdXQgb2YgdHlwZSAlcyB3aXRoIGJvdGggY2hlY2tlZCBhbmQgZGVmYXVsdENoZWNrZWQgcHJvcHMuICcgKyAnSW5wdXQgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIGNoZWNrZWQgcHJvcCwgb3IgdGhlIGRlZmF1bHRDaGVja2VkIHByb3AsIGJ1dCBub3QgJyArICdib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycsIG93bmVyICYmIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnLCBwcm9wcy50eXBlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIGRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIHZhbHVlIGFuZCBkZWZhdWx0VmFsdWUgcHJvcHMuICcgKyAnSW5wdXQgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpIDogdm9pZCAwO1xuICAgICAgICAgICAgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FybklmVmFsdWVJc051bGwocHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICAgICAgICBpbml0aWFsQ2hlY2tlZDogcHJvcHMuZGVmYXVsdENoZWNrZWQgfHwgZmFsc2UsXG4gICAgICAgICAgaW5pdGlhbFZhbHVlOiBkZWZhdWx0VmFsdWUgIT0gbnVsbCA/IGRlZmF1bHRWYWx1ZSA6IG51bGwsXG4gICAgICAgICAgbGlzdGVuZXJzOiBudWxsLFxuICAgICAgICAgIG9uQ2hhbmdlOiBfaGFuZGxlQ2hhbmdlLmJpbmQoaW5zdClcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUuY29udHJvbGxlZCA9IHByb3BzLmNoZWNrZWQgIT09IHVuZGVmaW5lZCB8fCBwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdXBkYXRlV3JhcHBlcjogZnVuY3Rpb24oaW5zdCkge1xuICAgICAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuSWZWYWx1ZUlzTnVsbChwcm9wcyk7XG4gICAgICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZCB8fCBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO1xuICAgICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0Q2hlY2tlZCB8fCBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgdmFyIGNvbnRyb2xsZWQgPSBwcm9wcy5jaGVja2VkICE9PSB1bmRlZmluZWQgfHwgcHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgICB2YXIgb3duZXIgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgICAgaWYgKChpbml0aWFsVmFsdWUgfHwgIWluc3QuX3dyYXBwZXJTdGF0ZS5jb250cm9sbGVkKSAmJiBjb250cm9sbGVkICYmICFkaWRXYXJuVW5jb250cm9sbGVkVG9Db250cm9sbGVkKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzIGlzIGNoYW5naW5nIGFuIHVuY29udHJvbGxlZCBpbnB1dCBvZiB0eXBlICVzIHRvIGJlIGNvbnRyb2xsZWQuICcgKyAnSW5wdXQgZWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuICcgKyAnRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpIDogdm9pZCAwO1xuICAgICAgICAgICAgZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbnN0Ll93cmFwcGVyU3RhdGUuY29udHJvbGxlZCAmJiAoZGVmYXVsdFZhbHVlIHx8ICFjb250cm9sbGVkKSAmJiAhZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCkge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyBpcyBjaGFuZ2luZyBhIGNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSB1bmNvbnRyb2xsZWQuICcgKyAnSW5wdXQgZWxlbWVudHMgc2hvdWxkIG5vdCBzd2l0Y2ggZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuICcgKyAnRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpIDogdm9pZCAwO1xuICAgICAgICAgICAgZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBjaGVja2VkID0gcHJvcHMuY2hlY2tlZDtcbiAgICAgICAgaWYgKGNoZWNrZWQgIT0gbnVsbCkge1xuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpLCAnY2hlY2tlZCcsIGNoZWNrZWQgfHwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpLCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgZnVuY3Rpb24gX2hhbmRsZUNoYW5nZShldmVudCkge1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuICAgICAgUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsIHRoaXMpO1xuICAgICAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICAgICAgaWYgKHByb3BzLnR5cGUgPT09ICdyYWRpbycgJiYgbmFtZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciByb290Tm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpO1xuICAgICAgICB2YXIgcXVlcnlSb290ID0gcm9vdE5vZGU7XG4gICAgICAgIHdoaWxlIChxdWVyeVJvb3QucGFyZW50Tm9kZSkge1xuICAgICAgICAgIHF1ZXJ5Um9vdCA9IHF1ZXJ5Um9vdC5wYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBncm91cCA9IHF1ZXJ5Um9vdC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPScgKyBKU09OLnN0cmluZ2lmeSgnJyArIG5hbWUpICsgJ11bdHlwZT1cInJhZGlvXCJdJyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgb3RoZXJOb2RlID0gZ3JvdXBbaV07XG4gICAgICAgICAgaWYgKG90aGVyTm9kZSA9PT0gcm9vdE5vZGUgfHwgb3RoZXJOb2RlLmZvcm0gIT09IHJvb3ROb2RlLmZvcm0pIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3RoZXJJbnN0YW5jZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG90aGVyTm9kZSk7XG4gICAgICAgICAgIW90aGVySW5zdGFuY2UgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RET01JbnB1dDogTWl4aW5nIFJlYWN0IGFuZCBub24tUmVhY3QgcmFkaW8gaW5wdXRzIHdpdGggdGhlICcgKyAnc2FtZSBgbmFtZWAgaXMgbm90IHN1cHBvcnRlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgUmVhY3RVcGRhdGVzLmFzYXAoZm9yY2VVcGRhdGVJZk1vdW50ZWQsIG90aGVySW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01JbnB1dDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMzFcIiwgW1wiNlwiLCBcIjMyXCIsIFwiMTFcIiwgXCIzM1wiLCBcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIF9hc3NpZ24gPSAkX19yZXF1aXJlKCc2Jyk7XG4gICAgdmFyIFJlYWN0Q2hpbGRyZW4gPSAkX19yZXF1aXJlKCczMicpO1xuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSAkX19yZXF1aXJlKCcxMScpO1xuICAgIHZhciBSZWFjdERPTVNlbGVjdCA9ICRfX3JlcXVpcmUoJzMzJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBSZWFjdERPTU9wdGlvbiA9IHtcbiAgICAgIG1vdW50V3JhcHBlcjogZnVuY3Rpb24oaW5zdCwgcHJvcHMsIG5hdGl2ZVBhcmVudCkge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLnNlbGVjdGVkID09IG51bGwsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgb24gPHNlbGVjdD4gaW5zdGVhZCBvZiAnICsgJ3NldHRpbmcgYHNlbGVjdGVkYCBvbiA8b3B0aW9uPi4nKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2VsZWN0VmFsdWUgPSBudWxsO1xuICAgICAgICBpZiAobmF0aXZlUGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0UGFyZW50ID0gbmF0aXZlUGFyZW50O1xuICAgICAgICAgIGlmIChzZWxlY3RQYXJlbnQuX3RhZyA9PT0gJ29wdGdyb3VwJykge1xuICAgICAgICAgICAgc2VsZWN0UGFyZW50ID0gc2VsZWN0UGFyZW50Ll9uYXRpdmVQYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWxlY3RQYXJlbnQgIT0gbnVsbCAmJiBzZWxlY3RQYXJlbnQuX3RhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgICAgIHNlbGVjdFZhbHVlID0gUmVhY3RET01TZWxlY3QuZ2V0U2VsZWN0VmFsdWVDb250ZXh0KHNlbGVjdFBhcmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzZWxlY3RlZCA9IG51bGw7XG4gICAgICAgIGlmIChzZWxlY3RWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RWYWx1ZSkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0VmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKCcnICsgc2VsZWN0VmFsdWVbaV0gPT09ICcnICsgcHJvcHMudmFsdWUpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZWN0ZWQgPSAnJyArIHNlbGVjdFZhbHVlID09PSAnJyArIHByb3BzLnZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7c2VsZWN0ZWQ6IHNlbGVjdGVkfTtcbiAgICAgIH0sXG4gICAgICBwb3N0TW91bnRXcmFwcGVyOiBmdW5jdGlvbihpbnN0KSB7XG4gICAgICAgIHZhciBwcm9wcyA9IGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgICAgICBpZiAocHJvcHMudmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIHZhciBub2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgcHJvcHMudmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0TmF0aXZlUHJvcHM6IGZ1bmN0aW9uKGluc3QsIHByb3BzKSB7XG4gICAgICAgIHZhciBuYXRpdmVQcm9wcyA9IF9hc3NpZ24oe1xuICAgICAgICAgIHNlbGVjdGVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgY2hpbGRyZW46IHVuZGVmaW5lZFxuICAgICAgICB9LCBwcm9wcyk7XG4gICAgICAgIGlmIChpbnN0Ll93cmFwcGVyU3RhdGUuc2VsZWN0ZWQgIT0gbnVsbCkge1xuICAgICAgICAgIG5hdGl2ZVByb3BzLnNlbGVjdGVkID0gaW5zdC5fd3JhcHBlclN0YXRlLnNlbGVjdGVkO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjb250ZW50ID0gJyc7XG4gICAgICAgIFJlYWN0Q2hpbGRyZW4uZm9yRWFjaChwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb250ZW50ICs9IGNoaWxkO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ09ubHkgc3RyaW5ncyBhbmQgbnVtYmVycyBhcmUgc3VwcG9ydGVkIGFzIDxvcHRpb24+IGNoaWxkcmVuLicpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgbmF0aXZlUHJvcHMuY2hpbGRyZW4gPSBjb250ZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYXRpdmVQcm9wcztcbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01PcHRpb247XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjMzXCIsIFtcIjZcIiwgXCIyY1wiLCBcIjJmXCIsIFwiMTFcIiwgXCIxMlwiLCBcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIF9hc3NpZ24gPSAkX19yZXF1aXJlKCc2Jyk7XG4gICAgdmFyIERpc2FibGVkSW5wdXRVdGlscyA9ICRfX3JlcXVpcmUoJzJjJyk7XG4gICAgdmFyIExpbmtlZFZhbHVlVXRpbHMgPSAkX19yZXF1aXJlKCcyZicpO1xuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSAkX19yZXF1aXJlKCcxMScpO1xuICAgIHZhciBSZWFjdFVwZGF0ZXMgPSAkX19yZXF1aXJlKCcxMicpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICB2YXIgZGlkV2FyblZhbHVlTGluayA9IGZhbHNlO1xuICAgIHZhciBkaWRXYXJuVmFsdWVOdWxsID0gZmFsc2U7XG4gICAgdmFyIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkKCkge1xuICAgICAgaWYgKHRoaXMuX3Jvb3ROb2RlSUQgJiYgdGhpcy5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGUpIHtcbiAgICAgICAgdGhpcy5fd3JhcHBlclN0YXRlLnBlbmRpbmdVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpIHtcbiAgICAgIGlmIChvd25lcikge1xuICAgICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHdhcm5JZlZhbHVlSXNOdWxsKHByb3BzKSB7XG4gICAgICBpZiAocHJvcHMgIT0gbnVsbCAmJiBwcm9wcy52YWx1ZSA9PT0gbnVsbCAmJiAhZGlkV2FyblZhbHVlTnVsbCkge1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2B2YWx1ZWAgcHJvcCBvbiBgc2VsZWN0YCBzaG91bGQgbm90IGJlIG51bGwuICcgKyAnQ29uc2lkZXIgdXNpbmcgdGhlIGVtcHR5IHN0cmluZyB0byBjbGVhciB0aGUgY29tcG9uZW50IG9yIGB1bmRlZmluZWRgICcgKyAnZm9yIHVuY29udHJvbGxlZCBjb21wb25lbnRzLicpIDogdm9pZCAwO1xuICAgICAgICBkaWRXYXJuVmFsdWVOdWxsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIHZhbHVlUHJvcE5hbWVzID0gWyd2YWx1ZScsICdkZWZhdWx0VmFsdWUnXTtcbiAgICBmdW5jdGlvbiBjaGVja1NlbGVjdFByb3BUeXBlcyhpbnN0LCBwcm9wcykge1xuICAgICAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgTGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcygnc2VsZWN0JywgcHJvcHMsIG93bmVyKTtcbiAgICAgIGlmIChwcm9wcy52YWx1ZUxpbmsgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbHVlTGluaykge1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2B2YWx1ZUxpbmtgIHByb3Agb24gYHNlbGVjdGAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FyblZhbHVlTGluayA9IHRydWU7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlUHJvcE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwcm9wTmFtZSA9IHZhbHVlUHJvcE5hbWVzW2ldO1xuICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSksICdUaGUgYCVzYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYW4gYXJyYXkgaWYgJyArICdgbXVsdGlwbGVgIGlzIHRydWUuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSkgOiB2b2lkIDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUFycmF5LmlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKSwgJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhIHNjYWxhciAnICsgJ3ZhbHVlIGlmIGBtdWx0aXBsZWAgaXMgZmFsc2UuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhpbnN0LCBtdWx0aXBsZSwgcHJvcFZhbHVlKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRWYWx1ZSxcbiAgICAgICAgICBpO1xuICAgICAgdmFyIG9wdGlvbnMgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KS5vcHRpb25zO1xuICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgIHNlbGVjdGVkVmFsdWUgPSB7fTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHNlbGVjdGVkVmFsdWVbJycgKyBwcm9wVmFsdWVbaV1dID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBzZWxlY3RlZCA9IHNlbGVjdGVkVmFsdWUuaGFzT3duUHJvcGVydHkob3B0aW9uc1tpXS52YWx1ZSk7XG4gICAgICAgICAgaWYgKG9wdGlvbnNbaV0uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZFZhbHVlID0gJycgKyBwcm9wVmFsdWU7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnNbaV0udmFsdWUgPT09IHNlbGVjdGVkVmFsdWUpIHtcbiAgICAgICAgICAgIG9wdGlvbnNbaV0uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICBvcHRpb25zWzBdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgUmVhY3RET01TZWxlY3QgPSB7XG4gICAgICBnZXROYXRpdmVQcm9wczogZnVuY3Rpb24oaW5zdCwgcHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIF9hc3NpZ24oe30sIERpc2FibGVkSW5wdXRVdGlscy5nZXROYXRpdmVQcm9wcyhpbnN0LCBwcm9wcyksIHtcbiAgICAgICAgICBvbkNoYW5nZTogaW5zdC5fd3JhcHBlclN0YXRlLm9uQ2hhbmdlLFxuICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbihpbnN0LCBwcm9wcykge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrU2VsZWN0UHJvcFR5cGVzKGluc3QsIHByb3BzKTtcbiAgICAgICAgICB3YXJuSWZWYWx1ZUlzTnVsbChwcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICAgICAgICBwZW5kaW5nVXBkYXRlOiBmYWxzZSxcbiAgICAgICAgICBpbml0aWFsVmFsdWU6IHZhbHVlICE9IG51bGwgPyB2YWx1ZSA6IHByb3BzLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICBsaXN0ZW5lcnM6IG51bGwsXG4gICAgICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KSxcbiAgICAgICAgICB3YXNNdWx0aXBsZTogQm9vbGVhbihwcm9wcy5tdWx0aXBsZSlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSkge1xuICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnU2VsZWN0IGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICcgKyAnKHNwZWNpZnkgZWl0aGVyIHRoZSB2YWx1ZSBwcm9wLCBvciB0aGUgZGVmYXVsdFZhbHVlIHByb3AsIGJ1dCBub3QgJyArICdib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBzZWxlY3QgJyArICdlbGVtZW50IGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0U2VsZWN0VmFsdWVDb250ZXh0OiBmdW5jdGlvbihpbnN0KSB7XG4gICAgICAgIHJldHVybiBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO1xuICAgICAgfSxcbiAgICAgIHBvc3RVcGRhdGVXcmFwcGVyOiBmdW5jdGlvbihpbnN0KSB7XG4gICAgICAgIHZhciBwcm9wcyA9IGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm5JZlZhbHVlSXNOdWxsKHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgd2FzTXVsdGlwbGUgPSBpbnN0Ll93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7XG4gICAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSA9IEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpO1xuICAgICAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh3YXNNdWx0aXBsZSAhPT0gQm9vbGVhbihwcm9wcy5tdWx0aXBsZSkpIHtcbiAgICAgICAgICBpZiAocHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHByb3BzLmRlZmF1bHRWYWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHByb3BzLm11bHRpcGxlID8gW10gOiAnJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZXhlY3V0ZU9uQ2hhbmdlKHByb3BzLCBldmVudCk7XG4gICAgICBpZiAodGhpcy5fcm9vdE5vZGVJRCkge1xuICAgICAgICB0aGlzLl93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBSZWFjdFVwZGF0ZXMuYXNhcCh1cGRhdGVPcHRpb25zSWZQZW5kaW5nVXBkYXRlQW5kTW91bnRlZCwgdGhpcyk7XG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Q7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjJjXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgZGlzYWJsZWFibGVNb3VzZUxpc3RlbmVyTmFtZXMgPSB7XG4gICAgb25DbGljazogdHJ1ZSxcbiAgICBvbkRvdWJsZUNsaWNrOiB0cnVlLFxuICAgIG9uTW91c2VEb3duOiB0cnVlLFxuICAgIG9uTW91c2VNb3ZlOiB0cnVlLFxuICAgIG9uTW91c2VVcDogdHJ1ZSxcbiAgICBvbkNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgICBvbkRvdWJsZUNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgICBvbk1vdXNlRG93bkNhcHR1cmU6IHRydWUsXG4gICAgb25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlLFxuICAgIG9uTW91c2VVcENhcHR1cmU6IHRydWVcbiAgfTtcbiAgdmFyIERpc2FibGVkSW5wdXRVdGlscyA9IHtnZXROYXRpdmVQcm9wczogZnVuY3Rpb24oaW5zdCwgcHJvcHMpIHtcbiAgICAgIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgfVxuICAgICAgdmFyIG5hdGl2ZVByb3BzID0ge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKCFkaXNhYmxlYWJsZU1vdXNlTGlzdGVuZXJOYW1lc1trZXldICYmIHByb3BzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBuYXRpdmVQcm9wc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVByb3BzO1xuICAgIH19O1xuICBtb2R1bGUuZXhwb3J0cyA9IERpc2FibGVkSW5wdXRVdGlscztcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIzNFwiLCBbXCIxYlwiLCBcIjM1XCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgRE9NUHJvcGVydHkgPSAkX19yZXF1aXJlKCcxYicpO1xuICAgIHZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gJF9fcmVxdWlyZSgnMzUnKTtcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciByZWFjdFByb3BzID0ge1xuICAgICAgICBjaGlsZHJlbjogdHJ1ZSxcbiAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw6IHRydWUsXG4gICAgICAgIGtleTogdHJ1ZSxcbiAgICAgICAgcmVmOiB0cnVlXG4gICAgICB9O1xuICAgICAgdmFyIHdhcm5lZFByb3BlcnRpZXMgPSB7fTtcbiAgICAgIHZhciB3YXJuVW5rbm93blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgICBpZiAoRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSB8fCBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVhY3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiByZWFjdFByb3BzW25hbWVdIHx8IHdhcm5lZFByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgd2FybmVkUHJvcGVydGllc1tuYW1lXSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YXIgc3RhbmRhcmROYW1lID0gRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobG93ZXJDYXNlZE5hbWUpID8gbG93ZXJDYXNlZE5hbWUgOiBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VkTmFtZSkgPyBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVtsb3dlckNhc2VkTmFtZV0gOiBudWxsO1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhzdGFuZGFyZE5hbWUgPT0gbnVsbCwgJ1Vua25vd24gRE9NIHByb3BlcnR5ICVzLiBEaWQgeW91IG1lYW4gJXM/JywgbmFtZSwgc3RhbmRhcmROYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpID8gRXZlbnRQbHVnaW5SZWdpc3RyeS5wb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzW2xvd2VyQ2FzZWROYW1lXSA6IG51bGw7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHJlZ2lzdHJhdGlvbk5hbWUgPT0gbnVsbCwgJ1Vua25vd24gZXZlbnQgaGFuZGxlciBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuIGAlc2A/JywgbmFtZSwgcmVnaXN0cmF0aW9uTmFtZSkgOiB2b2lkIDA7XG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgUmVhY3RET01Vbmtub3duUHJvcGVydHlEZXZ0b29sID0ge1xuICAgICAgb25DcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eTogZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgIH0sXG4gICAgICBvblNldFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHdhcm5Vbmtub3duUHJvcGVydHkobmFtZSk7XG4gICAgICB9LFxuICAgICAgb25EZWxldGVWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgICAgIHdhcm5Vbmtub3duUHJvcGVydHkobmFtZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVW5rbm93blByb3BlcnR5RGV2dG9vbDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMzZcIiwgW1wiMzRcIiwgXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBSZWFjdERPTVVua25vd25Qcm9wZXJ0eURldnRvb2wgPSAkX19yZXF1aXJlKCczNCcpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICB2YXIgZXZlbnRIYW5kbGVycyA9IFtdO1xuICAgIHZhciBoYW5kbGVyRG9lc1Rocm93Rm9yRXZlbnQgPSB7fTtcbiAgICBmdW5jdGlvbiBlbWl0RXZlbnQoaGFuZGxlckZ1bmN0aW9uTmFtZSwgYXJnMSwgYXJnMiwgYXJnMywgYXJnNCwgYXJnNSkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZXZlbnRIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJbaGFuZGxlckZ1bmN0aW9uTmFtZV0pIHtcbiAgICAgICAgICAgICAgaGFuZGxlcltoYW5kbGVyRnVuY3Rpb25OYW1lXShhcmcxLCBhcmcyLCBhcmczLCBhcmc0LCBhcmc1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaGFuZGxlckRvZXNUaHJvd0ZvckV2ZW50W2hhbmRsZXJGdW5jdGlvbk5hbWVdLCAnZXhjZXB0aW9uIHRocm93biBieSBkZXZ0b29sIHdoaWxlIGhhbmRsaW5nICVzOiAlcycsIGhhbmRsZXJGdW5jdGlvbk5hbWUsIGUubWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBoYW5kbGVyRG9lc1Rocm93Rm9yRXZlbnRbaGFuZGxlckZ1bmN0aW9uTmFtZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBSZWFjdERPTURlYnVnVG9vbCA9IHtcbiAgICAgIGFkZERldnRvb2w6IGZ1bmN0aW9uKGRldnRvb2wpIHtcbiAgICAgICAgZXZlbnRIYW5kbGVycy5wdXNoKGRldnRvb2wpO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZURldnRvb2w6IGZ1bmN0aW9uKGRldnRvb2wpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlcnNbaV0gPT09IGRldnRvb2wpIHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uQ3JlYXRlTWFya3VwRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGVtaXRFdmVudCgnb25DcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eScsIG5hbWUsIHZhbHVlKTtcbiAgICAgIH0sXG4gICAgICBvblNldFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGVtaXRFdmVudCgnb25TZXRWYWx1ZUZvclByb3BlcnR5Jywgbm9kZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgfSxcbiAgICAgIG9uRGVsZXRlVmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICAgICAgICBlbWl0RXZlbnQoJ29uRGVsZXRlVmFsdWVGb3JQcm9wZXJ0eScsIG5vZGUsIG5hbWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgUmVhY3RET01EZWJ1Z1Rvb2wuYWRkRGV2dG9vbChSZWFjdERPTVVua25vd25Qcm9wZXJ0eURldnRvb2wpO1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01EZWJ1Z1Rvb2w7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjM3XCIsIFtcIjM2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgUmVhY3RET01EZWJ1Z1Rvb2wgPSAkX19yZXF1aXJlKCczNicpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHtkZWJ1Z1Rvb2w6IFJlYWN0RE9NRGVidWdUb29sfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIzOFwiLCBbXCIzOVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9ICRfX3JlcXVpcmUoJzM5Jyk7XG4gIGZ1bmN0aW9uIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKSB7XG4gICAgcmV0dXJuICdcIicgKyBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodmFsdWUpICsgJ1wiJztcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjJlXCIsIFtcIjFiXCIsIFwiMTFcIiwgXCIzN1wiLCBcIjI3XCIsIFwiMzhcIiwgXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBET01Qcm9wZXJ0eSA9ICRfX3JlcXVpcmUoJzFiJyk7XG4gICAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9ICRfX3JlcXVpcmUoJzExJyk7XG4gICAgdmFyIFJlYWN0RE9NSW5zdHJ1bWVudGF0aW9uID0gJF9fcmVxdWlyZSgnMzcnKTtcbiAgICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSAkX19yZXF1aXJlKCcyNycpO1xuICAgIHZhciBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3NlciA9ICRfX3JlcXVpcmUoJzM4Jyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCA9IG5ldyBSZWdFeHAoJ15bJyArIERPTVByb3BlcnR5LkFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgKyAnXVsnICsgRE9NUHJvcGVydHkuQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcbiAgICB2YXIgaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSA9IHt9O1xuICAgIHZhciB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fTtcbiAgICBmdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWVTYWZlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgICAgIGlmICh2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZS5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgudGVzdChhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSB0cnVlO1xuICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdJbnZhbGlkIGF0dHJpYnV0ZSBuYW1lOiBgJXNgJywgYXR0cmlidXRlTmFtZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNob3VsZElnbm9yZVZhbHVlKHByb3BlcnR5SW5mbywgdmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PSBudWxsIHx8IHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgJiYgIXZhbHVlIHx8IHByb3BlcnR5SW5mby5oYXNOdW1lcmljVmFsdWUgJiYgaXNOYU4odmFsdWUpIHx8IHByb3BlcnR5SW5mby5oYXNQb3NpdGl2ZU51bWVyaWNWYWx1ZSAmJiB2YWx1ZSA8IDEgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IGZhbHNlO1xuICAgIH1cbiAgICB2YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0ge1xuICAgICAgY3JlYXRlTWFya3VwRm9ySUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIHJldHVybiBET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKGlkKTtcbiAgICAgIH0sXG4gICAgICBzZXRBdHRyaWJ1dGVGb3JJRDogZnVuY3Rpb24obm9kZSwgaWQpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUUsIGlkKTtcbiAgICAgIH0sXG4gICAgICBjcmVhdGVNYXJrdXBGb3JSb290OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIERPTVByb3BlcnR5LlJPT1RfQVRUUklCVVRFX05BTUUgKyAnPVwiXCInO1xuICAgICAgfSxcbiAgICAgIHNldEF0dHJpYnV0ZUZvclJvb3Q6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoRE9NUHJvcGVydHkuUk9PVF9BVFRSSUJVVEVfTkFNRSwgJycpO1xuICAgICAgfSxcbiAgICAgIGNyZWF0ZU1hcmt1cEZvclByb3BlcnR5OiBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIFJlYWN0RE9NSW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkNyZWF0ZU1hcmt1cEZvclByb3BlcnR5KG5hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgICAgICBpZiAocHJvcGVydHlJbmZvKSB7XG4gICAgICAgICAgaWYgKHNob3VsZElnbm9yZVZhbHVlKHByb3BlcnR5SW5mbywgdmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBhdHRyaWJ1dGVOYW1lID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgaWYgKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBhdHRyaWJ1dGVOYW1lICsgJz1cIlwiJztcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbmFtZSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0sXG4gICAgICBjcmVhdGVNYXJrdXBGb3JDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIGlmICghaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICAgICAgfSxcbiAgICAgIHNldFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eUluZm8gPSBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpID8gRE9NUHJvcGVydHkucHJvcGVydGllc1tuYW1lXSA6IG51bGw7XG4gICAgICAgIGlmIChwcm9wZXJ0eUluZm8pIHtcbiAgICAgICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBwcm9wZXJ0eUluZm8ubXV0YXRpb25NZXRob2Q7XG4gICAgICAgICAgaWYgKG11dGF0aW9uTWV0aG9kKSB7XG4gICAgICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzaG91bGRJZ25vcmVWYWx1ZShwcm9wZXJ0eUluZm8sIHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLm11c3RVc2VQcm9wZXJ0eSkge1xuICAgICAgICAgICAgdmFyIHByb3BOYW1lID0gcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgIGlmICghcHJvcGVydHlJbmZvLmhhc1NpZGVFZmZlY3RzIHx8ICcnICsgbm9kZVtwcm9wTmFtZV0gIT09ICcnICsgdmFsdWUpIHtcbiAgICAgICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZTtcbiAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZXNwYWNlO1xuICAgICAgICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZSwgYXR0cmlidXRlTmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgJycpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yQXR0cmlidXRlKG5vZGUsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBSZWFjdERPTUluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgICB2YXIgcGF5bG9hZCA9IHt9O1xuICAgICAgICAgIHBheWxvYWRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25OYXRpdmVPcGVyYXRpb24oUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkuX2RlYnVnSUQsICd1cGRhdGUgYXR0cmlidXRlJywgcGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzZXRWYWx1ZUZvckF0dHJpYnV0ZTogZnVuY3Rpb24obm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCFpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgcGF5bG9hZCA9IHt9O1xuICAgICAgICAgIHBheWxvYWRbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25OYXRpdmVPcGVyYXRpb24oUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkuX2RlYnVnSUQsICd1cGRhdGUgYXR0cmlidXRlJywgcGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZWxldGVWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgICAgIHZhciBwcm9wZXJ0eUluZm8gPSBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpID8gRE9NUHJvcGVydHkucHJvcGVydGllc1tuYW1lXSA6IG51bGw7XG4gICAgICAgIGlmIChwcm9wZXJ0eUluZm8pIHtcbiAgICAgICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBwcm9wZXJ0eUluZm8ubXV0YXRpb25NZXRob2Q7XG4gICAgICAgICAgaWYgKG11dGF0aW9uTWV0aG9kKSB7XG4gICAgICAgICAgICBtdXRhdGlvbk1ldGhvZChub2RlLCB1bmRlZmluZWQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLm11c3RVc2VQcm9wZXJ0eSkge1xuICAgICAgICAgICAgdmFyIHByb3BOYW1lID0gcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlKSB7XG4gICAgICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoIXByb3BlcnR5SW5mby5oYXNTaWRlRWZmZWN0cyB8fCAnJyArIG5vZGVbcHJvcE5hbWVdICE9PSAnJykge1xuICAgICAgICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUocHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgUmVhY3RET01JbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lKTtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25OYXRpdmVPcGVyYXRpb24oUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkuX2RlYnVnSUQsICdyZW1vdmUgYXR0cmlidXRlJywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHlPcGVyYXRpb25zO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIyZlwiLCBbXCIzYVwiLCBcIjNiXCIsIFwiMzBcIiwgXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBSZWFjdFByb3BUeXBlcyA9ICRfX3JlcXVpcmUoJzNhJyk7XG4gICAgdmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSAkX19yZXF1aXJlKCczYicpO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICB2YXIgaGFzUmVhZE9ubHlWYWx1ZSA9IHtcbiAgICAgICdidXR0b24nOiB0cnVlLFxuICAgICAgJ2NoZWNrYm94JzogdHJ1ZSxcbiAgICAgICdpbWFnZSc6IHRydWUsXG4gICAgICAnaGlkZGVuJzogdHJ1ZSxcbiAgICAgICdyYWRpbyc6IHRydWUsXG4gICAgICAncmVzZXQnOiB0cnVlLFxuICAgICAgJ3N1Ym1pdCc6IHRydWVcbiAgICB9O1xuICAgIGZ1bmN0aW9uIF9hc3NlcnRTaW5nbGVMaW5rKGlucHV0UHJvcHMpIHtcbiAgICAgICEoaW5wdXRQcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0UHJvcHMudmFsdWVMaW5rID09IG51bGwpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgdmFsdWVMaW5rLiBJZiB5b3Ugd2FudCB0byB1c2UgJyArICdjaGVja2VkTGluaywgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byB1c2UgdmFsdWVMaW5rIGFuZCB2aWNlIHZlcnNhLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2Fzc2VydFZhbHVlTGluayhpbnB1dFByb3BzKSB7XG4gICAgICBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dFByb3BzKTtcbiAgICAgICEoaW5wdXRQcm9wcy52YWx1ZSA9PSBudWxsICYmIGlucHV0UHJvcHMub25DaGFuZ2UgPT0gbnVsbCkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHByb3ZpZGUgYSB2YWx1ZUxpbmsgYW5kIGEgdmFsdWUgb3Igb25DaGFuZ2UgZXZlbnQuIElmIHlvdSB3YW50ICcgKyAndG8gdXNlIHZhbHVlIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvIHVzZSB2YWx1ZUxpbmsuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXRQcm9wcykge1xuICAgICAgX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXRQcm9wcyk7XG4gICAgICAhKGlucHV0UHJvcHMuY2hlY2tlZCA9PSBudWxsICYmIGlucHV0UHJvcHMub25DaGFuZ2UgPT0gbnVsbCkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnQ2Fubm90IHByb3ZpZGUgYSBjaGVja2VkTGluayBhbmQgYSBjaGVja2VkIHByb3BlcnR5IG9yIG9uQ2hhbmdlIGV2ZW50LiAnICsgJ0lmIHlvdSB3YW50IHRvIHVzZSBjaGVja2VkIG9yIG9uQ2hhbmdlLCB5b3UgcHJvYmFibHkgZG9uXFwndCB3YW50IHRvICcgKyAndXNlIGNoZWNrZWRMaW5rJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cbiAgICB2YXIgcHJvcFR5cGVzID0ge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fCBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgKyAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICsgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRWYWx1ZWAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgICAgIH0sXG4gICAgICBjaGVja2VkOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgaWYgKCFwcm9wc1twcm9wTmFtZV0gfHwgcHJvcHMub25DaGFuZ2UgfHwgcHJvcHMucmVhZE9ubHkgfHwgcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdZb3UgcHJvdmlkZWQgYSBgY2hlY2tlZGAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICsgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0Q2hlY2tlZGAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgICAgIH0sXG4gICAgICBvbkNoYW5nZTogUmVhY3RQcm9wVHlwZXMuZnVuY1xuICAgIH07XG4gICAgdmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuICAgIGZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShvd25lcikge1xuICAgICAgaWYgKG93bmVyKSB7XG4gICAgICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIExpbmtlZFZhbHVlVXRpbHMgPSB7XG4gICAgICBjaGVja1Byb3BUeXBlczogZnVuY3Rpb24odGFnTmFtZSwgcHJvcHMsIG93bmVyKSB7XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgICAgICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgdGFnTmFtZSwgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpO1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdGYWlsZWQgZm9ybSBwcm9wVHlwZTogJXMlcycsIGVycm9yLm1lc3NhZ2UsIGFkZGVuZHVtKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBnZXRWYWx1ZTogZnVuY3Rpb24oaW5wdXRQcm9wcykge1xuICAgICAgICBpZiAoaW5wdXRQcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgICAgICBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgICAgIHJldHVybiBpbnB1dFByb3BzLnZhbHVlTGluay52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXRQcm9wcy52YWx1ZTtcbiAgICAgIH0sXG4gICAgICBnZXRDaGVja2VkOiBmdW5jdGlvbihpbnB1dFByb3BzKSB7XG4gICAgICAgIGlmIChpbnB1dFByb3BzLmNoZWNrZWRMaW5rKSB7XG4gICAgICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgICAgIHJldHVybiBpbnB1dFByb3BzLmNoZWNrZWRMaW5rLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dFByb3BzLmNoZWNrZWQ7XG4gICAgICB9LFxuICAgICAgZXhlY3V0ZU9uQ2hhbmdlOiBmdW5jdGlvbihpbnB1dFByb3BzLCBldmVudCkge1xuICAgICAgICBpZiAoaW5wdXRQcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgICAgICBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgICAgIHJldHVybiBpbnB1dFByb3BzLnZhbHVlTGluay5yZXF1ZXN0Q2hhbmdlKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXRQcm9wcy5jaGVja2VkTGluaykge1xuICAgICAgICAgIF9hc3NlcnRDaGVja2VkTGluayhpbnB1dFByb3BzKTtcbiAgICAgICAgICByZXR1cm4gaW5wdXRQcm9wcy5jaGVja2VkTGluay5yZXF1ZXN0Q2hhbmdlKGV2ZW50LnRhcmdldC5jaGVja2VkKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dFByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICAgICAgcmV0dXJuIGlucHV0UHJvcHMub25DaGFuZ2UuY2FsbCh1bmRlZmluZWQsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBMaW5rZWRWYWx1ZVV0aWxzO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIzY1wiLCBbXCI2XCIsIFwiMmNcIiwgXCIyZVwiLCBcIjJmXCIsIFwiMTFcIiwgXCIxMlwiLCBcIjMwXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgX2Fzc2lnbiA9ICRfX3JlcXVpcmUoJzYnKTtcbiAgICB2YXIgRGlzYWJsZWRJbnB1dFV0aWxzID0gJF9fcmVxdWlyZSgnMmMnKTtcbiAgICB2YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gJF9fcmVxdWlyZSgnMmUnKTtcbiAgICB2YXIgTGlua2VkVmFsdWVVdGlscyA9ICRfX3JlcXVpcmUoJzJmJyk7XG4gICAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9ICRfX3JlcXVpcmUoJzExJyk7XG4gICAgdmFyIFJlYWN0VXBkYXRlcyA9ICRfX3JlcXVpcmUoJzEyJyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBkaWRXYXJuVmFsdWVMaW5rID0gZmFsc2U7XG4gICAgdmFyIGRpZFdhcm5WYWx1ZU51bGwgPSBmYWxzZTtcbiAgICB2YXIgZGlkV2FyblZhbERlZmF1bHRWYWwgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpIHtcbiAgICAgIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgICAgIFJlYWN0RE9NVGV4dGFyZWEudXBkYXRlV3JhcHBlcih0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gd2FybklmVmFsdWVJc051bGwocHJvcHMpIHtcbiAgICAgIGlmIChwcm9wcyAhPSBudWxsICYmIHByb3BzLnZhbHVlID09PSBudWxsICYmICFkaWRXYXJuVmFsdWVOdWxsKSB7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYHZhbHVlYCBwcm9wIG9uIGB0ZXh0YXJlYWAgc2hvdWxkIG5vdCBiZSBudWxsLiAnICsgJ0NvbnNpZGVyIHVzaW5nIHRoZSBlbXB0eSBzdHJpbmcgdG8gY2xlYXIgdGhlIGNvbXBvbmVudCBvciBgdW5kZWZpbmVkYCAnICsgJ2ZvciB1bmNvbnRyb2xsZWQgY29tcG9uZW50cy4nKSA6IHZvaWQgMDtcbiAgICAgICAgZGlkV2FyblZhbHVlTnVsbCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBSZWFjdERPTVRleHRhcmVhID0ge1xuICAgICAgZ2V0TmF0aXZlUHJvcHM6IGZ1bmN0aW9uKGluc3QsIHByb3BzKSB7XG4gICAgICAgICEocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBkb2VzIG5vdCBtYWtlIHNlbnNlIG9uIDx0ZXh0YXJlYT4uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB2YXIgbmF0aXZlUHJvcHMgPSBfYXNzaWduKHt9LCBEaXNhYmxlZElucHV0VXRpbHMuZ2V0TmF0aXZlUHJvcHMoaW5zdCwgcHJvcHMpLCB7XG4gICAgICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgICBjaGlsZHJlbjogaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSxcbiAgICAgICAgICBvbkNoYW5nZTogaW5zdC5fd3JhcHBlclN0YXRlLm9uQ2hhbmdlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbmF0aXZlUHJvcHM7XG4gICAgICB9LFxuICAgICAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbihpbnN0LCBwcm9wcykge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIExpbmtlZFZhbHVlVXRpbHMuY2hlY2tQcm9wVHlwZXMoJ3RleHRhcmVhJywgcHJvcHMsIGluc3QuX2N1cnJlbnRFbGVtZW50Ll9vd25lcik7XG4gICAgICAgICAgaWYgKHByb3BzLnZhbHVlTGluayAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVMaW5rKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2B2YWx1ZUxpbmtgIHByb3Agb24gYHRleHRhcmVhYCBpcyBkZXByZWNhdGVkOyBzZXQgYHZhbHVlYCBhbmQgYG9uQ2hhbmdlYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgZGlkV2FyblZhbHVlTGluayA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsRGVmYXVsdFZhbCkge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdUZXh0YXJlYSBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgdGV4dGFyZWEgJyArICdhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJykgOiB2b2lkIDA7XG4gICAgICAgICAgICBkaWRXYXJuVmFsRGVmYXVsdFZhbCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHdhcm5JZlZhbHVlSXNOdWxsKHByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlO1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVc2UgdGhlIGBkZWZhdWx0VmFsdWVgIG9yIGB2YWx1ZWAgcHJvcHMgaW5zdGVhZCBvZiBzZXR0aW5nICcgKyAnY2hpbGRyZW4gb24gPHRleHRhcmVhPi4nKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgIShkZWZhdWx0VmFsdWUgPT0gbnVsbCkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnSWYgeW91IHN1cHBseSBgZGVmYXVsdFZhbHVlYCBvbiBhIDx0ZXh0YXJlYT4sIGRvIG5vdCBwYXNzIGNoaWxkcmVuLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgICEoY2hpbGRyZW4ubGVuZ3RoIDw9IDEpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJzx0ZXh0YXJlYT4gY2FuIG9ubHkgaGF2ZSBhdCBtb3N0IG9uZSBjaGlsZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkZWZhdWx0VmFsdWUgPSAnJyArIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkZWZhdWx0VmFsdWUgPT0gbnVsbCkge1xuICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7XG4gICAgICAgICAgaW5pdGlhbFZhbHVlOiAnJyArICh2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBkZWZhdWx0VmFsdWUpLFxuICAgICAgICAgIGxpc3RlbmVyczogbnVsbCxcbiAgICAgICAgICBvbkNoYW5nZTogX2hhbmRsZUNoYW5nZS5iaW5kKGluc3QpXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgdXBkYXRlV3JhcHBlcjogZnVuY3Rpb24oaW5zdCkge1xuICAgICAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuSWZWYWx1ZUlzTnVsbChwcm9wcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkoUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCksICd2YWx1ZScsICcnICsgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBfaGFuZGxlQ2hhbmdlKGV2ZW50KSB7XG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgIHZhciByZXR1cm5WYWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZXhlY3V0ZU9uQ2hhbmdlKHByb3BzLCBldmVudCk7XG4gICAgICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgdGhpcyk7XG4gICAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01UZXh0YXJlYTtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiM2RcIiwgW1wiM2VcIiwgXCIzZlwiLCBcIjQwXCIsIFwiNDFcIiwgXCI0MlwiLCBcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFJlYWN0UmVjb25jaWxlciA9ICRfX3JlcXVpcmUoJzNlJyk7XG4gICAgdmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSAkX19yZXF1aXJlKCczZicpO1xuICAgIHZhciBLZXlFc2NhcGVVdGlscyA9ICRfX3JlcXVpcmUoJzQwJyk7XG4gICAgdmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gJF9fcmVxdWlyZSgnNDEnKTtcbiAgICB2YXIgdHJhdmVyc2VBbGxDaGlsZHJlbiA9ICRfX3JlcXVpcmUoJzQyJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIGZ1bmN0aW9uIGluc3RhbnRpYXRlQ2hpbGQoY2hpbGRJbnN0YW5jZXMsIGNoaWxkLCBuYW1lKSB7XG4gICAgICB2YXIga2V5VW5pcXVlID0gY2hpbGRJbnN0YW5jZXNbbmFtZV0gPT09IHVuZGVmaW5lZDtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGtleVVuaXF1ZSwgJ2ZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgKyAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLicsIEtleUVzY2FwZVV0aWxzLnVuZXNjYXBlKG5hbWUpKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZCAhPSBudWxsICYmIGtleVVuaXF1ZSkge1xuICAgICAgICBjaGlsZEluc3RhbmNlc1tuYW1lXSA9IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQoY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgUmVhY3RDaGlsZFJlY29uY2lsZXIgPSB7XG4gICAgICBpbnN0YW50aWF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXN0ZWRDaGlsZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgICBpZiAobmVzdGVkQ2hpbGROb2RlcyA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoaWxkSW5zdGFuY2VzID0ge307XG4gICAgICAgIHRyYXZlcnNlQWxsQ2hpbGRyZW4obmVzdGVkQ2hpbGROb2RlcywgaW5zdGFudGlhdGVDaGlsZCwgY2hpbGRJbnN0YW5jZXMpO1xuICAgICAgICByZXR1cm4gY2hpbGRJbnN0YW5jZXM7XG4gICAgICB9LFxuICAgICAgdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uKHByZXZDaGlsZHJlbiwgbmV4dENoaWxkcmVuLCByZW1vdmVkTm9kZXMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIGlmICghbmV4dENoaWxkcmVuICYmICFwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5hbWU7XG4gICAgICAgIHZhciBwcmV2Q2hpbGQ7XG4gICAgICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoIW5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZXZDaGlsZCA9IHByZXZDaGlsZHJlbiAmJiBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldkNoaWxkICYmIHByZXZDaGlsZC5fY3VycmVudEVsZW1lbnQ7XG4gICAgICAgICAgdmFyIG5leHRFbGVtZW50ID0gbmV4dENoaWxkcmVuW25hbWVdO1xuICAgICAgICAgIGlmIChwcmV2Q2hpbGQgIT0gbnVsbCAmJiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpKSB7XG4gICAgICAgICAgICBSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudChwcmV2Q2hpbGQsIG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgICAgICBuZXh0Q2hpbGRyZW5bbmFtZV0gPSBwcmV2Q2hpbGQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChwcmV2Q2hpbGQpIHtcbiAgICAgICAgICAgICAgcmVtb3ZlZE5vZGVzW25hbWVdID0gUmVhY3RSZWNvbmNpbGVyLmdldE5hdGl2ZU5vZGUocHJldkNoaWxkKTtcbiAgICAgICAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbmV4dENoaWxkSW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5leHRFbGVtZW50KTtcbiAgICAgICAgICAgIG5leHRDaGlsZHJlbltuYW1lXSA9IG5leHRDaGlsZEluc3RhbmNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiAhKG5leHRDaGlsZHJlbiAmJiBuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpKSB7XG4gICAgICAgICAgICBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgICAgICByZW1vdmVkTm9kZXNbbmFtZV0gPSBSZWFjdFJlY29uY2lsZXIuZ2V0TmF0aXZlTm9kZShwcmV2Q2hpbGQpO1xuICAgICAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdW5tb3VudENoaWxkcmVuOiBmdW5jdGlvbihyZW5kZXJlZENoaWxkcmVuLCBzYWZlbHkpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiByZW5kZXJlZENoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHJlbmRlcmVkQ2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHZhciByZW5kZXJlZENoaWxkID0gcmVuZGVyZWRDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHJlbmRlcmVkQ2hpbGQsIHNhZmVseSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2hpbGRSZWNvbmNpbGVyO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI0M1wiLCBbXCI0MFwiLCBcIjQyXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgS2V5RXNjYXBlVXRpbHMgPSAkX19yZXF1aXJlKCc0MCcpO1xuICAgIHZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gJF9fcmVxdWlyZSgnNDInKTtcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgZnVuY3Rpb24gZmxhdHRlblNpbmdsZUNoaWxkSW50b0NvbnRleHQodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRyYXZlcnNlQ29udGV4dDtcbiAgICAgIHZhciBrZXlVbmlxdWUgPSByZXN1bHRbbmFtZV0gPT09IHVuZGVmaW5lZDtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGtleVVuaXF1ZSwgJ2ZsYXR0ZW5DaGlsZHJlbiguLi4pOiBFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksICcgKyAnYCVzYC4gQ2hpbGQga2V5cyBtdXN0IGJlIHVuaXF1ZTsgd2hlbiB0d28gY2hpbGRyZW4gc2hhcmUgYSBrZXksIG9ubHkgJyArICd0aGUgZmlyc3QgY2hpbGQgd2lsbCBiZSB1c2VkLicsIEtleUVzY2FwZVV0aWxzLnVuZXNjYXBlKG5hbWUpKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmIChrZXlVbmlxdWUgJiYgY2hpbGQgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHRbbmFtZV0gPSBjaGlsZDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZmxhdHRlbkNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gICAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgcmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkNoaWxkcmVuO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI0NFwiLCBbXCI0NVwiLCBcIjI3XCIsIFwiNDZcIiwgXCI0N1wiLCBcIjNlXCIsIFwiM2RcIiwgXCI0OFwiLCBcIjQzXCIsIFwiMzBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9ICRfX3JlcXVpcmUoJzQ1Jyk7XG4gICAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gJF9fcmVxdWlyZSgnMjcnKTtcbiAgICB2YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSAkX19yZXF1aXJlKCc0NicpO1xuICAgIHZhciBSZWFjdEN1cnJlbnRPd25lciA9ICRfX3JlcXVpcmUoJzQ3Jyk7XG4gICAgdmFyIFJlYWN0UmVjb25jaWxlciA9ICRfX3JlcXVpcmUoJzNlJyk7XG4gICAgdmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0gJF9fcmVxdWlyZSgnM2QnKTtcbiAgICB2YXIgZW1wdHlGdW5jdGlvbiA9ICRfX3JlcXVpcmUoJzQ4Jyk7XG4gICAgdmFyIGZsYXR0ZW5DaGlsZHJlbiA9ICRfX3JlcXVpcmUoJzQzJyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgZnVuY3Rpb24gbWFrZUluc2VydE1hcmt1cChtYXJrdXAsIGFmdGVyTm9kZSwgdG9JbmRleCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuSU5TRVJUX01BUktVUCxcbiAgICAgICAgY29udGVudDogbWFya3VwLFxuICAgICAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgICAgIGZyb21Ob2RlOiBudWxsLFxuICAgICAgICB0b0luZGV4OiB0b0luZGV4LFxuICAgICAgICBhZnRlck5vZGU6IGFmdGVyTm9kZVxuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbWFrZU1vdmUoY2hpbGQsIGFmdGVyTm9kZSwgdG9JbmRleCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORyxcbiAgICAgICAgY29udGVudDogbnVsbCxcbiAgICAgICAgZnJvbUluZGV4OiBjaGlsZC5fbW91bnRJbmRleCxcbiAgICAgICAgZnJvbU5vZGU6IFJlYWN0UmVjb25jaWxlci5nZXROYXRpdmVOb2RlKGNoaWxkKSxcbiAgICAgICAgdG9JbmRleDogdG9JbmRleCxcbiAgICAgICAgYWZ0ZXJOb2RlOiBhZnRlck5vZGVcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1ha2VSZW1vdmUoY2hpbGQsIG5vZGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlJFTU9WRV9OT0RFLFxuICAgICAgICBjb250ZW50OiBudWxsLFxuICAgICAgICBmcm9tSW5kZXg6IGNoaWxkLl9tb3VudEluZGV4LFxuICAgICAgICBmcm9tTm9kZTogbm9kZSxcbiAgICAgICAgdG9JbmRleDogbnVsbCxcbiAgICAgICAgYWZ0ZXJOb2RlOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBtYWtlU2V0TWFya3VwKG1hcmt1cCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuU0VUX01BUktVUCxcbiAgICAgICAgY29udGVudDogbWFya3VwLFxuICAgICAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgICAgIGZyb21Ob2RlOiBudWxsLFxuICAgICAgICB0b0luZGV4OiBudWxsLFxuICAgICAgICBhZnRlck5vZGU6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1ha2VUZXh0Q29udGVudCh0ZXh0Q29udGVudCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5ULFxuICAgICAgICBjb250ZW50OiB0ZXh0Q29udGVudCxcbiAgICAgICAgZnJvbUluZGV4OiBudWxsLFxuICAgICAgICBmcm9tTm9kZTogbnVsbCxcbiAgICAgICAgdG9JbmRleDogbnVsbCxcbiAgICAgICAgYWZ0ZXJOb2RlOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKHF1ZXVlLCB1cGRhdGUpIHtcbiAgICAgIGlmICh1cGRhdGUpIHtcbiAgICAgICAgcXVldWUgPSBxdWV1ZSB8fCBbXTtcbiAgICAgICAgcXVldWUucHVzaCh1cGRhdGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHF1ZXVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzUXVldWUoaW5zdCwgdXBkYXRlUXVldWUpIHtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyhpbnN0LCB1cGRhdGVRdWV1ZSk7XG4gICAgfVxuICAgIHZhciBzZXRDaGlsZHJlbkZvckluc3RydW1lbnRhdGlvbiA9IGVtcHR5RnVuY3Rpb247XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHNldENoaWxkcmVuRm9ySW5zdHJ1bWVudGF0aW9uID0gZnVuY3Rpb24oY2hpbGRyZW4pIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0Q2hpbGRyZW4odGhpcy5fZGVidWdJRCwgY2hpbGRyZW4gPyBPYmplY3Qua2V5cyhjaGlsZHJlbikubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgIHJldHVybiBjaGlsZHJlbltrZXldLl9kZWJ1Z0lEO1xuICAgICAgICB9KSA6IFtdKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBSZWFjdE11bHRpQ2hpbGQgPSB7TWl4aW46IHtcbiAgICAgICAgX3JlY29uY2lsZXJJbnN0YW50aWF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3RDaGlsZFJlY29uY2lsZXIuaW5zdGFudGlhdGVDaGlsZHJlbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIH0sXG4gICAgICAgIF9yZWNvbmNpbGVyVXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uKHByZXZDaGlsZHJlbiwgbmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHJlbW92ZWROb2RlcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgICAgICB2YXIgbmV4dENoaWxkcmVuO1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICAgICAgICAgIG5leHRDaGlsZHJlbiA9IGZsYXR0ZW5DaGlsZHJlbihuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cyk7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudXBkYXRlQ2hpbGRyZW4ocHJldkNoaWxkcmVuLCBuZXh0Q2hpbGRyZW4sIHJlbW92ZWROb2RlcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dENoaWxkcmVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0Q2hpbGRyZW4gPSBmbGF0dGVuQ2hpbGRyZW4obmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMpO1xuICAgICAgICAgIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVwZGF0ZUNoaWxkcmVuKHByZXZDaGlsZHJlbiwgbmV4dENoaWxkcmVuLCByZW1vdmVkTm9kZXMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgICByZXR1cm4gbmV4dENoaWxkcmVuO1xuICAgICAgICB9LFxuICAgICAgICBtb3VudENoaWxkcmVuOiBmdW5jdGlvbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLl9yZWNvbmNpbGVySW5zdGFudGlhdGVDaGlsZHJlbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgICAgICB2YXIgbW91bnRJbWFnZXMgPSBbXTtcbiAgICAgICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgICB2YXIgY2hpbGQgPSBjaGlsZHJlbltuYW1lXTtcbiAgICAgICAgICAgICAgdmFyIG1vdW50SW1hZ2UgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoY2hpbGQsIHRyYW5zYWN0aW9uLCB0aGlzLCB0aGlzLl9uYXRpdmVDb250YWluZXJJbmZvLCBjb250ZXh0KTtcbiAgICAgICAgICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBpbmRleCsrO1xuICAgICAgICAgICAgICBtb3VudEltYWdlcy5wdXNoKG1vdW50SW1hZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgc2V0Q2hpbGRyZW5Gb3JJbnN0cnVtZW50YXRpb24uY2FsbCh0aGlzLCBjaGlsZHJlbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtb3VudEltYWdlcztcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlVGV4dENvbnRlbnQ6IGZ1bmN0aW9uKG5leHRDb250ZW50KSB7XG4gICAgICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbiwgZmFsc2UpO1xuICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICFmYWxzZSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGVUZXh0Q29udGVudCBjYWxsZWQgb24gbm9uLWVtcHR5IGNvbXBvbmVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB1cGRhdGVzID0gW21ha2VUZXh0Q29udGVudChuZXh0Q29udGVudCldO1xuICAgICAgICAgIHByb2Nlc3NRdWV1ZSh0aGlzLCB1cGRhdGVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlTWFya3VwOiBmdW5jdGlvbihuZXh0TWFya3VwKSB7XG4gICAgICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbiwgZmFsc2UpO1xuICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAocHJldkNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICAgICFmYWxzZSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGVUZXh0Q29udGVudCBjYWxsZWQgb24gbm9uLWVtcHR5IGNvbXBvbmVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB1cGRhdGVzID0gW21ha2VTZXRNYXJrdXAobmV4dE1hcmt1cCldO1xuICAgICAgICAgIHByb2Nlc3NRdWV1ZSh0aGlzLCB1cGRhdGVzKTtcbiAgICAgICAgfSxcbiAgICAgICAgdXBkYXRlQ2hpbGRyZW46IGZ1bmN0aW9uKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIH0sXG4gICAgICAgIF91cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24obmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAgICAgdmFyIHJlbW92ZWROb2RlcyA9IHt9O1xuICAgICAgICAgIHZhciBuZXh0Q2hpbGRyZW4gPSB0aGlzLl9yZWNvbmNpbGVyVXBkYXRlQ2hpbGRyZW4ocHJldkNoaWxkcmVuLCBuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgcmVtb3ZlZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdXBkYXRlcyA9IG51bGw7XG4gICAgICAgICAgdmFyIG5hbWU7XG4gICAgICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgdmFyIG5leHRJbmRleCA9IDA7XG4gICAgICAgICAgdmFyIGxhc3RQbGFjZWROb2RlID0gbnVsbDtcbiAgICAgICAgICBmb3IgKG5hbWUgaW4gbmV4dENoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoIW5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRyZW4gJiYgcHJldkNoaWxkcmVuW25hbWVdO1xuICAgICAgICAgICAgdmFyIG5leHRDaGlsZCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgICAgIGlmIChwcmV2Q2hpbGQgPT09IG5leHRDaGlsZCkge1xuICAgICAgICAgICAgICB1cGRhdGVzID0gZW5xdWV1ZSh1cGRhdGVzLCB0aGlzLm1vdmVDaGlsZChwcmV2Q2hpbGQsIGxhc3RQbGFjZWROb2RlLCBuZXh0SW5kZXgsIGxhc3RJbmRleCkpO1xuICAgICAgICAgICAgICBsYXN0SW5kZXggPSBNYXRoLm1heChwcmV2Q2hpbGQuX21vdW50SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgICAgIHByZXZDaGlsZC5fbW91bnRJbmRleCA9IG5leHRJbmRleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChwcmV2Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBsYXN0SW5kZXggPSBNYXRoLm1heChwcmV2Q2hpbGQuX21vdW50SW5kZXgsIGxhc3RJbmRleCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdXBkYXRlcyA9IGVucXVldWUodXBkYXRlcywgdGhpcy5fbW91bnRDaGlsZEF0SW5kZXgobmV4dENoaWxkLCBsYXN0UGxhY2VkTm9kZSwgbmV4dEluZGV4LCB0cmFuc2FjdGlvbiwgY29udGV4dCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dEluZGV4Kys7XG4gICAgICAgICAgICBsYXN0UGxhY2VkTm9kZSA9IFJlYWN0UmVjb25jaWxlci5nZXROYXRpdmVOb2RlKG5leHRDaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAobmFtZSBpbiByZW1vdmVkTm9kZXMpIHtcbiAgICAgICAgICAgIGlmIChyZW1vdmVkTm9kZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgICAgdXBkYXRlcyA9IGVucXVldWUodXBkYXRlcywgdGhpcy5fdW5tb3VudENoaWxkKHByZXZDaGlsZHJlbltuYW1lXSwgcmVtb3ZlZE5vZGVzW25hbWVdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh1cGRhdGVzKSB7XG4gICAgICAgICAgICBwcm9jZXNzUXVldWUodGhpcywgdXBkYXRlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBuZXh0Q2hpbGRyZW47XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHNldENoaWxkcmVuRm9ySW5zdHJ1bWVudGF0aW9uLmNhbGwodGhpcywgbmV4dENoaWxkcmVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHVubW91bnRDaGlsZHJlbjogZnVuY3Rpb24oc2FmZWx5KSB7XG4gICAgICAgICAgdmFyIHJlbmRlcmVkQ2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgICAgIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVubW91bnRDaGlsZHJlbihyZW5kZXJlZENoaWxkcmVuLCBzYWZlbHkpO1xuICAgICAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBudWxsO1xuICAgICAgICB9LFxuICAgICAgICBtb3ZlQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkLCBhZnRlck5vZGUsIHRvSW5kZXgsIGxhc3RJbmRleCkge1xuICAgICAgICAgIGlmIChjaGlsZC5fbW91bnRJbmRleCA8IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VNb3ZlKGNoaWxkLCBhZnRlck5vZGUsIHRvSW5kZXgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY3JlYXRlQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkLCBhZnRlck5vZGUsIG1vdW50SW1hZ2UpIHtcbiAgICAgICAgICByZXR1cm4gbWFrZUluc2VydE1hcmt1cChtb3VudEltYWdlLCBhZnRlck5vZGUsIGNoaWxkLl9tb3VudEluZGV4KTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVtb3ZlQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkLCBub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIG1ha2VSZW1vdmUoY2hpbGQsIG5vZGUpO1xuICAgICAgICB9LFxuICAgICAgICBfbW91bnRDaGlsZEF0SW5kZXg6IGZ1bmN0aW9uKGNoaWxkLCBhZnRlck5vZGUsIGluZGV4LCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCB0cmFuc2FjdGlvbiwgdGhpcywgdGhpcy5fbmF0aXZlQ29udGFpbmVySW5mbywgY29udGV4dCk7XG4gICAgICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBpbmRleDtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDaGlsZChjaGlsZCwgYWZ0ZXJOb2RlLCBtb3VudEltYWdlKTtcbiAgICAgICAgfSxcbiAgICAgICAgX3VubW91bnRDaGlsZDogZnVuY3Rpb24oY2hpbGQsIG5vZGUpIHtcbiAgICAgICAgICB2YXIgdXBkYXRlID0gdGhpcy5yZW1vdmVDaGlsZChjaGlsZCwgbm9kZSk7XG4gICAgICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBudWxsO1xuICAgICAgICAgIHJldHVybiB1cGRhdGU7XG4gICAgICAgIH1cbiAgICAgIH19O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RNdWx0aUNoaWxkO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI0OVwiLCBbXCI2XCIsIFwiNFwiLCBcIjRhXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgX2Fzc2lnbiA9ICRfX3JlcXVpcmUoJzYnKTtcbiAgdmFyIFBvb2xlZENsYXNzID0gJF9fcmVxdWlyZSgnNCcpO1xuICB2YXIgVHJhbnNhY3Rpb24gPSAkX19yZXF1aXJlKCc0YScpO1xuICB2YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbXTtcbiAgdmFyIG5vb3BDYWxsYmFja1F1ZXVlID0ge2VucXVldWU6IGZ1bmN0aW9uKCkge319O1xuICBmdW5jdGlvbiBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKHJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gICAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICAgIHRoaXMucmVuZGVyVG9TdGF0aWNNYXJrdXAgPSByZW5kZXJUb1N0YXRpY01hcmt1cDtcbiAgICB0aGlzLnVzZUNyZWF0ZUVsZW1lbnQgPSBmYWxzZTtcbiAgfVxuICB2YXIgTWl4aW4gPSB7XG4gICAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gICAgfSxcbiAgICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5vb3BDYWxsYmFja1F1ZXVlO1xuICAgIH0sXG4gICAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7fSxcbiAgICBjaGVja3BvaW50OiBmdW5jdGlvbigpIHt9LFxuICAgIHJvbGxiYWNrOiBmdW5jdGlvbigpIHt9XG4gIH07XG4gIF9hc3NpZ24oUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCBNaXhpbik7XG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjRiXCIsIFtcIjZcIiwgXCIxY1wiLCBcIjI2XCIsIFwiNGNcIiwgXCI0ZFwiLCBcIjFiXCIsIFwiMmVcIiwgXCJiXCIsIFwiMTBcIiwgXCIzNVwiLCBcIjRlXCIsIFwiMmFcIiwgXCIyYlwiLCBcIjRmXCIsIFwiMTFcIiwgXCIyZFwiLCBcIjMxXCIsIFwiMzNcIiwgXCIzY1wiLCBcIjI3XCIsIFwiNDRcIiwgXCI0OVwiLCBcIjQ4XCIsIFwiMzlcIiwgXCIzMFwiLCBcIjE0XCIsIFwiZVwiLCBcIjUxXCIsIFwiNTBcIiwgXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBfYXNzaWduID0gJF9fcmVxdWlyZSgnNicpO1xuICAgIHZhciBBdXRvRm9jdXNVdGlscyA9ICRfX3JlcXVpcmUoJzFjJyk7XG4gICAgdmFyIENTU1Byb3BlcnR5T3BlcmF0aW9ucyA9ICRfX3JlcXVpcmUoJzI2Jyk7XG4gICAgdmFyIERPTUxhenlUcmVlID0gJF9fcmVxdWlyZSgnNGMnKTtcbiAgICB2YXIgRE9NTmFtZXNwYWNlcyA9ICRfX3JlcXVpcmUoJzRkJyk7XG4gICAgdmFyIERPTVByb3BlcnR5ID0gJF9fcmVxdWlyZSgnMWInKTtcbiAgICB2YXIgRE9NUHJvcGVydHlPcGVyYXRpb25zID0gJF9fcmVxdWlyZSgnMmUnKTtcbiAgICB2YXIgRXZlbnRDb25zdGFudHMgPSAkX19yZXF1aXJlKCdiJyk7XG4gICAgdmFyIEV2ZW50UGx1Z2luSHViID0gJF9fcmVxdWlyZSgnMTAnKTtcbiAgICB2YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9ICRfX3JlcXVpcmUoJzM1Jyk7XG4gICAgdmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9ICRfX3JlcXVpcmUoJzRlJyk7XG4gICAgdmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0gJF9fcmVxdWlyZSgnMmEnKTtcbiAgICB2YXIgUmVhY3RET01CdXR0b24gPSAkX19yZXF1aXJlKCcyYicpO1xuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudEZsYWdzID0gJF9fcmVxdWlyZSgnNGYnKTtcbiAgICB2YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gJF9fcmVxdWlyZSgnMTEnKTtcbiAgICB2YXIgUmVhY3RET01JbnB1dCA9ICRfX3JlcXVpcmUoJzJkJyk7XG4gICAgdmFyIFJlYWN0RE9NT3B0aW9uID0gJF9fcmVxdWlyZSgnMzEnKTtcbiAgICB2YXIgUmVhY3RET01TZWxlY3QgPSAkX19yZXF1aXJlKCczMycpO1xuICAgIHZhciBSZWFjdERPTVRleHRhcmVhID0gJF9fcmVxdWlyZSgnM2MnKTtcbiAgICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSAkX19yZXF1aXJlKCcyNycpO1xuICAgIHZhciBSZWFjdE11bHRpQ2hpbGQgPSAkX19yZXF1aXJlKCc0NCcpO1xuICAgIHZhciBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uID0gJF9fcmVxdWlyZSgnNDknKTtcbiAgICB2YXIgZW1wdHlGdW5jdGlvbiA9ICRfX3JlcXVpcmUoJzQ4Jyk7XG4gICAgdmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9ICRfX3JlcXVpcmUoJzM5Jyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIGlzRXZlbnRTdXBwb3J0ZWQgPSAkX19yZXF1aXJlKCcxNCcpO1xuICAgIHZhciBrZXlPZiA9ICRfX3JlcXVpcmUoJ2UnKTtcbiAgICB2YXIgc2hhbGxvd0VxdWFsID0gJF9fcmVxdWlyZSgnNTEnKTtcbiAgICB2YXIgdmFsaWRhdGVET01OZXN0aW5nID0gJF9fcmVxdWlyZSgnNTAnKTtcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgdmFyIEZsYWdzID0gUmVhY3RET01Db21wb25lbnRGbGFncztcbiAgICB2YXIgZGVsZXRlTGlzdGVuZXIgPSBFdmVudFBsdWdpbkh1Yi5kZWxldGVMaXN0ZW5lcjtcbiAgICB2YXIgZ2V0Tm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlO1xuICAgIHZhciBsaXN0ZW5UbyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5saXN0ZW5UbztcbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzO1xuICAgIHZhciBDT05URU5UX1RZUEVTID0ge1xuICAgICAgJ3N0cmluZyc6IHRydWUsXG4gICAgICAnbnVtYmVyJzogdHJ1ZVxuICAgIH07XG4gICAgdmFyIFNUWUxFID0ga2V5T2Yoe3N0eWxlOiBudWxsfSk7XG4gICAgdmFyIEhUTUwgPSBrZXlPZih7X19odG1sOiBudWxsfSk7XG4gICAgdmFyIFJFU0VSVkVEX1BST1BTID0ge1xuICAgICAgY2hpbGRyZW46IG51bGwsXG4gICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogbnVsbCxcbiAgICAgIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZzogbnVsbFxuICAgIH07XG4gICAgdmFyIERPQ19GUkFHTUVOVF9UWVBFID0gMTE7XG4gICAgZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgIHZhciBvd25lciA9IGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lciB8fCBudWxsO1xuICAgICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgVGhpcyBET00gbm9kZSB3YXMgcmVuZGVyZWQgYnkgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgZnVuY3Rpb24gZnJpZW5kbHlTdHJpbmdpZnkob2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICAgIHJldHVybiAnWycgKyBvYmoubWFwKGZyaWVuZGx5U3RyaW5naWZ5KS5qb2luKCcsICcpICsgJ10nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwYWlycyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgICAgICAgIHZhciBrZXlFc2NhcGVkID0gL15bYS16JF9dW1xcdyRfXSokL2kudGVzdChrZXkpID8ga2V5IDogSlNPTi5zdHJpbmdpZnkoa2V5KTtcbiAgICAgICAgICAgICAgcGFpcnMucHVzaChrZXlFc2NhcGVkICsgJzogJyArIGZyaWVuZGx5U3RyaW5naWZ5KG9ialtrZXldKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAneycgKyBwYWlycy5qb2luKCcsICcpICsgJ30nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmopO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiAnW2Z1bmN0aW9uIG9iamVjdF0nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFN0cmluZyhvYmopO1xuICAgIH1cbiAgICB2YXIgc3R5bGVNdXRhdGlvbldhcm5pbmcgPSB7fTtcbiAgICBmdW5jdGlvbiBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkU3R5bGUoc3R5bGUxLCBzdHlsZTIsIGNvbXBvbmVudCkge1xuICAgICAgaWYgKHN0eWxlMSA9PSBudWxsIHx8IHN0eWxlMiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzaGFsbG93RXF1YWwoc3R5bGUxLCBzdHlsZTIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50Ll90YWc7XG4gICAgICB2YXIgb3duZXIgPSBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBvd25lck5hbWU7XG4gICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgb3duZXJOYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2ggPSBvd25lck5hbWUgKyAnfCcgKyBjb21wb25lbnROYW1lO1xuICAgICAgaWYgKHN0eWxlTXV0YXRpb25XYXJuaW5nLmhhc093blByb3BlcnR5KGhhc2gpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHN0eWxlTXV0YXRpb25XYXJuaW5nW2hhc2hdID0gdHJ1ZTtcbiAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYCVzYCB3YXMgcGFzc2VkIGEgc3R5bGUgb2JqZWN0IHRoYXQgaGFzIHByZXZpb3VzbHkgYmVlbiBtdXRhdGVkLiAnICsgJ011dGF0aW5nIGBzdHlsZWAgaXMgZGVwcmVjYXRlZC4gQ29uc2lkZXIgY2xvbmluZyBpdCBiZWZvcmVoYW5kLiBDaGVjayAnICsgJ3RoZSBgcmVuZGVyYCAlcy4gUHJldmlvdXMgc3R5bGU6ICVzLiBNdXRhdGVkIHN0eWxlOiAlcy4nLCBjb21wb25lbnROYW1lLCBvd25lciA/ICdvZiBgJyArIG93bmVyTmFtZSArICdgJyA6ICd1c2luZyA8JyArIGNvbXBvbmVudE5hbWUgKyAnPicsIGZyaWVuZGx5U3RyaW5naWZ5KHN0eWxlMSksIGZyaWVuZGx5U3RyaW5naWZ5KHN0eWxlMikpIDogdm9pZCAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhc3NlcnRWYWxpZFByb3BzKGNvbXBvbmVudCwgcHJvcHMpIHtcbiAgICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHZvaWRFbGVtZW50VGFnc1tjb21wb25lbnQuX3RhZ10pIHtcbiAgICAgICAgIShwcm9wcy5jaGlsZHJlbiA9PSBudWxsICYmIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzIGlzIGEgdm9pZCBlbGVtZW50IHRhZyBhbmQgbXVzdCBub3QgaGF2ZSBgY2hpbGRyZW5gIG9yICcgKyAndXNlIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuJXMnLCBjb21wb25lbnQuX3RhZywgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIgPyAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICcgKyBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLicgOiAnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAgICAgIShwcm9wcy5jaGlsZHJlbiA9PSBudWxsKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSBzZXQgb25lIG9mIGBjaGlsZHJlbmAgb3IgYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICEodHlwZW9mIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09PSAnb2JqZWN0JyAmJiBIVE1MIGluIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgIG11c3QgYmUgaW4gdGhlIGZvcm0gYHtfX2h0bWw6IC4uLn1gLiAnICsgJ1BsZWFzZSB2aXNpdCBodHRwczovL2ZiLm1lL3JlYWN0LWludmFyaWFudC1kYW5nZXJvdXNseS1zZXQtaW5uZXItaHRtbCAnICsgJ2ZvciBtb3JlIGluZm9ybWF0aW9uLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLmlubmVySFRNTCA9PSBudWxsLCAnRGlyZWN0bHkgc2V0dGluZyBwcm9wZXJ0eSBgaW5uZXJIVE1MYCBpcyBub3QgcGVybWl0dGVkLiAnICsgJ0ZvciBtb3JlIGluZm9ybWF0aW9uLCBsb29rdXAgZG9jdW1lbnRhdGlvbiBvbiBgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLicpIDogdm9pZCAwO1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5zdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgfHwgIXByb3BzLmNvbnRlbnRFZGl0YWJsZSB8fCBwcm9wcy5jaGlsZHJlbiA9PSBudWxsLCAnQSBjb21wb25lbnQgaXMgYGNvbnRlbnRFZGl0YWJsZWAgYW5kIGNvbnRhaW5zIGBjaGlsZHJlbmAgbWFuYWdlZCBieSAnICsgJ1JlYWN0LiBJdCBpcyBub3cgeW91ciByZXNwb25zaWJpbGl0eSB0byBndWFyYW50ZWUgdGhhdCBub25lIG9mICcgKyAndGhvc2Ugbm9kZXMgYXJlIHVuZXhwZWN0ZWRseSBtb2RpZmllZCBvciBkdXBsaWNhdGVkLiBUaGlzIGlzICcgKyAncHJvYmFibHkgbm90IGludGVudGlvbmFsLicpIDogdm9pZCAwO1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5vbkZvY3VzSW4gPT0gbnVsbCAmJiBwcm9wcy5vbkZvY3VzT3V0ID09IG51bGwsICdSZWFjdCB1c2VzIG9uRm9jdXMgYW5kIG9uQmx1ciBpbnN0ZWFkIG9mIG9uRm9jdXNJbiBhbmQgb25Gb2N1c091dC4gJyArICdBbGwgUmVhY3QgZXZlbnRzIGFyZSBub3JtYWxpemVkIHRvIGJ1YmJsZSwgc28gb25Gb2N1c0luIGFuZCBvbkZvY3VzT3V0ICcgKyAnYXJlIG5vdCBuZWVkZWQvc3VwcG9ydGVkIGJ5IFJlYWN0LicpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgIShwcm9wcy5zdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBwcm9wcy5zdHlsZSA9PT0gJ29iamVjdCcpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RoZSBgc3R5bGVgIHByb3AgZXhwZWN0cyBhIG1hcHBpbmcgZnJvbSBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcywgJyArICdub3QgYSBzdHJpbmcuIEZvciBleGFtcGxlLCBzdHlsZT17e21hcmdpblJpZ2h0OiBzcGFjaW5nICsgXFwnZW1cXCd9fSB3aGVuICcgKyAndXNpbmcgSlNYLiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZW5xdWV1ZVB1dExpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyLCB0cmFuc2FjdGlvbikge1xuICAgICAgaWYgKHRyYW5zYWN0aW9uIGluc3RhbmNlb2YgUmVhY3RTZXJ2ZXJSZW5kZXJpbmdUcmFuc2FjdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhyZWdpc3RyYXRpb25OYW1lICE9PSAnb25TY3JvbGwnIHx8IGlzRXZlbnRTdXBwb3J0ZWQoJ3Njcm9sbCcsIHRydWUpLCAnVGhpcyBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IHRoZSBgb25TY3JvbGxgIGV2ZW50JykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB2YXIgY29udGFpbmVySW5mbyA9IGluc3QuX25hdGl2ZUNvbnRhaW5lckluZm87XG4gICAgICB2YXIgaXNEb2N1bWVudEZyYWdtZW50ID0gY29udGFpbmVySW5mby5fbm9kZSAmJiBjb250YWluZXJJbmZvLl9ub2RlLm5vZGVUeXBlID09PSBET0NfRlJBR01FTlRfVFlQRTtcbiAgICAgIHZhciBkb2MgPSBpc0RvY3VtZW50RnJhZ21lbnQgPyBjb250YWluZXJJbmZvLl9ub2RlIDogY29udGFpbmVySW5mby5fb3duZXJEb2N1bWVudDtcbiAgICAgIGxpc3RlblRvKHJlZ2lzdHJhdGlvbk5hbWUsIGRvYyk7XG4gICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHB1dExpc3RlbmVyLCB7XG4gICAgICAgIGluc3Q6IGluc3QsXG4gICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6IHJlZ2lzdHJhdGlvbk5hbWUsXG4gICAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lclxuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHB1dExpc3RlbmVyKCkge1xuICAgICAgdmFyIGxpc3RlbmVyVG9QdXQgPSB0aGlzO1xuICAgICAgRXZlbnRQbHVnaW5IdWIucHV0TGlzdGVuZXIobGlzdGVuZXJUb1B1dC5pbnN0LCBsaXN0ZW5lclRvUHV0LnJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyVG9QdXQubGlzdGVuZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvcHRpb25Qb3N0TW91bnQoKSB7XG4gICAgICB2YXIgaW5zdCA9IHRoaXM7XG4gICAgICBSZWFjdERPTU9wdGlvbi5wb3N0TW91bnRXcmFwcGVyKGluc3QpO1xuICAgIH1cbiAgICB2YXIgc2V0Q29udGVudENoaWxkRm9ySW5zdHJ1bWVudGF0aW9uID0gZW1wdHlGdW5jdGlvbjtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgc2V0Q29udGVudENoaWxkRm9ySW5zdHJ1bWVudGF0aW9uID0gZnVuY3Rpb24oY29udGVudFRvVXNlKSB7XG4gICAgICAgIHZhciBkZWJ1Z0lEID0gdGhpcy5fZGVidWdJRDtcbiAgICAgICAgdmFyIGNvbnRlbnREZWJ1Z0lEID0gZGVidWdJRCArICcjdGV4dCc7XG4gICAgICAgIHRoaXMuX2NvbnRlbnREZWJ1Z0lEID0gY29udGVudERlYnVnSUQ7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldERpc3BsYXlOYW1lKGNvbnRlbnREZWJ1Z0lELCAnI3RleHQnKTtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0VGV4dChjb250ZW50RGVidWdJRCwgJycgKyBjb250ZW50VG9Vc2UpO1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Nb3VudENvbXBvbmVudChjb250ZW50RGVidWdJRCk7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKGRlYnVnSUQsIFtjb250ZW50RGVidWdJRF0pO1xuICAgICAgfTtcbiAgICB9XG4gICAgdmFyIG1lZGlhRXZlbnRzID0ge1xuICAgICAgdG9wQWJvcnQ6ICdhYm9ydCcsXG4gICAgICB0b3BDYW5QbGF5OiAnY2FucGxheScsXG4gICAgICB0b3BDYW5QbGF5VGhyb3VnaDogJ2NhbnBsYXl0aHJvdWdoJyxcbiAgICAgIHRvcER1cmF0aW9uQ2hhbmdlOiAnZHVyYXRpb25jaGFuZ2UnLFxuICAgICAgdG9wRW1wdGllZDogJ2VtcHRpZWQnLFxuICAgICAgdG9wRW5jcnlwdGVkOiAnZW5jcnlwdGVkJyxcbiAgICAgIHRvcEVuZGVkOiAnZW5kZWQnLFxuICAgICAgdG9wRXJyb3I6ICdlcnJvcicsXG4gICAgICB0b3BMb2FkZWREYXRhOiAnbG9hZGVkZGF0YScsXG4gICAgICB0b3BMb2FkZWRNZXRhZGF0YTogJ2xvYWRlZG1ldGFkYXRhJyxcbiAgICAgIHRvcExvYWRTdGFydDogJ2xvYWRzdGFydCcsXG4gICAgICB0b3BQYXVzZTogJ3BhdXNlJyxcbiAgICAgIHRvcFBsYXk6ICdwbGF5JyxcbiAgICAgIHRvcFBsYXlpbmc6ICdwbGF5aW5nJyxcbiAgICAgIHRvcFByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICAgICAgdG9wUmF0ZUNoYW5nZTogJ3JhdGVjaGFuZ2UnLFxuICAgICAgdG9wU2Vla2VkOiAnc2Vla2VkJyxcbiAgICAgIHRvcFNlZWtpbmc6ICdzZWVraW5nJyxcbiAgICAgIHRvcFN0YWxsZWQ6ICdzdGFsbGVkJyxcbiAgICAgIHRvcFN1c3BlbmQ6ICdzdXNwZW5kJyxcbiAgICAgIHRvcFRpbWVVcGRhdGU6ICd0aW1ldXBkYXRlJyxcbiAgICAgIHRvcFZvbHVtZUNoYW5nZTogJ3ZvbHVtZWNoYW5nZScsXG4gICAgICB0b3BXYWl0aW5nOiAnd2FpdGluZydcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHRyYXBCdWJibGVkRXZlbnRzTG9jYWwoKSB7XG4gICAgICB2YXIgaW5zdCA9IHRoaXM7XG4gICAgICAhaW5zdC5fcm9vdE5vZGVJRCA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdNdXN0IGJlIG1vdW50ZWQgdG8gdHJhcCBldmVudHMnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbm9kZSA9IGdldE5vZGUoaW5zdCk7XG4gICAgICAhbm9kZSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0cmFwQnViYmxlZEV2ZW50KC4uLik6IFJlcXVpcmVzIG5vZGUgdG8gYmUgcmVuZGVyZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgc3dpdGNoIChpbnN0Ll90YWcpIHtcbiAgICAgICAgY2FzZSAnaWZyYW1lJzpcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wTG9hZCwgJ2xvYWQnLCBub2RlKV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgY2FzZSAnYXVkaW8nOlxuICAgICAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgICBmb3IgKHZhciBldmVudCBpbiBtZWRpYUV2ZW50cykge1xuICAgICAgICAgICAgaWYgKG1lZGlhRXZlbnRzLmhhc093blByb3BlcnR5KGV2ZW50KSkge1xuICAgICAgICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzLnB1c2goUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlc1tldmVudF0sIG1lZGlhRXZlbnRzW2V2ZW50XSwgbm9kZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaW1nJzpcbiAgICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wRXJyb3IsICdlcnJvcicsIG5vZGUpLCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcExvYWQsICdsb2FkJywgbm9kZSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdmb3JtJzpcbiAgICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzID0gW1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wUmVzZXQsICdyZXNldCcsIG5vZGUpLCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcFN1Ym1pdCwgJ3N1Ym1pdCcsIG5vZGUpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmxpc3RlbmVycyA9IFtSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIudHJhcEJ1YmJsZWRFdmVudChFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzLnRvcEludmFsaWQsICdpbnZhbGlkJywgbm9kZSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBwb3N0VXBkYXRlU2VsZWN0V3JhcHBlcigpIHtcbiAgICAgIFJlYWN0RE9NU2VsZWN0LnBvc3RVcGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgIH1cbiAgICB2YXIgb21pdHRlZENsb3NlVGFncyA9IHtcbiAgICAgICdhcmVhJzogdHJ1ZSxcbiAgICAgICdiYXNlJzogdHJ1ZSxcbiAgICAgICdicic6IHRydWUsXG4gICAgICAnY29sJzogdHJ1ZSxcbiAgICAgICdlbWJlZCc6IHRydWUsXG4gICAgICAnaHInOiB0cnVlLFxuICAgICAgJ2ltZyc6IHRydWUsXG4gICAgICAnaW5wdXQnOiB0cnVlLFxuICAgICAgJ2tleWdlbic6IHRydWUsXG4gICAgICAnbGluayc6IHRydWUsXG4gICAgICAnbWV0YSc6IHRydWUsXG4gICAgICAncGFyYW0nOiB0cnVlLFxuICAgICAgJ3NvdXJjZSc6IHRydWUsXG4gICAgICAndHJhY2snOiB0cnVlLFxuICAgICAgJ3dicic6IHRydWVcbiAgICB9O1xuICAgIHZhciBuZXdsaW5lRWF0aW5nVGFncyA9IHtcbiAgICAgICdsaXN0aW5nJzogdHJ1ZSxcbiAgICAgICdwcmUnOiB0cnVlLFxuICAgICAgJ3RleHRhcmVhJzogdHJ1ZVxuICAgIH07XG4gICAgdmFyIHZvaWRFbGVtZW50VGFncyA9IF9hc3NpZ24oeydtZW51aXRlbSc6IHRydWV9LCBvbWl0dGVkQ2xvc2VUYWdzKTtcbiAgICB2YXIgVkFMSURfVEFHX1JFR0VYID0gL15bYS16QS1aXVthLXpBLVo6X1xcLlxcLVxcZF0qJC87XG4gICAgdmFyIHZhbGlkYXRlZFRhZ0NhY2hlID0ge307XG4gICAgdmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVEYW5nZXJvdXNUYWcodGFnKSB7XG4gICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwodmFsaWRhdGVkVGFnQ2FjaGUsIHRhZykpIHtcbiAgICAgICAgIVZBTElEX1RBR19SRUdFWC50ZXN0KHRhZykgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCB0YWc6ICVzJywgdGFnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHZhbGlkYXRlZFRhZ0NhY2hlW3RhZ10gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBpc0N1c3RvbUNvbXBvbmVudCh0YWdOYW1lLCBwcm9wcykge1xuICAgICAgcmV0dXJuIHRhZ05hbWUuaW5kZXhPZignLScpID49IDAgfHwgcHJvcHMuaXMgIT0gbnVsbDtcbiAgICB9XG4gICAgdmFyIGdsb2JhbElkQ291bnRlciA9IDE7XG4gICAgZnVuY3Rpb24gUmVhY3RET01Db21wb25lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHRhZyA9IGVsZW1lbnQudHlwZTtcbiAgICAgIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZyk7XG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl90YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgICAgIHRoaXMuX25hbWVzcGFjZVVSSSA9IG51bGw7XG4gICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbnVsbDtcbiAgICAgIHRoaXMuX3ByZXZpb3VzU3R5bGUgPSBudWxsO1xuICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBudWxsO1xuICAgICAgdGhpcy5fbmF0aXZlTm9kZSA9IG51bGw7XG4gICAgICB0aGlzLl9uYXRpdmVQYXJlbnQgPSBudWxsO1xuICAgICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgICB0aGlzLl9kb21JRCA9IG51bGw7XG4gICAgICB0aGlzLl9uYXRpdmVDb250YWluZXJJbmZvID0gbnVsbDtcbiAgICAgIHRoaXMuX3dyYXBwZXJTdGF0ZSA9IG51bGw7XG4gICAgICB0aGlzLl90b3BMZXZlbFdyYXBwZXIgPSBudWxsO1xuICAgICAgdGhpcy5fZmxhZ3MgPSAwO1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdGhpcy5fYW5jZXN0b3JJbmZvID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY29udGVudERlYnVnSUQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBSZWFjdERPTUNvbXBvbmVudC5kaXNwbGF5TmFtZSA9ICdSZWFjdERPTUNvbXBvbmVudCc7XG4gICAgUmVhY3RET01Db21wb25lbnQuTWl4aW4gPSB7XG4gICAgICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIG5hdGl2ZVBhcmVudCwgbmF0aXZlQ29udGFpbmVySW5mbywgY29udGV4dCkge1xuICAgICAgICB0aGlzLl9yb290Tm9kZUlEID0gZ2xvYmFsSWRDb3VudGVyKys7XG4gICAgICAgIHRoaXMuX2RvbUlEID0gbmF0aXZlQ29udGFpbmVySW5mby5faWRDb3VudGVyKys7XG4gICAgICAgIHRoaXMuX25hdGl2ZVBhcmVudCA9IG5hdGl2ZVBhcmVudDtcbiAgICAgICAgdGhpcy5fbmF0aXZlQ29udGFpbmVySW5mbyA9IG5hdGl2ZUNvbnRhaW5lckluZm87XG4gICAgICAgIHZhciBwcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICBjYXNlICdpbWcnOlxuICAgICAgICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgICAgICB0aGlzLl93cmFwcGVyU3RhdGUgPSB7bGlzdGVuZXJzOiBudWxsfTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhcEJ1YmJsZWRFdmVudHNMb2NhbCwgdGhpcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICAgICAgcHJvcHMgPSBSZWFjdERPTUJ1dHRvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBwcm9wcywgbmF0aXZlUGFyZW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICAgIFJlYWN0RE9NSW5wdXQubW91bnRXcmFwcGVyKHRoaXMsIHByb3BzLCBuYXRpdmVQYXJlbnQpO1xuICAgICAgICAgICAgcHJvcHMgPSBSZWFjdERPTUlucHV0LmdldE5hdGl2ZVByb3BzKHRoaXMsIHByb3BzKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhcEJ1YmJsZWRFdmVudHNMb2NhbCwgdGhpcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdvcHRpb24nOlxuICAgICAgICAgICAgUmVhY3RET01PcHRpb24ubW91bnRXcmFwcGVyKHRoaXMsIHByb3BzLCBuYXRpdmVQYXJlbnQpO1xuICAgICAgICAgICAgcHJvcHMgPSBSZWFjdERPTU9wdGlvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBwcm9wcyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICAgICAgUmVhY3RET01TZWxlY3QubW91bnRXcmFwcGVyKHRoaXMsIHByb3BzLCBuYXRpdmVQYXJlbnQpO1xuICAgICAgICAgICAgcHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXROYXRpdmVQcm9wcyh0aGlzLCBwcm9wcyk7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYXBCdWJibGVkRXZlbnRzTG9jYWwsIHRoaXMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICAgICAgUmVhY3RET01UZXh0YXJlYS5tb3VudFdyYXBwZXIodGhpcywgcHJvcHMsIG5hdGl2ZVBhcmVudCk7XG4gICAgICAgICAgICBwcm9wcyA9IFJlYWN0RE9NVGV4dGFyZWEuZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMpO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZSh0cmFwQnViYmxlZEV2ZW50c0xvY2FsLCB0aGlzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGFzc2VydFZhbGlkUHJvcHModGhpcywgcHJvcHMpO1xuICAgICAgICB2YXIgbmFtZXNwYWNlVVJJO1xuICAgICAgICB2YXIgcGFyZW50VGFnO1xuICAgICAgICBpZiAobmF0aXZlUGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBuYW1lc3BhY2VVUkkgPSBuYXRpdmVQYXJlbnQuX25hbWVzcGFjZVVSSTtcbiAgICAgICAgICBwYXJlbnRUYWcgPSBuYXRpdmVQYXJlbnQuX3RhZztcbiAgICAgICAgfSBlbHNlIGlmIChuYXRpdmVDb250YWluZXJJbmZvLl90YWcpIHtcbiAgICAgICAgICBuYW1lc3BhY2VVUkkgPSBuYXRpdmVDb250YWluZXJJbmZvLl9uYW1lc3BhY2VVUkk7XG4gICAgICAgICAgcGFyZW50VGFnID0gbmF0aXZlQ29udGFpbmVySW5mby5fdGFnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lc3BhY2VVUkkgPT0gbnVsbCB8fCBuYW1lc3BhY2VVUkkgPT09IERPTU5hbWVzcGFjZXMuc3ZnICYmIHBhcmVudFRhZyA9PT0gJ2ZvcmVpZ25vYmplY3QnKSB7XG4gICAgICAgICAgbmFtZXNwYWNlVVJJID0gRE9NTmFtZXNwYWNlcy5odG1sO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lc3BhY2VVUkkgPT09IERPTU5hbWVzcGFjZXMuaHRtbCkge1xuICAgICAgICAgIGlmICh0aGlzLl90YWcgPT09ICdzdmcnKSB7XG4gICAgICAgICAgICBuYW1lc3BhY2VVUkkgPSBET01OYW1lc3BhY2VzLnN2ZztcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3RhZyA9PT0gJ21hdGgnKSB7XG4gICAgICAgICAgICBuYW1lc3BhY2VVUkkgPSBET01OYW1lc3BhY2VzLm1hdGhtbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbmFtZXNwYWNlVVJJID0gbmFtZXNwYWNlVVJJO1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBwYXJlbnRJbmZvO1xuICAgICAgICAgIGlmIChuYXRpdmVQYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcGFyZW50SW5mbyA9IG5hdGl2ZVBhcmVudC5fYW5jZXN0b3JJbmZvO1xuICAgICAgICAgIH0gZWxzZSBpZiAobmF0aXZlQ29udGFpbmVySW5mby5fdGFnKSB7XG4gICAgICAgICAgICBwYXJlbnRJbmZvID0gbmF0aXZlQ29udGFpbmVySW5mby5fYW5jZXN0b3JJbmZvO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyZW50SW5mbykge1xuICAgICAgICAgICAgdmFsaWRhdGVET01OZXN0aW5nKHRoaXMuX3RhZywgdGhpcywgcGFyZW50SW5mbyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX2FuY2VzdG9ySW5mbyA9IHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvKHBhcmVudEluZm8sIHRoaXMuX3RhZywgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1vdW50SW1hZ2U7XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSBuYXRpdmVDb250YWluZXJJbmZvLl9vd25lckRvY3VtZW50O1xuICAgICAgICAgIHZhciBlbDtcbiAgICAgICAgICBpZiAobmFtZXNwYWNlVVJJID09PSBET01OYW1lc3BhY2VzLmh0bWwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl90YWcgPT09ICdzY3JpcHQnKSB7XG4gICAgICAgICAgICAgIHZhciBkaXYgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAnPCcgKyB0eXBlICsgJz48LycgKyB0eXBlICsgJz4nO1xuICAgICAgICAgICAgICBlbCA9IGRpdi5yZW1vdmVDaGlsZChkaXYuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlLCBwcm9wcy5pcyB8fCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VVUkksIHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUucHJlY2FjaGVOb2RlKHRoaXMsIGVsKTtcbiAgICAgICAgICB0aGlzLl9mbGFncyB8PSBGbGFncy5oYXNDYWNoZWRDaGlsZE5vZGVzO1xuICAgICAgICAgIGlmICghdGhpcy5fbmF0aXZlUGFyZW50KSB7XG4gICAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0QXR0cmlidXRlRm9yUm9vdChlbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3VwZGF0ZURPTVByb3BlcnRpZXMobnVsbCwgcHJvcHMsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICB2YXIgbGF6eVRyZWUgPSBET01MYXp5VHJlZShlbCk7XG4gICAgICAgICAgdGhpcy5fY3JlYXRlSW5pdGlhbENoaWxkcmVuKHRyYW5zYWN0aW9uLCBwcm9wcywgY29udGV4dCwgbGF6eVRyZWUpO1xuICAgICAgICAgIG1vdW50SW1hZ2UgPSBsYXp5VHJlZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdGFnT3BlbiA9IHRoaXMuX2NyZWF0ZU9wZW5UYWdNYXJrdXBBbmRQdXRMaXN0ZW5lcnModHJhbnNhY3Rpb24sIHByb3BzKTtcbiAgICAgICAgICB2YXIgdGFnQ29udGVudCA9IHRoaXMuX2NyZWF0ZUNvbnRlbnRNYXJrdXAodHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoIXRhZ0NvbnRlbnQgJiYgb21pdHRlZENsb3NlVGFnc1t0aGlzLl90YWddKSB7XG4gICAgICAgICAgICBtb3VudEltYWdlID0gdGFnT3BlbiArICcvPic7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vdW50SW1hZ2UgPSB0YWdPcGVuICsgJz4nICsgdGFnQ29udGVudCArICc8LycgKyB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlICsgJz4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICAgICAgaWYgKHByb3BzLmF1dG9Gb2N1cykge1xuICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKG9wdGlvblBvc3RNb3VudCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vdW50SW1hZ2U7XG4gICAgICB9LFxuICAgICAgX2NyZWF0ZU9wZW5UYWdNYXJrdXBBbmRQdXRMaXN0ZW5lcnM6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcm9wcykge1xuICAgICAgICB2YXIgcmV0ID0gJzwnICsgdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgICAgZm9yICh2YXIgcHJvcEtleSBpbiBwcm9wcykge1xuICAgICAgICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcEtleV07XG4gICAgICAgICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgICAgICBpZiAocHJvcFZhbHVlKSB7XG4gICAgICAgICAgICAgIGVucXVldWVQdXRMaXN0ZW5lcih0aGlzLCBwcm9wS2V5LCBwcm9wVmFsdWUsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgICAgICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZSA9IHByb3BWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJvcFZhbHVlID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBfYXNzaWduKHt9LCBwcm9wcy5zdHlsZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcHJvcFZhbHVlID0gQ1NTUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclN0eWxlcyhwcm9wVmFsdWUsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1hcmt1cCA9IG51bGw7XG4gICAgICAgICAgICBpZiAodGhpcy5fdGFnICE9IG51bGwgJiYgaXNDdXN0b21Db21wb25lbnQodGhpcy5fdGFnLCBwcm9wcykpIHtcbiAgICAgICAgICAgICAgaWYgKCFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgICAgICAgIG1hcmt1cCA9IERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JDdXN0b21BdHRyaWJ1dGUocHJvcEtleSwgcHJvcFZhbHVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWFya3VwID0gRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclByb3BlcnR5KHByb3BLZXksIHByb3BWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWFya3VwKSB7XG4gICAgICAgICAgICAgIHJldCArPSAnICcgKyBtYXJrdXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9uYXRpdmVQYXJlbnQpIHtcbiAgICAgICAgICByZXQgKz0gJyAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclJvb3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXQgKz0gJyAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHRoaXMuX2RvbUlEKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0sXG4gICAgICBfY3JlYXRlQ29udGVudE1hcmt1cDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciByZXQgPSAnJztcbiAgICAgICAgdmFyIGlubmVySFRNTCA9IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuICAgICAgICBpZiAoaW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoaW5uZXJIVE1MLl9faHRtbCAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXQgPSBpbm5lckhUTUwuX19odG1sO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY29udGVudFRvVXNlID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgcHJvcHMuY2hpbGRyZW5dID8gcHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgICAgIHZhciBjaGlsZHJlblRvVXNlID0gY29udGVudFRvVXNlICE9IG51bGwgPyBudWxsIDogcHJvcHMuY2hpbGRyZW47XG4gICAgICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXQgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIoY29udGVudFRvVXNlKTtcbiAgICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHNldENvbnRlbnRDaGlsZEZvckluc3RydW1lbnRhdGlvbi5jYWxsKHRoaXMsIGNvbnRlbnRUb1VzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChjaGlsZHJlblRvVXNlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBtb3VudEltYWdlcyA9IHRoaXMubW91bnRDaGlsZHJlbihjaGlsZHJlblRvVXNlLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgICAgICByZXQgPSBtb3VudEltYWdlcy5qb2luKCcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5ld2xpbmVFYXRpbmdUYWdzW3RoaXMuX3RhZ10gJiYgcmV0LmNoYXJBdCgwKSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICByZXR1cm4gJ1xcbicgKyByZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIF9jcmVhdGVJbml0aWFsQ2hpbGRyZW46IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcm9wcywgY29udGV4dCwgbGF6eVRyZWUpIHtcbiAgICAgICAgdmFyIGlubmVySFRNTCA9IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuICAgICAgICBpZiAoaW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAoaW5uZXJIVE1MLl9faHRtbCAhPSBudWxsKSB7XG4gICAgICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUhUTUwobGF6eVRyZWUsIGlubmVySFRNTC5fX2h0bWwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY29udGVudFRvVXNlID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgcHJvcHMuY2hpbGRyZW5dID8gcHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgICAgIHZhciBjaGlsZHJlblRvVXNlID0gY29udGVudFRvVXNlICE9IG51bGwgPyBudWxsIDogcHJvcHMuY2hpbGRyZW47XG4gICAgICAgICAgaWYgKGNvbnRlbnRUb1VzZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBzZXRDb250ZW50Q2hpbGRGb3JJbnN0cnVtZW50YXRpb24uY2FsbCh0aGlzLCBjb250ZW50VG9Vc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgRE9NTGF6eVRyZWUucXVldWVUZXh0KGxhenlUcmVlLCBjb250ZW50VG9Vc2UpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hpbGRyZW5Ub1VzZSAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgbW91bnRJbWFnZXMgPSB0aGlzLm1vdW50Q2hpbGRyZW4oY2hpbGRyZW5Ub1VzZSwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb3VudEltYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBtb3VudEltYWdlc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24obmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBwcmV2RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBjb250ZXh0KTtcbiAgICAgIH0sXG4gICAgICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGxhc3RQcm9wcyA9IHByZXZFbGVtZW50LnByb3BzO1xuICAgICAgICB2YXIgbmV4dFByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICAgICAgY2FzZSAnYnV0dG9uJzpcbiAgICAgICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NQnV0dG9uLmdldE5hdGl2ZVByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTUJ1dHRvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgICAgUmVhY3RET01JbnB1dC51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01JbnB1dC5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICAgICAgbmV4dFByb3BzID0gUmVhY3RET01JbnB1dC5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NT3B0aW9uLmdldE5hdGl2ZVByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTU9wdGlvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NU2VsZWN0LmdldE5hdGl2ZVByb3BzKHRoaXMsIGxhc3RQcm9wcyk7XG4gICAgICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgICAgICAgUmVhY3RET01UZXh0YXJlYS51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01UZXh0YXJlYS5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICAgICAgbmV4dFByb3BzID0gUmVhY3RET01UZXh0YXJlYS5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0VmFsaWRQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbik7XG4gICAgICAgIHRoaXMuX3VwZGF0ZURPTUNoaWxkcmVuKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIGlmICh0aGlzLl90YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShwb3N0VXBkYXRlU2VsZWN0V3JhcHBlciwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBfdXBkYXRlRE9NUHJvcGVydGllczogZnVuY3Rpb24obGFzdFByb3BzLCBuZXh0UHJvcHMsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIHZhciBwcm9wS2V5O1xuICAgICAgICB2YXIgc3R5bGVOYW1lO1xuICAgICAgICB2YXIgc3R5bGVVcGRhdGVzO1xuICAgICAgICBmb3IgKHByb3BLZXkgaW4gbGFzdFByb3BzKSB7XG4gICAgICAgICAgaWYgKG5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCAhbGFzdFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8IGxhc3RQcm9wc1twcm9wS2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFN0eWxlID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHk7XG4gICAgICAgICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0U3R5bGUpIHtcbiAgICAgICAgICAgICAgaWYgKGxhc3RTdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgICAgICBpZiAobGFzdFByb3BzW3Byb3BLZXldKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZUxpc3RlbmVyKHRoaXMsIHByb3BLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wS2V5XSB8fCBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLmRlbGV0ZVZhbHVlRm9yUHJvcGVydHkoZ2V0Tm9kZSh0aGlzKSwgcHJvcEtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcEtleSBpbiBuZXh0UHJvcHMpIHtcbiAgICAgICAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG4gICAgICAgICAgdmFyIGxhc3RQcm9wID0gcHJvcEtleSA9PT0gU1RZTEUgPyB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA6IGxhc3RQcm9wcyAhPSBudWxsID8gbGFzdFByb3BzW3Byb3BLZXldIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGlmICghbmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8IG5leHRQcm9wID09PSBsYXN0UHJvcCB8fCBuZXh0UHJvcCA9PSBudWxsICYmIGxhc3RQcm9wID09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNoZWNrQW5kV2FybkZvck11dGF0ZWRTdHlsZSh0aGlzLl9wcmV2aW91c1N0eWxlQ29weSwgdGhpcy5fcHJldmlvdXNTdHlsZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNTdHlsZSA9IG5leHRQcm9wO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG5leHRQcm9wID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHkgPSBfYXNzaWduKHt9LCBuZXh0UHJvcCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGFzdFByb3ApIHtcbiAgICAgICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFByb3ApIHtcbiAgICAgICAgICAgICAgICBpZiAobGFzdFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJiAoIW5leHRQcm9wIHx8ICFuZXh0UHJvcC5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSkge1xuICAgICAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcbiAgICAgICAgICAgICAgICBpZiAobmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJiBsYXN0UHJvcFtzdHlsZU5hbWVdICE9PSBuZXh0UHJvcFtzdHlsZU5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9IG5leHRQcm9wW3N0eWxlTmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBuZXh0UHJvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgICAgICBpZiAobmV4dFByb3ApIHtcbiAgICAgICAgICAgICAgZW5xdWV1ZVB1dExpc3RlbmVyKHRoaXMsIHByb3BLZXksIG5leHRQcm9wLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RQcm9wKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZUxpc3RlbmVyKHRoaXMsIHByb3BLZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaXNDdXN0b21Db21wb25lbnQodGhpcy5fdGFnLCBuZXh0UHJvcHMpKSB7XG4gICAgICAgICAgICBpZiAoIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvckF0dHJpYnV0ZShnZXROb2RlKHRoaXMpLCBwcm9wS2V5LCBuZXh0UHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW3Byb3BLZXldIHx8IERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKHByb3BLZXkpKSB7XG4gICAgICAgICAgICB2YXIgbm9kZSA9IGdldE5vZGUodGhpcyk7XG4gICAgICAgICAgICBpZiAobmV4dFByb3AgIT0gbnVsbCkge1xuICAgICAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JQcm9wZXJ0eShub2RlLCBwcm9wS2V5LCBuZXh0UHJvcCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBwcm9wS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0eWxlVXBkYXRlcykge1xuICAgICAgICAgIENTU1Byb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclN0eWxlcyhnZXROb2RlKHRoaXMpLCBzdHlsZVVwZGF0ZXMsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgX3VwZGF0ZURPTUNoaWxkcmVuOiBmdW5jdGlvbihsYXN0UHJvcHMsIG5leHRQcm9wcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGxhc3RDb250ZW50ID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgbGFzdFByb3BzLmNoaWxkcmVuXSA/IGxhc3RQcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgICAgIHZhciBuZXh0Q29udGVudCA9IENPTlRFTlRfVFlQRVNbdHlwZW9mIG5leHRQcm9wcy5jaGlsZHJlbl0gPyBuZXh0UHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgICB2YXIgbGFzdEh0bWwgPSBsYXN0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgJiYgbGFzdFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbDtcbiAgICAgICAgdmFyIG5leHRIdG1sID0gbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG4gICAgICAgIHZhciBsYXN0Q2hpbGRyZW4gPSBsYXN0Q29udGVudCAhPSBudWxsID8gbnVsbCA6IGxhc3RQcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgdmFyIG5leHRDaGlsZHJlbiA9IG5leHRDb250ZW50ICE9IG51bGwgPyBudWxsIDogbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgICAgICB2YXIgbGFzdEhhc0NvbnRlbnRPckh0bWwgPSBsYXN0Q29udGVudCAhPSBudWxsIHx8IGxhc3RIdG1sICE9IG51bGw7XG4gICAgICAgIHZhciBuZXh0SGFzQ29udGVudE9ySHRtbCA9IG5leHRDb250ZW50ICE9IG51bGwgfHwgbmV4dEh0bWwgIT0gbnVsbDtcbiAgICAgICAgaWYgKGxhc3RDaGlsZHJlbiAhPSBudWxsICYmIG5leHRDaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihudWxsLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIH0gZWxzZSBpZiAobGFzdEhhc0NvbnRlbnRPckh0bWwgJiYgIW5leHRIYXNDb250ZW50T3JIdG1sKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVUZXh0Q29udGVudCgnJyk7XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKHRoaXMuX2RlYnVnSUQsIFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5leHRDb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAobGFzdENvbnRlbnQgIT09IG5leHRDb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnICsgbmV4dENvbnRlbnQpO1xuICAgICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgdGhpcy5fY29udGVudERlYnVnSUQgPSB0aGlzLl9kZWJ1Z0lEICsgJyN0ZXh0JztcbiAgICAgICAgICAgICAgc2V0Q29udGVudENoaWxkRm9ySW5zdHJ1bWVudGF0aW9uLmNhbGwodGhpcywgbmV4dENvbnRlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKGxhc3RIdG1sICE9PSBuZXh0SHRtbCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVNYXJrdXAoJycgKyBuZXh0SHRtbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbih0aGlzLl9kZWJ1Z0lELCBbXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5leHRDaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb250ZW50RGVidWdJRCkge1xuICAgICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Vbm1vdW50Q29tcG9uZW50KHRoaXMuX2NvbnRlbnREZWJ1Z0lEKTtcbiAgICAgICAgICAgICAgdGhpcy5fY29udGVudERlYnVnSUQgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnVwZGF0ZUNoaWxkcmVuKG5leHRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0TmF0aXZlTm9kZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXROb2RlKHRoaXMpO1xuICAgICAgfSxcbiAgICAgIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKHNhZmVseSkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICBjYXNlICdpbWcnOlxuICAgICAgICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gdGhpcy5fd3JhcHBlclN0YXRlLmxpc3RlbmVycztcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnNbaV0ucmVtb3ZlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgICAgICAgIWZhbHNlID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJzwlcz4gdHJpZWQgdG8gdW5tb3VudC4gQmVjYXVzZSBvZiBjcm9zcy1icm93c2VyIHF1aXJrcyBpdCBpcyAnICsgJ2ltcG9zc2libGUgdG8gdW5tb3VudCBzb21lIHRvcC1sZXZlbCBjb21wb25lbnRzIChlZyA8aHRtbD4sICcgKyAnPGhlYWQ+LCBhbmQgPGJvZHk+KSByZWxpYWJseSBhbmQgZWZmaWNpZW50bHkuIFRvIGZpeCB0aGlzLCBoYXZlIGEgJyArICdzaW5nbGUgdG9wLWxldmVsIGNvbXBvbmVudCB0aGF0IG5ldmVyIHVubW91bnRzIHJlbmRlciB0aGVzZSAnICsgJ2VsZW1lbnRzLicsIHRoaXMuX3RhZykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51bm1vdW50Q2hpbGRyZW4oc2FmZWx5KTtcbiAgICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnVuY2FjaGVOb2RlKHRoaXMpO1xuICAgICAgICBFdmVudFBsdWdpbkh1Yi5kZWxldGVBbGxMaXN0ZW5lcnModGhpcyk7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50LnVubW91bnRJREZyb21FbnZpcm9ubWVudCh0aGlzLl9yb290Tm9kZUlEKTtcbiAgICAgICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2RvbUlEID0gbnVsbDtcbiAgICAgICAgdGhpcy5fd3JhcHBlclN0YXRlID0gbnVsbDtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAodGhpcy5fY29udGVudERlYnVnSUQpIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVubW91bnRDb21wb25lbnQodGhpcy5fY29udGVudERlYnVnSUQpO1xuICAgICAgICAgICAgdGhpcy5fY29udGVudERlYnVnSUQgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldFB1YmxpY0luc3RhbmNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldE5vZGUodGhpcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBfYXNzaWduKFJlYWN0RE9NQ29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RET01Db21wb25lbnQuTWl4aW4sIFJlYWN0TXVsdGlDaGlsZC5NaXhpbik7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUNvbXBvbmVudDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNTJcIiwgW1wiNlwiLCBcIjRjXCIsIFwiMTFcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBfYXNzaWduID0gJF9fcmVxdWlyZSgnNicpO1xuICB2YXIgRE9NTGF6eVRyZWUgPSAkX19yZXF1aXJlKCc0YycpO1xuICB2YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gJF9fcmVxdWlyZSgnMTEnKTtcbiAgdmFyIFJlYWN0RE9NRW1wdHlDb21wb25lbnQgPSBmdW5jdGlvbihpbnN0YW50aWF0ZSkge1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLl9uYXRpdmVOb2RlID0gbnVsbDtcbiAgICB0aGlzLl9uYXRpdmVQYXJlbnQgPSBudWxsO1xuICAgIHRoaXMuX25hdGl2ZUNvbnRhaW5lckluZm8gPSBudWxsO1xuICAgIHRoaXMuX2RvbUlEID0gbnVsbDtcbiAgfTtcbiAgX2Fzc2lnbihSZWFjdERPTUVtcHR5Q29tcG9uZW50LnByb3RvdHlwZSwge1xuICAgIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbih0cmFuc2FjdGlvbiwgbmF0aXZlUGFyZW50LCBuYXRpdmVDb250YWluZXJJbmZvLCBjb250ZXh0KSB7XG4gICAgICB2YXIgZG9tSUQgPSBuYXRpdmVDb250YWluZXJJbmZvLl9pZENvdW50ZXIrKztcbiAgICAgIHRoaXMuX2RvbUlEID0gZG9tSUQ7XG4gICAgICB0aGlzLl9uYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG4gICAgICB0aGlzLl9uYXRpdmVDb250YWluZXJJbmZvID0gbmF0aXZlQ29udGFpbmVySW5mbztcbiAgICAgIHZhciBub2RlVmFsdWUgPSAnIHJlYWN0LWVtcHR5OiAnICsgdGhpcy5fZG9tSUQgKyAnICc7XG4gICAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5hdGl2ZUNvbnRhaW5lckluZm8uX293bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBub2RlID0gb3duZXJEb2N1bWVudC5jcmVhdGVDb21tZW50KG5vZGVWYWx1ZSk7XG4gICAgICAgIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5wcmVjYWNoZU5vZGUodGhpcywgbm9kZSk7XG4gICAgICAgIHJldHVybiBET01MYXp5VHJlZShub2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJzwhLS0nICsgbm9kZVZhbHVlICsgJy0tPic7XG4gICAgICB9XG4gICAgfSxcbiAgICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbigpIHt9LFxuICAgIGdldE5hdGl2ZU5vZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpO1xuICAgIH0sXG4gICAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oKSB7XG4gICAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUudW5jYWNoZU5vZGUodGhpcyk7XG4gICAgfVxuICB9KTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUVtcHR5Q29tcG9uZW50O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjUzXCIsIFtcIjMwXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgZnVuY3Rpb24gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoaW5zdEEsIGluc3RCKSB7XG4gICAgICAhKCdfbmF0aXZlTm9kZScgaW4gaW5zdEEpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2dldE5vZGVGcm9tSW5zdGFuY2U6IEludmFsaWQgYXJndW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgISgnX25hdGl2ZU5vZGUnIGluIGluc3RCKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXROb2RlRnJvbUluc3RhbmNlOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBkZXB0aEEgPSAwO1xuICAgICAgZm9yICh2YXIgdGVtcEEgPSBpbnN0QTsgdGVtcEE7IHRlbXBBID0gdGVtcEEuX25hdGl2ZVBhcmVudCkge1xuICAgICAgICBkZXB0aEErKztcbiAgICAgIH1cbiAgICAgIHZhciBkZXB0aEIgPSAwO1xuICAgICAgZm9yICh2YXIgdGVtcEIgPSBpbnN0QjsgdGVtcEI7IHRlbXBCID0gdGVtcEIuX25hdGl2ZVBhcmVudCkge1xuICAgICAgICBkZXB0aEIrKztcbiAgICAgIH1cbiAgICAgIHdoaWxlIChkZXB0aEEgLSBkZXB0aEIgPiAwKSB7XG4gICAgICAgIGluc3RBID0gaW5zdEEuX25hdGl2ZVBhcmVudDtcbiAgICAgICAgZGVwdGhBLS07XG4gICAgICB9XG4gICAgICB3aGlsZSAoZGVwdGhCIC0gZGVwdGhBID4gMCkge1xuICAgICAgICBpbnN0QiA9IGluc3RCLl9uYXRpdmVQYXJlbnQ7XG4gICAgICAgIGRlcHRoQi0tO1xuICAgICAgfVxuICAgICAgdmFyIGRlcHRoID0gZGVwdGhBO1xuICAgICAgd2hpbGUgKGRlcHRoLS0pIHtcbiAgICAgICAgaWYgKGluc3RBID09PSBpbnN0Qikge1xuICAgICAgICAgIHJldHVybiBpbnN0QTtcbiAgICAgICAgfVxuICAgICAgICBpbnN0QSA9IGluc3RBLl9uYXRpdmVQYXJlbnQ7XG4gICAgICAgIGluc3RCID0gaW5zdEIuX25hdGl2ZVBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc0FuY2VzdG9yKGluc3RBLCBpbnN0Qikge1xuICAgICAgISgnX25hdGl2ZU5vZGUnIGluIGluc3RBKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpc0FuY2VzdG9yOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICEoJ19uYXRpdmVOb2RlJyBpbiBpbnN0QikgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnaXNBbmNlc3RvcjogSW52YWxpZCBhcmd1bWVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB3aGlsZSAoaW5zdEIpIHtcbiAgICAgICAgaWYgKGluc3RCID09PSBpbnN0QSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluc3RCID0gaW5zdEIuX25hdGl2ZVBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UGFyZW50SW5zdGFuY2UoaW5zdCkge1xuICAgICAgISgnX25hdGl2ZU5vZGUnIGluIGluc3QpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2dldFBhcmVudEluc3RhbmNlOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBpbnN0Ll9uYXRpdmVQYXJlbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYXZlcnNlVHdvUGhhc2UoaW5zdCwgZm4sIGFyZykge1xuICAgICAgdmFyIHBhdGggPSBbXTtcbiAgICAgIHdoaWxlIChpbnN0KSB7XG4gICAgICAgIHBhdGgucHVzaChpbnN0KTtcbiAgICAgICAgaW5zdCA9IGluc3QuX25hdGl2ZVBhcmVudDtcbiAgICAgIH1cbiAgICAgIHZhciBpO1xuICAgICAgZm9yIChpID0gcGF0aC5sZW5ndGg7IGktLSA+IDA7ICkge1xuICAgICAgICBmbihwYXRoW2ldLCBmYWxzZSwgYXJnKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZuKHBhdGhbaV0sIHRydWUsIGFyZyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgZm4sIGFyZ0Zyb20sIGFyZ1RvKSB7XG4gICAgICB2YXIgY29tbW9uID0gZnJvbSAmJiB0byA/IGdldExvd2VzdENvbW1vbkFuY2VzdG9yKGZyb20sIHRvKSA6IG51bGw7XG4gICAgICB2YXIgcGF0aEZyb20gPSBbXTtcbiAgICAgIHdoaWxlIChmcm9tICYmIGZyb20gIT09IGNvbW1vbikge1xuICAgICAgICBwYXRoRnJvbS5wdXNoKGZyb20pO1xuICAgICAgICBmcm9tID0gZnJvbS5fbmF0aXZlUGFyZW50O1xuICAgICAgfVxuICAgICAgdmFyIHBhdGhUbyA9IFtdO1xuICAgICAgd2hpbGUgKHRvICYmIHRvICE9PSBjb21tb24pIHtcbiAgICAgICAgcGF0aFRvLnB1c2godG8pO1xuICAgICAgICB0byA9IHRvLl9uYXRpdmVQYXJlbnQ7XG4gICAgICB9XG4gICAgICB2YXIgaTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXRoRnJvbS5sZW5ndGg7IGkrKykge1xuICAgICAgICBmbihwYXRoRnJvbVtpXSwgdHJ1ZSwgYXJnRnJvbSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSBwYXRoVG8ubGVuZ3RoOyBpLS0gPiAwOyApIHtcbiAgICAgICAgZm4ocGF0aFRvW2ldLCBmYWxzZSwgYXJnVG8pO1xuICAgICAgfVxuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgIGlzQW5jZXN0b3I6IGlzQW5jZXN0b3IsXG4gICAgICBnZXRMb3dlc3RDb21tb25BbmNlc3RvcjogZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IsXG4gICAgICBnZXRQYXJlbnRJbnN0YW5jZTogZ2V0UGFyZW50SW5zdGFuY2UsXG4gICAgICB0cmF2ZXJzZVR3b1BoYXNlOiB0cmF2ZXJzZVR3b1BoYXNlLFxuICAgICAgdHJhdmVyc2VFbnRlckxlYXZlOiB0cmF2ZXJzZUVudGVyTGVhdmVcbiAgICB9O1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI1NFwiLCBbXCIzMFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIGZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDtcbiAgICAgICEoIUFycmF5LmlzQXJyYXkob2JqKSAmJiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJykpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RvQXJyYXk6IEFycmF5LWxpa2Ugb2JqZWN0IGV4cGVjdGVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgISh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IG5lZWRzIGEgbGVuZ3RoIHByb3BlcnR5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgIShsZW5ndGggPT09IDAgfHwgbGVuZ3RoIC0gMSBpbiBvYmopID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RvQXJyYXk6IE9iamVjdCBzaG91bGQgaGF2ZSBrZXlzIGZvciBpbmRpY2VzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgISh0eXBlb2Ygb2JqLmNhbGxlZSAhPT0gJ2Z1bmN0aW9uJykgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndG9BcnJheTogT2JqZWN0IGNhblxcJ3QgYmUgYGFyZ3VtZW50c2AuIFVzZSByZXN0IHBhcmFtcyAnICsgJyhmdW5jdGlvbiguLi5hcmdzKSB7fSkgb3IgQXJyYXkuZnJvbSgpIGluc3RlYWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChvYmopO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgICAgdmFyIHJldCA9IEFycmF5KGxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgIHJldFtpaV0gPSBvYmpbaWldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzQXJyYXlOYXR1cmUob2JqKSB7XG4gICAgICByZXR1cm4gKCEhb2JqICYmICh0eXBlb2Ygb2JqID09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJykgJiYgJ2xlbmd0aCcgaW4gb2JqICYmICEoJ3NldEludGVydmFsJyBpbiBvYmopICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT0gJ251bWJlcicgJiYgKEFycmF5LmlzQXJyYXkob2JqKSB8fCAnY2FsbGVlJyBpbiBvYmogfHwgJ2l0ZW0nIGluIG9iaikpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVBcnJheUZyb21NaXhlZChvYmopIHtcbiAgICAgIGlmICghaGFzQXJyYXlOYXR1cmUob2JqKSkge1xuICAgICAgICByZXR1cm4gW29ial07XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gb2JqLnNsaWNlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdG9BcnJheShvYmopO1xuICAgICAgfVxuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUFycmF5RnJvbU1peGVkO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI1NVwiLCBbXCJkXCIsIFwiNTRcIiwgXCI1NlwiLCBcIjMwXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gJF9fcmVxdWlyZSgnZCcpO1xuICAgIHZhciBjcmVhdGVBcnJheUZyb21NaXhlZCA9ICRfX3JlcXVpcmUoJzU0Jyk7XG4gICAgdmFyIGdldE1hcmt1cFdyYXAgPSAkX19yZXF1aXJlKCc1NicpO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIHZhciBkdW1teU5vZGUgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG4gICAgdmFyIG5vZGVOYW1lUGF0dGVybiA9IC9eXFxzKjwoXFx3KykvO1xuICAgIGZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICAgICAgdmFyIG5vZGVOYW1lTWF0Y2ggPSBtYXJrdXAubWF0Y2gobm9kZU5hbWVQYXR0ZXJuKTtcbiAgICAgIHJldHVybiBub2RlTmFtZU1hdGNoICYmIG5vZGVOYW1lTWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cCwgaGFuZGxlU2NyaXB0KSB7XG4gICAgICB2YXIgbm9kZSA9IGR1bW15Tm9kZTtcbiAgICAgICEhIWR1bW15Tm9kZSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgZHVtbXkgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwKTtcbiAgICAgIHZhciB3cmFwID0gbm9kZU5hbWUgJiYgZ2V0TWFya3VwV3JhcChub2RlTmFtZSk7XG4gICAgICBpZiAod3JhcCkge1xuICAgICAgICBub2RlLmlubmVySFRNTCA9IHdyYXBbMV0gKyBtYXJrdXAgKyB3cmFwWzJdO1xuICAgICAgICB2YXIgd3JhcERlcHRoID0gd3JhcFswXTtcbiAgICAgICAgd2hpbGUgKHdyYXBEZXB0aC0tKSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUubGFzdENoaWxkO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLmlubmVySFRNTCA9IG1hcmt1cDtcbiAgICAgIH1cbiAgICAgIHZhciBzY3JpcHRzID0gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgICBpZiAoc2NyaXB0cy5sZW5ndGgpIHtcbiAgICAgICAgIWhhbmRsZVNjcmlwdCA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAoLi4uKTogVW5leHBlY3RlZCA8c2NyaXB0PiBlbGVtZW50IHJlbmRlcmVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgY3JlYXRlQXJyYXlGcm9tTWl4ZWQoc2NyaXB0cykuZm9yRWFjaChoYW5kbGVTY3JpcHQpO1xuICAgICAgfVxuICAgICAgdmFyIG5vZGVzID0gQXJyYXkuZnJvbShub2RlLmNoaWxkTm9kZXMpO1xuICAgICAgd2hpbGUgKG5vZGUubGFzdENoaWxkKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQobm9kZS5sYXN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGVzO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZU5vZGVzRnJvbU1hcmt1cDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNTZcIiwgW1wiZFwiLCBcIjMwXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gJF9fcmVxdWlyZSgnZCcpO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIHZhciBkdW1teU5vZGUgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSA6IG51bGw7XG4gICAgdmFyIHNob3VsZFdyYXAgPSB7fTtcbiAgICB2YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG4gICAgdmFyIHRhYmxlV3JhcCA9IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddO1xuICAgIHZhciB0cldyYXAgPSBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXTtcbiAgICB2YXIgc3ZnV3JhcCA9IFsxLCAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+JywgJzwvc3ZnPiddO1xuICAgIHZhciBtYXJrdXBXcmFwID0ge1xuICAgICAgJyonOiBbMSwgJz88ZGl2PicsICc8L2Rpdj4nXSxcbiAgICAgICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgICAgICdjb2wnOiBbMiwgJzx0YWJsZT48dGJvZHk+PC90Ym9keT48Y29sZ3JvdXA+JywgJzwvY29sZ3JvdXA+PC90YWJsZT4nXSxcbiAgICAgICdsZWdlbmQnOiBbMSwgJzxmaWVsZHNldD4nLCAnPC9maWVsZHNldD4nXSxcbiAgICAgICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICAgICAndHInOiBbMiwgJzx0YWJsZT48dGJvZHk+JywgJzwvdGJvZHk+PC90YWJsZT4nXSxcbiAgICAgICdvcHRncm91cCc6IHNlbGVjdFdyYXAsXG4gICAgICAnb3B0aW9uJzogc2VsZWN0V3JhcCxcbiAgICAgICdjYXB0aW9uJzogdGFibGVXcmFwLFxuICAgICAgJ2NvbGdyb3VwJzogdGFibGVXcmFwLFxuICAgICAgJ3Rib2R5JzogdGFibGVXcmFwLFxuICAgICAgJ3Rmb290JzogdGFibGVXcmFwLFxuICAgICAgJ3RoZWFkJzogdGFibGVXcmFwLFxuICAgICAgJ3RkJzogdHJXcmFwLFxuICAgICAgJ3RoJzogdHJXcmFwXG4gICAgfTtcbiAgICB2YXIgc3ZnRWxlbWVudHMgPSBbJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZycsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3RleHQnLCAndHNwYW4nXTtcbiAgICBzdmdFbGVtZW50cy5mb3JFYWNoKGZ1bmN0aW9uKG5vZGVOYW1lKSB7XG4gICAgICBtYXJrdXBXcmFwW25vZGVOYW1lXSA9IHN2Z1dyYXA7XG4gICAgICBzaG91bGRXcmFwW25vZGVOYW1lXSA9IHRydWU7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZ2V0TWFya3VwV3JhcChub2RlTmFtZSkge1xuICAgICAgISEhZHVtbXlOb2RlID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01hcmt1cCB3cmFwcGluZyBub2RlIG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGlmICghbWFya3VwV3JhcC5oYXNPd25Qcm9wZXJ0eShub2RlTmFtZSkpIHtcbiAgICAgICAgbm9kZU5hbWUgPSAnKic7XG4gICAgICB9XG4gICAgICBpZiAoIXNob3VsZFdyYXAuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG4gICAgICAgIGlmIChub2RlTmFtZSA9PT0gJyonKSB7XG4gICAgICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8JyArIG5vZGVOYW1lICsgJz48LycgKyBub2RlTmFtZSArICc+JztcbiAgICAgICAgfVxuICAgICAgICBzaG91bGRXcmFwW25vZGVOYW1lXSA9ICFkdW1teU5vZGUuZmlyc3RDaGlsZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBnZXRNYXJrdXBXcmFwO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI1N1wiLCBbXCI0Y1wiLCBcImRcIiwgXCI1NVwiLCBcIjQ4XCIsIFwiNTZcIiwgXCIzMFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBET01MYXp5VHJlZSA9ICRfX3JlcXVpcmUoJzRjJyk7XG4gICAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gJF9fcmVxdWlyZSgnZCcpO1xuICAgIHZhciBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgPSAkX19yZXF1aXJlKCc1NScpO1xuICAgIHZhciBlbXB0eUZ1bmN0aW9uID0gJF9fcmVxdWlyZSgnNDgnKTtcbiAgICB2YXIgZ2V0TWFya3VwV3JhcCA9ICRfX3JlcXVpcmUoJzU2Jyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIE9QRU5fVEFHX05BTUVfRVhQID0gL14oPFteIFxcLz5dKykvO1xuICAgIHZhciBSRVNVTFRfSU5ERVhfQVRUUiA9ICdkYXRhLWRhbmdlci1pbmRleCc7XG4gICAgZnVuY3Rpb24gZ2V0Tm9kZU5hbWUobWFya3VwKSB7XG4gICAgICByZXR1cm4gbWFya3VwLnN1YnN0cmluZygxLCBtYXJrdXAuaW5kZXhPZignICcpKTtcbiAgICB9XG4gICAgdmFyIERhbmdlciA9IHtcbiAgICAgIGRhbmdlcm91c2x5UmVuZGVyTWFya3VwOiBmdW5jdGlvbihtYXJrdXBMaXN0KSB7XG4gICAgICAgICFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAoLi4uKTogQ2Fubm90IHJlbmRlciBtYXJrdXAgaW4gYSB3b3JrZXIgJyArICd0aHJlYWQuIE1ha2Ugc3VyZSBgd2luZG93YCBhbmQgYGRvY3VtZW50YCBhcmUgYXZhaWxhYmxlIGdsb2JhbGx5ICcgKyAnYmVmb3JlIHJlcXVpcmluZyBSZWFjdCB3aGVuIHVuaXQgdGVzdGluZyBvciB1c2UgJyArICdSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0cmluZyBmb3Igc2VydmVyIHJlbmRlcmluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHZhciBub2RlTmFtZTtcbiAgICAgICAgdmFyIG1hcmt1cEJ5Tm9kZU5hbWUgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXJrdXBMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgIW1hcmt1cExpc3RbaV0gPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZGFuZ2Vyb3VzbHlSZW5kZXJNYXJrdXAoLi4uKTogTWlzc2luZyBtYXJrdXAuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwTGlzdFtpXSk7XG4gICAgICAgICAgbm9kZU5hbWUgPSBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKSA/IG5vZGVOYW1lIDogJyonO1xuICAgICAgICAgIG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdID0gbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV0gfHwgW107XG4gICAgICAgICAgbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV1baV0gPSBtYXJrdXBMaXN0W2ldO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHRMaXN0ID0gW107XG4gICAgICAgIHZhciByZXN1bHRMaXN0QXNzaWdubWVudENvdW50ID0gMDtcbiAgICAgICAgZm9yIChub2RlTmFtZSBpbiBtYXJrdXBCeU5vZGVOYW1lKSB7XG4gICAgICAgICAgaWYgKCFtYXJrdXBCeU5vZGVOYW1lLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBtYXJrdXBMaXN0QnlOb2RlTmFtZSA9IG1hcmt1cEJ5Tm9kZU5hbWVbbm9kZU5hbWVdO1xuICAgICAgICAgIHZhciByZXN1bHRJbmRleDtcbiAgICAgICAgICBmb3IgKHJlc3VsdEluZGV4IGluIG1hcmt1cExpc3RCeU5vZGVOYW1lKSB7XG4gICAgICAgICAgICBpZiAobWFya3VwTGlzdEJ5Tm9kZU5hbWUuaGFzT3duUHJvcGVydHkocmVzdWx0SW5kZXgpKSB7XG4gICAgICAgICAgICAgIHZhciBtYXJrdXAgPSBtYXJrdXBMaXN0QnlOb2RlTmFtZVtyZXN1bHRJbmRleF07XG4gICAgICAgICAgICAgIG1hcmt1cExpc3RCeU5vZGVOYW1lW3Jlc3VsdEluZGV4XSA9IG1hcmt1cC5yZXBsYWNlKE9QRU5fVEFHX05BTUVfRVhQLCAnJDEgJyArIFJFU1VMVF9JTkRFWF9BVFRSICsgJz1cIicgKyByZXN1bHRJbmRleCArICdcIiAnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHJlbmRlck5vZGVzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwKG1hcmt1cExpc3RCeU5vZGVOYW1lLmpvaW4oJycpLCBlbXB0eUZ1bmN0aW9uKTtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJlbmRlck5vZGVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyTm9kZSA9IHJlbmRlck5vZGVzW2pdO1xuICAgICAgICAgICAgaWYgKHJlbmRlck5vZGUuaGFzQXR0cmlidXRlICYmIHJlbmRlck5vZGUuaGFzQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKSkge1xuICAgICAgICAgICAgICByZXN1bHRJbmRleCA9ICtyZW5kZXJOb2RlLmdldEF0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUik7XG4gICAgICAgICAgICAgIHJlbmRlck5vZGUucmVtb3ZlQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKTtcbiAgICAgICAgICAgICAgISFyZXN1bHRMaXN0Lmhhc093blByb3BlcnR5KHJlc3VsdEluZGV4KSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdEYW5nZXI6IEFzc2lnbmluZyB0byBhbiBhbHJlYWR5LW9jY3VwaWVkIHJlc3VsdCBpbmRleC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIHJlc3VsdExpc3RbcmVzdWx0SW5kZXhdID0gcmVuZGVyTm9kZTtcbiAgICAgICAgICAgICAgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhbmdlcjogRGlzY2FyZGluZyB1bmV4cGVjdGVkIG5vZGU6JywgcmVuZGVyTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICEocmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCA9PT0gcmVzdWx0TGlzdC5sZW5ndGgpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RhbmdlcjogRGlkIG5vdCBhc3NpZ24gdG8gZXZlcnkgaW5kZXggb2YgcmVzdWx0TGlzdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICEocmVzdWx0TGlzdC5sZW5ndGggPT09IG1hcmt1cExpc3QubGVuZ3RoKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdEYW5nZXI6IEV4cGVjdGVkIG1hcmt1cCB0byByZW5kZXIgJXMgbm9kZXMsIGJ1dCByZW5kZXJlZCAlcy4nLCBtYXJrdXBMaXN0Lmxlbmd0aCwgcmVzdWx0TGlzdC5sZW5ndGgpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdExpc3Q7XG4gICAgICB9LFxuICAgICAgZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXA6IGZ1bmN0aW9uKG9sZENoaWxkLCBtYXJrdXApIHtcbiAgICAgICAgIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVuZGVyIG1hcmt1cCBpbiBhICcgKyAnd29ya2VyIHRocmVhZC4gTWFrZSBzdXJlIGB3aW5kb3dgIGFuZCBgZG9jdW1lbnRgIGFyZSBhdmFpbGFibGUgJyArICdnbG9iYWxseSBiZWZvcmUgcmVxdWlyaW5nIFJlYWN0IHdoZW4gdW5pdCB0ZXN0aW5nIG9yIHVzZSAnICsgJ1JlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkgZm9yIHNlcnZlciByZW5kZXJpbmcuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAhbWFya3VwID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IE1pc3NpbmcgbWFya3VwLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgIShvbGRDaGlsZC5ub2RlTmFtZSAhPT0gJ0hUTUwnKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCguLi4pOiBDYW5ub3QgcmVwbGFjZSBtYXJrdXAgb2YgdGhlICcgKyAnPGh0bWw+IG5vZGUuIFRoaXMgaXMgYmVjYXVzZSBicm93c2VyIHF1aXJrcyBtYWtlIHRoaXMgdW5yZWxpYWJsZSAnICsgJ2FuZC9vciBzbG93LiBJZiB5b3Ugd2FudCB0byByZW5kZXIgdG8gdGhlIHJvb3QgeW91IG11c3QgdXNlICcgKyAnc2VydmVyIHJlbmRlcmluZy4gU2VlIFJlYWN0RE9NU2VydmVyLnJlbmRlclRvU3RyaW5nKCkuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBpZiAodHlwZW9mIG1hcmt1cCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB2YXIgbmV3Q2hpbGQgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBlbXB0eUZ1bmN0aW9uKVswXTtcbiAgICAgICAgICBvbGRDaGlsZC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdDaGlsZCwgb2xkQ2hpbGQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIERPTUxhenlUcmVlLnJlcGxhY2VDaGlsZFdpdGhUcmVlKG9sZENoaWxkLCBtYXJrdXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IERhbmdlcjtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNDZcIiwgW1wiNThcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBrZXlNaXJyb3IgPSAkX19yZXF1aXJlKCc1OCcpO1xuICB2YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICAgIElOU0VSVF9NQVJLVVA6IG51bGwsXG4gICAgTU9WRV9FWElTVElORzogbnVsbCxcbiAgICBSRU1PVkVfTk9ERTogbnVsbCxcbiAgICBTRVRfTUFSS1VQOiBudWxsLFxuICAgIFRFWFRfQ09OVEVOVDogbnVsbFxuICB9KTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcztcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIyOVwiLCBbXCI0Y1wiLCBcIjU3XCIsIFwiNDZcIiwgXCIxMVwiLCBcIjI3XCIsIFwiNTlcIiwgXCI1YVwiLCBcIjViXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIERPTUxhenlUcmVlID0gJF9fcmVxdWlyZSgnNGMnKTtcbiAgICB2YXIgRGFuZ2VyID0gJF9fcmVxdWlyZSgnNTcnKTtcbiAgICB2YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSAkX19yZXF1aXJlKCc0NicpO1xuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSAkX19yZXF1aXJlKCcxMScpO1xuICAgIHZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9ICRfX3JlcXVpcmUoJzI3Jyk7XG4gICAgdmFyIGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSAkX19yZXF1aXJlKCc1OScpO1xuICAgIHZhciBzZXRJbm5lckhUTUwgPSAkX19yZXF1aXJlKCc1YScpO1xuICAgIHZhciBzZXRUZXh0Q29udGVudCA9ICRfX3JlcXVpcmUoJzViJyk7XG4gICAgZnVuY3Rpb24gZ2V0Tm9kZUFmdGVyKHBhcmVudE5vZGUsIG5vZGUpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgICAgIG5vZGUgPSBub2RlWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGUgPyBub2RlLm5leHRTaWJsaW5nIDogcGFyZW50Tm9kZS5maXJzdENoaWxkO1xuICAgIH1cbiAgICB2YXIgaW5zZXJ0Q2hpbGRBdCA9IGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24ocGFyZW50Tm9kZSwgY2hpbGROb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShjaGlsZE5vZGUsIHJlZmVyZW5jZU5vZGUpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGluc2VydExhenlUcmVlQ2hpbGRBdChwYXJlbnROb2RlLCBjaGlsZFRyZWUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgICAgIERPTUxhenlUcmVlLmluc2VydFRyZWVCZWZvcmUocGFyZW50Tm9kZSwgY2hpbGRUcmVlLCByZWZlcmVuY2VOb2RlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gbW92ZUNoaWxkKHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGROb2RlKSkge1xuICAgICAgICBtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBjaGlsZE5vZGVbMF0sIGNoaWxkTm9kZVsxXSwgcmVmZXJlbmNlTm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnNlcnRDaGlsZEF0KHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIGNoaWxkTm9kZSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGROb2RlKSkge1xuICAgICAgICB2YXIgY2xvc2luZ0NvbW1lbnQgPSBjaGlsZE5vZGVbMV07XG4gICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZVswXTtcbiAgICAgICAgcmVtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIGNsb3NpbmdDb21tZW50KTtcbiAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjbG9zaW5nQ29tbWVudCk7XG4gICAgICB9XG4gICAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIG9wZW5pbmdDb21tZW50LCBjbG9zaW5nQ29tbWVudCwgcmVmZXJlbmNlTm9kZSkge1xuICAgICAgdmFyIG5vZGUgPSBvcGVuaW5nQ29tbWVudDtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBuZXh0Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIGluc2VydENoaWxkQXQocGFyZW50Tm9kZSwgbm9kZSwgcmVmZXJlbmNlTm9kZSk7XG4gICAgICAgIGlmIChub2RlID09PSBjbG9zaW5nQ29tbWVudCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcmVtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBzdGFydE5vZGUsIGNsb3NpbmdDb21tZW50KSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZS5uZXh0U2libGluZztcbiAgICAgICAgaWYgKG5vZGUgPT09IGNsb3NpbmdDb21tZW50KSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZXBsYWNlRGVsaW1pdGVkVGV4dChvcGVuaW5nQ29tbWVudCwgY2xvc2luZ0NvbW1lbnQsIHN0cmluZ1RleHQpIHtcbiAgICAgIHZhciBwYXJlbnROb2RlID0gb3BlbmluZ0NvbW1lbnQucGFyZW50Tm9kZTtcbiAgICAgIHZhciBub2RlQWZ0ZXJDb21tZW50ID0gb3BlbmluZ0NvbW1lbnQubmV4dFNpYmxpbmc7XG4gICAgICBpZiAobm9kZUFmdGVyQ29tbWVudCA9PT0gY2xvc2luZ0NvbW1lbnQpIHtcbiAgICAgICAgaWYgKHN0cmluZ1RleHQpIHtcbiAgICAgICAgICBpbnNlcnRDaGlsZEF0KHBhcmVudE5vZGUsIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cmluZ1RleHQpLCBub2RlQWZ0ZXJDb21tZW50KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0cmluZ1RleHQpIHtcbiAgICAgICAgICBzZXRUZXh0Q29udGVudChub2RlQWZ0ZXJDb21tZW50LCBzdHJpbmdUZXh0KTtcbiAgICAgICAgICByZW1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIG5vZGVBZnRlckNvbW1lbnQsIGNsb3NpbmdDb21tZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIG9wZW5pbmdDb21tZW50LCBjbG9zaW5nQ29tbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk5hdGl2ZU9wZXJhdGlvbihSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShvcGVuaW5nQ29tbWVudCkuX2RlYnVnSUQsICdyZXBsYWNlIHRleHQnLCBzdHJpbmdUZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwID0gRGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCA9IGZ1bmN0aW9uKG9sZENoaWxkLCBtYXJrdXAsIHByZXZJbnN0YW5jZSkge1xuICAgICAgICBEYW5nZXIuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAob2xkQ2hpbGQsIG1hcmt1cCk7XG4gICAgICAgIGlmIChwcmV2SW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25OYXRpdmVPcGVyYXRpb24ocHJldkluc3RhbmNlLl9kZWJ1Z0lELCAncmVwbGFjZSB3aXRoJywgbWFya3VwLnRvU3RyaW5nKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBuZXh0SW5zdGFuY2UgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShtYXJrdXAubm9kZSk7XG4gICAgICAgICAgaWYgKG5leHRJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKG5leHRJbnN0YW5jZS5fZGVidWdJRCwgJ21vdW50JywgbWFya3VwLnRvU3RyaW5nKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgdmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHtcbiAgICAgIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwOiBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCxcbiAgICAgIHJlcGxhY2VEZWxpbWl0ZWRUZXh0OiByZXBsYWNlRGVsaW1pdGVkVGV4dCxcbiAgICAgIHByb2Nlc3NVcGRhdGVzOiBmdW5jdGlvbihwYXJlbnROb2RlLCB1cGRhdGVzKSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHBhcmVudE5vZGVEZWJ1Z0lEID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUocGFyZW50Tm9kZSkuX2RlYnVnSUQ7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB1cGRhdGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgdmFyIHVwZGF0ZSA9IHVwZGF0ZXNba107XG4gICAgICAgICAgc3dpdGNoICh1cGRhdGUudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5JTlNFUlRfTUFSS1VQOlxuICAgICAgICAgICAgICBpbnNlcnRMYXp5VHJlZUNoaWxkQXQocGFyZW50Tm9kZSwgdXBkYXRlLmNvbnRlbnQsIGdldE5vZGVBZnRlcihwYXJlbnROb2RlLCB1cGRhdGUuYWZ0ZXJOb2RlKSk7XG4gICAgICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKHBhcmVudE5vZGVEZWJ1Z0lELCAnaW5zZXJ0IGNoaWxkJywge1xuICAgICAgICAgICAgICAgICAgdG9JbmRleDogdXBkYXRlLnRvSW5kZXgsXG4gICAgICAgICAgICAgICAgICBjb250ZW50OiB1cGRhdGUuY29udGVudC50b1N0cmluZygpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkc6XG4gICAgICAgICAgICAgIG1vdmVDaGlsZChwYXJlbnROb2RlLCB1cGRhdGUuZnJvbU5vZGUsIGdldE5vZGVBZnRlcihwYXJlbnROb2RlLCB1cGRhdGUuYWZ0ZXJOb2RlKSk7XG4gICAgICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKHBhcmVudE5vZGVEZWJ1Z0lELCAnbW92ZSBjaGlsZCcsIHtcbiAgICAgICAgICAgICAgICAgIGZyb21JbmRleDogdXBkYXRlLmZyb21JbmRleCxcbiAgICAgICAgICAgICAgICAgIHRvSW5kZXg6IHVwZGF0ZS50b0luZGV4XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlNFVF9NQVJLVVA6XG4gICAgICAgICAgICAgIHNldElubmVySFRNTChwYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCk7XG4gICAgICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKHBhcmVudE5vZGVEZWJ1Z0lELCAncmVwbGFjZSBjaGlsZHJlbicsIHVwZGF0ZS5jb250ZW50LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQ6XG4gICAgICAgICAgICAgIHNldFRleHRDb250ZW50KHBhcmVudE5vZGUsIHVwZGF0ZS5jb250ZW50KTtcbiAgICAgICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25OYXRpdmVPcGVyYXRpb24ocGFyZW50Tm9kZURlYnVnSUQsICdyZXBsYWNlIHRleHQnLCB1cGRhdGUuY29udGVudC50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREU6XG4gICAgICAgICAgICAgIHJlbW92ZUNoaWxkKHBhcmVudE5vZGUsIHVwZGF0ZS5mcm9tTm9kZSk7XG4gICAgICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKHBhcmVudE5vZGVEZWJ1Z0lELCAncmVtb3ZlIGNoaWxkJywge2Zyb21JbmRleDogdXBkYXRlLmZyb21JbmRleH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBET01DaGlsZHJlbk9wZXJhdGlvbnM7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjVjXCIsIFtcIjZcIiwgXCIyOVwiLCBcIjRjXCIsIFwiMTFcIiwgXCIyN1wiLCBcIjM5XCIsIFwiMzBcIiwgXCI1MFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBfYXNzaWduID0gJF9fcmVxdWlyZSgnNicpO1xuICAgIHZhciBET01DaGlsZHJlbk9wZXJhdGlvbnMgPSAkX19yZXF1aXJlKCcyOScpO1xuICAgIHZhciBET01MYXp5VHJlZSA9ICRfX3JlcXVpcmUoJzRjJyk7XG4gICAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9ICRfX3JlcXVpcmUoJzExJyk7XG4gICAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gJF9fcmVxdWlyZSgnMjcnKTtcbiAgICB2YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gJF9fcmVxdWlyZSgnMzknKTtcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIgdmFsaWRhdGVET01OZXN0aW5nID0gJF9fcmVxdWlyZSgnNTAnKTtcbiAgICB2YXIgUmVhY3RET01UZXh0Q29tcG9uZW50ID0gZnVuY3Rpb24odGV4dCkge1xuICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSB0ZXh0O1xuICAgICAgdGhpcy5fc3RyaW5nVGV4dCA9ICcnICsgdGV4dDtcbiAgICAgIHRoaXMuX25hdGl2ZU5vZGUgPSBudWxsO1xuICAgICAgdGhpcy5fbmF0aXZlUGFyZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2RvbUlEID0gbnVsbDtcbiAgICAgIHRoaXMuX21vdW50SW5kZXggPSAwO1xuICAgICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fY29tbWVudE5vZGVzID0gbnVsbDtcbiAgICB9O1xuICAgIF9hc3NpZ24oUmVhY3RET01UZXh0Q29tcG9uZW50LnByb3RvdHlwZSwge1xuICAgICAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBuYXRpdmVQYXJlbnQsIG5hdGl2ZUNvbnRhaW5lckluZm8sIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRUZXh0KHRoaXMuX2RlYnVnSUQsIHRoaXMuX3N0cmluZ1RleHQpO1xuICAgICAgICAgIHZhciBwYXJlbnRJbmZvO1xuICAgICAgICAgIGlmIChuYXRpdmVQYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgcGFyZW50SW5mbyA9IG5hdGl2ZVBhcmVudC5fYW5jZXN0b3JJbmZvO1xuICAgICAgICAgIH0gZWxzZSBpZiAobmF0aXZlQ29udGFpbmVySW5mbyAhPSBudWxsKSB7XG4gICAgICAgICAgICBwYXJlbnRJbmZvID0gbmF0aXZlQ29udGFpbmVySW5mby5fYW5jZXN0b3JJbmZvO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyZW50SW5mbykge1xuICAgICAgICAgICAgdmFsaWRhdGVET01OZXN0aW5nKCcjdGV4dCcsIHRoaXMsIHBhcmVudEluZm8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgZG9tSUQgPSBuYXRpdmVDb250YWluZXJJbmZvLl9pZENvdW50ZXIrKztcbiAgICAgICAgdmFyIG9wZW5pbmdWYWx1ZSA9ICcgcmVhY3QtdGV4dDogJyArIGRvbUlEICsgJyAnO1xuICAgICAgICB2YXIgY2xvc2luZ1ZhbHVlID0gJyAvcmVhY3QtdGV4dCAnO1xuICAgICAgICB0aGlzLl9kb21JRCA9IGRvbUlEO1xuICAgICAgICB0aGlzLl9uYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgICAgICAgdmFyIG93bmVyRG9jdW1lbnQgPSBuYXRpdmVDb250YWluZXJJbmZvLl9vd25lckRvY3VtZW50O1xuICAgICAgICAgIHZhciBvcGVuaW5nQ29tbWVudCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlQ29tbWVudChvcGVuaW5nVmFsdWUpO1xuICAgICAgICAgIHZhciBjbG9zaW5nQ29tbWVudCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlQ29tbWVudChjbG9zaW5nVmFsdWUpO1xuICAgICAgICAgIHZhciBsYXp5VHJlZSA9IERPTUxhenlUcmVlKG93bmVyRG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpKTtcbiAgICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBET01MYXp5VHJlZShvcGVuaW5nQ29tbWVudCkpO1xuICAgICAgICAgIGlmICh0aGlzLl9zdHJpbmdUZXh0KSB7XG4gICAgICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBET01MYXp5VHJlZShvd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuX3N0cmluZ1RleHQpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIERPTUxhenlUcmVlLnF1ZXVlQ2hpbGQobGF6eVRyZWUsIERPTUxhenlUcmVlKGNsb3NpbmdDb21tZW50KSk7XG4gICAgICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZSh0aGlzLCBvcGVuaW5nQ29tbWVudCk7XG4gICAgICAgICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBjbG9zaW5nQ29tbWVudDtcbiAgICAgICAgICByZXR1cm4gbGF6eVRyZWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGVzY2FwZWRUZXh0ID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRoaXMuX3N0cmluZ1RleHQpO1xuICAgICAgICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgICAgICAgcmV0dXJuIGVzY2FwZWRUZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gJzwhLS0nICsgb3BlbmluZ1ZhbHVlICsgJy0tPicgKyBlc2NhcGVkVGV4dCArICc8IS0tJyArIGNsb3NpbmdWYWx1ZSArICctLT4nO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24obmV4dFRleHQsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIGlmIChuZXh0VGV4dCAhPT0gdGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRUZXh0O1xuICAgICAgICAgIHZhciBuZXh0U3RyaW5nVGV4dCA9ICcnICsgbmV4dFRleHQ7XG4gICAgICAgICAgaWYgKG5leHRTdHJpbmdUZXh0ICE9PSB0aGlzLl9zdHJpbmdUZXh0KSB7XG4gICAgICAgICAgICB0aGlzLl9zdHJpbmdUZXh0ID0gbmV4dFN0cmluZ1RleHQ7XG4gICAgICAgICAgICB2YXIgY29tbWVudE5vZGVzID0gdGhpcy5nZXROYXRpdmVOb2RlKCk7XG4gICAgICAgICAgICBET01DaGlsZHJlbk9wZXJhdGlvbnMucmVwbGFjZURlbGltaXRlZFRleHQoY29tbWVudE5vZGVzWzBdLCBjb21tZW50Tm9kZXNbMV0sIG5leHRTdHJpbmdUZXh0KTtcbiAgICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldFRleHQodGhpcy5fZGVidWdJRCwgbmV4dFN0cmluZ1RleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldE5hdGl2ZU5vZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbmF0aXZlTm9kZSA9IHRoaXMuX2NvbW1lbnROb2RlcztcbiAgICAgICAgaWYgKG5hdGl2ZU5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gbmF0aXZlTm9kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX2Nsb3NpbmdDb21tZW50KSB7XG4gICAgICAgICAgdmFyIG9wZW5pbmdDb21tZW50ID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UodGhpcyk7XG4gICAgICAgICAgdmFyIG5vZGUgPSBvcGVuaW5nQ29tbWVudC5uZXh0U2libGluZztcbiAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgIShub2RlICE9IG51bGwpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01pc3NpbmcgY2xvc2luZyBjb21tZW50IGZvciB0ZXh0IGNvbXBvbmVudCAlcycsIHRoaXMuX2RvbUlEKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAmJiBub2RlLm5vZGVWYWx1ZSA9PT0gJyAvcmVhY3QtdGV4dCAnKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2Nsb3NpbmdDb21tZW50ID0gbm9kZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbmF0aXZlTm9kZSA9IFt0aGlzLl9uYXRpdmVOb2RlLCB0aGlzLl9jbG9zaW5nQ29tbWVudF07XG4gICAgICAgIHRoaXMuX2NvbW1lbnROb2RlcyA9IG5hdGl2ZU5vZGU7XG4gICAgICAgIHJldHVybiBuYXRpdmVOb2RlO1xuICAgICAgfSxcbiAgICAgIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl9jbG9zaW5nQ29tbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NvbW1lbnROb2RlcyA9IG51bGw7XG4gICAgICAgIFJlYWN0RE9NQ29tcG9uZW50VHJlZS51bmNhY2hlTm9kZSh0aGlzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dENvbXBvbmVudDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNWRcIiwgW1wiNlwiLCBcIjEyXCIsIFwiNGFcIiwgXCI0OFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIF9hc3NpZ24gPSAkX19yZXF1aXJlKCc2Jyk7XG4gIHZhciBSZWFjdFVwZGF0ZXMgPSAkX19yZXF1aXJlKCcxMicpO1xuICB2YXIgVHJhbnNhY3Rpb24gPSAkX19yZXF1aXJlKCc0YScpO1xuICB2YXIgZW1wdHlGdW5jdGlvbiA9ICRfX3JlcXVpcmUoJzQ4Jyk7XG4gIHZhciBSRVNFVF9CQVRDSEVEX1VQREFURVMgPSB7XG4gICAgaW5pdGlhbGl6ZTogZW1wdHlGdW5jdGlvbixcbiAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG4gICAgfVxuICB9O1xuICB2YXIgRkxVU0hfQkFUQ0hFRF9VUERBVEVTID0ge1xuICAgIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gICAgY2xvc2U6IFJlYWN0VXBkYXRlcy5mbHVzaEJhdGNoZWRVcGRhdGVzLmJpbmQoUmVhY3RVcGRhdGVzKVxuICB9O1xuICB2YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbRkxVU0hfQkFUQ0hFRF9VUERBVEVTLCBSRVNFVF9CQVRDSEVEX1VQREFURVNdO1xuICBmdW5jdGlvbiBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKSB7XG4gICAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICB9XG4gIF9hc3NpZ24oUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneVRyYW5zYWN0aW9uLnByb3RvdHlwZSwgVHJhbnNhY3Rpb24uTWl4aW4sIHtnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgICB9fSk7XG4gIHZhciB0cmFuc2FjdGlvbiA9IG5ldyBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24oKTtcbiAgdmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSB7XG4gICAgaXNCYXRjaGluZ1VwZGF0ZXM6IGZhbHNlLFxuICAgIGJhdGNoZWRVcGRhdGVzOiBmdW5jdGlvbihjYWxsYmFjaywgYSwgYiwgYywgZCwgZSkge1xuICAgICAgdmFyIGFscmVhZHlCYXRjaGluZ1VwZGF0ZXMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzO1xuICAgICAgUmVhY3REZWZhdWx0QmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9IHRydWU7XG4gICAgICBpZiAoYWxyZWFkeUJhdGNoaW5nVXBkYXRlcykge1xuICAgICAgICBjYWxsYmFjayhhLCBiLCBjLCBkLCBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0oY2FsbGJhY2ssIG51bGwsIGEsIGIsIGMsIGQsIGUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjVlXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBmdW5jdGlvbiBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbihzY3JvbGxhYmxlKSB7XG4gICAgaWYgKHNjcm9sbGFibGUgPT09IHdpbmRvdykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgICB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHNjcm9sbGFibGUuc2Nyb2xsTGVmdCxcbiAgICAgIHk6IHNjcm9sbGFibGUuc2Nyb2xsVG9wXG4gICAgfTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjVmXCIsIFtcIjZcIiwgXCI2MFwiLCBcImRcIiwgXCI0XCIsIFwiMTFcIiwgXCIxMlwiLCBcIjEzXCIsIFwiNWVcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgX2Fzc2lnbiA9ICRfX3JlcXVpcmUoJzYnKTtcbiAgICB2YXIgRXZlbnRMaXN0ZW5lciA9ICRfX3JlcXVpcmUoJzYwJyk7XG4gICAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gJF9fcmVxdWlyZSgnZCcpO1xuICAgIHZhciBQb29sZWRDbGFzcyA9ICRfX3JlcXVpcmUoJzQnKTtcbiAgICB2YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gJF9fcmVxdWlyZSgnMTEnKTtcbiAgICB2YXIgUmVhY3RVcGRhdGVzID0gJF9fcmVxdWlyZSgnMTInKTtcbiAgICB2YXIgZ2V0RXZlbnRUYXJnZXQgPSAkX19yZXF1aXJlKCcxMycpO1xuICAgIHZhciBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiA9ICRfX3JlcXVpcmUoJzVlJyk7XG4gICAgZnVuY3Rpb24gZmluZFBhcmVudChpbnN0KSB7XG4gICAgICB3aGlsZSAoaW5zdC5fbmF0aXZlUGFyZW50KSB7XG4gICAgICAgIGluc3QgPSBpbnN0Ll9uYXRpdmVQYXJlbnQ7XG4gICAgICB9XG4gICAgICB2YXIgcm9vdE5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgICAgIHZhciBjb250YWluZXIgPSByb290Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgcmV0dXJuIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShjb250YWluZXIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAgICAgdGhpcy50b3BMZXZlbFR5cGUgPSB0b3BMZXZlbFR5cGU7XG4gICAgICB0aGlzLm5hdGl2ZUV2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gICAgICB0aGlzLmFuY2VzdG9ycyA9IFtdO1xuICAgIH1cbiAgICBfYXNzaWduKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5wcm90b3R5cGUsIHtkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy50b3BMZXZlbFR5cGUgPSBudWxsO1xuICAgICAgICB0aGlzLm5hdGl2ZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5hbmNlc3RvcnMubGVuZ3RoID0gMDtcbiAgICAgIH19KTtcbiAgICBQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLCBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlcik7XG4gICAgZnVuY3Rpb24gaGFuZGxlVG9wTGV2ZWxJbXBsKGJvb2tLZWVwaW5nKSB7XG4gICAgICB2YXIgbmF0aXZlRXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCk7XG4gICAgICB2YXIgdGFyZ2V0SW5zdCA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB0YXJnZXRJbnN0O1xuICAgICAgZG8ge1xuICAgICAgICBib29rS2VlcGluZy5hbmNlc3RvcnMucHVzaChhbmNlc3Rvcik7XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IgJiYgZmluZFBhcmVudChhbmNlc3Rvcik7XG4gICAgICB9IHdoaWxlIChhbmNlc3Rvcik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvb2tLZWVwaW5nLmFuY2VzdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0YXJnZXRJbnN0ID0gYm9va0tlZXBpbmcuYW5jZXN0b3JzW2ldO1xuICAgICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsKGJvb2tLZWVwaW5nLnRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgYm9va0tlZXBpbmcubmF0aXZlRXZlbnQsIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNjcm9sbFZhbHVlTW9uaXRvcihjYikge1xuICAgICAgdmFyIHNjcm9sbFBvc2l0aW9uID0gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24od2luZG93KTtcbiAgICAgIGNiKHNjcm9sbFBvc2l0aW9uKTtcbiAgICB9XG4gICAgdmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9IHtcbiAgICAgIF9lbmFibGVkOiB0cnVlLFxuICAgICAgX2hhbmRsZVRvcExldmVsOiBudWxsLFxuICAgICAgV0lORE9XX0hBTkRMRTogRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gd2luZG93IDogbnVsbCxcbiAgICAgIHNldEhhbmRsZVRvcExldmVsOiBmdW5jdGlvbihoYW5kbGVUb3BMZXZlbCkge1xuICAgICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsID0gaGFuZGxlVG9wTGV2ZWw7XG4gICAgICB9LFxuICAgICAgc2V0RW5hYmxlZDogZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQgPSAhIWVuYWJsZWQ7XG4gICAgICB9LFxuICAgICAgaXNFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZDtcbiAgICAgIH0sXG4gICAgICB0cmFwQnViYmxlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gaGFuZGxlO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5saXN0ZW4oZWxlbWVudCwgaGFuZGxlckJhc2VOYW1lLCBSZWFjdEV2ZW50TGlzdGVuZXIuZGlzcGF0Y2hFdmVudC5iaW5kKG51bGwsIHRvcExldmVsVHlwZSkpO1xuICAgICAgfSxcbiAgICAgIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gaGFuZGxlO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gRXZlbnRMaXN0ZW5lci5jYXB0dXJlKGVsZW1lbnQsIGhhbmRsZXJCYXNlTmFtZSwgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpKTtcbiAgICAgIH0sXG4gICAgICBtb25pdG9yU2Nyb2xsVmFsdWU6IGZ1bmN0aW9uKHJlZnJlc2gpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gc2Nyb2xsVmFsdWVNb25pdG9yLmJpbmQobnVsbCwgcmVmcmVzaCk7XG4gICAgICAgIEV2ZW50TGlzdGVuZXIubGlzdGVuKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGxiYWNrKTtcbiAgICAgIH0sXG4gICAgICBkaXNwYXRjaEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gICAgICAgIGlmICghUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBib29rS2VlcGluZyA9IFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5nZXRQb29sZWQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKGhhbmRsZVRvcExldmVsSW1wbCwgYm9va0tlZXBpbmcpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5yZWxlYXNlKGJvb2tLZWVwaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdEV2ZW50TGlzdGVuZXI7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjYxXCIsIFtcIjFiXCIsIFwiMTBcIiwgXCI2MlwiLCBcIjQ1XCIsIFwiNjNcIiwgXCI2NFwiLCBcIjRlXCIsIFwiNjVcIiwgXCIxMlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIERPTVByb3BlcnR5ID0gJF9fcmVxdWlyZSgnMWInKTtcbiAgdmFyIEV2ZW50UGx1Z2luSHViID0gJF9fcmVxdWlyZSgnMTAnKTtcbiAgdmFyIEV2ZW50UGx1Z2luVXRpbHMgPSAkX19yZXF1aXJlKCc2MicpO1xuICB2YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9ICRfX3JlcXVpcmUoJzQ1Jyk7XG4gIHZhciBSZWFjdENsYXNzID0gJF9fcmVxdWlyZSgnNjMnKTtcbiAgdmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSAkX19yZXF1aXJlKCc2NCcpO1xuICB2YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gJF9fcmVxdWlyZSgnNGUnKTtcbiAgdmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gJF9fcmVxdWlyZSgnNjUnKTtcbiAgdmFyIFJlYWN0VXBkYXRlcyA9ICRfX3JlcXVpcmUoJzEyJyk7XG4gIHZhciBSZWFjdEluamVjdGlvbiA9IHtcbiAgICBDb21wb25lbnQ6IFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQuaW5qZWN0aW9uLFxuICAgIENsYXNzOiBSZWFjdENsYXNzLmluamVjdGlvbixcbiAgICBET01Qcm9wZXJ0eTogRE9NUHJvcGVydHkuaW5qZWN0aW9uLFxuICAgIEVtcHR5Q29tcG9uZW50OiBSZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbixcbiAgICBFdmVudFBsdWdpbkh1YjogRXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLFxuICAgIEV2ZW50UGx1Z2luVXRpbHM6IEV2ZW50UGx1Z2luVXRpbHMuaW5qZWN0aW9uLFxuICAgIEV2ZW50RW1pdHRlcjogUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmluamVjdGlvbixcbiAgICBOYXRpdmVDb21wb25lbnQ6IFJlYWN0TmF0aXZlQ29tcG9uZW50LmluamVjdGlvbixcbiAgICBVcGRhdGVzOiBSZWFjdFVwZGF0ZXMuaW5qZWN0aW9uXG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RJbmplY3Rpb247XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNjZcIiwgW1wiNlwiLCBcIjY3XCIsIFwiNFwiLCBcIjRlXCIsIFwiNjhcIiwgXCI0YVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIF9hc3NpZ24gPSAkX19yZXF1aXJlKCc2Jyk7XG4gIHZhciBDYWxsYmFja1F1ZXVlID0gJF9fcmVxdWlyZSgnNjcnKTtcbiAgdmFyIFBvb2xlZENsYXNzID0gJF9fcmVxdWlyZSgnNCcpO1xuICB2YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gJF9fcmVxdWlyZSgnNGUnKTtcbiAgdmFyIFJlYWN0SW5wdXRTZWxlY3Rpb24gPSAkX19yZXF1aXJlKCc2OCcpO1xuICB2YXIgVHJhbnNhY3Rpb24gPSAkX19yZXF1aXJlKCc0YScpO1xuICB2YXIgU0VMRUNUSU9OX1JFU1RPUkFUSU9OID0ge1xuICAgIGluaXRpYWxpemU6IFJlYWN0SW5wdXRTZWxlY3Rpb24uZ2V0U2VsZWN0aW9uSW5mb3JtYXRpb24sXG4gICAgY2xvc2U6IFJlYWN0SW5wdXRTZWxlY3Rpb24ucmVzdG9yZVNlbGVjdGlvblxuICB9O1xuICB2YXIgRVZFTlRfU1VQUFJFU1NJT04gPSB7XG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY3VycmVudGx5RW5hYmxlZCA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pc0VuYWJsZWQoKTtcbiAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zZXRFbmFibGVkKGZhbHNlKTtcbiAgICAgIHJldHVybiBjdXJyZW50bHlFbmFibGVkO1xuICAgIH0sXG4gICAgY2xvc2U6IGZ1bmN0aW9uKHByZXZpb3VzbHlFbmFibGVkKSB7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChwcmV2aW91c2x5RW5hYmxlZCk7XG4gICAgfVxuICB9O1xuICB2YXIgT05fRE9NX1JFQURZX1FVRVVFSU5HID0ge1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucmVzZXQoKTtcbiAgICB9LFxuICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMucmVhY3RNb3VudFJlYWR5Lm5vdGlmeUFsbCgpO1xuICAgIH1cbiAgfTtcbiAgdmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW1NFTEVDVElPTl9SRVNUT1JBVElPTiwgRVZFTlRfU1VQUFJFU1NJT04sIE9OX0RPTV9SRUFEWV9RVUVVRUlOR107XG4gIGZ1bmN0aW9uIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24odXNlQ3JlYXRlRWxlbWVudCkge1xuICAgIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgICB0aGlzLnJlbmRlclRvU3RhdGljTWFya3VwID0gZmFsc2U7XG4gICAgdGhpcy5yZWFjdE1vdW50UmVhZHkgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZChudWxsKTtcbiAgICB0aGlzLnVzZUNyZWF0ZUVsZW1lbnQgPSB1c2VDcmVhdGVFbGVtZW50O1xuICB9XG4gIHZhciBNaXhpbiA9IHtcbiAgICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgICB9LFxuICAgIGdldFJlYWN0TW91bnRSZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHk7XG4gICAgfSxcbiAgICBjaGVja3BvaW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlYWN0TW91bnRSZWFkeS5jaGVja3BvaW50KCk7XG4gICAgfSxcbiAgICByb2xsYmFjazogZnVuY3Rpb24oY2hlY2twb2ludCkge1xuICAgICAgdGhpcy5yZWFjdE1vdW50UmVhZHkucm9sbGJhY2soY2hlY2twb2ludCk7XG4gICAgfSxcbiAgICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgIENhbGxiYWNrUXVldWUucmVsZWFzZSh0aGlzLnJlYWN0TW91bnRSZWFkeSk7XG4gICAgICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IG51bGw7XG4gICAgfVxuICB9O1xuICBfYXNzaWduKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwgTWl4aW4pO1xuICBQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI2OVwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIE5TID0ge1xuICAgIHhsaW5rOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsXG4gICAgeG1sOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJ1xuICB9O1xuICB2YXIgQVRUUlMgPSB7XG4gICAgYWNjZW50SGVpZ2h0OiAnYWNjZW50LWhlaWdodCcsXG4gICAgYWNjdW11bGF0ZTogMCxcbiAgICBhZGRpdGl2ZTogMCxcbiAgICBhbGlnbm1lbnRCYXNlbGluZTogJ2FsaWdubWVudC1iYXNlbGluZScsXG4gICAgYWxsb3dSZW9yZGVyOiAnYWxsb3dSZW9yZGVyJyxcbiAgICBhbHBoYWJldGljOiAwLFxuICAgIGFtcGxpdHVkZTogMCxcbiAgICBhcmFiaWNGb3JtOiAnYXJhYmljLWZvcm0nLFxuICAgIGFzY2VudDogMCxcbiAgICBhdHRyaWJ1dGVOYW1lOiAnYXR0cmlidXRlTmFtZScsXG4gICAgYXR0cmlidXRlVHlwZTogJ2F0dHJpYnV0ZVR5cGUnLFxuICAgIGF1dG9SZXZlcnNlOiAnYXV0b1JldmVyc2UnLFxuICAgIGF6aW11dGg6IDAsXG4gICAgYmFzZUZyZXF1ZW5jeTogJ2Jhc2VGcmVxdWVuY3knLFxuICAgIGJhc2VQcm9maWxlOiAnYmFzZVByb2ZpbGUnLFxuICAgIGJhc2VsaW5lU2hpZnQ6ICdiYXNlbGluZS1zaGlmdCcsXG4gICAgYmJveDogMCxcbiAgICBiZWdpbjogMCxcbiAgICBiaWFzOiAwLFxuICAgIGJ5OiAwLFxuICAgIGNhbGNNb2RlOiAnY2FsY01vZGUnLFxuICAgIGNhcEhlaWdodDogJ2NhcC1oZWlnaHQnLFxuICAgIGNsaXA6IDAsXG4gICAgY2xpcFBhdGg6ICdjbGlwLXBhdGgnLFxuICAgIGNsaXBSdWxlOiAnY2xpcC1ydWxlJyxcbiAgICBjbGlwUGF0aFVuaXRzOiAnY2xpcFBhdGhVbml0cycsXG4gICAgY29sb3JJbnRlcnBvbGF0aW9uOiAnY29sb3ItaW50ZXJwb2xhdGlvbicsXG4gICAgY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyczogJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsXG4gICAgY29sb3JQcm9maWxlOiAnY29sb3ItcHJvZmlsZScsXG4gICAgY29sb3JSZW5kZXJpbmc6ICdjb2xvci1yZW5kZXJpbmcnLFxuICAgIGNvbnRlbnRTY3JpcHRUeXBlOiAnY29udGVudFNjcmlwdFR5cGUnLFxuICAgIGNvbnRlbnRTdHlsZVR5cGU6ICdjb250ZW50U3R5bGVUeXBlJyxcbiAgICBjdXJzb3I6IDAsXG4gICAgY3g6IDAsXG4gICAgY3k6IDAsXG4gICAgZDogMCxcbiAgICBkZWNlbGVyYXRlOiAwLFxuICAgIGRlc2NlbnQ6IDAsXG4gICAgZGlmZnVzZUNvbnN0YW50OiAnZGlmZnVzZUNvbnN0YW50JyxcbiAgICBkaXJlY3Rpb246IDAsXG4gICAgZGlzcGxheTogMCxcbiAgICBkaXZpc29yOiAwLFxuICAgIGRvbWluYW50QmFzZWxpbmU6ICdkb21pbmFudC1iYXNlbGluZScsXG4gICAgZHVyOiAwLFxuICAgIGR4OiAwLFxuICAgIGR5OiAwLFxuICAgIGVkZ2VNb2RlOiAnZWRnZU1vZGUnLFxuICAgIGVsZXZhdGlvbjogMCxcbiAgICBlbmFibGVCYWNrZ3JvdW5kOiAnZW5hYmxlLWJhY2tncm91bmQnLFxuICAgIGVuZDogMCxcbiAgICBleHBvbmVudDogMCxcbiAgICBleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOiAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsXG4gICAgZmlsbDogMCxcbiAgICBmaWxsT3BhY2l0eTogJ2ZpbGwtb3BhY2l0eScsXG4gICAgZmlsbFJ1bGU6ICdmaWxsLXJ1bGUnLFxuICAgIGZpbHRlcjogMCxcbiAgICBmaWx0ZXJSZXM6ICdmaWx0ZXJSZXMnLFxuICAgIGZpbHRlclVuaXRzOiAnZmlsdGVyVW5pdHMnLFxuICAgIGZsb29kQ29sb3I6ICdmbG9vZC1jb2xvcicsXG4gICAgZmxvb2RPcGFjaXR5OiAnZmxvb2Qtb3BhY2l0eScsXG4gICAgZm9jdXNhYmxlOiAwLFxuICAgIGZvbnRGYW1pbHk6ICdmb250LWZhbWlseScsXG4gICAgZm9udFNpemU6ICdmb250LXNpemUnLFxuICAgIGZvbnRTaXplQWRqdXN0OiAnZm9udC1zaXplLWFkanVzdCcsXG4gICAgZm9udFN0cmV0Y2g6ICdmb250LXN0cmV0Y2gnLFxuICAgIGZvbnRTdHlsZTogJ2ZvbnQtc3R5bGUnLFxuICAgIGZvbnRWYXJpYW50OiAnZm9udC12YXJpYW50JyxcbiAgICBmb250V2VpZ2h0OiAnZm9udC13ZWlnaHQnLFxuICAgIGZvcm1hdDogMCxcbiAgICBmcm9tOiAwLFxuICAgIGZ4OiAwLFxuICAgIGZ5OiAwLFxuICAgIGcxOiAwLFxuICAgIGcyOiAwLFxuICAgIGdseXBoTmFtZTogJ2dseXBoLW5hbWUnLFxuICAgIGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsOiAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCcsXG4gICAgZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsOiAnZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwnLFxuICAgIGdseXBoUmVmOiAnZ2x5cGhSZWYnLFxuICAgIGdyYWRpZW50VHJhbnNmb3JtOiAnZ3JhZGllbnRUcmFuc2Zvcm0nLFxuICAgIGdyYWRpZW50VW5pdHM6ICdncmFkaWVudFVuaXRzJyxcbiAgICBoYW5naW5nOiAwLFxuICAgIGhvcml6QWR2WDogJ2hvcml6LWFkdi14JyxcbiAgICBob3Jpek9yaWdpblg6ICdob3Jpei1vcmlnaW4teCcsXG4gICAgaWRlb2dyYXBoaWM6IDAsXG4gICAgaW1hZ2VSZW5kZXJpbmc6ICdpbWFnZS1yZW5kZXJpbmcnLFxuICAgICdpbic6IDAsXG4gICAgaW4yOiAwLFxuICAgIGludGVyY2VwdDogMCxcbiAgICBrOiAwLFxuICAgIGsxOiAwLFxuICAgIGsyOiAwLFxuICAgIGszOiAwLFxuICAgIGs0OiAwLFxuICAgIGtlcm5lbE1hdHJpeDogJ2tlcm5lbE1hdHJpeCcsXG4gICAga2VybmVsVW5pdExlbmd0aDogJ2tlcm5lbFVuaXRMZW5ndGgnLFxuICAgIGtlcm5pbmc6IDAsXG4gICAga2V5UG9pbnRzOiAna2V5UG9pbnRzJyxcbiAgICBrZXlTcGxpbmVzOiAna2V5U3BsaW5lcycsXG4gICAga2V5VGltZXM6ICdrZXlUaW1lcycsXG4gICAgbGVuZ3RoQWRqdXN0OiAnbGVuZ3RoQWRqdXN0JyxcbiAgICBsZXR0ZXJTcGFjaW5nOiAnbGV0dGVyLXNwYWNpbmcnLFxuICAgIGxpZ2h0aW5nQ29sb3I6ICdsaWdodGluZy1jb2xvcicsXG4gICAgbGltaXRpbmdDb25lQW5nbGU6ICdsaW1pdGluZ0NvbmVBbmdsZScsXG4gICAgbG9jYWw6IDAsXG4gICAgbWFya2VyRW5kOiAnbWFya2VyLWVuZCcsXG4gICAgbWFya2VyTWlkOiAnbWFya2VyLW1pZCcsXG4gICAgbWFya2VyU3RhcnQ6ICdtYXJrZXItc3RhcnQnLFxuICAgIG1hcmtlckhlaWdodDogJ21hcmtlckhlaWdodCcsXG4gICAgbWFya2VyVW5pdHM6ICdtYXJrZXJVbml0cycsXG4gICAgbWFya2VyV2lkdGg6ICdtYXJrZXJXaWR0aCcsXG4gICAgbWFzazogMCxcbiAgICBtYXNrQ29udGVudFVuaXRzOiAnbWFza0NvbnRlbnRVbml0cycsXG4gICAgbWFza1VuaXRzOiAnbWFza1VuaXRzJyxcbiAgICBtYXRoZW1hdGljYWw6IDAsXG4gICAgbW9kZTogMCxcbiAgICBudW1PY3RhdmVzOiAnbnVtT2N0YXZlcycsXG4gICAgb2Zmc2V0OiAwLFxuICAgIG9wYWNpdHk6IDAsXG4gICAgb3BlcmF0b3I6IDAsXG4gICAgb3JkZXI6IDAsXG4gICAgb3JpZW50OiAwLFxuICAgIG9yaWVudGF0aW9uOiAwLFxuICAgIG9yaWdpbjogMCxcbiAgICBvdmVyZmxvdzogMCxcbiAgICBvdmVybGluZVBvc2l0aW9uOiAnb3ZlcmxpbmUtcG9zaXRpb24nLFxuICAgIG92ZXJsaW5lVGhpY2tuZXNzOiAnb3ZlcmxpbmUtdGhpY2tuZXNzJyxcbiAgICBwYWludE9yZGVyOiAncGFpbnQtb3JkZXInLFxuICAgIHBhbm9zZTE6ICdwYW5vc2UtMScsXG4gICAgcGF0aExlbmd0aDogJ3BhdGhMZW5ndGgnLFxuICAgIHBhdHRlcm5Db250ZW50VW5pdHM6ICdwYXR0ZXJuQ29udGVudFVuaXRzJyxcbiAgICBwYXR0ZXJuVHJhbnNmb3JtOiAncGF0dGVyblRyYW5zZm9ybScsXG4gICAgcGF0dGVyblVuaXRzOiAncGF0dGVyblVuaXRzJyxcbiAgICBwb2ludGVyRXZlbnRzOiAncG9pbnRlci1ldmVudHMnLFxuICAgIHBvaW50czogMCxcbiAgICBwb2ludHNBdFg6ICdwb2ludHNBdFgnLFxuICAgIHBvaW50c0F0WTogJ3BvaW50c0F0WScsXG4gICAgcG9pbnRzQXRaOiAncG9pbnRzQXRaJyxcbiAgICBwcmVzZXJ2ZUFscGhhOiAncHJlc2VydmVBbHBoYScsXG4gICAgcHJlc2VydmVBc3BlY3RSYXRpbzogJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLFxuICAgIHByaW1pdGl2ZVVuaXRzOiAncHJpbWl0aXZlVW5pdHMnLFxuICAgIHI6IDAsXG4gICAgcmFkaXVzOiAwLFxuICAgIHJlZlg6ICdyZWZYJyxcbiAgICByZWZZOiAncmVmWScsXG4gICAgcmVuZGVyaW5nSW50ZW50OiAncmVuZGVyaW5nLWludGVudCcsXG4gICAgcmVwZWF0Q291bnQ6ICdyZXBlYXRDb3VudCcsXG4gICAgcmVwZWF0RHVyOiAncmVwZWF0RHVyJyxcbiAgICByZXF1aXJlZEV4dGVuc2lvbnM6ICdyZXF1aXJlZEV4dGVuc2lvbnMnLFxuICAgIHJlcXVpcmVkRmVhdHVyZXM6ICdyZXF1aXJlZEZlYXR1cmVzJyxcbiAgICByZXN0YXJ0OiAwLFxuICAgIHJlc3VsdDogMCxcbiAgICByb3RhdGU6IDAsXG4gICAgcng6IDAsXG4gICAgcnk6IDAsXG4gICAgc2NhbGU6IDAsXG4gICAgc2VlZDogMCxcbiAgICBzaGFwZVJlbmRlcmluZzogJ3NoYXBlLXJlbmRlcmluZycsXG4gICAgc2xvcGU6IDAsXG4gICAgc3BhY2luZzogMCxcbiAgICBzcGVjdWxhckNvbnN0YW50OiAnc3BlY3VsYXJDb25zdGFudCcsXG4gICAgc3BlY3VsYXJFeHBvbmVudDogJ3NwZWN1bGFyRXhwb25lbnQnLFxuICAgIHNwZWVkOiAwLFxuICAgIHNwcmVhZE1ldGhvZDogJ3NwcmVhZE1ldGhvZCcsXG4gICAgc3RhcnRPZmZzZXQ6ICdzdGFydE9mZnNldCcsXG4gICAgc3RkRGV2aWF0aW9uOiAnc3RkRGV2aWF0aW9uJyxcbiAgICBzdGVtaDogMCxcbiAgICBzdGVtdjogMCxcbiAgICBzdGl0Y2hUaWxlczogJ3N0aXRjaFRpbGVzJyxcbiAgICBzdG9wQ29sb3I6ICdzdG9wLWNvbG9yJyxcbiAgICBzdG9wT3BhY2l0eTogJ3N0b3Atb3BhY2l0eScsXG4gICAgc3RyaWtldGhyb3VnaFBvc2l0aW9uOiAnc3RyaWtldGhyb3VnaC1wb3NpdGlvbicsXG4gICAgc3RyaWtldGhyb3VnaFRoaWNrbmVzczogJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJyxcbiAgICBzdHJpbmc6IDAsXG4gICAgc3Ryb2tlOiAwLFxuICAgIHN0cm9rZURhc2hhcnJheTogJ3N0cm9rZS1kYXNoYXJyYXknLFxuICAgIHN0cm9rZURhc2hvZmZzZXQ6ICdzdHJva2UtZGFzaG9mZnNldCcsXG4gICAgc3Ryb2tlTGluZWNhcDogJ3N0cm9rZS1saW5lY2FwJyxcbiAgICBzdHJva2VMaW5lam9pbjogJ3N0cm9rZS1saW5lam9pbicsXG4gICAgc3Ryb2tlTWl0ZXJsaW1pdDogJ3N0cm9rZS1taXRlcmxpbWl0JyxcbiAgICBzdHJva2VPcGFjaXR5OiAnc3Ryb2tlLW9wYWNpdHknLFxuICAgIHN0cm9rZVdpZHRoOiAnc3Ryb2tlLXdpZHRoJyxcbiAgICBzdXJmYWNlU2NhbGU6ICdzdXJmYWNlU2NhbGUnLFxuICAgIHN5c3RlbUxhbmd1YWdlOiAnc3lzdGVtTGFuZ3VhZ2UnLFxuICAgIHRhYmxlVmFsdWVzOiAndGFibGVWYWx1ZXMnLFxuICAgIHRhcmdldFg6ICd0YXJnZXRYJyxcbiAgICB0YXJnZXRZOiAndGFyZ2V0WScsXG4gICAgdGV4dEFuY2hvcjogJ3RleHQtYW5jaG9yJyxcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ3RleHQtZGVjb3JhdGlvbicsXG4gICAgdGV4dFJlbmRlcmluZzogJ3RleHQtcmVuZGVyaW5nJyxcbiAgICB0ZXh0TGVuZ3RoOiAndGV4dExlbmd0aCcsXG4gICAgdG86IDAsXG4gICAgdHJhbnNmb3JtOiAwLFxuICAgIHUxOiAwLFxuICAgIHUyOiAwLFxuICAgIHVuZGVybGluZVBvc2l0aW9uOiAndW5kZXJsaW5lLXBvc2l0aW9uJyxcbiAgICB1bmRlcmxpbmVUaGlja25lc3M6ICd1bmRlcmxpbmUtdGhpY2tuZXNzJyxcbiAgICB1bmljb2RlOiAwLFxuICAgIHVuaWNvZGVCaWRpOiAndW5pY29kZS1iaWRpJyxcbiAgICB1bmljb2RlUmFuZ2U6ICd1bmljb2RlLXJhbmdlJyxcbiAgICB1bml0c1BlckVtOiAndW5pdHMtcGVyLWVtJyxcbiAgICB2QWxwaGFiZXRpYzogJ3YtYWxwaGFiZXRpYycsXG4gICAgdkhhbmdpbmc6ICd2LWhhbmdpbmcnLFxuICAgIHZJZGVvZ3JhcGhpYzogJ3YtaWRlb2dyYXBoaWMnLFxuICAgIHZNYXRoZW1hdGljYWw6ICd2LW1hdGhlbWF0aWNhbCcsXG4gICAgdmFsdWVzOiAwLFxuICAgIHZlY3RvckVmZmVjdDogJ3ZlY3Rvci1lZmZlY3QnLFxuICAgIHZlcnNpb246IDAsXG4gICAgdmVydEFkdlk6ICd2ZXJ0LWFkdi15JyxcbiAgICB2ZXJ0T3JpZ2luWDogJ3ZlcnQtb3JpZ2luLXgnLFxuICAgIHZlcnRPcmlnaW5ZOiAndmVydC1vcmlnaW4teScsXG4gICAgdmlld0JveDogJ3ZpZXdCb3gnLFxuICAgIHZpZXdUYXJnZXQ6ICd2aWV3VGFyZ2V0JyxcbiAgICB2aXNpYmlsaXR5OiAwLFxuICAgIHdpZHRoczogMCxcbiAgICB3b3JkU3BhY2luZzogJ3dvcmQtc3BhY2luZycsXG4gICAgd3JpdGluZ01vZGU6ICd3cml0aW5nLW1vZGUnLFxuICAgIHg6IDAsXG4gICAgeEhlaWdodDogJ3gtaGVpZ2h0JyxcbiAgICB4MTogMCxcbiAgICB4MjogMCxcbiAgICB4Q2hhbm5lbFNlbGVjdG9yOiAneENoYW5uZWxTZWxlY3RvcicsXG4gICAgeGxpbmtBY3R1YXRlOiAneGxpbms6YWN0dWF0ZScsXG4gICAgeGxpbmtBcmNyb2xlOiAneGxpbms6YXJjcm9sZScsXG4gICAgeGxpbmtIcmVmOiAneGxpbms6aHJlZicsXG4gICAgeGxpbmtSb2xlOiAneGxpbms6cm9sZScsXG4gICAgeGxpbmtTaG93OiAneGxpbms6c2hvdycsXG4gICAgeGxpbmtUaXRsZTogJ3hsaW5rOnRpdGxlJyxcbiAgICB4bGlua1R5cGU6ICd4bGluazp0eXBlJyxcbiAgICB4bWxCYXNlOiAneG1sOmJhc2UnLFxuICAgIHhtbExhbmc6ICd4bWw6bGFuZycsXG4gICAgeG1sU3BhY2U6ICd4bWw6c3BhY2UnLFxuICAgIHk6IDAsXG4gICAgeTE6IDAsXG4gICAgeTI6IDAsXG4gICAgeUNoYW5uZWxTZWxlY3RvcjogJ3lDaGFubmVsU2VsZWN0b3InLFxuICAgIHo6IDAsXG4gICAgem9vbUFuZFBhbjogJ3pvb21BbmRQYW4nXG4gIH07XG4gIHZhciBTVkdET01Qcm9wZXJ0eUNvbmZpZyA9IHtcbiAgICBQcm9wZXJ0aWVzOiB7fSxcbiAgICBET01BdHRyaWJ1dGVOYW1lc3BhY2VzOiB7XG4gICAgICB4bGlua0FjdHVhdGU6IE5TLnhsaW5rLFxuICAgICAgeGxpbmtBcmNyb2xlOiBOUy54bGluayxcbiAgICAgIHhsaW5rSHJlZjogTlMueGxpbmssXG4gICAgICB4bGlua1JvbGU6IE5TLnhsaW5rLFxuICAgICAgeGxpbmtTaG93OiBOUy54bGluayxcbiAgICAgIHhsaW5rVGl0bGU6IE5TLnhsaW5rLFxuICAgICAgeGxpbmtUeXBlOiBOUy54bGluayxcbiAgICAgIHhtbEJhc2U6IE5TLnhtbCxcbiAgICAgIHhtbExhbmc6IE5TLnhtbCxcbiAgICAgIHhtbFNwYWNlOiBOUy54bWxcbiAgICB9LFxuICAgIERPTUF0dHJpYnV0ZU5hbWVzOiB7fVxuICB9O1xuICBPYmplY3Qua2V5cyhBVFRSUykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBTVkdET01Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzW2tleV0gPSAwO1xuICAgIGlmIChBVFRSU1trZXldKSB7XG4gICAgICBTVkdET01Qcm9wZXJ0eUNvbmZpZy5ET01BdHRyaWJ1dGVOYW1lc1trZXldID0gQVRUUlNba2V5XTtcbiAgICB9XG4gIH0pO1xuICBtb2R1bGUuZXhwb3J0cyA9IFNWR0RPTVByb3BlcnR5Q29uZmlnO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjZhXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBmdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUgJiYgbm9kZS5maXJzdENoaWxkKSB7XG4gICAgICBub2RlID0gbm9kZS5maXJzdENoaWxkO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBmdW5jdGlvbiBnZXRTaWJsaW5nTm9kZShub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChyb290LCBvZmZzZXQpIHtcbiAgICB2YXIgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICAgIHZhciBub2RlU3RhcnQgPSAwO1xuICAgIHZhciBub2RlRW5kID0gMDtcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDMpIHtcbiAgICAgICAgbm9kZUVuZCA9IG5vZGVTdGFydCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuICAgICAgICBpZiAobm9kZVN0YXJ0IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSBub2RlU3RhcnRcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIG5vZGVTdGFydCA9IG5vZGVFbmQ7XG4gICAgICB9XG4gICAgICBub2RlID0gZ2V0TGVhZk5vZGUoZ2V0U2libGluZ05vZGUobm9kZSkpO1xuICAgIH1cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQ7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNVwiLCBbXCJkXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSAkX19yZXF1aXJlKCdkJyk7XG4gIHZhciBjb250ZW50S2V5ID0gbnVsbDtcbiAgZnVuY3Rpb24gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpIHtcbiAgICBpZiAoIWNvbnRlbnRLZXkgJiYgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gICAgICBjb250ZW50S2V5ID0gJ3RleHRDb250ZW50JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyAndGV4dENvbnRlbnQnIDogJ2lubmVyVGV4dCc7XG4gICAgfVxuICAgIHJldHVybiBjb250ZW50S2V5O1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI2YlwiLCBbXCJkXCIsIFwiNmFcIiwgXCI1XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSAkX19yZXF1aXJlKCdkJyk7XG4gIHZhciBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0ID0gJF9fcmVxdWlyZSgnNmEnKTtcbiAgdmFyIGdldFRleHRDb250ZW50QWNjZXNzb3IgPSAkX19yZXF1aXJlKCc1Jyk7XG4gIGZ1bmN0aW9uIGlzQ29sbGFwc2VkKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCkge1xuICAgIHJldHVybiBhbmNob3JOb2RlID09PSBmb2N1c05vZGUgJiYgYW5jaG9yT2Zmc2V0ID09PSBmb2N1c09mZnNldDtcbiAgfVxuICBmdW5jdGlvbiBnZXRJRU9mZnNldHMobm9kZSkge1xuICAgIHZhciBzZWxlY3Rpb24gPSBkb2N1bWVudC5zZWxlY3Rpb247XG4gICAgdmFyIHNlbGVjdGVkUmFuZ2UgPSBzZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICB2YXIgc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZFJhbmdlLnRleHQubGVuZ3RoO1xuICAgIHZhciBmcm9tU3RhcnQgPSBzZWxlY3RlZFJhbmdlLmR1cGxpY2F0ZSgpO1xuICAgIGZyb21TdGFydC5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcbiAgICBmcm9tU3RhcnQuc2V0RW5kUG9pbnQoJ0VuZFRvU3RhcnQnLCBzZWxlY3RlZFJhbmdlKTtcbiAgICB2YXIgc3RhcnRPZmZzZXQgPSBmcm9tU3RhcnQudGV4dC5sZW5ndGg7XG4gICAgdmFyIGVuZE9mZnNldCA9IHN0YXJ0T2Zmc2V0ICsgc2VsZWN0ZWRMZW5ndGg7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBzdGFydE9mZnNldCxcbiAgICAgIGVuZDogZW5kT2Zmc2V0XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBnZXRNb2Rlcm5PZmZzZXRzKG5vZGUpIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbiAmJiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgaWYgKCFzZWxlY3Rpb24gfHwgc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgYW5jaG9yTm9kZSA9IHNlbGVjdGlvbi5hbmNob3JOb2RlO1xuICAgIHZhciBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0O1xuICAgIHZhciBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICAgIHZhciBmb2N1c09mZnNldCA9IHNlbGVjdGlvbi5mb2N1c09mZnNldDtcbiAgICB2YXIgY3VycmVudFJhbmdlID0gc2VsZWN0aW9uLmdldFJhbmdlQXQoMCk7XG4gICAgdHJ5IHtcbiAgICAgIGN1cnJlbnRSYW5nZS5zdGFydENvbnRhaW5lci5ub2RlVHlwZTtcbiAgICAgIGN1cnJlbnRSYW5nZS5lbmRDb250YWluZXIubm9kZVR5cGU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKHNlbGVjdGlvbi5hbmNob3JOb2RlLCBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LCBzZWxlY3Rpb24uZm9jdXNOb2RlLCBzZWxlY3Rpb24uZm9jdXNPZmZzZXQpO1xuICAgIHZhciByYW5nZUxlbmd0aCA9IGlzU2VsZWN0aW9uQ29sbGFwc2VkID8gMCA6IGN1cnJlbnRSYW5nZS50b1N0cmluZygpLmxlbmd0aDtcbiAgICB2YXIgdGVtcFJhbmdlID0gY3VycmVudFJhbmdlLmNsb25lUmFuZ2UoKTtcbiAgICB0ZW1wUmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xuICAgIHRlbXBSYW5nZS5zZXRFbmQoY3VycmVudFJhbmdlLnN0YXJ0Q29udGFpbmVyLCBjdXJyZW50UmFuZ2Uuc3RhcnRPZmZzZXQpO1xuICAgIHZhciBpc1RlbXBSYW5nZUNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKHRlbXBSYW5nZS5zdGFydENvbnRhaW5lciwgdGVtcFJhbmdlLnN0YXJ0T2Zmc2V0LCB0ZW1wUmFuZ2UuZW5kQ29udGFpbmVyLCB0ZW1wUmFuZ2UuZW5kT2Zmc2V0KTtcbiAgICB2YXIgc3RhcnQgPSBpc1RlbXBSYW5nZUNvbGxhcHNlZCA/IDAgOiB0ZW1wUmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG4gICAgdmFyIGVuZCA9IHN0YXJ0ICsgcmFuZ2VMZW5ndGg7XG4gICAgdmFyIGRldGVjdGlvblJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICBkZXRlY3Rpb25SYW5nZS5zZXRTdGFydChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQpO1xuICAgIGRldGVjdGlvblJhbmdlLnNldEVuZChmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KTtcbiAgICB2YXIgaXNCYWNrd2FyZCA9IGRldGVjdGlvblJhbmdlLmNvbGxhcHNlZDtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IGlzQmFja3dhcmQgPyBlbmQgOiBzdGFydCxcbiAgICAgIGVuZDogaXNCYWNrd2FyZCA/IHN0YXJ0IDogZW5kXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBzZXRJRU9mZnNldHMobm9kZSwgb2Zmc2V0cykge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLmR1cGxpY2F0ZSgpO1xuICAgIHZhciBzdGFydCxcbiAgICAgICAgZW5kO1xuICAgIGlmIChvZmZzZXRzLmVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgICBlbmQgPSBzdGFydDtcbiAgICB9IGVsc2UgaWYgKG9mZnNldHMuc3RhcnQgPiBvZmZzZXRzLmVuZCkge1xuICAgICAgc3RhcnQgPSBvZmZzZXRzLmVuZDtcbiAgICAgIGVuZCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0ID0gb2Zmc2V0cy5zdGFydDtcbiAgICAgIGVuZCA9IG9mZnNldHMuZW5kO1xuICAgIH1cbiAgICByYW5nZS5tb3ZlVG9FbGVtZW50VGV4dChub2RlKTtcbiAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHN0YXJ0KTtcbiAgICByYW5nZS5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHJhbmdlKTtcbiAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG4gICAgcmFuZ2Uuc2VsZWN0KCk7XG4gIH1cbiAgZnVuY3Rpb24gc2V0TW9kZXJuT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gICAgaWYgKCF3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgdmFyIGxlbmd0aCA9IG5vZGVbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXS5sZW5ndGg7XG4gICAgdmFyIHN0YXJ0ID0gTWF0aC5taW4ob2Zmc2V0cy5zdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZW5kID0gb2Zmc2V0cy5lbmQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogTWF0aC5taW4ob2Zmc2V0cy5lbmQsIGxlbmd0aCk7XG4gICAgaWYgKCFzZWxlY3Rpb24uZXh0ZW5kICYmIHN0YXJ0ID4gZW5kKSB7XG4gICAgICB2YXIgdGVtcCA9IGVuZDtcbiAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgc3RhcnQgPSB0ZW1wO1xuICAgIH1cbiAgICB2YXIgc3RhcnRNYXJrZXIgPSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KG5vZGUsIHN0YXJ0KTtcbiAgICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBlbmQpO1xuICAgIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIpIHtcbiAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gICAgICByYW5nZS5zZXRTdGFydChzdGFydE1hcmtlci5ub2RlLCBzdGFydE1hcmtlci5vZmZzZXQpO1xuICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICAgIHNlbGVjdGlvbi5leHRlbmQoZW5kTWFya2VyLm5vZGUsIGVuZE1hcmtlci5vZmZzZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmFuZ2Uuc2V0RW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICAgICAgc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIHVzZUlFT2Zmc2V0cyA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnc2VsZWN0aW9uJyBpbiBkb2N1bWVudCAmJiAhKCdnZXRTZWxlY3Rpb24nIGluIHdpbmRvdyk7XG4gIHZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHtcbiAgICBnZXRPZmZzZXRzOiB1c2VJRU9mZnNldHMgPyBnZXRJRU9mZnNldHMgOiBnZXRNb2Rlcm5PZmZzZXRzLFxuICAgIHNldE9mZnNldHM6IHVzZUlFT2Zmc2V0cyA/IHNldElFT2Zmc2V0cyA6IHNldE1vZGVybk9mZnNldHNcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlbGVjdGlvbjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI2Y1wiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICAgIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBOb2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBpc05vZGU7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNmRcIiwgW1wiNmNcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBpc05vZGUgPSAkX19yZXF1aXJlKCc2YycpO1xuICBmdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICAgIHJldHVybiBpc05vZGUob2JqZWN0KSAmJiBvYmplY3Qubm9kZVR5cGUgPT0gMztcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNmVcIiwgW1wiNmRcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBpc1RleHROb2RlID0gJF9fcmVxdWlyZSgnNmQnKTtcbiAgZnVuY3Rpb24gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlKSB7XG4gICAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSBpZiAob3V0ZXJOb2RlID09PSBpbm5lck5vZGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gICAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29udGFpbnMpIHtcbiAgICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGFpbnNOb2RlO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjFkXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBmdW5jdGlvbiBmb2N1c05vZGUobm9kZSkge1xuICAgIHRyeSB7XG4gICAgICBub2RlLmZvY3VzKCk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGZvY3VzTm9kZTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI2OFwiLCBbXCI2YlwiLCBcIjZlXCIsIFwiMWRcIiwgXCI2ZlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFJlYWN0RE9NU2VsZWN0aW9uID0gJF9fcmVxdWlyZSgnNmInKTtcbiAgdmFyIGNvbnRhaW5zTm9kZSA9ICRfX3JlcXVpcmUoJzZlJyk7XG4gIHZhciBmb2N1c05vZGUgPSAkX19yZXF1aXJlKCcxZCcpO1xuICB2YXIgZ2V0QWN0aXZlRWxlbWVudCA9ICRfX3JlcXVpcmUoJzZmJyk7XG4gIGZ1bmN0aW9uIGlzSW5Eb2N1bWVudChub2RlKSB7XG4gICAgcmV0dXJuIGNvbnRhaW5zTm9kZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIG5vZGUpO1xuICB9XG4gIHZhciBSZWFjdElucHV0U2VsZWN0aW9uID0ge1xuICAgIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllczogZnVuY3Rpb24oZWxlbSkge1xuICAgICAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHJldHVybiBub2RlTmFtZSAmJiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAndGV4dCcgfHwgbm9kZU5hbWUgPT09ICd0ZXh0YXJlYScgfHwgZWxlbS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJyk7XG4gICAgfSxcbiAgICBnZXRTZWxlY3Rpb25JbmZvcm1hdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmb2N1c2VkRWxlbTogZm9jdXNlZEVsZW0sXG4gICAgICAgIHNlbGVjdGlvblJhbmdlOiBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhmb2N1c2VkRWxlbSkgPyBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbihmb2N1c2VkRWxlbSkgOiBudWxsXG4gICAgICB9O1xuICAgIH0sXG4gICAgcmVzdG9yZVNlbGVjdGlvbjogZnVuY3Rpb24ocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikge1xuICAgICAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuICAgICAgdmFyIHByaW9yRm9jdXNlZEVsZW0gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtO1xuICAgICAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICAgICAgaWYgKGN1ckZvY3VzZWRFbGVtICE9PSBwcmlvckZvY3VzZWRFbGVtICYmIGlzSW5Eb2N1bWVudChwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgICBpZiAoUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLnNldFNlbGVjdGlvbihwcmlvckZvY3VzZWRFbGVtLCBwcmlvclNlbGVjdGlvblJhbmdlKTtcbiAgICAgICAgfVxuICAgICAgICBmb2N1c05vZGUocHJpb3JGb2N1c2VkRWxlbSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRTZWxlY3Rpb246IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICB2YXIgc2VsZWN0aW9uO1xuICAgICAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gaW5wdXQpIHtcbiAgICAgICAgc2VsZWN0aW9uID0ge1xuICAgICAgICAgIHN0YXJ0OiBpbnB1dC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICBlbmQ6IGlucHV0LnNlbGVjdGlvbkVuZFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgaW5wdXQubm9kZU5hbWUgJiYgaW5wdXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0Jykge1xuICAgICAgICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgaWYgKHJhbmdlLnBhcmVudEVsZW1lbnQoKSA9PT0gaW5wdXQpIHtcbiAgICAgICAgICBzZWxlY3Rpb24gPSB7XG4gICAgICAgICAgICBzdGFydDogLXJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgLWlucHV0LnZhbHVlLmxlbmd0aCksXG4gICAgICAgICAgICBlbmQ6IC1yYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCAtaW5wdXQudmFsdWUubGVuZ3RoKVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGlvbiA9IFJlYWN0RE9NU2VsZWN0aW9uLmdldE9mZnNldHMoaW5wdXQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGVjdGlvbiB8fCB7XG4gICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICBlbmQ6IDBcbiAgICAgIH07XG4gICAgfSxcbiAgICBzZXRTZWxlY3Rpb246IGZ1bmN0aW9uKGlucHV0LCBvZmZzZXRzKSB7XG4gICAgICB2YXIgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgICAgdmFyIGVuZCA9IG9mZnNldHMuZW5kO1xuICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgfVxuICAgICAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gaW5wdXQpIHtcbiAgICAgICAgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBzdGFydDtcbiAgICAgICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oZW5kLCBpbnB1dC52YWx1ZS5sZW5ndGgpO1xuICAgICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgaW5wdXQubm9kZU5hbWUgJiYgaW5wdXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0Jykge1xuICAgICAgICB2YXIgcmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKTtcbiAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICAgIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICAgICAgICByYW5nZS5tb3ZlRW5kKCdjaGFyYWN0ZXInLCBlbmQgLSBzdGFydCk7XG4gICAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUmVhY3RET01TZWxlY3Rpb24uc2V0T2Zmc2V0cyhpbnB1dCwgb2Zmc2V0cyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5wdXRTZWxlY3Rpb247XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNmZcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIGZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgICB9XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjE1XCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgc3VwcG9ydGVkSW5wdXRUeXBlcyA9IHtcbiAgICAnY29sb3InOiB0cnVlLFxuICAgICdkYXRlJzogdHJ1ZSxcbiAgICAnZGF0ZXRpbWUnOiB0cnVlLFxuICAgICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG4gICAgJ2VtYWlsJzogdHJ1ZSxcbiAgICAnbW9udGgnOiB0cnVlLFxuICAgICdudW1iZXInOiB0cnVlLFxuICAgICdwYXNzd29yZCc6IHRydWUsXG4gICAgJ3JhbmdlJzogdHJ1ZSxcbiAgICAnc2VhcmNoJzogdHJ1ZSxcbiAgICAndGVsJzogdHJ1ZSxcbiAgICAndGV4dCc6IHRydWUsXG4gICAgJ3RpbWUnOiB0cnVlLFxuICAgICd1cmwnOiB0cnVlLFxuICAgICd3ZWVrJzogdHJ1ZVxuICB9O1xuICBmdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICAgIHZhciBub2RlTmFtZSA9IGVsZW0gJiYgZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIG5vZGVOYW1lICYmIChub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBzdXBwb3J0ZWRJbnB1dFR5cGVzW2VsZW0udHlwZV0gfHwgbm9kZU5hbWUgPT09ICd0ZXh0YXJlYScpO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gaXNUZXh0SW5wdXRFbGVtZW50O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjUxXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iakEgIT09ICdvYmplY3QnIHx8IG9iakEgPT09IG51bGwgfHwgdHlwZW9mIG9iakIgIT09ICdvYmplY3QnIHx8IG9iakIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG4gICAgaWYgKGtleXNBLmxlbmd0aCAhPT0ga2V5c0IubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI3MFwiLCBbXCJiXCIsIFwiY1wiLCBcImRcIiwgXCIxMVwiLCBcIjY4XCIsIFwiOFwiLCBcIjZmXCIsIFwiMTVcIiwgXCJlXCIsIFwiNTFcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBFdmVudENvbnN0YW50cyA9ICRfX3JlcXVpcmUoJ2InKTtcbiAgdmFyIEV2ZW50UHJvcGFnYXRvcnMgPSAkX19yZXF1aXJlKCdjJyk7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9ICRfX3JlcXVpcmUoJ2QnKTtcbiAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9ICRfX3JlcXVpcmUoJzExJyk7XG4gIHZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gJF9fcmVxdWlyZSgnNjgnKTtcbiAgdmFyIFN5bnRoZXRpY0V2ZW50ID0gJF9fcmVxdWlyZSgnOCcpO1xuICB2YXIgZ2V0QWN0aXZlRWxlbWVudCA9ICRfX3JlcXVpcmUoJzZmJyk7XG4gIHZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSAkX19yZXF1aXJlKCcxNScpO1xuICB2YXIga2V5T2YgPSAkX19yZXF1aXJlKCdlJyk7XG4gIHZhciBzaGFsbG93RXF1YWwgPSAkX19yZXF1aXJlKCc1MScpO1xuICB2YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG4gIHZhciBza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDw9IDExO1xuICB2YXIgZXZlbnRUeXBlcyA9IHtzZWxlY3Q6IHtcbiAgICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblNlbGVjdDogbnVsbH0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU2VsZWN0Q2FwdHVyZTogbnVsbH0pXG4gICAgICB9LFxuICAgICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51LCB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLCB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sIHRvcExldmVsVHlwZXMudG9wTW91c2VEb3duLCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXAsIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlXVxuICAgIH19O1xuICB2YXIgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gIHZhciBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGw7XG4gIHZhciBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbiAgdmFyIG1vdXNlRG93biA9IGZhbHNlO1xuICB2YXIgaGFzTGlzdGVuZXIgPSBmYWxzZTtcbiAgdmFyIE9OX1NFTEVDVF9LRVkgPSBrZXlPZih7b25TZWxlY3Q6IG51bGx9KTtcbiAgZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKG5vZGUpIHtcbiAgICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBub2RlICYmIFJlYWN0SW5wdXRTZWxlY3Rpb24uaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKG5vZGUpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFydDogbm9kZS5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgZW5kOiBub2RlLnNlbGVjdGlvbkVuZFxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICAgIHZhciBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhbmNob3JOb2RlOiBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgICAgYW5jaG9yT2Zmc2V0OiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgICBmb2N1c05vZGU6IHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgICAgIGZvY3VzT2Zmc2V0OiBzZWxlY3Rpb24uZm9jdXNPZmZzZXRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24pIHtcbiAgICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50RWxlbWVudDogcmFuZ2UucGFyZW50RWxlbWVudCgpLFxuICAgICAgICB0ZXh0OiByYW5nZS50ZXh0LFxuICAgICAgICB0b3A6IHJhbmdlLmJvdW5kaW5nVG9wLFxuICAgICAgICBsZWZ0OiByYW5nZS5ib3VuZGluZ0xlZnRcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIGlmIChtb3VzZURvd24gfHwgYWN0aXZlRWxlbWVudCA9PSBudWxsIHx8IGFjdGl2ZUVsZW1lbnQgIT09IGdldEFjdGl2ZUVsZW1lbnQoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciBjdXJyZW50U2VsZWN0aW9uID0gZ2V0U2VsZWN0aW9uKGFjdGl2ZUVsZW1lbnQpO1xuICAgIGlmICghbGFzdFNlbGVjdGlvbiB8fCAhc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sIGN1cnJlbnRTZWxlY3Rpb24pKSB7XG4gICAgICBsYXN0U2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbjtcbiAgICAgIHZhciBzeW50aGV0aWNFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLnNlbGVjdCwgYWN0aXZlRWxlbWVudEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICBzeW50aGV0aWNFdmVudC50eXBlID0gJ3NlbGVjdCc7XG4gICAgICBzeW50aGV0aWNFdmVudC50YXJnZXQgPSBhY3RpdmVFbGVtZW50O1xuICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKHN5bnRoZXRpY0V2ZW50KTtcbiAgICAgIHJldHVybiBzeW50aGV0aWNFdmVudDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIFNlbGVjdEV2ZW50UGx1Z2luID0ge1xuICAgIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG4gICAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICAgIGlmICghaGFzTGlzdGVuZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB2YXIgdGFyZ2V0Tm9kZSA9IHRhcmdldEluc3QgPyBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcbiAgICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BGb2N1czpcbiAgICAgICAgICBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRhcmdldE5vZGUpIHx8IHRhcmdldE5vZGUuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXROb2RlO1xuICAgICAgICAgICAgYWN0aXZlRWxlbWVudEluc3QgPSB0YXJnZXRJbnN0O1xuICAgICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcbiAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGw7XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgICAgICAgbW91c2VEb3duID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51OlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VVcDpcbiAgICAgICAgICBtb3VzZURvd24gPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gY29uc3RydWN0U2VsZWN0RXZlbnQobmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZTpcbiAgICAgICAgICBpZiAoc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6XG4gICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGRpZFB1dExpc3RlbmVyOiBmdW5jdGlvbihpbnN0LCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09IE9OX1NFTEVDVF9LRVkpIHtcbiAgICAgICAgaGFzTGlzdGVuZXIgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBTZWxlY3RFdmVudFBsdWdpbjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI2MFwiLCBbXCI0OFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBlbXB0eUZ1bmN0aW9uID0gJF9fcmVxdWlyZSgnNDgnKTtcbiAgICB2YXIgRXZlbnRMaXN0ZW5lciA9IHtcbiAgICAgIGxpc3RlbjogZnVuY3Rpb24odGFyZ2V0LCBldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgICByZXR1cm4ge3JlbW92ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgICAgIH19O1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5hdHRhY2hFdmVudCkge1xuICAgICAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgICAgcmV0dXJuIHtyZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB0YXJnZXQuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50VHlwZSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfX07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjYXB0dXJlOiBmdW5jdGlvbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHRhcmdldC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuIHtyZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgICAgICAgIH19O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdBdHRlbXB0ZWQgdG8gbGlzdGVuIHRvIGV2ZW50cyBkdXJpbmcgdGhlIGNhcHR1cmUgcGhhc2Ugb24gYSAnICsgJ2Jyb3dzZXIgdGhhdCBkb2VzIG5vdCBzdXBwb3J0IHRoZSBjYXB0dXJlIHBoYXNlLiBZb3VyIGFwcGxpY2F0aW9uICcgKyAnd2lsbCBub3QgcmVjZWl2ZSBzb21lIGV2ZW50cy4nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHtyZW1vdmU6IGVtcHR5RnVuY3Rpb259O1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVnaXN0ZXJEZWZhdWx0OiBmdW5jdGlvbigpIHt9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50TGlzdGVuZXI7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImNcIiwgW1wiYlwiLCBcIjEwXCIsIFwiNjJcIiwgXCI3MVwiLCBcIjcyXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgRXZlbnRDb25zdGFudHMgPSAkX19yZXF1aXJlKCdiJyk7XG4gICAgdmFyIEV2ZW50UGx1Z2luSHViID0gJF9fcmVxdWlyZSgnMTAnKTtcbiAgICB2YXIgRXZlbnRQbHVnaW5VdGlscyA9ICRfX3JlcXVpcmUoJzYyJyk7XG4gICAgdmFyIGFjY3VtdWxhdGVJbnRvID0gJF9fcmVxdWlyZSgnNzEnKTtcbiAgICB2YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gJF9fcmVxdWlyZSgnNzInKTtcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgdmFyIFByb3BhZ2F0aW9uUGhhc2VzID0gRXZlbnRDb25zdGFudHMuUHJvcGFnYXRpb25QaGFzZXM7XG4gICAgdmFyIGdldExpc3RlbmVyID0gRXZlbnRQbHVnaW5IdWIuZ2V0TGlzdGVuZXI7XG4gICAgZnVuY3Rpb24gbGlzdGVuZXJBdFBoYXNlKGluc3QsIGV2ZW50LCBwcm9wYWdhdGlvblBoYXNlKSB7XG4gICAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3Byb3BhZ2F0aW9uUGhhc2VdO1xuICAgICAgcmV0dXJuIGdldExpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzKGluc3QsIHVwd2FyZHMsIGV2ZW50KSB7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhpbnN0LCAnRGlzcGF0Y2hpbmcgaW5zdCBtdXN0IG5vdCBiZSBudWxsJykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB2YXIgcGhhc2UgPSB1cHdhcmRzID8gUHJvcGFnYXRpb25QaGFzZXMuYnViYmxlZCA6IFByb3BhZ2F0aW9uUGhhc2VzLmNhcHR1cmVkO1xuICAgICAgdmFyIGxpc3RlbmVyID0gbGlzdGVuZXJBdFBoYXNlKGluc3QsIGV2ZW50LCBwaGFzZSk7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzLCBsaXN0ZW5lcik7XG4gICAgICAgIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcywgaW5zdCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgICBFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlVHdvUGhhc2UoZXZlbnQuX3RhcmdldEluc3QsIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZVNraXBUYXJnZXQoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgICB2YXIgdGFyZ2V0SW5zdCA9IGV2ZW50Ll90YXJnZXRJbnN0O1xuICAgICAgICB2YXIgcGFyZW50SW5zdCA9IHRhcmdldEluc3QgPyBFdmVudFBsdWdpblV0aWxzLmdldFBhcmVudEluc3RhbmNlKHRhcmdldEluc3QpIDogbnVsbDtcbiAgICAgICAgRXZlbnRQbHVnaW5VdGlscy50cmF2ZXJzZVR3b1BoYXNlKHBhcmVudEluc3QsIGFjY3VtdWxhdGVEaXJlY3Rpb25hbERpc3BhdGNoZXMsIGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZURpc3BhdGNoZXMoaW5zdCwgaWdub3JlZERpcmVjdGlvbiwgZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICAgIHZhciByZWdpc3RyYXRpb25OYW1lID0gZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZTtcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gZ2V0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgICAgICAgIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcywgaW5zdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICAgIGFjY3VtdWxhdGVEaXNwYXRjaGVzKGV2ZW50Ll90YXJnZXRJbnN0LCBudWxsLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMoZXZlbnRzKSB7XG4gICAgICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQoZXZlbnRzKSB7XG4gICAgICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlU2tpcFRhcmdldCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb20sIHRvKSB7XG4gICAgICBFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgYWNjdW11bGF0ZURpc3BhdGNoZXMsIGxlYXZlLCBlbnRlcik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzKGV2ZW50cykge1xuICAgICAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUpO1xuICAgIH1cbiAgICB2YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHtcbiAgICAgIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMsXG4gICAgICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldDogYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQsXG4gICAgICBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlczogYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMsXG4gICAgICBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlc1xuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudFByb3BhZ2F0b3JzO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI3M1wiLCBbXCI4XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgU3ludGhldGljRXZlbnQgPSAkX19yZXF1aXJlKCc4Jyk7XG4gIHZhciBBbmltYXRpb25FdmVudEludGVyZmFjZSA9IHtcbiAgICBhbmltYXRpb25OYW1lOiBudWxsLFxuICAgIGVsYXBzZWRUaW1lOiBudWxsLFxuICAgIHBzZXVkb0VsZW1lbnQ6IG51bGxcbiAgfTtcbiAgZnVuY3Rpb24gU3ludGhldGljQW5pbWF0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICByZXR1cm4gU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIH1cbiAgU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50LCBBbmltYXRpb25FdmVudEludGVyZmFjZSk7XG4gIG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNzRcIiwgW1wiOFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFN5bnRoZXRpY0V2ZW50ID0gJF9fcmVxdWlyZSgnOCcpO1xuICB2YXIgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UgPSB7Y2xpcGJvYXJkRGF0YTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHJldHVybiAnY2xpcGJvYXJkRGF0YScgaW4gZXZlbnQgPyBldmVudC5jbGlwYm9hcmREYXRhIDogd2luZG93LmNsaXBib2FyZERhdGE7XG4gICAgfX07XG4gIGZ1bmN0aW9uIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICB9XG4gIFN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDbGlwYm9hcmRFdmVudCwgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpO1xuICBtb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjc1XCIsIFtcIjc2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgU3ludGhldGljVUlFdmVudCA9ICRfX3JlcXVpcmUoJzc2Jyk7XG4gIHZhciBGb2N1c0V2ZW50SW50ZXJmYWNlID0ge3JlbGF0ZWRUYXJnZXQ6IG51bGx9O1xuICBmdW5jdGlvbiBTeW50aGV0aWNGb2N1c0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIH1cbiAgU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRm9jdXNFdmVudCwgRm9jdXNFdmVudEludGVyZmFjZSk7XG4gIG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI3N1wiLCBbXCI3OFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGdldEV2ZW50Q2hhckNvZGUgPSAkX19yZXF1aXJlKCc3OCcpO1xuICB2YXIgbm9ybWFsaXplS2V5ID0ge1xuICAgICdFc2MnOiAnRXNjYXBlJyxcbiAgICAnU3BhY2ViYXInOiAnICcsXG4gICAgJ0xlZnQnOiAnQXJyb3dMZWZ0JyxcbiAgICAnVXAnOiAnQXJyb3dVcCcsXG4gICAgJ1JpZ2h0JzogJ0Fycm93UmlnaHQnLFxuICAgICdEb3duJzogJ0Fycm93RG93bicsXG4gICAgJ0RlbCc6ICdEZWxldGUnLFxuICAgICdXaW4nOiAnT1MnLFxuICAgICdNZW51JzogJ0NvbnRleHRNZW51JyxcbiAgICAnQXBwcyc6ICdDb250ZXh0TWVudScsXG4gICAgJ1Njcm9sbCc6ICdTY3JvbGxMb2NrJyxcbiAgICAnTW96UHJpbnRhYmxlS2V5JzogJ1VuaWRlbnRpZmllZCdcbiAgfTtcbiAgdmFyIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICAgIDg6ICdCYWNrc3BhY2UnLFxuICAgIDk6ICdUYWInLFxuICAgIDEyOiAnQ2xlYXInLFxuICAgIDEzOiAnRW50ZXInLFxuICAgIDE2OiAnU2hpZnQnLFxuICAgIDE3OiAnQ29udHJvbCcsXG4gICAgMTg6ICdBbHQnLFxuICAgIDE5OiAnUGF1c2UnLFxuICAgIDIwOiAnQ2Fwc0xvY2snLFxuICAgIDI3OiAnRXNjYXBlJyxcbiAgICAzMjogJyAnLFxuICAgIDMzOiAnUGFnZVVwJyxcbiAgICAzNDogJ1BhZ2VEb3duJyxcbiAgICAzNTogJ0VuZCcsXG4gICAgMzY6ICdIb21lJyxcbiAgICAzNzogJ0Fycm93TGVmdCcsXG4gICAgMzg6ICdBcnJvd1VwJyxcbiAgICAzOTogJ0Fycm93UmlnaHQnLFxuICAgIDQwOiAnQXJyb3dEb3duJyxcbiAgICA0NTogJ0luc2VydCcsXG4gICAgNDY6ICdEZWxldGUnLFxuICAgIDExMjogJ0YxJyxcbiAgICAxMTM6ICdGMicsXG4gICAgMTE0OiAnRjMnLFxuICAgIDExNTogJ0Y0JyxcbiAgICAxMTY6ICdGNScsXG4gICAgMTE3OiAnRjYnLFxuICAgIDExODogJ0Y3JyxcbiAgICAxMTk6ICdGOCcsXG4gICAgMTIwOiAnRjknLFxuICAgIDEyMTogJ0YxMCcsXG4gICAgMTIyOiAnRjExJyxcbiAgICAxMjM6ICdGMTInLFxuICAgIDE0NDogJ051bUxvY2snLFxuICAgIDE0NTogJ1Njcm9sbExvY2snLFxuICAgIDIyNDogJ01ldGEnXG4gIH07XG4gIGZ1bmN0aW9uIGdldEV2ZW50S2V5KG5hdGl2ZUV2ZW50KSB7XG4gICAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICAgIGlmIChrZXkgIT09ICdVbmlkZW50aWZpZWQnKSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICB2YXIgY2hhckNvZGUgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KTtcbiAgICAgIHJldHVybiBjaGFyQ29kZSA9PT0gMTMgPyAnRW50ZXInIDogU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gICAgfVxuICAgIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5ZG93bicgfHwgbmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIHRyYW5zbGF0ZVRvS2V5W25hdGl2ZUV2ZW50LmtleUNvZGVdIHx8ICdVbmlkZW50aWZpZWQnO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudEtleTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI3OVwiLCBbXCI3NlwiLCBcIjc4XCIsIFwiNzdcIiwgXCI3YVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFN5bnRoZXRpY1VJRXZlbnQgPSAkX19yZXF1aXJlKCc3NicpO1xuICB2YXIgZ2V0RXZlbnRDaGFyQ29kZSA9ICRfX3JlcXVpcmUoJzc4Jyk7XG4gIHZhciBnZXRFdmVudEtleSA9ICRfX3JlcXVpcmUoJzc3Jyk7XG4gIHZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSAkX19yZXF1aXJlKCc3YScpO1xuICB2YXIgS2V5Ym9hcmRFdmVudEludGVyZmFjZSA9IHtcbiAgICBrZXk6IGdldEV2ZW50S2V5LFxuICAgIGxvY2F0aW9uOiBudWxsLFxuICAgIGN0cmxLZXk6IG51bGwsXG4gICAgc2hpZnRLZXk6IG51bGwsXG4gICAgYWx0S2V5OiBudWxsLFxuICAgIG1ldGFLZXk6IG51bGwsXG4gICAgcmVwZWF0OiBudWxsLFxuICAgIGxvY2FsZTogbnVsbCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gICAgY2hhckNvZGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9LFxuICAgIGtleUNvZGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gMDtcbiAgICB9LFxuICAgIHdoaWNoOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgICAgfVxuICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICAgIHJldHVybiBldmVudC5rZXlDb2RlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBTeW50aGV0aWNLZXlib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIH1cbiAgU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljS2V5Ym9hcmRFdmVudCwgS2V5Ym9hcmRFdmVudEludGVyZmFjZSk7XG4gIG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI3YlwiLCBbXCIxOVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSAkX19yZXF1aXJlKCcxOScpO1xuICB2YXIgRHJhZ0V2ZW50SW50ZXJmYWNlID0ge2RhdGFUcmFuc2ZlcjogbnVsbH07XG4gIGZ1bmN0aW9uIFN5bnRoZXRpY0RyYWdFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHJldHVybiBTeW50aGV0aWNNb3VzZUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICB9XG4gIFN5bnRoZXRpY01vdXNlRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0RyYWdFdmVudCwgRHJhZ0V2ZW50SW50ZXJmYWNlKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiN2NcIiwgW1wiNzZcIiwgXCI3YVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFN5bnRoZXRpY1VJRXZlbnQgPSAkX19yZXF1aXJlKCc3NicpO1xuICB2YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gJF9fcmVxdWlyZSgnN2EnKTtcbiAgdmFyIFRvdWNoRXZlbnRJbnRlcmZhY2UgPSB7XG4gICAgdG91Y2hlczogbnVsbCxcbiAgICB0YXJnZXRUb3VjaGVzOiBudWxsLFxuICAgIGNoYW5nZWRUb3VjaGVzOiBudWxsLFxuICAgIGFsdEtleTogbnVsbCxcbiAgICBtZXRhS2V5OiBudWxsLFxuICAgIGN0cmxLZXk6IG51bGwsXG4gICAgc2hpZnRLZXk6IG51bGwsXG4gICAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlXG4gIH07XG4gIGZ1bmN0aW9uIFN5bnRoZXRpY1RvdWNoRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICByZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgfVxuICBTeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNUb3VjaEV2ZW50LCBUb3VjaEV2ZW50SW50ZXJmYWNlKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjdkXCIsIFtcIjhcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBTeW50aGV0aWNFdmVudCA9ICRfX3JlcXVpcmUoJzgnKTtcbiAgdmFyIFRyYW5zaXRpb25FdmVudEludGVyZmFjZSA9IHtcbiAgICBwcm9wZXJ0eU5hbWU6IG51bGwsXG4gICAgZWxhcHNlZFRpbWU6IG51bGwsXG4gICAgcHNldWRvRWxlbWVudDogbnVsbFxuICB9O1xuICBmdW5jdGlvbiBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICByZXR1cm4gU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIH1cbiAgU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCwgVHJhbnNpdGlvbkV2ZW50SW50ZXJmYWNlKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiOFwiLCBbXCI2XCIsIFwiNFwiLCBcIjQ4XCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgX2Fzc2lnbiA9ICRfX3JlcXVpcmUoJzYnKTtcbiAgICB2YXIgUG9vbGVkQ2xhc3MgPSAkX19yZXF1aXJlKCc0Jyk7XG4gICAgdmFyIGVtcHR5RnVuY3Rpb24gPSAkX19yZXF1aXJlKCc0OCcpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICB2YXIgZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHkgPSBmYWxzZTtcbiAgICB2YXIgaXNQcm94eVN1cHBvcnRlZCA9IHR5cGVvZiBQcm94eSA9PT0gJ2Z1bmN0aW9uJztcbiAgICB2YXIgc2hvdWxkQmVSZWxlYXNlZFByb3BlcnRpZXMgPSBbJ2Rpc3BhdGNoQ29uZmlnJywgJ190YXJnZXRJbnN0JywgJ25hdGl2ZUV2ZW50JywgJ2lzRGVmYXVsdFByZXZlbnRlZCcsICdpc1Byb3BhZ2F0aW9uU3RvcHBlZCcsICdfZGlzcGF0Y2hMaXN0ZW5lcnMnLCAnX2Rpc3BhdGNoSW5zdGFuY2VzJ107XG4gICAgdmFyIEV2ZW50SW50ZXJmYWNlID0ge1xuICAgICAgdHlwZTogbnVsbCxcbiAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgIGN1cnJlbnRUYXJnZXQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsLFxuICAgICAgZXZlbnRQaGFzZTogbnVsbCxcbiAgICAgIGJ1YmJsZXM6IG51bGwsXG4gICAgICBjYW5jZWxhYmxlOiBudWxsLFxuICAgICAgdGltZVN0YW1wOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gICAgICB9LFxuICAgICAgZGVmYXVsdFByZXZlbnRlZDogbnVsbCxcbiAgICAgIGlzVHJ1c3RlZDogbnVsbFxuICAgIH07XG4gICAgZnVuY3Rpb24gU3ludGhldGljRXZlbnQoZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnByZXZlbnREZWZhdWx0O1xuICAgICAgICBkZWxldGUgdGhpcy5zdG9wUHJvcGFnYXRpb247XG4gICAgICB9XG4gICAgICB0aGlzLmRpc3BhdGNoQ29uZmlnID0gZGlzcGF0Y2hDb25maWc7XG4gICAgICB0aGlzLl90YXJnZXRJbnN0ID0gdGFyZ2V0SW5zdDtcbiAgICAgIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgICAgICBpZiAoIUludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGRlbGV0ZSB0aGlzW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbm9ybWFsaXplID0gSW50ZXJmYWNlW3Byb3BOYW1lXTtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZSkge1xuICAgICAgICAgIHRoaXNbcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJvcE5hbWUgPT09ICd0YXJnZXQnKSB7XG4gICAgICAgICAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzW3Byb3BOYW1lXSA9IG5hdGl2ZUV2ZW50W3Byb3BOYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBkZWZhdWx0UHJldmVudGVkID0gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCAhPSBudWxsID8gbmF0aXZlRXZlbnQuZGVmYXVsdFByZXZlbnRlZCA6IG5hdGl2ZUV2ZW50LnJldHVyblZhbHVlID09PSBmYWxzZTtcbiAgICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zRmFsc2U7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgX2Fzc2lnbihTeW50aGV0aWNFdmVudC5wcm90b3R5cGUsIHtcbiAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXZlbnQucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgICAgIH0sXG4gICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZXZlbnQgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgICAgIH0sXG4gICAgICBwZXJzaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5pc1BlcnNpc3RlbnQgPSBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVHJ1ZTtcbiAgICAgIH0sXG4gICAgICBpc1BlcnNpc3RlbnQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSxcbiAgICAgIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgSW50ZXJmYWNlID0gdGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7XG4gICAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcE5hbWUsIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24ocHJvcE5hbWUsIEludGVyZmFjZVtwcm9wTmFtZV0pKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1twcm9wTmFtZV0gPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpc1tzaG91bGRCZVJlbGVhc2VkUHJvcGVydGllc1tpXV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIG5vb3AgPSAkX19yZXF1aXJlKCc0OCcpO1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmF0aXZlRXZlbnQnLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCduYXRpdmVFdmVudCcsIG51bGwpKTtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3ByZXZlbnREZWZhdWx0JywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbigncHJldmVudERlZmF1bHQnLCBub29wKSk7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdzdG9wUHJvcGFnYXRpb24nLCBnZXRQb29sZWRXYXJuaW5nUHJvcGVydHlEZWZpbml0aW9uKCdzdG9wUHJvcGFnYXRpb24nLCBub29wKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBTeW50aGV0aWNFdmVudC5JbnRlcmZhY2UgPSBFdmVudEludGVyZmFjZTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKGlzUHJveHlTdXBwb3J0ZWQpIHtcbiAgICAgICAgU3ludGhldGljRXZlbnQgPSBuZXcgUHJveHkoU3ludGhldGljRXZlbnQsIHtcbiAgICAgICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKHRhcmdldCwgYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwbHkodGFyZ2V0LCBPYmplY3QuY3JlYXRlKHRhcmdldC5wcm90b3R5cGUpLCBhcmdzKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFwcGx5OiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgdGhhdCwgYXJncykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm94eShjb25zdHJ1Y3Rvci5hcHBseSh0aGF0LCBhcmdzKSwge3NldDogZnVuY3Rpb24odGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wICE9PSAnaXNQZXJzaXN0ZW50JyAmJiAhdGFyZ2V0LmNvbnN0cnVjdG9yLkludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSAmJiBzaG91bGRCZVJlbGVhc2VkUHJvcGVydGllcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHkgfHwgdGFyZ2V0LmlzUGVyc2lzdGVudCgpLCAnVGhpcyBzeW50aGV0aWMgZXZlbnQgaXMgcmV1c2VkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLiBJZiB5b3VcXCdyZSAnICsgJ3NlZWluZyB0aGlzLCB5b3VcXCdyZSBhZGRpbmcgYSBuZXcgcHJvcGVydHkgaW4gdGhlIHN5bnRoZXRpYyBldmVudCBvYmplY3QuICcgKyAnVGhlIHByb3BlcnR5IGlzIG5ldmVyIHJlbGVhc2VkLiBTZWUgJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWV2ZW50LXBvb2xpbmcgZm9yIG1vcmUgaW5mb3JtYXRpb24uJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICBkaWRXYXJuRm9yQWRkZWROZXdQcm9wZXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9fSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzID0gZnVuY3Rpb24oQ2xhc3MsIEludGVyZmFjZSkge1xuICAgICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICAgIHZhciBFID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgIEUucHJvdG90eXBlID0gU3VwZXIucHJvdG90eXBlO1xuICAgICAgdmFyIHByb3RvdHlwZSA9IG5ldyBFKCk7XG4gICAgICBfYXNzaWduKHByb3RvdHlwZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICAgIENsYXNzLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICAgIENsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENsYXNzO1xuICAgICAgQ2xhc3MuSW50ZXJmYWNlID0gX2Fzc2lnbih7fSwgU3VwZXIuSW50ZXJmYWNlLCBJbnRlcmZhY2UpO1xuICAgICAgQ2xhc3MuYXVnbWVudENsYXNzID0gU3VwZXIuYXVnbWVudENsYXNzO1xuICAgICAgUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKENsYXNzLCBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIpO1xuICAgIH07XG4gICAgUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFN5bnRoZXRpY0V2ZW50LCBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXIpO1xuICAgIG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljRXZlbnQ7XG4gICAgZnVuY3Rpb24gZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbihwcm9wTmFtZSwgZ2V0VmFsKSB7XG4gICAgICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiBnZXRWYWwgPT09ICdmdW5jdGlvbic7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIHNldDogc2V0LFxuICAgICAgICBnZXQ6IGdldFxuICAgICAgfTtcbiAgICAgIGZ1bmN0aW9uIHNldCh2YWwpIHtcbiAgICAgICAgdmFyIGFjdGlvbiA9IGlzRnVuY3Rpb24gPyAnc2V0dGluZyB0aGUgbWV0aG9kJyA6ICdzZXR0aW5nIHRoZSBwcm9wZXJ0eSc7XG4gICAgICAgIHdhcm4oYWN0aW9uLCAnVGhpcyBpcyBlZmZlY3RpdmVseSBhIG5vLW9wJyk7XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHZhciBhY3Rpb24gPSBpc0Z1bmN0aW9uID8gJ2FjY2Vzc2luZyB0aGUgbWV0aG9kJyA6ICdhY2Nlc3NpbmcgdGhlIHByb3BlcnR5JztcbiAgICAgICAgdmFyIHJlc3VsdCA9IGlzRnVuY3Rpb24gPyAnVGhpcyBpcyBhIG5vLW9wIGZ1bmN0aW9uJyA6ICdUaGlzIGlzIHNldCB0byBudWxsJztcbiAgICAgICAgd2FybihhY3Rpb24sIHJlc3VsdCk7XG4gICAgICAgIHJldHVybiBnZXRWYWw7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiB3YXJuKGFjdGlvbiwgcmVzdWx0KSB7XG4gICAgICAgIHZhciB3YXJuaW5nQ29uZGl0aW9uID0gZmFsc2U7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHdhcm5pbmdDb25kaXRpb24sICdUaGlzIHN5bnRoZXRpYyBldmVudCBpcyByZXVzZWQgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuIElmIHlvdVxcJ3JlIHNlZWluZyB0aGlzLCAnICsgJ3lvdVxcJ3JlICVzIGAlc2Agb24gYSByZWxlYXNlZC9udWxsaWZpZWQgc3ludGhldGljIGV2ZW50LiAlcy4gJyArICdJZiB5b3UgbXVzdCBrZWVwIHRoZSBvcmlnaW5hbCBzeW50aGV0aWMgZXZlbnQgYXJvdW5kLCB1c2UgZXZlbnQucGVyc2lzdCgpLiAnICsgJ1NlZSBodHRwczovL2ZiLm1lL3JlYWN0LWV2ZW50LXBvb2xpbmcgZm9yIG1vcmUgaW5mb3JtYXRpb24uJywgYWN0aW9uLCBwcm9wTmFtZSwgcmVzdWx0KSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEzXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBmdW5jdGlvbiBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkge1xuICAgIHZhciB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgbmF0aXZlRXZlbnQuc3JjRWxlbWVudCB8fCB3aW5kb3c7XG4gICAgaWYgKHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCkge1xuICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50O1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0Lm5vZGVUeXBlID09PSAzID8gdGFyZ2V0LnBhcmVudE5vZGUgOiB0YXJnZXQ7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudFRhcmdldDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI3NlwiLCBbXCI4XCIsIFwiMTNcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBTeW50aGV0aWNFdmVudCA9ICRfX3JlcXVpcmUoJzgnKTtcbiAgdmFyIGdldEV2ZW50VGFyZ2V0ID0gJF9fcmVxdWlyZSgnMTMnKTtcbiAgdmFyIFVJRXZlbnRJbnRlcmZhY2UgPSB7XG4gICAgdmlldzogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC52aWV3KSB7XG4gICAgICAgIHJldHVybiBldmVudC52aWV3O1xuICAgICAgfVxuICAgICAgdmFyIHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGV2ZW50KTtcbiAgICAgIGlmICh0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQud2luZG93ID09PSB0YXJnZXQpIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgIH1cbiAgICAgIHZhciBkb2MgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICAgIH1cbiAgICB9LFxuICAgIGRldGFpbDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHJldHVybiBldmVudC5kZXRhaWwgfHwgMDtcbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIFN5bnRoZXRpY1VJRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICByZXR1cm4gU3ludGhldGljRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIH1cbiAgU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1VJRXZlbnQsIFVJRXZlbnRJbnRlcmZhY2UpO1xuICBtb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1VJRXZlbnQ7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiN2FcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBtb2RpZmllcktleVRvUHJvcCA9IHtcbiAgICAnQWx0JzogJ2FsdEtleScsXG4gICAgJ0NvbnRyb2wnOiAnY3RybEtleScsXG4gICAgJ01ldGEnOiAnbWV0YUtleScsXG4gICAgJ1NoaWZ0JzogJ3NoaWZ0S2V5J1xuICB9O1xuICBmdW5jdGlvbiBtb2RpZmllclN0YXRlR2V0dGVyKGtleUFyZykge1xuICAgIHZhciBzeW50aGV0aWNFdmVudCA9IHRoaXM7XG4gICAgdmFyIG5hdGl2ZUV2ZW50ID0gc3ludGhldGljRXZlbnQubmF0aXZlRXZlbnQ7XG4gICAgaWYgKG5hdGl2ZUV2ZW50LmdldE1vZGlmaWVyU3RhdGUpIHtcbiAgICAgIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZyk7XG4gICAgfVxuICAgIHZhciBrZXlQcm9wID0gbW9kaWZpZXJLZXlUb1Byb3Bba2V5QXJnXTtcbiAgICByZXR1cm4ga2V5UHJvcCA/ICEhbmF0aXZlRXZlbnRba2V5UHJvcF0gOiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBnZXRFdmVudE1vZGlmaWVyU3RhdGUobmF0aXZlRXZlbnQpIHtcbiAgICByZXR1cm4gbW9kaWZpZXJTdGF0ZUdldHRlcjtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50TW9kaWZpZXJTdGF0ZTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxOVwiLCBbXCI3NlwiLCBcIjdlXCIsIFwiN2FcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBTeW50aGV0aWNVSUV2ZW50ID0gJF9fcmVxdWlyZSgnNzYnKTtcbiAgdmFyIFZpZXdwb3J0TWV0cmljcyA9ICRfX3JlcXVpcmUoJzdlJyk7XG4gIHZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSAkX19yZXF1aXJlKCc3YScpO1xuICB2YXIgTW91c2VFdmVudEludGVyZmFjZSA9IHtcbiAgICBzY3JlZW5YOiBudWxsLFxuICAgIHNjcmVlblk6IG51bGwsXG4gICAgY2xpZW50WDogbnVsbCxcbiAgICBjbGllbnRZOiBudWxsLFxuICAgIGN0cmxLZXk6IG51bGwsXG4gICAgc2hpZnRLZXk6IG51bGwsXG4gICAgYWx0S2V5OiBudWxsLFxuICAgIG1ldGFLZXk6IG51bGwsXG4gICAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICAgIGJ1dHRvbjogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBidXR0b24gPSBldmVudC5idXR0b247XG4gICAgICBpZiAoJ3doaWNoJyBpbiBldmVudCkge1xuICAgICAgICByZXR1cm4gYnV0dG9uO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJ1dHRvbiA9PT0gMiA/IDIgOiBidXR0b24gPT09IDQgPyAxIDogMDtcbiAgICB9LFxuICAgIGJ1dHRvbnM6IG51bGwsXG4gICAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHJldHVybiBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IChldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudCA/IGV2ZW50LnRvRWxlbWVudCA6IGV2ZW50LmZyb21FbGVtZW50KTtcbiAgICB9LFxuICAgIHBhZ2VYOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgcmV0dXJuICdwYWdlWCcgaW4gZXZlbnQgPyBldmVudC5wYWdlWCA6IGV2ZW50LmNsaWVudFggKyBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbExlZnQ7XG4gICAgfSxcbiAgICBwYWdlWTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHJldHVybiAncGFnZVknIGluIGV2ZW50ID8gZXZlbnQucGFnZVkgOiBldmVudC5jbGllbnRZICsgVmlld3BvcnRNZXRyaWNzLmN1cnJlbnRTY3JvbGxUb3A7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBTeW50aGV0aWNNb3VzZUV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIH1cbiAgU3ludGhldGljVUlFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljTW91c2VFdmVudCwgTW91c2VFdmVudEludGVyZmFjZSk7XG4gIG1vZHVsZS5leHBvcnRzID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI3ZlwiLCBbXCIxOVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSAkX19yZXF1aXJlKCcxOScpO1xuICB2YXIgV2hlZWxFdmVudEludGVyZmFjZSA9IHtcbiAgICBkZWx0YVg6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICByZXR1cm4gJ2RlbHRhWCcgaW4gZXZlbnQgPyBldmVudC5kZWx0YVggOiAnd2hlZWxEZWx0YVgnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFYIDogMDtcbiAgICB9LFxuICAgIGRlbHRhWTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHJldHVybiAnZGVsdGFZJyBpbiBldmVudCA/IGV2ZW50LmRlbHRhWSA6ICd3aGVlbERlbHRhWScgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YVkgOiAnd2hlZWxEZWx0YScgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YSA6IDA7XG4gICAgfSxcbiAgICBkZWx0YVo6IG51bGwsXG4gICAgZGVsdGFNb2RlOiBudWxsXG4gIH07XG4gIGZ1bmN0aW9uIFN5bnRoZXRpY1doZWVsRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICByZXR1cm4gU3ludGhldGljTW91c2VFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgfVxuICBTeW50aGV0aWNNb3VzZUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNXaGVlbEV2ZW50LCBXaGVlbEV2ZW50SW50ZXJmYWNlKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNXaGVlbEV2ZW50O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjc4XCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBmdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGNoYXJDb2RlO1xuICAgIHZhciBrZXlDb2RlID0gbmF0aXZlRXZlbnQua2V5Q29kZTtcbiAgICBpZiAoJ2NoYXJDb2RlJyBpbiBuYXRpdmVFdmVudCkge1xuICAgICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTtcbiAgICAgIGlmIChjaGFyQ29kZSA9PT0gMCAmJiBrZXlDb2RlID09PSAxMykge1xuICAgICAgICBjaGFyQ29kZSA9IDEzO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjaGFyQ29kZSA9IGtleUNvZGU7XG4gICAgfVxuICAgIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcbiAgICAgIHJldHVybiBjaGFyQ29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudENoYXJDb2RlO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjgwXCIsIFtcImJcIiwgXCI2MFwiLCBcImNcIiwgXCIxMVwiLCBcIjczXCIsIFwiNzRcIiwgXCI4XCIsIFwiNzVcIiwgXCI3OVwiLCBcIjE5XCIsIFwiN2JcIiwgXCI3Y1wiLCBcIjdkXCIsIFwiNzZcIiwgXCI3ZlwiLCBcIjQ4XCIsIFwiNzhcIiwgXCIzMFwiLCBcImVcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgRXZlbnRDb25zdGFudHMgPSAkX19yZXF1aXJlKCdiJyk7XG4gICAgdmFyIEV2ZW50TGlzdGVuZXIgPSAkX19yZXF1aXJlKCc2MCcpO1xuICAgIHZhciBFdmVudFByb3BhZ2F0b3JzID0gJF9fcmVxdWlyZSgnYycpO1xuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSAkX19yZXF1aXJlKCcxMScpO1xuICAgIHZhciBTeW50aGV0aWNBbmltYXRpb25FdmVudCA9ICRfX3JlcXVpcmUoJzczJyk7XG4gICAgdmFyIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50ID0gJF9fcmVxdWlyZSgnNzQnKTtcbiAgICB2YXIgU3ludGhldGljRXZlbnQgPSAkX19yZXF1aXJlKCc4Jyk7XG4gICAgdmFyIFN5bnRoZXRpY0ZvY3VzRXZlbnQgPSAkX19yZXF1aXJlKCc3NScpO1xuICAgIHZhciBTeW50aGV0aWNLZXlib2FyZEV2ZW50ID0gJF9fcmVxdWlyZSgnNzknKTtcbiAgICB2YXIgU3ludGhldGljTW91c2VFdmVudCA9ICRfX3JlcXVpcmUoJzE5Jyk7XG4gICAgdmFyIFN5bnRoZXRpY0RyYWdFdmVudCA9ICRfX3JlcXVpcmUoJzdiJyk7XG4gICAgdmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSAkX19yZXF1aXJlKCc3YycpO1xuICAgIHZhciBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQgPSAkX19yZXF1aXJlKCc3ZCcpO1xuICAgIHZhciBTeW50aGV0aWNVSUV2ZW50ID0gJF9fcmVxdWlyZSgnNzYnKTtcbiAgICB2YXIgU3ludGhldGljV2hlZWxFdmVudCA9ICRfX3JlcXVpcmUoJzdmJyk7XG4gICAgdmFyIGVtcHR5RnVuY3Rpb24gPSAkX19yZXF1aXJlKCc0OCcpO1xuICAgIHZhciBnZXRFdmVudENoYXJDb2RlID0gJF9fcmVxdWlyZSgnNzgnKTtcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIga2V5T2YgPSAkX19yZXF1aXJlKCdlJyk7XG4gICAgdmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xuICAgIHZhciBldmVudFR5cGVzID0ge1xuICAgICAgYWJvcnQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkFib3J0OiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkFib3J0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgYW5pbWF0aW9uRW5kOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25BbmltYXRpb25FbmQ6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQW5pbWF0aW9uRW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgYW5pbWF0aW9uSXRlcmF0aW9uOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25BbmltYXRpb25JdGVyYXRpb246IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQW5pbWF0aW9uSXRlcmF0aW9uQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgYW5pbWF0aW9uU3RhcnQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkFuaW1hdGlvblN0YXJ0OiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkFuaW1hdGlvblN0YXJ0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgYmx1cjoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uQmx1cjogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25CbHVyQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgY2FuUGxheToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ2FuUGxheTogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DYW5QbGF5Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgY2FuUGxheVRocm91Z2g6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNhblBsYXlUaHJvdWdoOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNhblBsYXlUaHJvdWdoQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgY2xpY2s6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNsaWNrOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNsaWNrQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgY29udGV4dE1lbnU6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbnRleHRNZW51OiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvbnRleHRNZW51Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgY29weToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ29weTogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db3B5Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgY3V0OiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25DdXQ6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ3V0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZG91YmxlQ2xpY2s6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRvdWJsZUNsaWNrOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRvdWJsZUNsaWNrQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZHJhZzoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZzogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZHJhZ0VuZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ0VuZDogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnRW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZHJhZ0VudGVyOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnRW50ZXI6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0VudGVyQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZHJhZ0V4aXQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdFeGl0OiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdFeGl0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZHJhZ0xlYXZlOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnTGVhdmU6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0xlYXZlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZHJhZ092ZXI6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdPdmVyOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdPdmVyQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZHJhZ1N0YXJ0OiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnU3RhcnQ6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ1N0YXJ0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZHJvcDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJvcDogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ecm9wQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZHVyYXRpb25DaGFuZ2U6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkR1cmF0aW9uQ2hhbmdlOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkR1cmF0aW9uQ2hhbmdlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZW1wdGllZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uRW1wdGllZDogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25FbXB0aWVkQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZW5jcnlwdGVkOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25FbmNyeXB0ZWQ6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRW5jcnlwdGVkQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZW5kZWQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkVuZGVkOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkVuZGVkQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZXJyb3I6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkVycm9yOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkVycm9yQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgZm9jdXM6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkZvY3VzOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkZvY3VzQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgaW5wdXQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbklucHV0OiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbklucHV0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgaW52YWxpZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uSW52YWxpZDogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25JbnZhbGlkQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAga2V5RG93bjoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uS2V5RG93bjogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25LZXlEb3duQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAga2V5UHJlc3M6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbktleVByZXNzOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbktleVByZXNzQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAga2V5VXA6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbktleVVwOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbktleVVwQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgbG9hZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uTG9hZDogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Mb2FkQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgbG9hZGVkRGF0YToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uTG9hZGVkRGF0YTogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Mb2FkZWREYXRhQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgbG9hZGVkTWV0YWRhdGE6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkxvYWRlZE1ldGFkYXRhOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkxvYWRlZE1ldGFkYXRhQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgbG9hZFN0YXJ0OiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25Mb2FkU3RhcnQ6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTG9hZFN0YXJ0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgbW91c2VEb3duOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZURvd246IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VEb3duQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgbW91c2VNb3ZlOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZU1vdmU6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VNb3ZlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgbW91c2VPdXQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlT3V0OiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlT3V0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgbW91c2VPdmVyOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZU92ZXI6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTW91c2VPdmVyQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgbW91c2VVcDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VVcDogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZVVwQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgcGFzdGU6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblBhc3RlOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblBhc3RlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgcGF1c2U6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblBhdXNlOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblBhdXNlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgcGxheToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uUGxheTogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25QbGF5Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgcGxheWluZzoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uUGxheWluZzogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25QbGF5aW5nQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgcHJvZ3Jlc3M6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblByb2dyZXNzOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblByb2dyZXNzQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgcmF0ZUNoYW5nZToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uUmF0ZUNoYW5nZTogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25SYXRlQ2hhbmdlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgcmVzZXQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblJlc2V0OiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblJlc2V0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgc2Nyb2xsOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25TY3JvbGw6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU2Nyb2xsQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgc2Vla2VkOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25TZWVrZWQ6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU2Vla2VkQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgc2Vla2luZzoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uU2Vla2luZzogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TZWVraW5nQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgc3RhbGxlZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uU3RhbGxlZDogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TdGFsbGVkQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgc3VibWl0OiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25TdWJtaXQ6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU3VibWl0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgc3VzcGVuZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uU3VzcGVuZDogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TdXNwZW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgdGltZVVwZGF0ZToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uVGltZVVwZGF0ZTogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25UaW1lVXBkYXRlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgdG91Y2hDYW5jZWw6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoQ2FuY2VsOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoQ2FuY2VsQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgdG91Y2hFbmQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoRW5kOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoRW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgdG91Y2hNb3ZlOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaE1vdmU6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hNb3ZlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgdG91Y2hTdGFydDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hTdGFydDogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ub3VjaFN0YXJ0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgdHJhbnNpdGlvbkVuZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uVHJhbnNpdGlvbkVuZDogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25UcmFuc2l0aW9uRW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgdm9sdW1lQ2hhbmdlOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgICBidWJibGVkOiBrZXlPZih7b25Wb2x1bWVDaGFuZ2U6IHRydWV9KSxcbiAgICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVm9sdW1lQ2hhbmdlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgd2FpdGluZzoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uV2FpdGluZzogdHJ1ZX0pLFxuICAgICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25XYWl0aW5nQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19LFxuICAgICAgd2hlZWw6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbldoZWVsOiB0cnVlfSksXG4gICAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbldoZWVsQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICAgIH19XG4gICAgfTtcbiAgICB2YXIgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnID0ge1xuICAgICAgdG9wQWJvcnQ6IGV2ZW50VHlwZXMuYWJvcnQsXG4gICAgICB0b3BBbmltYXRpb25FbmQ6IGV2ZW50VHlwZXMuYW5pbWF0aW9uRW5kLFxuICAgICAgdG9wQW5pbWF0aW9uSXRlcmF0aW9uOiBldmVudFR5cGVzLmFuaW1hdGlvbkl0ZXJhdGlvbixcbiAgICAgIHRvcEFuaW1hdGlvblN0YXJ0OiBldmVudFR5cGVzLmFuaW1hdGlvblN0YXJ0LFxuICAgICAgdG9wQmx1cjogZXZlbnRUeXBlcy5ibHVyLFxuICAgICAgdG9wQ2FuUGxheTogZXZlbnRUeXBlcy5jYW5QbGF5LFxuICAgICAgdG9wQ2FuUGxheVRocm91Z2g6IGV2ZW50VHlwZXMuY2FuUGxheVRocm91Z2gsXG4gICAgICB0b3BDbGljazogZXZlbnRUeXBlcy5jbGljayxcbiAgICAgIHRvcENvbnRleHRNZW51OiBldmVudFR5cGVzLmNvbnRleHRNZW51LFxuICAgICAgdG9wQ29weTogZXZlbnRUeXBlcy5jb3B5LFxuICAgICAgdG9wQ3V0OiBldmVudFR5cGVzLmN1dCxcbiAgICAgIHRvcERvdWJsZUNsaWNrOiBldmVudFR5cGVzLmRvdWJsZUNsaWNrLFxuICAgICAgdG9wRHJhZzogZXZlbnRUeXBlcy5kcmFnLFxuICAgICAgdG9wRHJhZ0VuZDogZXZlbnRUeXBlcy5kcmFnRW5kLFxuICAgICAgdG9wRHJhZ0VudGVyOiBldmVudFR5cGVzLmRyYWdFbnRlcixcbiAgICAgIHRvcERyYWdFeGl0OiBldmVudFR5cGVzLmRyYWdFeGl0LFxuICAgICAgdG9wRHJhZ0xlYXZlOiBldmVudFR5cGVzLmRyYWdMZWF2ZSxcbiAgICAgIHRvcERyYWdPdmVyOiBldmVudFR5cGVzLmRyYWdPdmVyLFxuICAgICAgdG9wRHJhZ1N0YXJ0OiBldmVudFR5cGVzLmRyYWdTdGFydCxcbiAgICAgIHRvcERyb3A6IGV2ZW50VHlwZXMuZHJvcCxcbiAgICAgIHRvcER1cmF0aW9uQ2hhbmdlOiBldmVudFR5cGVzLmR1cmF0aW9uQ2hhbmdlLFxuICAgICAgdG9wRW1wdGllZDogZXZlbnRUeXBlcy5lbXB0aWVkLFxuICAgICAgdG9wRW5jcnlwdGVkOiBldmVudFR5cGVzLmVuY3J5cHRlZCxcbiAgICAgIHRvcEVuZGVkOiBldmVudFR5cGVzLmVuZGVkLFxuICAgICAgdG9wRXJyb3I6IGV2ZW50VHlwZXMuZXJyb3IsXG4gICAgICB0b3BGb2N1czogZXZlbnRUeXBlcy5mb2N1cyxcbiAgICAgIHRvcElucHV0OiBldmVudFR5cGVzLmlucHV0LFxuICAgICAgdG9wSW52YWxpZDogZXZlbnRUeXBlcy5pbnZhbGlkLFxuICAgICAgdG9wS2V5RG93bjogZXZlbnRUeXBlcy5rZXlEb3duLFxuICAgICAgdG9wS2V5UHJlc3M6IGV2ZW50VHlwZXMua2V5UHJlc3MsXG4gICAgICB0b3BLZXlVcDogZXZlbnRUeXBlcy5rZXlVcCxcbiAgICAgIHRvcExvYWQ6IGV2ZW50VHlwZXMubG9hZCxcbiAgICAgIHRvcExvYWRlZERhdGE6IGV2ZW50VHlwZXMubG9hZGVkRGF0YSxcbiAgICAgIHRvcExvYWRlZE1ldGFkYXRhOiBldmVudFR5cGVzLmxvYWRlZE1ldGFkYXRhLFxuICAgICAgdG9wTG9hZFN0YXJ0OiBldmVudFR5cGVzLmxvYWRTdGFydCxcbiAgICAgIHRvcE1vdXNlRG93bjogZXZlbnRUeXBlcy5tb3VzZURvd24sXG4gICAgICB0b3BNb3VzZU1vdmU6IGV2ZW50VHlwZXMubW91c2VNb3ZlLFxuICAgICAgdG9wTW91c2VPdXQ6IGV2ZW50VHlwZXMubW91c2VPdXQsXG4gICAgICB0b3BNb3VzZU92ZXI6IGV2ZW50VHlwZXMubW91c2VPdmVyLFxuICAgICAgdG9wTW91c2VVcDogZXZlbnRUeXBlcy5tb3VzZVVwLFxuICAgICAgdG9wUGFzdGU6IGV2ZW50VHlwZXMucGFzdGUsXG4gICAgICB0b3BQYXVzZTogZXZlbnRUeXBlcy5wYXVzZSxcbiAgICAgIHRvcFBsYXk6IGV2ZW50VHlwZXMucGxheSxcbiAgICAgIHRvcFBsYXlpbmc6IGV2ZW50VHlwZXMucGxheWluZyxcbiAgICAgIHRvcFByb2dyZXNzOiBldmVudFR5cGVzLnByb2dyZXNzLFxuICAgICAgdG9wUmF0ZUNoYW5nZTogZXZlbnRUeXBlcy5yYXRlQ2hhbmdlLFxuICAgICAgdG9wUmVzZXQ6IGV2ZW50VHlwZXMucmVzZXQsXG4gICAgICB0b3BTY3JvbGw6IGV2ZW50VHlwZXMuc2Nyb2xsLFxuICAgICAgdG9wU2Vla2VkOiBldmVudFR5cGVzLnNlZWtlZCxcbiAgICAgIHRvcFNlZWtpbmc6IGV2ZW50VHlwZXMuc2Vla2luZyxcbiAgICAgIHRvcFN0YWxsZWQ6IGV2ZW50VHlwZXMuc3RhbGxlZCxcbiAgICAgIHRvcFN1Ym1pdDogZXZlbnRUeXBlcy5zdWJtaXQsXG4gICAgICB0b3BTdXNwZW5kOiBldmVudFR5cGVzLnN1c3BlbmQsXG4gICAgICB0b3BUaW1lVXBkYXRlOiBldmVudFR5cGVzLnRpbWVVcGRhdGUsXG4gICAgICB0b3BUb3VjaENhbmNlbDogZXZlbnRUeXBlcy50b3VjaENhbmNlbCxcbiAgICAgIHRvcFRvdWNoRW5kOiBldmVudFR5cGVzLnRvdWNoRW5kLFxuICAgICAgdG9wVG91Y2hNb3ZlOiBldmVudFR5cGVzLnRvdWNoTW92ZSxcbiAgICAgIHRvcFRvdWNoU3RhcnQ6IGV2ZW50VHlwZXMudG91Y2hTdGFydCxcbiAgICAgIHRvcFRyYW5zaXRpb25FbmQ6IGV2ZW50VHlwZXMudHJhbnNpdGlvbkVuZCxcbiAgICAgIHRvcFZvbHVtZUNoYW5nZTogZXZlbnRUeXBlcy52b2x1bWVDaGFuZ2UsXG4gICAgICB0b3BXYWl0aW5nOiBldmVudFR5cGVzLndhaXRpbmcsXG4gICAgICB0b3BXaGVlbDogZXZlbnRUeXBlcy53aGVlbFxuICAgIH07XG4gICAgZm9yICh2YXIgdHlwZSBpbiB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWcpIHtcbiAgICAgIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0eXBlXS5kZXBlbmRlbmNpZXMgPSBbdHlwZV07XG4gICAgfVxuICAgIHZhciBPTl9DTElDS19LRVkgPSBrZXlPZih7b25DbGljazogbnVsbH0pO1xuICAgIHZhciBvbkNsaWNrTGlzdGVuZXJzID0ge307XG4gICAgdmFyIFNpbXBsZUV2ZW50UGx1Z2luID0ge1xuICAgICAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcbiAgICAgIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0b3BMZXZlbFR5cGVdO1xuICAgICAgICBpZiAoIWRpc3BhdGNoQ29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIEV2ZW50Q29uc3RydWN0b3I7XG4gICAgICAgIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEFib3J0OlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDYW5QbGF5OlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDYW5QbGF5VGhyb3VnaDpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHVyYXRpb25DaGFuZ2U6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEVtcHRpZWQ6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEVuY3J5cHRlZDpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRW5kZWQ6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEVycm9yOlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BJbnB1dDpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wSW52YWxpZDpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZDpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZGVkRGF0YTpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZGVkTWV0YWRhdGE6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWRTdGFydDpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUGF1c2U6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBsYXk6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBsYXlpbmc6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFByb2dyZXNzOlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BSYXRlQ2hhbmdlOlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BSZXNldDpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2Vla2VkOlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTZWVraW5nOlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTdGFsbGVkOlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTdWJtaXQ6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFN1c3BlbmQ6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRpbWVVcGRhdGU6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFZvbHVtZUNoYW5nZTpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wV2FpdGluZzpcbiAgICAgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgICAgICAgIGlmIChnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSA9PT0gMCkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6XG4gICAgICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BCbHVyOlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BGb2N1czpcbiAgICAgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrOlxuICAgICAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmJ1dHRvbiA9PT0gMikge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29udGV4dE1lbnU6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERvdWJsZUNsaWNrOlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlTW92ZTpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQ6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlcjpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VVcDpcbiAgICAgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWc6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbmQ6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbnRlcjpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0V4aXQ6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdMZWF2ZTpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ092ZXI6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdTdGFydDpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJvcDpcbiAgICAgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hDYW5jZWw6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kOlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaE1vdmU6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ6XG4gICAgICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BBbmltYXRpb25FbmQ6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEFuaW1hdGlvbkl0ZXJhdGlvbjpcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQW5pbWF0aW9uU3RhcnQ6XG4gICAgICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVHJhbnNpdGlvbkVuZDpcbiAgICAgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU2Nyb2xsOlxuICAgICAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1VJRXZlbnQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wV2hlZWw6XG4gICAgICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljV2hlZWxFdmVudDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb3B5OlxuICAgICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDdXQ6XG4gICAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOlxuICAgICAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgIUV2ZW50Q29uc3RydWN0b3IgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnU2ltcGxlRXZlbnRQbHVnaW46IFVuaGFuZGxlZCBldmVudCB0eXBlLCBgJXNgLicsIHRvcExldmVsVHlwZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB2YXIgZXZlbnQgPSBFdmVudENvbnN0cnVjdG9yLmdldFBvb2xlZChkaXNwYXRjaENvbmZpZywgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfSxcbiAgICAgIGRpZFB1dExpc3RlbmVyOiBmdW5jdGlvbihpbnN0LCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgICAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gT05fQ0xJQ0tfS0VZKSB7XG4gICAgICAgICAgdmFyIGlkID0gaW5zdC5fcm9vdE5vZGVJRDtcbiAgICAgICAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgICAgICAgIGlmICghb25DbGlja0xpc3RlbmVyc1tpZF0pIHtcbiAgICAgICAgICAgIG9uQ2xpY2tMaXN0ZW5lcnNbaWRdID0gRXZlbnRMaXN0ZW5lci5saXN0ZW4obm9kZSwgJ2NsaWNrJywgZW1wdHlGdW5jdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2lsbERlbGV0ZUxpc3RlbmVyOiBmdW5jdGlvbihpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICAgIGlmIChyZWdpc3RyYXRpb25OYW1lID09PSBPTl9DTElDS19LRVkpIHtcbiAgICAgICAgICB2YXIgaWQgPSBpbnN0Ll9yb290Tm9kZUlEO1xuICAgICAgICAgIG9uQ2xpY2tMaXN0ZW5lcnNbaWRdLnJlbW92ZSgpO1xuICAgICAgICAgIGRlbGV0ZSBvbkNsaWNrTGlzdGVuZXJzW2lkXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBTaW1wbGVFdmVudFBsdWdpbjtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiODFcIiwgW1wiYVwiLCBcImZcIiwgXCIxN1wiLCBcIjE4XCIsIFwiMWFcIiwgXCIyYVwiLCBcIjRiXCIsIFwiMTFcIiwgXCI1MlwiLCBcIjUzXCIsIFwiNWNcIiwgXCI1ZFwiLCBcIjVmXCIsIFwiNjFcIiwgXCI2NlwiLCBcIjY5XCIsIFwiNzBcIiwgXCI4MFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSAkX19yZXF1aXJlKCdhJyk7XG4gIHZhciBDaGFuZ2VFdmVudFBsdWdpbiA9ICRfX3JlcXVpcmUoJ2YnKTtcbiAgdmFyIERlZmF1bHRFdmVudFBsdWdpbk9yZGVyID0gJF9fcmVxdWlyZSgnMTcnKTtcbiAgdmFyIEVudGVyTGVhdmVFdmVudFBsdWdpbiA9ICRfX3JlcXVpcmUoJzE4Jyk7XG4gIHZhciBIVE1MRE9NUHJvcGVydHlDb25maWcgPSAkX19yZXF1aXJlKCcxYScpO1xuICB2YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPSAkX19yZXF1aXJlKCcyYScpO1xuICB2YXIgUmVhY3RET01Db21wb25lbnQgPSAkX19yZXF1aXJlKCc0YicpO1xuICB2YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gJF9fcmVxdWlyZSgnMTEnKTtcbiAgdmFyIFJlYWN0RE9NRW1wdHlDb21wb25lbnQgPSAkX19yZXF1aXJlKCc1MicpO1xuICB2YXIgUmVhY3RET01UcmVlVHJhdmVyc2FsID0gJF9fcmVxdWlyZSgnNTMnKTtcbiAgdmFyIFJlYWN0RE9NVGV4dENvbXBvbmVudCA9ICRfX3JlcXVpcmUoJzVjJyk7XG4gIHZhciBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5ID0gJF9fcmVxdWlyZSgnNWQnKTtcbiAgdmFyIFJlYWN0RXZlbnRMaXN0ZW5lciA9ICRfX3JlcXVpcmUoJzVmJyk7XG4gIHZhciBSZWFjdEluamVjdGlvbiA9ICRfX3JlcXVpcmUoJzYxJyk7XG4gIHZhciBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uID0gJF9fcmVxdWlyZSgnNjYnKTtcbiAgdmFyIFNWR0RPTVByb3BlcnR5Q29uZmlnID0gJF9fcmVxdWlyZSgnNjknKTtcbiAgdmFyIFNlbGVjdEV2ZW50UGx1Z2luID0gJF9fcmVxdWlyZSgnNzAnKTtcbiAgdmFyIFNpbXBsZUV2ZW50UGx1Z2luID0gJF9fcmVxdWlyZSgnODAnKTtcbiAgdmFyIGFscmVhZHlJbmplY3RlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBpbmplY3QoKSB7XG4gICAgaWYgKGFscmVhZHlJbmplY3RlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbHJlYWR5SW5qZWN0ZWQgPSB0cnVlO1xuICAgIFJlYWN0SW5qZWN0aW9uLkV2ZW50RW1pdHRlci5pbmplY3RSZWFjdEV2ZW50TGlzdGVuZXIoUmVhY3RFdmVudExpc3RlbmVyKTtcbiAgICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKERlZmF1bHRFdmVudFBsdWdpbk9yZGVyKTtcbiAgICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpblV0aWxzLmluamVjdENvbXBvbmVudFRyZWUoUmVhY3RET01Db21wb25lbnRUcmVlKTtcbiAgICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpblV0aWxzLmluamVjdFRyZWVUcmF2ZXJzYWwoUmVhY3RET01UcmVlVHJhdmVyc2FsKTtcbiAgICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpbkh1Yi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuICAgICAgU2ltcGxlRXZlbnRQbHVnaW46IFNpbXBsZUV2ZW50UGx1Z2luLFxuICAgICAgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOiBFbnRlckxlYXZlRXZlbnRQbHVnaW4sXG4gICAgICBDaGFuZ2VFdmVudFBsdWdpbjogQ2hhbmdlRXZlbnRQbHVnaW4sXG4gICAgICBTZWxlY3RFdmVudFBsdWdpbjogU2VsZWN0RXZlbnRQbHVnaW4sXG4gICAgICBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXG4gICAgfSk7XG4gICAgUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzcyhSZWFjdERPTUNvbXBvbmVudCk7XG4gICAgUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdFRleHRDb21wb25lbnRDbGFzcyhSZWFjdERPTVRleHRDb21wb25lbnQpO1xuICAgIFJlYWN0SW5qZWN0aW9uLkRPTVByb3BlcnR5LmluamVjdERPTVByb3BlcnR5Q29uZmlnKEhUTUxET01Qcm9wZXJ0eUNvbmZpZyk7XG4gICAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoU1ZHRE9NUHJvcGVydHlDb25maWcpO1xuICAgIFJlYWN0SW5qZWN0aW9uLkVtcHR5Q29tcG9uZW50LmluamVjdEVtcHR5Q29tcG9uZW50RmFjdG9yeShmdW5jdGlvbihpbnN0YW50aWF0ZSkge1xuICAgICAgcmV0dXJuIG5ldyBSZWFjdERPTUVtcHR5Q29tcG9uZW50KGluc3RhbnRpYXRlKTtcbiAgICB9KTtcbiAgICBSZWFjdEluamVjdGlvbi5VcGRhdGVzLmluamVjdFJlY29uY2lsZVRyYW5zYWN0aW9uKFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24pO1xuICAgIFJlYWN0SW5qZWN0aW9uLlVwZGF0ZXMuaW5qZWN0QmF0Y2hpbmdTdHJhdGVneShSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5KTtcbiAgICBSZWFjdEluamVjdGlvbi5Db21wb25lbnQuaW5qZWN0RW52aXJvbm1lbnQoUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQpO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0ge2luamVjdDogaW5qZWN0fTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI4MlwiLCBbXCI0N1wiLCBcIjExXCIsIFwiODNcIiwgXCI4NFwiLCBcIjMwXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgUmVhY3RDdXJyZW50T3duZXIgPSAkX19yZXF1aXJlKCc0NycpO1xuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSAkX19yZXF1aXJlKCcxMScpO1xuICAgIHZhciBSZWFjdEluc3RhbmNlTWFwID0gJF9fcmVxdWlyZSgnODMnKTtcbiAgICB2YXIgZ2V0TmF0aXZlQ29tcG9uZW50RnJvbUNvbXBvc2l0ZSA9ICRfX3JlcXVpcmUoJzg0Jyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIGZ1bmN0aW9uIGZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcob3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyLCAnJXMgaXMgYWNjZXNzaW5nIGZpbmRET01Ob2RlIGluc2lkZSBpdHMgcmVuZGVyKCkuICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbXBvbmVudE9yRWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGNvbXBvbmVudE9yRWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xuICAgICAgfVxuICAgICAgdmFyIGluc3QgPSBSZWFjdEluc3RhbmNlTWFwLmdldChjb21wb25lbnRPckVsZW1lbnQpO1xuICAgICAgaWYgKGluc3QpIHtcbiAgICAgICAgaW5zdCA9IGdldE5hdGl2ZUNvbXBvbmVudEZyb21Db21wb3NpdGUoaW5zdCk7XG4gICAgICAgIHJldHVybiBpbnN0ID8gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCkgOiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRPckVsZW1lbnQucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICFmYWxzZSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdmaW5kRE9NTm9kZSB3YXMgY2FsbGVkIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgIWZhbHNlID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VsZW1lbnQgYXBwZWFycyB0byBiZSBuZWl0aGVyIFJlYWN0Q29tcG9uZW50IG5vciBET01Ob2RlIChrZXlzOiAlcyknLCBPYmplY3Qua2V5cyhjb21wb25lbnRPckVsZW1lbnQpKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gZmluZERPTU5vZGU7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjg0XCIsIFtcIjg1XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgUmVhY3ROb2RlVHlwZXMgPSAkX19yZXF1aXJlKCc4NScpO1xuICBmdW5jdGlvbiBnZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlKGluc3QpIHtcbiAgICB2YXIgdHlwZTtcbiAgICB3aGlsZSAoKHR5cGUgPSBpbnN0Ll9yZW5kZXJlZE5vZGVUeXBlKSA9PT0gUmVhY3ROb2RlVHlwZXMuQ09NUE9TSVRFKSB7XG4gICAgICBpbnN0ID0gaW5zdC5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBSZWFjdE5vZGVUeXBlcy5OQVRJVkUpIHtcbiAgICAgIHJldHVybiBpbnN0Ll9yZW5kZXJlZENvbXBvbmVudDtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFJlYWN0Tm9kZVR5cGVzLkVNUFRZKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjRkXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgRE9NTmFtZXNwYWNlcyA9IHtcbiAgICBodG1sOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsXG4gICAgbWF0aG1sOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCcsXG4gICAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnXG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gRE9NTmFtZXNwYWNlcztcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIzOVwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIEVTQ0FQRV9MT09LVVAgPSB7XG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc+JzogJyZndDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICdcIic6ICcmcXVvdDsnLFxuICAgICdcXCcnOiAnJiN4Mjc7J1xuICB9O1xuICB2YXIgRVNDQVBFX1JFR0VYID0gL1smPjxcIiddL2c7XG4gIGZ1bmN0aW9uIGVzY2FwZXIobWF0Y2gpIHtcbiAgICByZXR1cm4gRVNDQVBFX0xPT0tVUFttYXRjaF07XG4gIH1cbiAgZnVuY3Rpb24gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRleHQpIHtcbiAgICByZXR1cm4gKCcnICsgdGV4dCkucmVwbGFjZShFU0NBUEVfUkVHRVgsIGVzY2FwZXIpO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjViXCIsIFtcImRcIiwgXCIzOVwiLCBcIjVhXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSAkX19yZXF1aXJlKCdkJyk7XG4gIHZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSAkX19yZXF1aXJlKCczOScpO1xuICB2YXIgc2V0SW5uZXJIVE1MID0gJF9fcmVxdWlyZSgnNWEnKTtcbiAgdmFyIHNldFRleHRDb250ZW50ID0gZnVuY3Rpb24obm9kZSwgdGV4dCkge1xuICAgIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9O1xuICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gICAgaWYgKCEoJ3RleHRDb250ZW50JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uKG5vZGUsIHRleHQpIHtcbiAgICAgICAgc2V0SW5uZXJIVE1MKG5vZGUsIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcih0ZXh0KSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IHNldFRleHRDb250ZW50O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjRjXCIsIFtcIjRkXCIsIFwiNTlcIiwgXCI1YlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIERPTU5hbWVzcGFjZXMgPSAkX19yZXF1aXJlKCc0ZCcpO1xuICB2YXIgY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbiA9ICRfX3JlcXVpcmUoJzU5Jyk7XG4gIHZhciBzZXRUZXh0Q29udGVudCA9ICRfX3JlcXVpcmUoJzViJyk7XG4gIHZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG4gIHZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUgPSAxMTtcbiAgdmFyIGVuYWJsZUxhenkgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudC5kb2N1bWVudE1vZGUgPT09ICdudW1iZXInIHx8IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBuYXZpZ2F0b3IudXNlckFnZW50ID09PSAnc3RyaW5nJyAmJiAvXFxiRWRnZVxcL1xcZC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgZnVuY3Rpb24gaW5zZXJ0VHJlZUNoaWxkcmVuKHRyZWUpIHtcbiAgICBpZiAoIWVuYWJsZUxhenkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG5vZGUgPSB0cmVlLm5vZGU7XG4gICAgdmFyIGNoaWxkcmVuID0gdHJlZS5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGluc2VydFRyZWVCZWZvcmUobm9kZSwgY2hpbGRyZW5baV0sIG51bGwpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHJlZS5odG1sICE9IG51bGwpIHtcbiAgICAgIG5vZGUuaW5uZXJIVE1MID0gdHJlZS5odG1sO1xuICAgIH0gZWxzZSBpZiAodHJlZS50ZXh0ICE9IG51bGwpIHtcbiAgICAgIHNldFRleHRDb250ZW50KG5vZGUsIHRyZWUudGV4dCk7XG4gICAgfVxuICB9XG4gIHZhciBpbnNlcnRUcmVlQmVmb3JlID0gY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbihwYXJlbnROb2RlLCB0cmVlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgaWYgKHRyZWUubm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFIHx8IHRyZWUubm9kZS5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgJiYgdHJlZS5ub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdvYmplY3QnICYmICh0cmVlLm5vZGUubmFtZXNwYWNlVVJJID09IG51bGwgfHwgdHJlZS5ub2RlLm5hbWVzcGFjZVVSSSA9PT0gRE9NTmFtZXNwYWNlcy5odG1sKSkge1xuICAgICAgaW5zZXJ0VHJlZUNoaWxkcmVuKHRyZWUpO1xuICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodHJlZS5ub2RlLCByZWZlcmVuY2VOb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodHJlZS5ub2RlLCByZWZlcmVuY2VOb2RlKTtcbiAgICAgIGluc2VydFRyZWVDaGlsZHJlbih0cmVlKTtcbiAgICB9XG4gIH0pO1xuICBmdW5jdGlvbiByZXBsYWNlQ2hpbGRXaXRoVHJlZShvbGROb2RlLCBuZXdUcmVlKSB7XG4gICAgb2xkTm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChuZXdUcmVlLm5vZGUsIG9sZE5vZGUpO1xuICAgIGluc2VydFRyZWVDaGlsZHJlbihuZXdUcmVlKTtcbiAgfVxuICBmdW5jdGlvbiBxdWV1ZUNoaWxkKHBhcmVudFRyZWUsIGNoaWxkVHJlZSkge1xuICAgIGlmIChlbmFibGVMYXp5KSB7XG4gICAgICBwYXJlbnRUcmVlLmNoaWxkcmVuLnB1c2goY2hpbGRUcmVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50VHJlZS5ub2RlLmFwcGVuZENoaWxkKGNoaWxkVHJlZS5ub2RlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcXVldWVIVE1MKHRyZWUsIGh0bWwpIHtcbiAgICBpZiAoZW5hYmxlTGF6eSkge1xuICAgICAgdHJlZS5odG1sID0gaHRtbDtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJlZS5ub2RlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHF1ZXVlVGV4dCh0cmVlLCB0ZXh0KSB7XG4gICAgaWYgKGVuYWJsZUxhenkpIHtcbiAgICAgIHRyZWUudGV4dCA9IHRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRleHRDb250ZW50KHRyZWUubm9kZSwgdGV4dCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm5vZGUubm9kZU5hbWU7XG4gIH1cbiAgZnVuY3Rpb24gRE9NTGF6eVRyZWUobm9kZSkge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlOiBub2RlLFxuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgaHRtbDogbnVsbCxcbiAgICAgIHRleHQ6IG51bGwsXG4gICAgICB0b1N0cmluZzogdG9TdHJpbmdcbiAgICB9O1xuICB9XG4gIERPTUxhenlUcmVlLmluc2VydFRyZWVCZWZvcmUgPSBpbnNlcnRUcmVlQmVmb3JlO1xuICBET01MYXp5VHJlZS5yZXBsYWNlQ2hpbGRXaXRoVHJlZSA9IHJlcGxhY2VDaGlsZFdpdGhUcmVlO1xuICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkID0gcXVldWVDaGlsZDtcbiAgRE9NTGF6eVRyZWUucXVldWVIVE1MID0gcXVldWVIVE1MO1xuICBET01MYXp5VHJlZS5xdWV1ZVRleHQgPSBxdWV1ZVRleHQ7XG4gIG1vZHVsZS5leHBvcnRzID0gRE9NTGF6eVRyZWU7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMzVcIiwgW1wiMzBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIgRXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG4gICAgdmFyIG5hbWVzVG9QbHVnaW5zID0ge307XG4gICAgZnVuY3Rpb24gcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKSB7XG4gICAgICBpZiAoIUV2ZW50UGx1Z2luT3JkZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucykge1xuICAgICAgICB2YXIgUGx1Z2luTW9kdWxlID0gbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICAgIHZhciBwbHVnaW5JbmRleCA9IEV2ZW50UGx1Z2luT3JkZXIuaW5kZXhPZihwbHVnaW5OYW1lKTtcbiAgICAgICAgIShwbHVnaW5JbmRleCA+IC0xKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbnMgdGhhdCBkbyBub3QgZXhpc3QgaW4gJyArICd0aGUgcGx1Z2luIG9yZGVyaW5nLCBgJXNgLicsIHBsdWdpbk5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgaWYgKEV2ZW50UGx1Z2luUmVnaXN0cnkucGx1Z2luc1twbHVnaW5JbmRleF0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAhUGx1Z2luTW9kdWxlLmV4dHJhY3RFdmVudHMgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRXZlbnQgcGx1Z2lucyBtdXN0IGltcGxlbWVudCBhbiBgZXh0cmFjdEV2ZW50c2AgJyArICdtZXRob2QsIGJ1dCBgJXNgIGRvZXMgbm90LicsIHBsdWdpbk5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zW3BsdWdpbkluZGV4XSA9IFBsdWdpbk1vZHVsZTtcbiAgICAgICAgdmFyIHB1Ymxpc2hlZEV2ZW50cyA9IFBsdWdpbk1vZHVsZS5ldmVudFR5cGVzO1xuICAgICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gcHVibGlzaGVkRXZlbnRzKSB7XG4gICAgICAgICAgIXB1Ymxpc2hFdmVudEZvclBsdWdpbihwdWJsaXNoZWRFdmVudHNbZXZlbnROYW1lXSwgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEZhaWxlZCB0byBwdWJsaXNoIGV2ZW50IGAlc2AgZm9yIHBsdWdpbiBgJXNgLicsIGV2ZW50TmFtZSwgcGx1Z2luTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHB1Ymxpc2hFdmVudEZvclBsdWdpbihkaXNwYXRjaENvbmZpZywgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgICAgICEhRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgJyArICdldmVudCBuYW1lLCBgJXNgLicsIGV2ZW50TmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXSA9IGRpc3BhdGNoQ29uZmlnO1xuICAgICAgdmFyIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzID0gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7XG4gICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgICAgZm9yICh2YXIgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICAgICAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlTmFtZSkpIHtcbiAgICAgICAgICAgIHZhciBwaGFzZWRSZWdpc3RyYXRpb25OYW1lID0gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcGhhc2VOYW1lXTtcbiAgICAgICAgICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWUsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgICAgcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSwgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUocmVnaXN0cmF0aW9uTmFtZSwgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgICAgICEhRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpbkh1YjogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgJyArICdyZWdpc3RyYXRpb24gbmFtZSwgYCVzYC4nLCByZWdpc3RyYXRpb25OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gUGx1Z2luTW9kdWxlO1xuICAgICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gUGx1Z2luTW9kdWxlLmV2ZW50VHlwZXNbZXZlbnROYW1lXS5kZXBlbmRlbmNpZXM7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSByZWdpc3RyYXRpb25OYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1tsb3dlckNhc2VkTmFtZV0gPSByZWdpc3RyYXRpb25OYW1lO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcbiAgICAgIHBsdWdpbnM6IFtdLFxuICAgICAgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzOiB7fSxcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiB7fSxcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXM6IHt9LFxuICAgICAgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lczogXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHt9IDogbnVsbCxcbiAgICAgIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IGZ1bmN0aW9uKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcikge1xuICAgICAgICAhIUV2ZW50UGx1Z2luT3JkZXIgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW4gb3JkZXJpbmcgbW9yZSB0aGFuICcgKyAnb25jZS4gWW91IGFyZSBsaWtlbHkgdHJ5aW5nIHRvIGxvYWQgbW9yZSB0aGFuIG9uZSBjb3B5IG9mIFJlYWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgRXZlbnRQbHVnaW5PcmRlciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcik7XG4gICAgICAgIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG4gICAgICB9LFxuICAgICAgaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOiBmdW5jdGlvbihpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICAgIHZhciBpc09yZGVyaW5nRGlydHkgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBpbmplY3RlZE5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICAgICAgaWYgKCFpbmplY3RlZE5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IGluamVjdGVkTmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgICAgICAgaWYgKCFuYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSB8fCBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSAhPT0gUGx1Z2luTW9kdWxlKSB7XG4gICAgICAgICAgICAhIW5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgdHdvIGRpZmZlcmVudCBldmVudCBwbHVnaW5zICcgKyAndXNpbmcgdGhlIHNhbWUgbmFtZSwgYCVzYC4nLCBwbHVnaW5OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA9IFBsdWdpbk1vZHVsZTtcbiAgICAgICAgICAgIGlzT3JkZXJpbmdEaXJ0eSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc09yZGVyaW5nRGlydHkpIHtcbiAgICAgICAgICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0UGx1Z2luTW9kdWxlRm9yRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnO1xuICAgICAgICBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgICAgICAgIHJldHVybiBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW2Rpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWVdIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgcGhhc2UgaW4gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgICAgICBpZiAoIWRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW2Rpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlXV07XG4gICAgICAgICAgaWYgKFBsdWdpbk1vZHVsZSkge1xuICAgICAgICAgICAgcmV0dXJuIFBsdWdpbk1vZHVsZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9LFxuICAgICAgX3Jlc2V0RXZlbnRQbHVnaW5zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgRXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG4gICAgICAgIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gbmFtZXNUb1BsdWdpbnMpIHtcbiAgICAgICAgICBpZiAobmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zLmxlbmd0aCA9IDA7XG4gICAgICAgIHZhciBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlncztcbiAgICAgICAgZm9yICh2YXIgZXZlbnROYW1lIGluIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlncykge1xuICAgICAgICAgIGlmIChldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSkge1xuICAgICAgICAgICAgZGVsZXRlIGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzO1xuICAgICAgICBmb3IgKHZhciByZWdpc3RyYXRpb25OYW1lIGluIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzKSB7XG4gICAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG4gICAgICAgICAgICBkZWxldGUgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM7XG4gICAgICAgICAgZm9yICh2YXIgbG93ZXJDYXNlZE5hbWUgaW4gcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgICAgICAgaWYgKHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzW2xvd2VyQ2FzZWROYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5SZWdpc3RyeTtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiYlwiLCBbXCI1OFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGtleU1pcnJvciA9ICRfX3JlcXVpcmUoJzU4Jyk7XG4gIHZhciBQcm9wYWdhdGlvblBoYXNlcyA9IGtleU1pcnJvcih7XG4gICAgYnViYmxlZDogbnVsbCxcbiAgICBjYXB0dXJlZDogbnVsbFxuICB9KTtcbiAgdmFyIHRvcExldmVsVHlwZXMgPSBrZXlNaXJyb3Ioe1xuICAgIHRvcEFib3J0OiBudWxsLFxuICAgIHRvcEFuaW1hdGlvbkVuZDogbnVsbCxcbiAgICB0b3BBbmltYXRpb25JdGVyYXRpb246IG51bGwsXG4gICAgdG9wQW5pbWF0aW9uU3RhcnQ6IG51bGwsXG4gICAgdG9wQmx1cjogbnVsbCxcbiAgICB0b3BDYW5QbGF5OiBudWxsLFxuICAgIHRvcENhblBsYXlUaHJvdWdoOiBudWxsLFxuICAgIHRvcENoYW5nZTogbnVsbCxcbiAgICB0b3BDbGljazogbnVsbCxcbiAgICB0b3BDb21wb3NpdGlvbkVuZDogbnVsbCxcbiAgICB0b3BDb21wb3NpdGlvblN0YXJ0OiBudWxsLFxuICAgIHRvcENvbXBvc2l0aW9uVXBkYXRlOiBudWxsLFxuICAgIHRvcENvbnRleHRNZW51OiBudWxsLFxuICAgIHRvcENvcHk6IG51bGwsXG4gICAgdG9wQ3V0OiBudWxsLFxuICAgIHRvcERvdWJsZUNsaWNrOiBudWxsLFxuICAgIHRvcERyYWc6IG51bGwsXG4gICAgdG9wRHJhZ0VuZDogbnVsbCxcbiAgICB0b3BEcmFnRW50ZXI6IG51bGwsXG4gICAgdG9wRHJhZ0V4aXQ6IG51bGwsXG4gICAgdG9wRHJhZ0xlYXZlOiBudWxsLFxuICAgIHRvcERyYWdPdmVyOiBudWxsLFxuICAgIHRvcERyYWdTdGFydDogbnVsbCxcbiAgICB0b3BEcm9wOiBudWxsLFxuICAgIHRvcER1cmF0aW9uQ2hhbmdlOiBudWxsLFxuICAgIHRvcEVtcHRpZWQ6IG51bGwsXG4gICAgdG9wRW5jcnlwdGVkOiBudWxsLFxuICAgIHRvcEVuZGVkOiBudWxsLFxuICAgIHRvcEVycm9yOiBudWxsLFxuICAgIHRvcEZvY3VzOiBudWxsLFxuICAgIHRvcElucHV0OiBudWxsLFxuICAgIHRvcEludmFsaWQ6IG51bGwsXG4gICAgdG9wS2V5RG93bjogbnVsbCxcbiAgICB0b3BLZXlQcmVzczogbnVsbCxcbiAgICB0b3BLZXlVcDogbnVsbCxcbiAgICB0b3BMb2FkOiBudWxsLFxuICAgIHRvcExvYWRlZERhdGE6IG51bGwsXG4gICAgdG9wTG9hZGVkTWV0YWRhdGE6IG51bGwsXG4gICAgdG9wTG9hZFN0YXJ0OiBudWxsLFxuICAgIHRvcE1vdXNlRG93bjogbnVsbCxcbiAgICB0b3BNb3VzZU1vdmU6IG51bGwsXG4gICAgdG9wTW91c2VPdXQ6IG51bGwsXG4gICAgdG9wTW91c2VPdmVyOiBudWxsLFxuICAgIHRvcE1vdXNlVXA6IG51bGwsXG4gICAgdG9wUGFzdGU6IG51bGwsXG4gICAgdG9wUGF1c2U6IG51bGwsXG4gICAgdG9wUGxheTogbnVsbCxcbiAgICB0b3BQbGF5aW5nOiBudWxsLFxuICAgIHRvcFByb2dyZXNzOiBudWxsLFxuICAgIHRvcFJhdGVDaGFuZ2U6IG51bGwsXG4gICAgdG9wUmVzZXQ6IG51bGwsXG4gICAgdG9wU2Nyb2xsOiBudWxsLFxuICAgIHRvcFNlZWtlZDogbnVsbCxcbiAgICB0b3BTZWVraW5nOiBudWxsLFxuICAgIHRvcFNlbGVjdGlvbkNoYW5nZTogbnVsbCxcbiAgICB0b3BTdGFsbGVkOiBudWxsLFxuICAgIHRvcFN1Ym1pdDogbnVsbCxcbiAgICB0b3BTdXNwZW5kOiBudWxsLFxuICAgIHRvcFRleHRJbnB1dDogbnVsbCxcbiAgICB0b3BUaW1lVXBkYXRlOiBudWxsLFxuICAgIHRvcFRvdWNoQ2FuY2VsOiBudWxsLFxuICAgIHRvcFRvdWNoRW5kOiBudWxsLFxuICAgIHRvcFRvdWNoTW92ZTogbnVsbCxcbiAgICB0b3BUb3VjaFN0YXJ0OiBudWxsLFxuICAgIHRvcFRyYW5zaXRpb25FbmQ6IG51bGwsXG4gICAgdG9wVm9sdW1lQ2hhbmdlOiBudWxsLFxuICAgIHRvcFdhaXRpbmc6IG51bGwsXG4gICAgdG9wV2hlZWw6IG51bGxcbiAgfSk7XG4gIHZhciBFdmVudENvbnN0YW50cyA9IHtcbiAgICB0b3BMZXZlbFR5cGVzOiB0b3BMZXZlbFR5cGVzLFxuICAgIFByb3BhZ2F0aW9uUGhhc2VzOiBQcm9wYWdhdGlvblBoYXNlc1xuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50Q29uc3RhbnRzO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjYyXCIsIFtcImJcIiwgXCI4NlwiLCBcIjMwXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgRXZlbnRDb25zdGFudHMgPSAkX19yZXF1aXJlKCdiJyk7XG4gICAgdmFyIFJlYWN0RXJyb3JVdGlscyA9ICRfX3JlcXVpcmUoJzg2Jyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBDb21wb25lbnRUcmVlO1xuICAgIHZhciBUcmVlVHJhdmVyc2FsO1xuICAgIHZhciBpbmplY3Rpb24gPSB7XG4gICAgICBpbmplY3RDb21wb25lbnRUcmVlOiBmdW5jdGlvbihJbmplY3RlZCkge1xuICAgICAgICBDb21wb25lbnRUcmVlID0gSW5qZWN0ZWQ7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoSW5qZWN0ZWQgJiYgSW5qZWN0ZWQuZ2V0Tm9kZUZyb21JbnN0YW5jZSAmJiBJbmplY3RlZC5nZXRJbnN0YW5jZUZyb21Ob2RlLCAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0Q29tcG9uZW50VHJlZSguLi4pOiBJbmplY3RlZCAnICsgJ21vZHVsZSBpcyBtaXNzaW5nIGdldE5vZGVGcm9tSW5zdGFuY2Ugb3IgZ2V0SW5zdGFuY2VGcm9tTm9kZS4nKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGluamVjdFRyZWVUcmF2ZXJzYWw6IGZ1bmN0aW9uKEluamVjdGVkKSB7XG4gICAgICAgIFRyZWVUcmF2ZXJzYWwgPSBJbmplY3RlZDtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhJbmplY3RlZCAmJiBJbmplY3RlZC5pc0FuY2VzdG9yICYmIEluamVjdGVkLmdldExvd2VzdENvbW1vbkFuY2VzdG9yLCAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0VHJlZVRyYXZlcnNhbCguLi4pOiBJbmplY3RlZCAnICsgJ21vZHVsZSBpcyBtaXNzaW5nIGlzQW5jZXN0b3Igb3IgZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IuJykgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbiAgICBmdW5jdGlvbiBpc0VuZGlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VVcCB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hFbmQgfHwgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoQ2FuY2VsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc01vdmVpc2godG9wTGV2ZWxUeXBlKSB7XG4gICAgICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlTW92ZSB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1N0YXJ0aXNoKHRvcExldmVsVHlwZSkge1xuICAgICAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd24gfHwgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ7XG4gICAgfVxuICAgIHZhciB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcztcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gICAgICAgIHZhciBkaXNwYXRjaEluc3RhbmNlcyA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAgICAgICAgdmFyIGxpc3RlbmVyc0lzQXJyID0gQXJyYXkuaXNBcnJheShkaXNwYXRjaExpc3RlbmVycyk7XG4gICAgICAgIHZhciBsaXN0ZW5lcnNMZW4gPSBsaXN0ZW5lcnNJc0FyciA/IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aCA6IGRpc3BhdGNoTGlzdGVuZXJzID8gMSA6IDA7XG4gICAgICAgIHZhciBpbnN0YW5jZXNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJbnN0YW5jZXMpO1xuICAgICAgICB2YXIgaW5zdGFuY2VzTGVuID0gaW5zdGFuY2VzSXNBcnIgPyBkaXNwYXRjaEluc3RhbmNlcy5sZW5ndGggOiBkaXNwYXRjaEluc3RhbmNlcyA/IDEgOiAwO1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhpbnN0YW5jZXNJc0FyciA9PT0gbGlzdGVuZXJzSXNBcnIgJiYgaW5zdGFuY2VzTGVuID09PSBsaXN0ZW5lcnNMZW4sICdFdmVudFBsdWdpblV0aWxzOiBJbnZhbGlkIGBldmVudGAuJykgOiB2b2lkIDA7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgbGlzdGVuZXIsIGluc3QpIHtcbiAgICAgIHZhciB0eXBlID0gZXZlbnQudHlwZSB8fCAndW5rbm93bi1ldmVudCc7XG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gRXZlbnRQbHVnaW5VdGlscy5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgICAgaWYgKHNpbXVsYXRlZCkge1xuICAgICAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrV2l0aENhdGNoKHR5cGUsIGxpc3RlbmVyLCBldmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrKHR5cGUsIGxpc3RlbmVyLCBldmVudCk7XG4gICAgICB9XG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBzaW11bGF0ZWQpIHtcbiAgICAgIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgICAgIHZhciBkaXNwYXRjaEluc3RhbmNlcyA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzKGV2ZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgZGlzcGF0Y2hMaXN0ZW5lcnNbaV0sIGRpc3BhdGNoSW5zdGFuY2VzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgICAgICBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIHNpbXVsYXRlZCwgZGlzcGF0Y2hMaXN0ZW5lcnMsIGRpc3BhdGNoSW5zdGFuY2VzKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gICAgICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlSW1wbChldmVudCkge1xuICAgICAgdmFyIGRpc3BhdGNoTGlzdGVuZXJzID0gZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICAgICAgdmFyIGRpc3BhdGNoSW5zdGFuY2VzID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICAgICAgfVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkaXNwYXRjaExpc3RlbmVyc1tpXShldmVudCwgZGlzcGF0Y2hJbnN0YW5jZXNbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2hJbnN0YW5jZXNbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKSB7XG4gICAgICAgIGlmIChkaXNwYXRjaExpc3RlbmVycyhldmVudCwgZGlzcGF0Y2hJbnN0YW5jZXMpKSB7XG4gICAgICAgICAgcmV0dXJuIGRpc3BhdGNoSW5zdGFuY2VzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZShldmVudCkge1xuICAgICAgdmFyIHJldCA9IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsKGV2ZW50KTtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IG51bGw7XG4gICAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZXhlY3V0ZURpcmVjdERpc3BhdGNoKGV2ZW50KSB7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gICAgICB9XG4gICAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lciA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgICAgIHZhciBkaXNwYXRjaEluc3RhbmNlID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuICAgICAgISFBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXIpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2V4ZWN1dGVEaXJlY3REaXNwYXRjaCguLi4pOiBJbnZhbGlkIGBldmVudGAuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgZXZlbnQuY3VycmVudFRhcmdldCA9IGRpc3BhdGNoTGlzdGVuZXIgPyBFdmVudFBsdWdpblV0aWxzLmdldE5vZGVGcm9tSW5zdGFuY2UoZGlzcGF0Y2hJbnN0YW5jZSkgOiBudWxsO1xuICAgICAgdmFyIHJlcyA9IGRpc3BhdGNoTGlzdGVuZXIgPyBkaXNwYXRjaExpc3RlbmVyKGV2ZW50KSA6IG51bGw7XG4gICAgICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gICAgICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBudWxsO1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzRGlzcGF0Y2hlcyhldmVudCkge1xuICAgICAgcmV0dXJuICEhZXZlbnQuX2Rpc3BhdGNoTGlzdGVuZXJzO1xuICAgIH1cbiAgICB2YXIgRXZlbnRQbHVnaW5VdGlscyA9IHtcbiAgICAgIGlzRW5kaXNoOiBpc0VuZGlzaCxcbiAgICAgIGlzTW92ZWlzaDogaXNNb3ZlaXNoLFxuICAgICAgaXNTdGFydGlzaDogaXNTdGFydGlzaCxcbiAgICAgIGV4ZWN1dGVEaXJlY3REaXNwYXRjaDogZXhlY3V0ZURpcmVjdERpc3BhdGNoLFxuICAgICAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIsXG4gICAgICBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlLFxuICAgICAgaGFzRGlzcGF0Y2hlczogaGFzRGlzcGF0Y2hlcyxcbiAgICAgIGdldEluc3RhbmNlRnJvbU5vZGU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIENvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKTtcbiAgICAgIH0sXG4gICAgICBnZXROb2RlRnJvbUluc3RhbmNlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIHJldHVybiBDb21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2Uobm9kZSk7XG4gICAgICB9LFxuICAgICAgaXNBbmNlc3RvcjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgICByZXR1cm4gVHJlZVRyYXZlcnNhbC5pc0FuY2VzdG9yKGEsIGIpO1xuICAgICAgfSxcbiAgICAgIGdldExvd2VzdENvbW1vbkFuY2VzdG9yOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgIHJldHVybiBUcmVlVHJhdmVyc2FsLmdldExvd2VzdENvbW1vbkFuY2VzdG9yKGEsIGIpO1xuICAgICAgfSxcbiAgICAgIGdldFBhcmVudEluc3RhbmNlOiBmdW5jdGlvbihpbnN0KSB7XG4gICAgICAgIHJldHVybiBUcmVlVHJhdmVyc2FsLmdldFBhcmVudEluc3RhbmNlKGluc3QpO1xuICAgICAgfSxcbiAgICAgIHRyYXZlcnNlVHdvUGhhc2U6IGZ1bmN0aW9uKHRhcmdldCwgZm4sIGFyZykge1xuICAgICAgICByZXR1cm4gVHJlZVRyYXZlcnNhbC50cmF2ZXJzZVR3b1BoYXNlKHRhcmdldCwgZm4sIGFyZyk7XG4gICAgICB9LFxuICAgICAgdHJhdmVyc2VFbnRlckxlYXZlOiBmdW5jdGlvbihmcm9tLCB0bywgZm4sIGFyZ0Zyb20sIGFyZ1RvKSB7XG4gICAgICAgIHJldHVybiBUcmVlVHJhdmVyc2FsLnRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgZm4sIGFyZ0Zyb20sIGFyZ1RvKTtcbiAgICAgIH0sXG4gICAgICBpbmplY3Rpb246IGluamVjdGlvblxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblV0aWxzO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI3MVwiLCBbXCIzMFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIGZ1bmN0aW9uIGFjY3VtdWxhdGVJbnRvKGN1cnJlbnQsIG5leHQpIHtcbiAgICAgICEobmV4dCAhPSBudWxsKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBpZiAoY3VycmVudCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgfVxuICAgICAgdmFyIGN1cnJlbnRJc0FycmF5ID0gQXJyYXkuaXNBcnJheShjdXJyZW50KTtcbiAgICAgIHZhciBuZXh0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkobmV4dCk7XG4gICAgICBpZiAoY3VycmVudElzQXJyYXkgJiYgbmV4dElzQXJyYXkpIHtcbiAgICAgICAgY3VycmVudC5wdXNoLmFwcGx5KGN1cnJlbnQsIG5leHQpO1xuICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50SXNBcnJheSkge1xuICAgICAgICBjdXJyZW50LnB1c2gobmV4dCk7XG4gICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgfVxuICAgICAgaWYgKG5leHRJc0FycmF5KSB7XG4gICAgICAgIHJldHVybiBbY3VycmVudF0uY29uY2F0KG5leHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtjdXJyZW50LCBuZXh0XTtcbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBhY2N1bXVsYXRlSW50bztcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNzJcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSBmdW5jdGlvbihhcnIsIGNiLCBzY29wZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgIGFyci5mb3JFYWNoKGNiLCBzY29wZSk7XG4gICAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICAgIGNiLmNhbGwoc2NvcGUsIGFycik7XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IGZvckVhY2hBY2N1bXVsYXRlZDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMFwiLCBbXCIzNVwiLCBcIjYyXCIsIFwiODZcIiwgXCI3MVwiLCBcIjcyXCIsIFwiMzBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9ICRfX3JlcXVpcmUoJzM1Jyk7XG4gICAgdmFyIEV2ZW50UGx1Z2luVXRpbHMgPSAkX19yZXF1aXJlKCc2MicpO1xuICAgIHZhciBSZWFjdEVycm9yVXRpbHMgPSAkX19yZXF1aXJlKCc4NicpO1xuICAgIHZhciBhY2N1bXVsYXRlSW50byA9ICRfX3JlcXVpcmUoJzcxJyk7XG4gICAgdmFyIGZvckVhY2hBY2N1bXVsYXRlZCA9ICRfX3JlcXVpcmUoJzcyJyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIGxpc3RlbmVyQmFuayA9IHt9O1xuICAgIHZhciBldmVudFF1ZXVlID0gbnVsbDtcbiAgICB2YXIgZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlID0gZnVuY3Rpb24oZXZlbnQsIHNpbXVsYXRlZCkge1xuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIEV2ZW50UGx1Z2luVXRpbHMuZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBzaW11bGF0ZWQpO1xuICAgICAgICBpZiAoIWV2ZW50LmlzUGVyc2lzdGVudCgpKSB7XG4gICAgICAgICAgZXZlbnQuY29uc3RydWN0b3IucmVsZWFzZShldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VTaW11bGF0ZWQgPSBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gZXhlY3V0ZURpc3BhdGNoZXNBbmRSZWxlYXNlKGUsIHRydWUpO1xuICAgIH07XG4gICAgdmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsID0gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZShlLCBmYWxzZSk7XG4gICAgfTtcbiAgICB2YXIgRXZlbnRQbHVnaW5IdWIgPSB7XG4gICAgICBpbmplY3Rpb246IHtcbiAgICAgICAgaW5qZWN0RXZlbnRQbHVnaW5PcmRlcjogRXZlbnRQbHVnaW5SZWdpc3RyeS5pbmplY3RFdmVudFBsdWdpbk9yZGVyLFxuICAgICAgICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lXG4gICAgICB9LFxuICAgICAgcHV0TGlzdGVuZXI6IGZ1bmN0aW9uKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICAgICEodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCAlcyBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCB0eXBlICVzJywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHZhciBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZSA9IGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSB8fCAobGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdID0ge30pO1xuICAgICAgICBiYW5rRm9yUmVnaXN0cmF0aW9uTmFtZVtpbnN0Ll9yb290Tm9kZUlEXSA9IGxpc3RlbmVyO1xuICAgICAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAgICAgaWYgKFBsdWdpbk1vZHVsZSAmJiBQbHVnaW5Nb2R1bGUuZGlkUHV0TGlzdGVuZXIpIHtcbiAgICAgICAgICBQbHVnaW5Nb2R1bGUuZGlkUHV0TGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0TGlzdGVuZXI6IGZ1bmN0aW9uKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgICAgICByZXR1cm4gYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgJiYgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaW5zdC5fcm9vdE5vZGVJRF07XG4gICAgICB9LFxuICAgICAgZGVsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcikge1xuICAgICAgICAgIFBsdWdpbk1vZHVsZS53aWxsRGVsZXRlTGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgICAgICBpZiAoYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgICAgICBkZWxldGUgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWVbaW5zdC5fcm9vdE5vZGVJRF07XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZWxldGVBbGxMaXN0ZW5lcnM6IGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgICAgZm9yICh2YXIgcmVnaXN0cmF0aW9uTmFtZSBpbiBsaXN0ZW5lckJhbmspIHtcbiAgICAgICAgICBpZiAoIWxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtpbnN0Ll9yb290Tm9kZUlEXSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgICAgICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcikge1xuICAgICAgICAgICAgUGx1Z2luTW9kdWxlLndpbGxEZWxldGVMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZGVsZXRlIGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtpbnN0Ll9yb290Tm9kZUlEXTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICAgIHZhciBldmVudHM7XG4gICAgICAgIHZhciBwbHVnaW5zID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBsdWdpbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgcG9zc2libGVQbHVnaW4gPSBwbHVnaW5zW2ldO1xuICAgICAgICAgIGlmIChwb3NzaWJsZVBsdWdpbikge1xuICAgICAgICAgICAgdmFyIGV4dHJhY3RlZEV2ZW50cyA9IHBvc3NpYmxlUGx1Z2luLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgICAgICAgaWYgKGV4dHJhY3RlZEV2ZW50cykge1xuICAgICAgICAgICAgICBldmVudHMgPSBhY2N1bXVsYXRlSW50byhldmVudHMsIGV4dHJhY3RlZEV2ZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudHM7XG4gICAgICB9LFxuICAgICAgZW5xdWV1ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7XG4gICAgICAgIGlmIChldmVudHMpIHtcbiAgICAgICAgICBldmVudFF1ZXVlID0gYWNjdW11bGF0ZUludG8oZXZlbnRRdWV1ZSwgZXZlbnRzKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByb2Nlc3NFdmVudFF1ZXVlOiBmdW5jdGlvbihzaW11bGF0ZWQpIHtcbiAgICAgICAgdmFyIHByb2Nlc3NpbmdFdmVudFF1ZXVlID0gZXZlbnRRdWV1ZTtcbiAgICAgICAgZXZlbnRRdWV1ZSA9IG51bGw7XG4gICAgICAgIGlmIChzaW11bGF0ZWQpIHtcbiAgICAgICAgICBmb3JFYWNoQWNjdW11bGF0ZWQocHJvY2Vzc2luZ0V2ZW50UXVldWUsIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yRWFjaEFjY3VtdWxhdGVkKHByb2Nlc3NpbmdFdmVudFF1ZXVlLCBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VUb3BMZXZlbCk7XG4gICAgICAgIH1cbiAgICAgICAgISFldmVudFF1ZXVlID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3Byb2Nlc3NFdmVudFF1ZXVlKCk6IEFkZGl0aW9uYWwgZXZlbnRzIHdlcmUgZW5xdWV1ZWQgd2hpbGUgcHJvY2Vzc2luZyAnICsgJ2FuIGV2ZW50IHF1ZXVlLiBTdXBwb3J0IGZvciB0aGlzIGhhcyBub3QgeWV0IGJlZW4gaW1wbGVtZW50ZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBSZWFjdEVycm9yVXRpbHMucmV0aHJvd0NhdWdodEVycm9yKCk7XG4gICAgICB9LFxuICAgICAgX19wdXJnZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGxpc3RlbmVyQmFuayA9IHt9O1xuICAgICAgfSxcbiAgICAgIF9fZ2V0TGlzdGVuZXJCYW5rOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RlbmVyQmFuaztcbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gRXZlbnRQbHVnaW5IdWI7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjg3XCIsIFtcIjEwXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgRXZlbnRQbHVnaW5IdWIgPSAkX19yZXF1aXJlKCcxMCcpO1xuICBmdW5jdGlvbiBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpIHtcbiAgICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50cyk7XG4gICAgRXZlbnRQbHVnaW5IdWIucHJvY2Vzc0V2ZW50UXVldWUoZmFsc2UpO1xuICB9XG4gIHZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0ge2hhbmRsZVRvcExldmVsOiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgICAgdmFyIGV2ZW50cyA9IEV2ZW50UGx1Z2luSHViLmV4dHJhY3RFdmVudHModG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgcnVuRXZlbnRRdWV1ZUluQmF0Y2goZXZlbnRzKTtcbiAgICB9fTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdEV2ZW50RW1pdHRlck1peGluO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjdlXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgVmlld3BvcnRNZXRyaWNzID0ge1xuICAgIGN1cnJlbnRTY3JvbGxMZWZ0OiAwLFxuICAgIGN1cnJlbnRTY3JvbGxUb3A6IDAsXG4gICAgcmVmcmVzaFNjcm9sbFZhbHVlczogZnVuY3Rpb24oc2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdCA9IHNjcm9sbFBvc2l0aW9uLng7XG4gICAgICBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbFRvcCA9IHNjcm9sbFBvc2l0aW9uLnk7XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFZpZXdwb3J0TWV0cmljcztcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI4OFwiLCBbXCJkXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSAkX19yZXF1aXJlKCdkJyk7XG4gIGZ1bmN0aW9uIG1ha2VQcmVmaXhNYXAoc3R5bGVQcm9wLCBldmVudE5hbWUpIHtcbiAgICB2YXIgcHJlZml4ZXMgPSB7fTtcbiAgICBwcmVmaXhlc1tzdHlsZVByb3AudG9Mb3dlckNhc2UoKV0gPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBwcmVmaXhlc1snV2Via2l0JyArIHN0eWxlUHJvcF0gPSAnd2Via2l0JyArIGV2ZW50TmFtZTtcbiAgICBwcmVmaXhlc1snTW96JyArIHN0eWxlUHJvcF0gPSAnbW96JyArIGV2ZW50TmFtZTtcbiAgICBwcmVmaXhlc1snbXMnICsgc3R5bGVQcm9wXSA9ICdNUycgKyBldmVudE5hbWU7XG4gICAgcHJlZml4ZXNbJ08nICsgc3R5bGVQcm9wXSA9ICdvJyArIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBwcmVmaXhlcztcbiAgfVxuICB2YXIgdmVuZG9yUHJlZml4ZXMgPSB7XG4gICAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uRW5kJyksXG4gICAgYW5pbWF0aW9uaXRlcmF0aW9uOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uSXRlcmF0aW9uJyksXG4gICAgYW5pbWF0aW9uc3RhcnQ6IG1ha2VQcmVmaXhNYXAoJ0FuaW1hdGlvbicsICdBbmltYXRpb25TdGFydCcpLFxuICAgIHRyYW5zaXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ1RyYW5zaXRpb24nLCAnVHJhbnNpdGlvbkVuZCcpXG4gIH07XG4gIHZhciBwcmVmaXhlZEV2ZW50TmFtZXMgPSB7fTtcbiAgdmFyIHN0eWxlID0ge307XG4gIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICAgIGlmICghKCdBbmltYXRpb25FdmVudCcgaW4gd2luZG93KSkge1xuICAgICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb247XG4gICAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbjtcbiAgICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy5hbmltYXRpb25zdGFydC5hbmltYXRpb247XG4gICAgfVxuICAgIGlmICghKCdUcmFuc2l0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICAgIGRlbGV0ZSB2ZW5kb3JQcmVmaXhlcy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb247XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKGV2ZW50TmFtZSkge1xuICAgIGlmIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSkge1xuICAgICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICAgIH0gZWxzZSBpZiAoIXZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV0pIHtcbiAgICAgIHJldHVybiBldmVudE5hbWU7XG4gICAgfVxuICAgIHZhciBwcmVmaXhNYXAgPSB2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdO1xuICAgIGZvciAodmFyIHN0eWxlUHJvcCBpbiBwcmVmaXhNYXApIHtcbiAgICAgIGlmIChwcmVmaXhNYXAuaGFzT3duUHJvcGVydHkoc3R5bGVQcm9wKSAmJiBzdHlsZVByb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdID0gcHJlZml4TWFwW3N0eWxlUHJvcF07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjE0XCIsIFtcImRcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9ICRfX3JlcXVpcmUoJ2QnKTtcbiAgdmFyIHVzZUhhc0ZlYXR1cmU7XG4gIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICB1c2VIYXNGZWF0dXJlID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiYgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgICBpZiAoIUV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSB8fCBjYXB0dXJlICYmICEoJ2FkZEV2ZW50TGlzdGVuZXInIGluIGRvY3VtZW50KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgICB2YXIgaXNTdXBwb3J0ZWQgPSBldmVudE5hbWUgaW4gZG9jdW1lbnQ7XG4gICAgaWYgKCFpc1N1cHBvcnRlZCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG4gICAgaWYgKCFpc1N1cHBvcnRlZCAmJiB1c2VIYXNGZWF0dXJlICYmIGV2ZW50TmFtZVN1ZmZpeCA9PT0gJ3doZWVsJykge1xuICAgICAgaXNTdXBwb3J0ZWQgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCdFdmVudHMud2hlZWwnLCAnMy4wJyk7XG4gICAgfVxuICAgIHJldHVybiBpc1N1cHBvcnRlZDtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNGVcIiwgW1wiNlwiLCBcImJcIiwgXCIzNVwiLCBcIjg3XCIsIFwiN2VcIiwgXCI4OFwiLCBcIjE0XCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIF9hc3NpZ24gPSAkX19yZXF1aXJlKCc2Jyk7XG4gICAgdmFyIEV2ZW50Q29uc3RhbnRzID0gJF9fcmVxdWlyZSgnYicpO1xuICAgIHZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gJF9fcmVxdWlyZSgnMzUnKTtcbiAgICB2YXIgUmVhY3RFdmVudEVtaXR0ZXJNaXhpbiA9ICRfX3JlcXVpcmUoJzg3Jyk7XG4gICAgdmFyIFZpZXdwb3J0TWV0cmljcyA9ICRfX3JlcXVpcmUoJzdlJyk7XG4gICAgdmFyIGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lID0gJF9fcmVxdWlyZSgnODgnKTtcbiAgICB2YXIgaXNFdmVudFN1cHBvcnRlZCA9ICRfX3JlcXVpcmUoJzE0Jyk7XG4gICAgdmFyIGhhc0V2ZW50UGFnZVhZO1xuICAgIHZhciBhbHJlYWR5TGlzdGVuaW5nVG8gPSB7fTtcbiAgICB2YXIgaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUgPSBmYWxzZTtcbiAgICB2YXIgcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyID0gMDtcbiAgICB2YXIgdG9wRXZlbnRNYXBwaW5nID0ge1xuICAgICAgdG9wQWJvcnQ6ICdhYm9ydCcsXG4gICAgICB0b3BBbmltYXRpb25FbmQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25lbmQnKSB8fCAnYW5pbWF0aW9uZW5kJyxcbiAgICAgIHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjogZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbml0ZXJhdGlvbicpIHx8ICdhbmltYXRpb25pdGVyYXRpb24nLFxuICAgICAgdG9wQW5pbWF0aW9uU3RhcnQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25zdGFydCcpIHx8ICdhbmltYXRpb25zdGFydCcsXG4gICAgICB0b3BCbHVyOiAnYmx1cicsXG4gICAgICB0b3BDYW5QbGF5OiAnY2FucGxheScsXG4gICAgICB0b3BDYW5QbGF5VGhyb3VnaDogJ2NhbnBsYXl0aHJvdWdoJyxcbiAgICAgIHRvcENoYW5nZTogJ2NoYW5nZScsXG4gICAgICB0b3BDbGljazogJ2NsaWNrJyxcbiAgICAgIHRvcENvbXBvc2l0aW9uRW5kOiAnY29tcG9zaXRpb25lbmQnLFxuICAgICAgdG9wQ29tcG9zaXRpb25TdGFydDogJ2NvbXBvc2l0aW9uc3RhcnQnLFxuICAgICAgdG9wQ29tcG9zaXRpb25VcGRhdGU6ICdjb21wb3NpdGlvbnVwZGF0ZScsXG4gICAgICB0b3BDb250ZXh0TWVudTogJ2NvbnRleHRtZW51JyxcbiAgICAgIHRvcENvcHk6ICdjb3B5JyxcbiAgICAgIHRvcEN1dDogJ2N1dCcsXG4gICAgICB0b3BEb3VibGVDbGljazogJ2RibGNsaWNrJyxcbiAgICAgIHRvcERyYWc6ICdkcmFnJyxcbiAgICAgIHRvcERyYWdFbmQ6ICdkcmFnZW5kJyxcbiAgICAgIHRvcERyYWdFbnRlcjogJ2RyYWdlbnRlcicsXG4gICAgICB0b3BEcmFnRXhpdDogJ2RyYWdleGl0JyxcbiAgICAgIHRvcERyYWdMZWF2ZTogJ2RyYWdsZWF2ZScsXG4gICAgICB0b3BEcmFnT3ZlcjogJ2RyYWdvdmVyJyxcbiAgICAgIHRvcERyYWdTdGFydDogJ2RyYWdzdGFydCcsXG4gICAgICB0b3BEcm9wOiAnZHJvcCcsXG4gICAgICB0b3BEdXJhdGlvbkNoYW5nZTogJ2R1cmF0aW9uY2hhbmdlJyxcbiAgICAgIHRvcEVtcHRpZWQ6ICdlbXB0aWVkJyxcbiAgICAgIHRvcEVuY3J5cHRlZDogJ2VuY3J5cHRlZCcsXG4gICAgICB0b3BFbmRlZDogJ2VuZGVkJyxcbiAgICAgIHRvcEVycm9yOiAnZXJyb3InLFxuICAgICAgdG9wRm9jdXM6ICdmb2N1cycsXG4gICAgICB0b3BJbnB1dDogJ2lucHV0JyxcbiAgICAgIHRvcEtleURvd246ICdrZXlkb3duJyxcbiAgICAgIHRvcEtleVByZXNzOiAna2V5cHJlc3MnLFxuICAgICAgdG9wS2V5VXA6ICdrZXl1cCcsXG4gICAgICB0b3BMb2FkZWREYXRhOiAnbG9hZGVkZGF0YScsXG4gICAgICB0b3BMb2FkZWRNZXRhZGF0YTogJ2xvYWRlZG1ldGFkYXRhJyxcbiAgICAgIHRvcExvYWRTdGFydDogJ2xvYWRzdGFydCcsXG4gICAgICB0b3BNb3VzZURvd246ICdtb3VzZWRvd24nLFxuICAgICAgdG9wTW91c2VNb3ZlOiAnbW91c2Vtb3ZlJyxcbiAgICAgIHRvcE1vdXNlT3V0OiAnbW91c2VvdXQnLFxuICAgICAgdG9wTW91c2VPdmVyOiAnbW91c2VvdmVyJyxcbiAgICAgIHRvcE1vdXNlVXA6ICdtb3VzZXVwJyxcbiAgICAgIHRvcFBhc3RlOiAncGFzdGUnLFxuICAgICAgdG9wUGF1c2U6ICdwYXVzZScsXG4gICAgICB0b3BQbGF5OiAncGxheScsXG4gICAgICB0b3BQbGF5aW5nOiAncGxheWluZycsXG4gICAgICB0b3BQcm9ncmVzczogJ3Byb2dyZXNzJyxcbiAgICAgIHRvcFJhdGVDaGFuZ2U6ICdyYXRlY2hhbmdlJyxcbiAgICAgIHRvcFNjcm9sbDogJ3Njcm9sbCcsXG4gICAgICB0b3BTZWVrZWQ6ICdzZWVrZWQnLFxuICAgICAgdG9wU2Vla2luZzogJ3NlZWtpbmcnLFxuICAgICAgdG9wU2VsZWN0aW9uQ2hhbmdlOiAnc2VsZWN0aW9uY2hhbmdlJyxcbiAgICAgIHRvcFN0YWxsZWQ6ICdzdGFsbGVkJyxcbiAgICAgIHRvcFN1c3BlbmQ6ICdzdXNwZW5kJyxcbiAgICAgIHRvcFRleHRJbnB1dDogJ3RleHRJbnB1dCcsXG4gICAgICB0b3BUaW1lVXBkYXRlOiAndGltZXVwZGF0ZScsXG4gICAgICB0b3BUb3VjaENhbmNlbDogJ3RvdWNoY2FuY2VsJyxcbiAgICAgIHRvcFRvdWNoRW5kOiAndG91Y2hlbmQnLFxuICAgICAgdG9wVG91Y2hNb3ZlOiAndG91Y2htb3ZlJyxcbiAgICAgIHRvcFRvdWNoU3RhcnQ6ICd0b3VjaHN0YXJ0JyxcbiAgICAgIHRvcFRyYW5zaXRpb25FbmQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCd0cmFuc2l0aW9uZW5kJykgfHwgJ3RyYW5zaXRpb25lbmQnLFxuICAgICAgdG9wVm9sdW1lQ2hhbmdlOiAndm9sdW1lY2hhbmdlJyxcbiAgICAgIHRvcFdhaXRpbmc6ICd3YWl0aW5nJyxcbiAgICAgIHRvcFdoZWVsOiAnd2hlZWwnXG4gICAgfTtcbiAgICB2YXIgdG9wTGlzdGVuZXJzSURLZXkgPSAnX3JlYWN0TGlzdGVuZXJzSUQnICsgU3RyaW5nKE1hdGgucmFuZG9tKCkpLnNsaWNlKDIpO1xuICAgIGZ1bmN0aW9uIGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpIHtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vdW50QXQsIHRvcExpc3RlbmVyc0lES2V5KSkge1xuICAgICAgICBtb3VudEF0W3RvcExpc3RlbmVyc0lES2V5XSA9IHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlcisrO1xuICAgICAgICBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dID0ge307XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxyZWFkeUxpc3RlbmluZ1RvW21vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldXTtcbiAgICB9XG4gICAgdmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9IF9hc3NpZ24oe30sIFJlYWN0RXZlbnRFbWl0dGVyTWl4aW4sIHtcbiAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lcjogbnVsbCxcbiAgICAgIGluamVjdGlvbjoge2luamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oUmVhY3RFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgUmVhY3RFdmVudExpc3RlbmVyLnNldEhhbmRsZVRvcExldmVsKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5oYW5kbGVUb3BMZXZlbCk7XG4gICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lciA9IFJlYWN0RXZlbnRMaXN0ZW5lcjtcbiAgICAgICAgfX0sXG4gICAgICBzZXRFbmFibGVkOiBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgICAgIGlmIChSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5zZXRFbmFibGVkKGVuYWJsZWQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaXNFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIgJiYgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5pc0VuYWJsZWQoKSk7XG4gICAgICB9LFxuICAgICAgbGlzdGVuVG86IGZ1bmN0aW9uKHJlZ2lzdHJhdGlvbk5hbWUsIGNvbnRlbnREb2N1bWVudEhhbmRsZSkge1xuICAgICAgICB2YXIgbW91bnRBdCA9IGNvbnRlbnREb2N1bWVudEhhbmRsZTtcbiAgICAgICAgdmFyIGlzTGlzdGVuaW5nID0gZ2V0TGlzdGVuaW5nRm9yRG9jdW1lbnQobW91bnRBdCk7XG4gICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICAgIHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICAgICAgICBpZiAoIShpc0xpc3RlbmluZy5oYXNPd25Qcm9wZXJ0eShkZXBlbmRlbmN5KSAmJiBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSkpIHtcbiAgICAgICAgICAgIGlmIChkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsKSB7XG4gICAgICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCd3aGVlbCcpKSB7XG4gICAgICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wV2hlZWwsICd3aGVlbCcsIG1vdW50QXQpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzRXZlbnRTdXBwb3J0ZWQoJ21vdXNld2hlZWwnKSkge1xuICAgICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCh0b3BMZXZlbFR5cGVzLnRvcFdoZWVsLCAnbW91c2V3aGVlbCcsIG1vdW50QXQpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCh0b3BMZXZlbFR5cGVzLnRvcFdoZWVsLCAnRE9NTW91c2VTY3JvbGwnLCBtb3VudEF0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbCkge1xuICAgICAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnc2Nyb2xsJywgdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLCAnc2Nyb2xsJywgbW91bnRBdCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLCAnc2Nyb2xsJywgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5XSU5ET1dfSEFORExFKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzIHx8IGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wQmx1cikge1xuICAgICAgICAgICAgICBpZiAoaXNFdmVudFN1cHBvcnRlZCgnZm9jdXMnLCB0cnVlKSkge1xuICAgICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BGb2N1cywgJ2ZvY3VzJywgbW91bnRBdCk7XG4gICAgICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudCh0b3BMZXZlbFR5cGVzLnRvcEJsdXIsICdibHVyJywgbW91bnRBdCk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnZm9jdXNpbicpKSB7XG4gICAgICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wRm9jdXMsICdmb2N1c2luJywgbW91bnRBdCk7XG4gICAgICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wQmx1ciwgJ2ZvY3Vzb3V0JywgbW91bnRBdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaXNMaXN0ZW5pbmdbdG9wTGV2ZWxUeXBlcy50b3BCbHVyXSA9IHRydWU7XG4gICAgICAgICAgICAgIGlzTGlzdGVuaW5nW3RvcExldmVsVHlwZXMudG9wRm9jdXNdID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodG9wRXZlbnRNYXBwaW5nLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3kpKSB7XG4gICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChkZXBlbmRlbmN5LCB0b3BFdmVudE1hcHBpbmdbZGVwZW5kZW5jeV0sIG1vdW50QXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKTtcbiAgICAgIH0sXG4gICAgICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgICAgICByZXR1cm4gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQ2FwdHVyZWRFdmVudCh0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKTtcbiAgICAgIH0sXG4gICAgICBlbnN1cmVTY3JvbGxWYWx1ZU1vbml0b3Jpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoaGFzRXZlbnRQYWdlWFkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGhhc0V2ZW50UGFnZVhZID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQgJiYgJ3BhZ2VYJyBpbiBkb2N1bWVudC5jcmVhdGVFdmVudCgnTW91c2VFdmVudCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaGFzRXZlbnRQYWdlWFkgJiYgIWlzTW9uaXRvcmluZ1Njcm9sbFZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlZnJlc2ggPSBWaWV3cG9ydE1ldHJpY3MucmVmcmVzaFNjcm9sbFZhbHVlcztcbiAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLm1vbml0b3JTY3JvbGxWYWx1ZShyZWZyZXNoKTtcbiAgICAgICAgICBpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlcjtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMWJcIiwgW1wiMzBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICBmdW5jdGlvbiBjaGVja01hc2sodmFsdWUsIGJpdG1hc2spIHtcbiAgICAgIHJldHVybiAodmFsdWUgJiBiaXRtYXNrKSA9PT0gYml0bWFzaztcbiAgICB9XG4gICAgdmFyIERPTVByb3BlcnR5SW5qZWN0aW9uID0ge1xuICAgICAgTVVTVF9VU0VfUFJPUEVSVFk6IDB4MSxcbiAgICAgIEhBU19TSURFX0VGRkVDVFM6IDB4MixcbiAgICAgIEhBU19CT09MRUFOX1ZBTFVFOiAweDQsXG4gICAgICBIQVNfTlVNRVJJQ19WQUxVRTogMHg4LFxuICAgICAgSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUU6IDB4MTAgfCAweDgsXG4gICAgICBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFOiAweDIwLFxuICAgICAgaW5qZWN0RE9NUHJvcGVydHlDb25maWc6IGZ1bmN0aW9uKGRvbVByb3BlcnR5Q29uZmlnKSB7XG4gICAgICAgIHZhciBJbmplY3Rpb24gPSBET01Qcm9wZXJ0eUluamVjdGlvbjtcbiAgICAgICAgdmFyIFByb3BlcnRpZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5Qcm9wZXJ0aWVzIHx8IHt9O1xuICAgICAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXNwYWNlcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzcGFjZXMgfHwge307XG4gICAgICAgIHZhciBET01BdHRyaWJ1dGVOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzIHx8IHt9O1xuICAgICAgICB2YXIgRE9NUHJvcGVydHlOYW1lcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTVByb3BlcnR5TmFtZXMgfHwge307XG4gICAgICAgIHZhciBET01NdXRhdGlvbk1ldGhvZHMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01NdXRhdGlvbk1ldGhvZHMgfHwge307XG4gICAgICAgIGlmIChkb21Qcm9wZXJ0eUNvbmZpZy5pc0N1c3RvbUF0dHJpYnV0ZSkge1xuICAgICAgICAgIERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucy5wdXNoKGRvbVByb3BlcnR5Q29uZmlnLmlzQ3VzdG9tQXR0cmlidXRlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgISFET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpbmplY3RET01Qcm9wZXJ0eUNvbmZpZyguLi4pOiBZb3VcXCdyZSB0cnlpbmcgdG8gaW5qZWN0IERPTSBwcm9wZXJ0eSAnICsgJ1xcJyVzXFwnIHdoaWNoIGhhcyBhbHJlYWR5IGJlZW4gaW5qZWN0ZWQuIFlvdSBtYXkgYmUgYWNjaWRlbnRhbGx5ICcgKyAnaW5qZWN0aW5nIHRoZSBzYW1lIERPTSBwcm9wZXJ0eSBjb25maWcgdHdpY2UsIG9yIHlvdSBtYXkgYmUgJyArICdpbmplY3RpbmcgdHdvIGNvbmZpZ3MgdGhhdCBoYXZlIGNvbmZsaWN0aW5nIHByb3BlcnR5IG5hbWVzLicsIHByb3BOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgdmFyIGxvd2VyQ2FzZWQgPSBwcm9wTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIHZhciBwcm9wQ29uZmlnID0gUHJvcGVydGllc1twcm9wTmFtZV07XG4gICAgICAgICAgdmFyIHByb3BlcnR5SW5mbyA9IHtcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6IGxvd2VyQ2FzZWQsXG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lc3BhY2U6IG51bGwsXG4gICAgICAgICAgICBwcm9wZXJ0eU5hbWU6IHByb3BOYW1lLFxuICAgICAgICAgICAgbXV0YXRpb25NZXRob2Q6IG51bGwsXG4gICAgICAgICAgICBtdXN0VXNlUHJvcGVydHk6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uTVVTVF9VU0VfUFJPUEVSVFkpLFxuICAgICAgICAgICAgaGFzU2lkZUVmZmVjdHM6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX1NJREVfRUZGRUNUUyksXG4gICAgICAgICAgICBoYXNCb29sZWFuVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUUpLFxuICAgICAgICAgICAgaGFzTnVtZXJpY1ZhbHVlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19OVU1FUklDX1ZBTFVFKSxcbiAgICAgICAgICAgIGhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlOiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLkhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFKSxcbiAgICAgICAgICAgIGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSlcbiAgICAgICAgICB9O1xuICAgICAgICAgICEocHJvcGVydHlJbmZvLm11c3RVc2VQcm9wZXJ0eSB8fCAhcHJvcGVydHlJbmZvLmhhc1NpZGVFZmZlY3RzKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdET01Qcm9wZXJ0eTogUHJvcGVydGllcyB0aGF0IGhhdmUgc2lkZSBlZmZlY3RzIG11c3QgdXNlIHByb3BlcnR5OiAlcycsIHByb3BOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgIShwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlICsgcHJvcGVydHlJbmZvLmhhc051bWVyaWNWYWx1ZSArIHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIDw9IDEpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RPTVByb3BlcnR5OiBWYWx1ZSBjYW4gYmUgb25lIG9mIGJvb2xlYW4sIG92ZXJsb2FkZWQgYm9vbGVhbiwgb3IgJyArICdudW1lcmljIHZhbHVlLCBidXQgbm90IGEgY29tYmluYXRpb246ICVzJywgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgRE9NUHJvcGVydHkuZ2V0UG9zc2libGVTdGFuZGFyZE5hbWVbbG93ZXJDYXNlZF0gPSBwcm9wTmFtZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKERPTUF0dHJpYnV0ZU5hbWVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBET01BdHRyaWJ1dGVOYW1lc1twcm9wTmFtZV07XG4gICAgICAgICAgICBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVthdHRyaWJ1dGVOYW1lXSA9IHByb3BOYW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoRE9NQXR0cmlidXRlTmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgIHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lc3BhY2UgPSBET01BdHRyaWJ1dGVOYW1lc3BhY2VzW3Byb3BOYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKERPTVByb3BlcnR5TmFtZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eUluZm8ucHJvcGVydHlOYW1lID0gRE9NUHJvcGVydHlOYW1lc1twcm9wTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChET01NdXRhdGlvbk1ldGhvZHMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICBwcm9wZXJ0eUluZm8ubXV0YXRpb25NZXRob2QgPSBET01NdXRhdGlvbk1ldGhvZHNbcHJvcE5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBET01Qcm9wZXJ0eS5wcm9wZXJ0aWVzW3Byb3BOYW1lXSA9IHByb3BlcnR5SW5mbztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgPSAnOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRCc7XG4gICAgdmFyIERPTVByb3BlcnR5ID0ge1xuICAgICAgSURfQVRUUklCVVRFX05BTUU6ICdkYXRhLXJlYWN0aWQnLFxuICAgICAgUk9PVF9BVFRSSUJVVEVfTkFNRTogJ2RhdGEtcmVhY3Ryb290JyxcbiAgICAgIEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVI6IEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIsXG4gICAgICBBVFRSSUJVVEVfTkFNRV9DSEFSOiBBVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSICsgJ1xcXFwtLjAtOVxcXFx1QjdcXFxcdTAzMDAtXFxcXHUwMzZGXFxcXHUyMDNGLVxcXFx1MjA0MCcsXG4gICAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICAgIGdldFBvc3NpYmxlU3RhbmRhcmROYW1lOiBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8ge30gOiBudWxsLFxuICAgICAgX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zOiBbXSxcbiAgICAgIGlzQ3VzdG9tQXR0cmlidXRlOiBmdW5jdGlvbihhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGlzQ3VzdG9tQXR0cmlidXRlRm4gPSBET01Qcm9wZXJ0eS5faXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnNbaV07XG4gICAgICAgICAgaWYgKGlzQ3VzdG9tQXR0cmlidXRlRm4oYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuICAgICAgaW5qZWN0aW9uOiBET01Qcm9wZXJ0eUluamVjdGlvblxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBET01Qcm9wZXJ0eTtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNGZcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBSZWFjdERPTUNvbXBvbmVudEZsYWdzID0ge2hhc0NhY2hlZENoaWxkTm9kZXM6IDEgPDwgMH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db21wb25lbnRGbGFncztcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMVwiLCBbXCIxYlwiLCBcIjRmXCIsIFwiMzBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgRE9NUHJvcGVydHkgPSAkX19yZXF1aXJlKCcxYicpO1xuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudEZsYWdzID0gJF9fcmVxdWlyZSgnNGYnKTtcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIgQVRUUl9OQU1FID0gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUU7XG4gICAgdmFyIEZsYWdzID0gUmVhY3RET01Db21wb25lbnRGbGFncztcbiAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZUtleSA9ICdfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSQnICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG4gICAgZnVuY3Rpb24gZ2V0UmVuZGVyZWROYXRpdmVPclRleHRGcm9tQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgICAgdmFyIHJlbmRlcmVkO1xuICAgICAgd2hpbGUgKHJlbmRlcmVkID0gY29tcG9uZW50Ll9yZW5kZXJlZENvbXBvbmVudCkge1xuICAgICAgICBjb21wb25lbnQgPSByZW5kZXJlZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByZWNhY2hlTm9kZShpbnN0LCBub2RlKSB7XG4gICAgICB2YXIgbmF0aXZlSW5zdCA9IGdldFJlbmRlcmVkTmF0aXZlT3JUZXh0RnJvbUNvbXBvbmVudChpbnN0KTtcbiAgICAgIG5hdGl2ZUluc3QuX25hdGl2ZU5vZGUgPSBub2RlO1xuICAgICAgbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IG5hdGl2ZUluc3Q7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHVuY2FjaGVOb2RlKGluc3QpIHtcbiAgICAgIHZhciBub2RlID0gaW5zdC5fbmF0aXZlTm9kZTtcbiAgICAgIGlmIChub2RlKSB7XG4gICAgICAgIGRlbGV0ZSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICAgICAgICBpbnN0Ll9uYXRpdmVOb2RlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gcHJlY2FjaGVDaGlsZE5vZGVzKGluc3QsIG5vZGUpIHtcbiAgICAgIGlmIChpbnN0Ll9mbGFncyAmIEZsYWdzLmhhc0NhY2hlZENoaWxkTm9kZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuID0gaW5zdC5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgIHZhciBjaGlsZE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICBvdXRlcjogZm9yICh2YXIgbmFtZSBpbiBjaGlsZHJlbikge1xuICAgICAgICBpZiAoIWNoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoaWxkSW5zdCA9IGNoaWxkcmVuW25hbWVdO1xuICAgICAgICB2YXIgY2hpbGRJRCA9IGdldFJlbmRlcmVkTmF0aXZlT3JUZXh0RnJvbUNvbXBvbmVudChjaGlsZEluc3QpLl9kb21JRDtcbiAgICAgICAgaWYgKGNoaWxkSUQgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoOyBjaGlsZE5vZGUgIT09IG51bGw7IGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZykge1xuICAgICAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDEgJiYgY2hpbGROb2RlLmdldEF0dHJpYnV0ZShBVFRSX05BTUUpID09PSBTdHJpbmcoY2hpbGRJRCkgfHwgY2hpbGROb2RlLm5vZGVUeXBlID09PSA4ICYmIGNoaWxkTm9kZS5ub2RlVmFsdWUgPT09ICcgcmVhY3QtdGV4dDogJyArIGNoaWxkSUQgKyAnICcgfHwgY2hpbGROb2RlLm5vZGVUeXBlID09PSA4ICYmIGNoaWxkTm9kZS5ub2RlVmFsdWUgPT09ICcgcmVhY3QtZW1wdHk6ICcgKyBjaGlsZElEICsgJyAnKSB7XG4gICAgICAgICAgICBwcmVjYWNoZU5vZGUoY2hpbGRJbnN0LCBjaGlsZE5vZGUpO1xuICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICFmYWxzZSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmFibGUgdG8gZmluZCBlbGVtZW50IHdpdGggSUQgJXMuJywgY2hpbGRJRCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgaW5zdC5fZmxhZ3MgfD0gRmxhZ3MuaGFzQ2FjaGVkQ2hpbGROb2RlcztcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICAgICAgaWYgKG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0pIHtcbiAgICAgICAgcmV0dXJuIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gICAgICB9XG4gICAgICB2YXIgcGFyZW50cyA9IFtdO1xuICAgICAgd2hpbGUgKCFub2RlW2ludGVybmFsSW5zdGFuY2VLZXldKSB7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjbG9zZXN0O1xuICAgICAgdmFyIGluc3Q7XG4gICAgICBmb3IgKDsgbm9kZSAmJiAoaW5zdCA9IG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0pOyBub2RlID0gcGFyZW50cy5wb3AoKSkge1xuICAgICAgICBjbG9zZXN0ID0gaW5zdDtcbiAgICAgICAgaWYgKHBhcmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgcHJlY2FjaGVDaGlsZE5vZGVzKGluc3QsIG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gY2xvc2VzdDtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKSB7XG4gICAgICB2YXIgaW5zdCA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKG5vZGUpO1xuICAgICAgaWYgKGluc3QgIT0gbnVsbCAmJiBpbnN0Ll9uYXRpdmVOb2RlID09PSBub2RlKSB7XG4gICAgICAgIHJldHVybiBpbnN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCkge1xuICAgICAgIShpbnN0Ll9uYXRpdmVOb2RlICE9PSB1bmRlZmluZWQpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2dldE5vZGVGcm9tSW5zdGFuY2U6IEludmFsaWQgYXJndW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgaWYgKGluc3QuX25hdGl2ZU5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGluc3QuX25hdGl2ZU5vZGU7XG4gICAgICB9XG4gICAgICB2YXIgcGFyZW50cyA9IFtdO1xuICAgICAgd2hpbGUgKCFpbnN0Ll9uYXRpdmVOb2RlKSB7XG4gICAgICAgIHBhcmVudHMucHVzaChpbnN0KTtcbiAgICAgICAgIWluc3QuX25hdGl2ZVBhcmVudCA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdCBET00gdHJlZSByb290IHNob3VsZCBhbHdheXMgaGF2ZSBhIG5vZGUgcmVmZXJlbmNlLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgaW5zdCA9IGluc3QuX25hdGl2ZVBhcmVudDtcbiAgICAgIH1cbiAgICAgIGZvciAoOyBwYXJlbnRzLmxlbmd0aDsgaW5zdCA9IHBhcmVudHMucG9wKCkpIHtcbiAgICAgICAgcHJlY2FjaGVDaGlsZE5vZGVzKGluc3QsIGluc3QuX25hdGl2ZU5vZGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGluc3QuX25hdGl2ZU5vZGU7XG4gICAgfVxuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSB7XG4gICAgICBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTogZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUsXG4gICAgICBnZXRJbnN0YW5jZUZyb21Ob2RlOiBnZXRJbnN0YW5jZUZyb21Ob2RlLFxuICAgICAgZ2V0Tm9kZUZyb21JbnN0YW5jZTogZ2V0Tm9kZUZyb21JbnN0YW5jZSxcbiAgICAgIHByZWNhY2hlQ2hpbGROb2RlczogcHJlY2FjaGVDaGlsZE5vZGVzLFxuICAgICAgcHJlY2FjaGVOb2RlOiBwcmVjYWNoZU5vZGUsXG4gICAgICB1bmNhY2hlTm9kZTogdW5jYWNoZU5vZGVcbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db21wb25lbnRUcmVlO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI1MFwiLCBbXCI2XCIsIFwiNDhcIiwgXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBfYXNzaWduID0gJF9fcmVxdWlyZSgnNicpO1xuICAgIHZhciBlbXB0eUZ1bmN0aW9uID0gJF9fcmVxdWlyZSgnNDgnKTtcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgdmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IGVtcHR5RnVuY3Rpb247XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBzcGVjaWFsVGFncyA9IFsnYWRkcmVzcycsICdhcHBsZXQnLCAnYXJlYScsICdhcnRpY2xlJywgJ2FzaWRlJywgJ2Jhc2UnLCAnYmFzZWZvbnQnLCAnYmdzb3VuZCcsICdibG9ja3F1b3RlJywgJ2JvZHknLCAnYnInLCAnYnV0dG9uJywgJ2NhcHRpb24nLCAnY2VudGVyJywgJ2NvbCcsICdjb2xncm91cCcsICdkZCcsICdkZXRhaWxzJywgJ2RpcicsICdkaXYnLCAnZGwnLCAnZHQnLCAnZW1iZWQnLCAnZmllbGRzZXQnLCAnZmlnY2FwdGlvbicsICdmaWd1cmUnLCAnZm9vdGVyJywgJ2Zvcm0nLCAnZnJhbWUnLCAnZnJhbWVzZXQnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnaGVhZCcsICdoZWFkZXInLCAnaGdyb3VwJywgJ2hyJywgJ2h0bWwnLCAnaWZyYW1lJywgJ2ltZycsICdpbnB1dCcsICdpc2luZGV4JywgJ2xpJywgJ2xpbmsnLCAnbGlzdGluZycsICdtYWluJywgJ21hcnF1ZWUnLCAnbWVudScsICdtZW51aXRlbScsICdtZXRhJywgJ25hdicsICdub2VtYmVkJywgJ25vZnJhbWVzJywgJ25vc2NyaXB0JywgJ29iamVjdCcsICdvbCcsICdwJywgJ3BhcmFtJywgJ3BsYWludGV4dCcsICdwcmUnLCAnc2NyaXB0JywgJ3NlY3Rpb24nLCAnc2VsZWN0JywgJ3NvdXJjZScsICdzdHlsZScsICdzdW1tYXJ5JywgJ3RhYmxlJywgJ3Rib2R5JywgJ3RkJywgJ3RlbXBsYXRlJywgJ3RleHRhcmVhJywgJ3Rmb290JywgJ3RoJywgJ3RoZWFkJywgJ3RpdGxlJywgJ3RyJywgJ3RyYWNrJywgJ3VsJywgJ3dicicsICd4bXAnXTtcbiAgICAgIHZhciBpblNjb3BlVGFncyA9IFsnYXBwbGV0JywgJ2NhcHRpb24nLCAnaHRtbCcsICd0YWJsZScsICd0ZCcsICd0aCcsICdtYXJxdWVlJywgJ29iamVjdCcsICd0ZW1wbGF0ZScsICdmb3JlaWduT2JqZWN0JywgJ2Rlc2MnLCAndGl0bGUnXTtcbiAgICAgIHZhciBidXR0b25TY29wZVRhZ3MgPSBpblNjb3BlVGFncy5jb25jYXQoWydidXR0b24nXSk7XG4gICAgICB2YXIgaW1wbGllZEVuZFRhZ3MgPSBbJ2RkJywgJ2R0JywgJ2xpJywgJ29wdGlvbicsICdvcHRncm91cCcsICdwJywgJ3JwJywgJ3J0J107XG4gICAgICB2YXIgZW1wdHlBbmNlc3RvckluZm8gPSB7XG4gICAgICAgIGN1cnJlbnQ6IG51bGwsXG4gICAgICAgIGZvcm1UYWc6IG51bGwsXG4gICAgICAgIGFUYWdJblNjb3BlOiBudWxsLFxuICAgICAgICBidXR0b25UYWdJblNjb3BlOiBudWxsLFxuICAgICAgICBub2JyVGFnSW5TY29wZTogbnVsbCxcbiAgICAgICAgcFRhZ0luQnV0dG9uU2NvcGU6IG51bGwsXG4gICAgICAgIGxpc3RJdGVtVGFnQXV0b2Nsb3Npbmc6IG51bGwsXG4gICAgICAgIGRsSXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsXG4gICAgICB9O1xuICAgICAgdmFyIHVwZGF0ZWRBbmNlc3RvckluZm8gPSBmdW5jdGlvbihvbGRJbmZvLCB0YWcsIGluc3RhbmNlKSB7XG4gICAgICAgIHZhciBhbmNlc3RvckluZm8gPSBfYXNzaWduKHt9LCBvbGRJbmZvIHx8IGVtcHR5QW5jZXN0b3JJbmZvKTtcbiAgICAgICAgdmFyIGluZm8gPSB7XG4gICAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpblNjb3BlVGFncy5pbmRleE9mKHRhZykgIT09IC0xKSB7XG4gICAgICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gbnVsbDtcbiAgICAgICAgICBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZSA9IG51bGw7XG4gICAgICAgICAgYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnV0dG9uU2NvcGVUYWdzLmluZGV4T2YodGFnKSAhPT0gLTEpIHtcbiAgICAgICAgICBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzcGVjaWFsVGFncy5pbmRleE9mKHRhZykgIT09IC0xICYmIHRhZyAhPT0gJ2FkZHJlc3MnICYmIHRhZyAhPT0gJ2RpdicgJiYgdGFnICE9PSAncCcpIHtcbiAgICAgICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgICAgICAgYW5jZXN0b3JJbmZvLmRsSXRlbVRhZ0F1dG9jbG9zaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvckluZm8uY3VycmVudCA9IGluZm87XG4gICAgICAgIGlmICh0YWcgPT09ICdmb3JtJykge1xuICAgICAgICAgIGFuY2VzdG9ySW5mby5mb3JtVGFnID0gaW5mbztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09PSAnYScpIHtcbiAgICAgICAgICBhbmNlc3RvckluZm8uYVRhZ0luU2NvcGUgPSBpbmZvO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT09ICdidXR0b24nKSB7XG4gICAgICAgICAgYW5jZXN0b3JJbmZvLmJ1dHRvblRhZ0luU2NvcGUgPSBpbmZvO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT09ICdub2JyJykge1xuICAgICAgICAgIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZSA9IGluZm87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PT0gJ3AnKSB7XG4gICAgICAgICAgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlID0gaW5mbztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFnID09PSAnbGknKSB7XG4gICAgICAgICAgYW5jZXN0b3JJbmZvLmxpc3RJdGVtVGFnQXV0b2Nsb3NpbmcgPSBpbmZvO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT09ICdkZCcgfHwgdGFnID09PSAnZHQnKSB7XG4gICAgICAgICAgYW5jZXN0b3JJbmZvLmRsSXRlbVRhZ0F1dG9jbG9zaW5nID0gaW5mbztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvO1xuICAgICAgfTtcbiAgICAgIHZhciBpc1RhZ1ZhbGlkV2l0aFBhcmVudCA9IGZ1bmN0aW9uKHRhZywgcGFyZW50VGFnKSB7XG4gICAgICAgIHN3aXRjaCAocGFyZW50VGFnKSB7XG4gICAgICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgICAgIHJldHVybiB0YWcgPT09ICdvcHRpb24nIHx8IHRhZyA9PT0gJ29wdGdyb3VwJyB8fCB0YWcgPT09ICcjdGV4dCc7XG4gICAgICAgICAgY2FzZSAnb3B0Z3JvdXAnOlxuICAgICAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ29wdGlvbicgfHwgdGFnID09PSAnI3RleHQnO1xuICAgICAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgICAgICByZXR1cm4gdGFnID09PSAnI3RleHQnO1xuICAgICAgICAgIGNhc2UgJ3RyJzpcbiAgICAgICAgICAgIHJldHVybiB0YWcgPT09ICd0aCcgfHwgdGFnID09PSAndGQnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgICAgICBjYXNlICd0Ym9keSc6XG4gICAgICAgICAgY2FzZSAndGhlYWQnOlxuICAgICAgICAgIGNhc2UgJ3Rmb290JzpcbiAgICAgICAgICAgIHJldHVybiB0YWcgPT09ICd0cicgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgICAgIGNhc2UgJ2NvbGdyb3VwJzpcbiAgICAgICAgICAgIHJldHVybiB0YWcgPT09ICdjb2wnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgICAgICBjYXNlICd0YWJsZSc6XG4gICAgICAgICAgICByZXR1cm4gdGFnID09PSAnY2FwdGlvbicgfHwgdGFnID09PSAnY29sZ3JvdXAnIHx8IHRhZyA9PT0gJ3Rib2R5JyB8fCB0YWcgPT09ICd0Zm9vdCcgfHwgdGFnID09PSAndGhlYWQnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgICAgICBjYXNlICdoZWFkJzpcbiAgICAgICAgICAgIHJldHVybiB0YWcgPT09ICdiYXNlJyB8fCB0YWcgPT09ICdiYXNlZm9udCcgfHwgdGFnID09PSAnYmdzb3VuZCcgfHwgdGFnID09PSAnbGluaycgfHwgdGFnID09PSAnbWV0YScgfHwgdGFnID09PSAndGl0bGUnIHx8IHRhZyA9PT0gJ25vc2NyaXB0JyB8fCB0YWcgPT09ICdub2ZyYW1lcycgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2hlYWQnIHx8IHRhZyA9PT0gJ2JvZHknO1xuICAgICAgICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICAgICAgICByZXR1cm4gdGFnID09PSAnaHRtbCc7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgICBjYXNlICdoMSc6XG4gICAgICAgICAgY2FzZSAnaDInOlxuICAgICAgICAgIGNhc2UgJ2gzJzpcbiAgICAgICAgICBjYXNlICdoNCc6XG4gICAgICAgICAgY2FzZSAnaDUnOlxuICAgICAgICAgIGNhc2UgJ2g2JzpcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRUYWcgIT09ICdoMScgJiYgcGFyZW50VGFnICE9PSAnaDInICYmIHBhcmVudFRhZyAhPT0gJ2gzJyAmJiBwYXJlbnRUYWcgIT09ICdoNCcgJiYgcGFyZW50VGFnICE9PSAnaDUnICYmIHBhcmVudFRhZyAhPT0gJ2g2JztcbiAgICAgICAgICBjYXNlICdycCc6XG4gICAgICAgICAgY2FzZSAncnQnOlxuICAgICAgICAgICAgcmV0dXJuIGltcGxpZWRFbmRUYWdzLmluZGV4T2YocGFyZW50VGFnKSA9PT0gLTE7XG4gICAgICAgICAgY2FzZSAnYm9keSc6XG4gICAgICAgICAgY2FzZSAnY2FwdGlvbic6XG4gICAgICAgICAgY2FzZSAnY29sJzpcbiAgICAgICAgICBjYXNlICdjb2xncm91cCc6XG4gICAgICAgICAgY2FzZSAnZnJhbWUnOlxuICAgICAgICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICAgIGNhc2UgJ3Rib2R5JzpcbiAgICAgICAgICBjYXNlICd0ZCc6XG4gICAgICAgICAgY2FzZSAndGZvb3QnOlxuICAgICAgICAgIGNhc2UgJ3RoJzpcbiAgICAgICAgICBjYXNlICd0aGVhZCc6XG4gICAgICAgICAgY2FzZSAndHInOlxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudFRhZyA9PSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICAgIHZhciBmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnID0gZnVuY3Rpb24odGFnLCBhbmNlc3RvckluZm8pIHtcbiAgICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgICBjYXNlICdhZGRyZXNzJzpcbiAgICAgICAgICBjYXNlICdhcnRpY2xlJzpcbiAgICAgICAgICBjYXNlICdhc2lkZSc6XG4gICAgICAgICAgY2FzZSAnYmxvY2txdW90ZSc6XG4gICAgICAgICAgY2FzZSAnY2VudGVyJzpcbiAgICAgICAgICBjYXNlICdkZXRhaWxzJzpcbiAgICAgICAgICBjYXNlICdkaWFsb2cnOlxuICAgICAgICAgIGNhc2UgJ2Rpcic6XG4gICAgICAgICAgY2FzZSAnZGl2JzpcbiAgICAgICAgICBjYXNlICdkbCc6XG4gICAgICAgICAgY2FzZSAnZmllbGRzZXQnOlxuICAgICAgICAgIGNhc2UgJ2ZpZ2NhcHRpb24nOlxuICAgICAgICAgIGNhc2UgJ2ZpZ3VyZSc6XG4gICAgICAgICAgY2FzZSAnZm9vdGVyJzpcbiAgICAgICAgICBjYXNlICdoZWFkZXInOlxuICAgICAgICAgIGNhc2UgJ2hncm91cCc6XG4gICAgICAgICAgY2FzZSAnbWFpbic6XG4gICAgICAgICAgY2FzZSAnbWVudSc6XG4gICAgICAgICAgY2FzZSAnbmF2JzpcbiAgICAgICAgICBjYXNlICdvbCc6XG4gICAgICAgICAgY2FzZSAncCc6XG4gICAgICAgICAgY2FzZSAnc2VjdGlvbic6XG4gICAgICAgICAgY2FzZSAnc3VtbWFyeSc6XG4gICAgICAgICAgY2FzZSAndWwnOlxuICAgICAgICAgIGNhc2UgJ3ByZSc6XG4gICAgICAgICAgY2FzZSAnbGlzdGluZyc6XG4gICAgICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgICAgIGNhc2UgJ2hyJzpcbiAgICAgICAgICBjYXNlICd4bXAnOlxuICAgICAgICAgIGNhc2UgJ2gxJzpcbiAgICAgICAgICBjYXNlICdoMic6XG4gICAgICAgICAgY2FzZSAnaDMnOlxuICAgICAgICAgIGNhc2UgJ2g0JzpcbiAgICAgICAgICBjYXNlICdoNSc6XG4gICAgICAgICAgY2FzZSAnaDYnOlxuICAgICAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZTtcbiAgICAgICAgICBjYXNlICdmb3JtJzpcbiAgICAgICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZm9ybVRhZyB8fCBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGU7XG4gICAgICAgICAgY2FzZSAnbGknOlxuICAgICAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nO1xuICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICBjYXNlICdkdCc6XG4gICAgICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmRsSXRlbVRhZ0F1dG9jbG9zaW5nO1xuICAgICAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmJ1dHRvblRhZ0luU2NvcGU7XG4gICAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlO1xuICAgICAgICAgIGNhc2UgJ25vYnInOlxuICAgICAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5ub2JyVGFnSW5TY29wZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG4gICAgICB2YXIgZmluZE93bmVyU3RhY2sgPSBmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgICAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdGFjayA9IFtdO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgc3RhY2sucHVzaChpbnN0YW5jZSk7XG4gICAgICAgIH0gd2hpbGUgKGluc3RhbmNlID0gaW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lcik7XG4gICAgICAgIHN0YWNrLnJldmVyc2UoKTtcbiAgICAgICAgcmV0dXJuIHN0YWNrO1xuICAgICAgfTtcbiAgICAgIHZhciBkaWRXYXJuID0ge307XG4gICAgICB2YWxpZGF0ZURPTU5lc3RpbmcgPSBmdW5jdGlvbihjaGlsZFRhZywgY2hpbGRJbnN0YW5jZSwgYW5jZXN0b3JJbmZvKSB7XG4gICAgICAgIGFuY2VzdG9ySW5mbyA9IGFuY2VzdG9ySW5mbyB8fCBlbXB0eUFuY2VzdG9ySW5mbztcbiAgICAgICAgdmFyIHBhcmVudEluZm8gPSBhbmNlc3RvckluZm8uY3VycmVudDtcbiAgICAgICAgdmFyIHBhcmVudFRhZyA9IHBhcmVudEluZm8gJiYgcGFyZW50SW5mby50YWc7XG4gICAgICAgIHZhciBpbnZhbGlkUGFyZW50ID0gaXNUYWdWYWxpZFdpdGhQYXJlbnQoY2hpbGRUYWcsIHBhcmVudFRhZykgPyBudWxsIDogcGFyZW50SW5mbztcbiAgICAgICAgdmFyIGludmFsaWRBbmNlc3RvciA9IGludmFsaWRQYXJlbnQgPyBudWxsIDogZmluZEludmFsaWRBbmNlc3RvckZvclRhZyhjaGlsZFRhZywgYW5jZXN0b3JJbmZvKTtcbiAgICAgICAgdmFyIHByb2JsZW1hdGljID0gaW52YWxpZFBhcmVudCB8fCBpbnZhbGlkQW5jZXN0b3I7XG4gICAgICAgIGlmIChwcm9ibGVtYXRpYykge1xuICAgICAgICAgIHZhciBhbmNlc3RvclRhZyA9IHByb2JsZW1hdGljLnRhZztcbiAgICAgICAgICB2YXIgYW5jZXN0b3JJbnN0YW5jZSA9IHByb2JsZW1hdGljLmluc3RhbmNlO1xuICAgICAgICAgIHZhciBjaGlsZE93bmVyID0gY2hpbGRJbnN0YW5jZSAmJiBjaGlsZEluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgICAgdmFyIGFuY2VzdG9yT3duZXIgPSBhbmNlc3Rvckluc3RhbmNlICYmIGFuY2VzdG9ySW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgICB2YXIgY2hpbGRPd25lcnMgPSBmaW5kT3duZXJTdGFjayhjaGlsZE93bmVyKTtcbiAgICAgICAgICB2YXIgYW5jZXN0b3JPd25lcnMgPSBmaW5kT3duZXJTdGFjayhhbmNlc3Rvck93bmVyKTtcbiAgICAgICAgICB2YXIgbWluU3RhY2tMZW4gPSBNYXRoLm1pbihjaGlsZE93bmVycy5sZW5ndGgsIGFuY2VzdG9yT3duZXJzLmxlbmd0aCk7XG4gICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgdmFyIGRlZXBlc3RDb21tb24gPSAtMTtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbWluU3RhY2tMZW47IGkrKykge1xuICAgICAgICAgICAgaWYgKGNoaWxkT3duZXJzW2ldID09PSBhbmNlc3Rvck93bmVyc1tpXSkge1xuICAgICAgICAgICAgICBkZWVwZXN0Q29tbW9uID0gaTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgVU5LTk9XTiA9ICcodW5rbm93biknO1xuICAgICAgICAgIHZhciBjaGlsZE93bmVyTmFtZXMgPSBjaGlsZE93bmVycy5zbGljZShkZWVwZXN0Q29tbW9uICsgMSkubWFwKGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0LmdldE5hbWUoKSB8fCBVTktOT1dOO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBhbmNlc3Rvck93bmVyTmFtZXMgPSBhbmNlc3Rvck93bmVycy5zbGljZShkZWVwZXN0Q29tbW9uICsgMSkubWFwKGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnN0LmdldE5hbWUoKSB8fCBVTktOT1dOO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhciBvd25lckluZm8gPSBbXS5jb25jYXQoZGVlcGVzdENvbW1vbiAhPT0gLTEgPyBjaGlsZE93bmVyc1tkZWVwZXN0Q29tbW9uXS5nZXROYW1lKCkgfHwgVU5LTk9XTiA6IFtdLCBhbmNlc3Rvck93bmVyTmFtZXMsIGFuY2VzdG9yVGFnLCBpbnZhbGlkQW5jZXN0b3IgPyBbJy4uLiddIDogW10sIGNoaWxkT3duZXJOYW1lcywgY2hpbGRUYWcpLmpvaW4oJyA+ICcpO1xuICAgICAgICAgIHZhciB3YXJuS2V5ID0gISFpbnZhbGlkUGFyZW50ICsgJ3wnICsgY2hpbGRUYWcgKyAnfCcgKyBhbmNlc3RvclRhZyArICd8JyArIG93bmVySW5mbztcbiAgICAgICAgICBpZiAoZGlkV2Fyblt3YXJuS2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkaWRXYXJuW3dhcm5LZXldID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgdGFnRGlzcGxheU5hbWUgPSBjaGlsZFRhZztcbiAgICAgICAgICBpZiAoY2hpbGRUYWcgIT09ICcjdGV4dCcpIHtcbiAgICAgICAgICAgIHRhZ0Rpc3BsYXlOYW1lID0gJzwnICsgY2hpbGRUYWcgKyAnPic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbnZhbGlkUGFyZW50KSB7XG4gICAgICAgICAgICB2YXIgaW5mbyA9ICcnO1xuICAgICAgICAgICAgaWYgKGFuY2VzdG9yVGFnID09PSAndGFibGUnICYmIGNoaWxkVGFnID09PSAndHInKSB7XG4gICAgICAgICAgICAgIGluZm8gKz0gJyBBZGQgYSA8dGJvZHk+IHRvIHlvdXIgY29kZSB0byBtYXRjaCB0aGUgRE9NIHRyZWUgZ2VuZXJhdGVkIGJ5ICcgKyAndGhlIGJyb3dzZXIuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAndmFsaWRhdGVET01OZXN0aW5nKC4uLik6ICVzIGNhbm5vdCBhcHBlYXIgYXMgYSBjaGlsZCBvZiA8JXM+LiAnICsgJ1NlZSAlcy4lcycsIHRhZ0Rpc3BsYXlOYW1lLCBhbmNlc3RvclRhZywgb3duZXJJbmZvLCBpbmZvKSA6IHZvaWQgMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogJXMgY2Fubm90IGFwcGVhciBhcyBhIGRlc2NlbmRhbnQgb2YgJyArICc8JXM+LiBTZWUgJXMuJywgdGFnRGlzcGxheU5hbWUsIGFuY2VzdG9yVGFnLCBvd25lckluZm8pIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvID0gdXBkYXRlZEFuY2VzdG9ySW5mbztcbiAgICAgIHZhbGlkYXRlRE9NTmVzdGluZy5pc1RhZ1ZhbGlkSW5Db250ZXh0ID0gZnVuY3Rpb24odGFnLCBhbmNlc3RvckluZm8pIHtcbiAgICAgICAgYW5jZXN0b3JJbmZvID0gYW5jZXN0b3JJbmZvIHx8IGVtcHR5QW5jZXN0b3JJbmZvO1xuICAgICAgICB2YXIgcGFyZW50SW5mbyA9IGFuY2VzdG9ySW5mby5jdXJyZW50O1xuICAgICAgICB2YXIgcGFyZW50VGFnID0gcGFyZW50SW5mbyAmJiBwYXJlbnRJbmZvLnRhZztcbiAgICAgICAgcmV0dXJuIGlzVGFnVmFsaWRXaXRoUGFyZW50KHRhZywgcGFyZW50VGFnKSAmJiAhZmluZEludmFsaWRBbmNlc3RvckZvclRhZyh0YWcsIGFuY2VzdG9ySW5mbyk7XG4gICAgICB9O1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHZhbGlkYXRlRE9NTmVzdGluZztcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiODlcIiwgW1wiNTBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgdmFsaWRhdGVET01OZXN0aW5nID0gJF9fcmVxdWlyZSgnNTAnKTtcbiAgICB2YXIgRE9DX05PREVfVFlQRSA9IDk7XG4gICAgZnVuY3Rpb24gUmVhY3RET01Db250YWluZXJJbmZvKHRvcExldmVsV3JhcHBlciwgbm9kZSkge1xuICAgICAgdmFyIGluZm8gPSB7XG4gICAgICAgIF90b3BMZXZlbFdyYXBwZXI6IHRvcExldmVsV3JhcHBlcixcbiAgICAgICAgX2lkQ291bnRlcjogMSxcbiAgICAgICAgX293bmVyRG9jdW1lbnQ6IG5vZGUgPyBub2RlLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFID8gbm9kZSA6IG5vZGUub3duZXJEb2N1bWVudCA6IG51bGwsXG4gICAgICAgIF9ub2RlOiBub2RlLFxuICAgICAgICBfdGFnOiBub2RlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbCxcbiAgICAgICAgX25hbWVzcGFjZVVSSTogbm9kZSA/IG5vZGUubmFtZXNwYWNlVVJJIDogbnVsbFxuICAgICAgfTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGluZm8uX2FuY2VzdG9ySW5mbyA9IG5vZGUgPyB2YWxpZGF0ZURPTU5lc3RpbmcudXBkYXRlZEFuY2VzdG9ySW5mbyhudWxsLCBpbmZvLl90YWcsIG51bGwpIDogbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQ29udGFpbmVySW5mbztcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiOGFcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBSZWFjdERPTUZlYXR1cmVGbGFncyA9IHt1c2VDcmVhdGVFbGVtZW50OiB0cnVlfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUZlYXR1cmVGbGFncztcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI4YlwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIE1PRCA9IDY1NTIxO1xuICBmdW5jdGlvbiBhZGxlcjMyKGRhdGEpIHtcbiAgICB2YXIgYSA9IDE7XG4gICAgdmFyIGIgPSAwO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbCA9IGRhdGEubGVuZ3RoO1xuICAgIHZhciBtID0gbCAmIH4weDM7XG4gICAgd2hpbGUgKGkgPCBtKSB7XG4gICAgICB2YXIgbiA9IE1hdGgubWluKGkgKyA0MDk2LCBtKTtcbiAgICAgIGZvciAoOyBpIDwgbjsgaSArPSA0KSB7XG4gICAgICAgIGIgKz0gKGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkpKSArIChhICs9IGRhdGEuY2hhckNvZGVBdChpICsgMSkpICsgKGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkgKyAyKSkgKyAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSArIDMpKTtcbiAgICAgIH1cbiAgICAgIGEgJT0gTU9EO1xuICAgICAgYiAlPSBNT0Q7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBiICs9IGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICBhICU9IE1PRDtcbiAgICBiICU9IE1PRDtcbiAgICByZXR1cm4gYSB8IGIgPDwgMTY7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBhZGxlcjMyO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjhjXCIsIFtcIjhiXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgYWRsZXIzMiA9ICRfX3JlcXVpcmUoJzhiJyk7XG4gIHZhciBUQUdfRU5EID0gL1xcLz8+LztcbiAgdmFyIENPTU1FTlRfU1RBUlQgPSAvXjxcXCFcXC1cXC0vO1xuICB2YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHtcbiAgICBDSEVDS1NVTV9BVFRSX05BTUU6ICdkYXRhLXJlYWN0LWNoZWNrc3VtJyxcbiAgICBhZGRDaGVja3N1bVRvTWFya3VwOiBmdW5jdGlvbihtYXJrdXApIHtcbiAgICAgIHZhciBjaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcbiAgICAgIGlmIChDT01NRU5UX1NUQVJULnRlc3QobWFya3VwKSkge1xuICAgICAgICByZXR1cm4gbWFya3VwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1hcmt1cC5yZXBsYWNlKFRBR19FTkQsICcgJyArIFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FICsgJz1cIicgKyBjaGVja3N1bSArICdcIiQmJyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjYW5SZXVzZU1hcmt1cDogZnVuY3Rpb24obWFya3VwLCBlbGVtZW50KSB7XG4gICAgICB2YXIgZXhpc3RpbmdDaGVja3N1bSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FKTtcbiAgICAgIGV4aXN0aW5nQ2hlY2tzdW0gPSBleGlzdGluZ0NoZWNrc3VtICYmIHBhcnNlSW50KGV4aXN0aW5nQ2hlY2tzdW0sIDEwKTtcbiAgICAgIHZhciBtYXJrdXBDaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcbiAgICAgIHJldHVybiBtYXJrdXBDaGVja3N1bSA9PT0gZXhpc3RpbmdDaGVja3N1bTtcbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RNYXJrdXBDaGVja3N1bTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI0NVwiLCBbXCIzMFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIHZhciBpbmplY3RlZCA9IGZhbHNlO1xuICAgIHZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0ge1xuICAgICAgdW5tb3VudElERnJvbUVudmlyb25tZW50OiBudWxsLFxuICAgICAgcmVwbGFjZU5vZGVXaXRoTWFya3VwOiBudWxsLFxuICAgICAgcHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogbnVsbCxcbiAgICAgIGluamVjdGlvbjoge2luamVjdEVudmlyb25tZW50OiBmdW5jdGlvbihlbnZpcm9ubWVudCkge1xuICAgICAgICAgICEhaW5qZWN0ZWQgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQ6IGluamVjdEVudmlyb25tZW50KCkgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50ID0gZW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50O1xuICAgICAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwID0gZW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwO1xuICAgICAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcyA9IGVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXM7XG4gICAgICAgICAgaW5qZWN0ZWQgPSB0cnVlO1xuICAgICAgICB9fVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEVudmlyb25tZW50O1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI4NlwiLCBbXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgY2F1Z2h0RXJyb3IgPSBudWxsO1xuICAgIGZ1bmN0aW9uIGludm9rZUd1YXJkZWRDYWxsYmFjayhuYW1lLCBmdW5jLCBhLCBiKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZnVuYyhhLCBiKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgaWYgKGNhdWdodEVycm9yID09PSBudWxsKSB7XG4gICAgICAgICAgY2F1Z2h0RXJyb3IgPSB4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBSZWFjdEVycm9yVXRpbHMgPSB7XG4gICAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2s6IGludm9rZUd1YXJkZWRDYWxsYmFjayxcbiAgICAgIGludm9rZUd1YXJkZWRDYWxsYmFja1dpdGhDYXRjaDogaW52b2tlR3VhcmRlZENhbGxiYWNrLFxuICAgICAgcmV0aHJvd0NhdWdodEVycm9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNhdWdodEVycm9yKSB7XG4gICAgICAgICAgdmFyIGVycm9yID0gY2F1Z2h0RXJyb3I7XG4gICAgICAgICAgY2F1Z2h0RXJyb3IgPSBudWxsO1xuICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZGlzcGF0Y2hFdmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFdmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgZmFrZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdyZWFjdCcpO1xuICAgICAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrID0gZnVuY3Rpb24obmFtZSwgZnVuYywgYSwgYikge1xuICAgICAgICAgIHZhciBib3VuZEZ1bmMgPSBmdW5jLmJpbmQobnVsbCwgYSwgYik7XG4gICAgICAgICAgdmFyIGV2dFR5cGUgPSAncmVhY3QtJyArIG5hbWU7XG4gICAgICAgICAgZmFrZU5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBib3VuZEZ1bmMsIGZhbHNlKTtcbiAgICAgICAgICB2YXIgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgICAgZXZ0LmluaXRFdmVudChldnRUeXBlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgIGZha2VOb2RlLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICAgICAgICBmYWtlTm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2dFR5cGUsIGJvdW5kRnVuYywgZmFsc2UpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXJyb3JVdGlscztcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiODVcIiwgW1wiOGRcIiwgXCIzMFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSAkX19yZXF1aXJlKCc4ZCcpO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIHZhciBSZWFjdE5vZGVUeXBlcyA9IHtcbiAgICAgIE5BVElWRTogMCxcbiAgICAgIENPTVBPU0lURTogMSxcbiAgICAgIEVNUFRZOiAyLFxuICAgICAgZ2V0VHlwZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICBpZiAobm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBSZWFjdE5vZGVUeXBlcy5FTVBUWTtcbiAgICAgICAgfSBlbHNlIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5vZGUudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0Tm9kZVR5cGVzLkNPTVBPU0lURTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0Tm9kZVR5cGVzLk5BVElWRTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgIWZhbHNlID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1VuZXhwZWN0ZWQgbm9kZTogJXMnLCBub2RlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0Tm9kZVR5cGVzO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI4M1wiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFJlYWN0SW5zdGFuY2VNYXAgPSB7XG4gICAgcmVtb3ZlOiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZTtcbiAgICB9LFxuICAgIGhhczogZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4ga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgIT09IHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgPSB2YWx1ZTtcbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnN0YW5jZU1hcDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI2N1wiLCBbXCI2XCIsIFwiNFwiLCBcIjMwXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIF9hc3NpZ24gPSAkX19yZXF1aXJlKCc2Jyk7XG4gICAgdmFyIFBvb2xlZENsYXNzID0gJF9fcmVxdWlyZSgnNCcpO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIGZ1bmN0aW9uIENhbGxiYWNrUXVldWUoKSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3MgPSBudWxsO1xuICAgICAgdGhpcy5fY29udGV4dHMgPSBudWxsO1xuICAgIH1cbiAgICBfYXNzaWduKENhbGxiYWNrUXVldWUucHJvdG90eXBlLCB7XG4gICAgICBlbnF1ZXVlOiBmdW5jdGlvbihjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwgW107XG4gICAgICAgIHRoaXMuX2NvbnRleHRzID0gdGhpcy5fY29udGV4dHMgfHwgW107XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5fY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICAgIH0sXG4gICAgICBub3RpZnlBbGw6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzO1xuICAgICAgICB2YXIgY29udGV4dHMgPSB0aGlzLl9jb250ZXh0cztcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgICEoY2FsbGJhY2tzLmxlbmd0aCA9PT0gY29udGV4dHMubGVuZ3RoKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdNaXNtYXRjaGVkIGxpc3Qgb2YgY29udGV4dHMgaW4gY2FsbGJhY2sgcXVldWUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKGNvbnRleHRzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgY29udGV4dHMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNoZWNrcG9pbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2FsbGJhY2tzID8gdGhpcy5fY2FsbGJhY2tzLmxlbmd0aCA6IDA7XG4gICAgICB9LFxuICAgICAgcm9sbGJhY2s6IGZ1bmN0aW9uKGxlbikge1xuICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2tzKSB7XG4gICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLmxlbmd0aCA9IGxlbjtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0cy5sZW5ndGggPSBsZW47XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IENhbGxiYWNrUXVldWU7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjhlXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgUmVhY3RGZWF0dXJlRmxhZ3MgPSB7bG9nVG9wTGV2ZWxSZW5kZXJzOiBmYWxzZX07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RGZWF0dXJlRmxhZ3M7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiOGZcIiwgW1wiMzBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIgUmVhY3RPd25lciA9IHtcbiAgICAgIGlzVmFsaWRPd25lcjogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiAhIShvYmplY3QgJiYgdHlwZW9mIG9iamVjdC5hdHRhY2hSZWYgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iamVjdC5kZXRhY2hSZWYgPT09ICdmdW5jdGlvbicpO1xuICAgICAgfSxcbiAgICAgIGFkZENvbXBvbmVudEFzUmVmVG86IGZ1bmN0aW9uKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgICAgICAhUmVhY3RPd25lci5pc1ZhbGlkT3duZXIob3duZXIpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2FkZENvbXBvbmVudEFzUmVmVG8oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gWW91IG1pZ2h0ICcgKyAnYmUgYWRkaW5nIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgd2FzIG5vdCBjcmVhdGVkIGluc2lkZSBhIGNvbXBvbmVudFxcJ3MgJyArICdgcmVuZGVyYCBtZXRob2QsIG9yIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBsb2FkZWQgJyArICcoZGV0YWlsczogaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lcikuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBvd25lci5hdHRhY2hSZWYocmVmLCBjb21wb25lbnQpO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZUNvbXBvbmVudEFzUmVmRnJvbTogZnVuY3Rpb24oY29tcG9uZW50LCByZWYsIG93bmVyKSB7XG4gICAgICAgICFSZWFjdE93bmVyLmlzVmFsaWRPd25lcihvd25lcikgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncmVtb3ZlQ29tcG9uZW50QXNSZWZGcm9tKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFlvdSBtaWdodCAnICsgJ2JlIHJlbW92aW5nIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgd2FzIG5vdCBjcmVhdGVkIGluc2lkZSBhIGNvbXBvbmVudFxcJ3MgJyArICdgcmVuZGVyYCBtZXRob2QsIG9yIHlvdSBoYXZlIG11bHRpcGxlIGNvcGllcyBvZiBSZWFjdCBsb2FkZWQgJyArICcoZGV0YWlsczogaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lcikuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB2YXIgb3duZXJQdWJsaWNJbnN0YW5jZSA9IG93bmVyLmdldFB1YmxpY0luc3RhbmNlKCk7XG4gICAgICAgIGlmIChvd25lclB1YmxpY0luc3RhbmNlICYmIG93bmVyUHVibGljSW5zdGFuY2UucmVmc1tyZWZdID09PSBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSkge1xuICAgICAgICAgIG93bmVyLmRldGFjaFJlZihyZWYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0T3duZXI7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjkwXCIsIFtcIjhmXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFJlYWN0T3duZXIgPSAkX19yZXF1aXJlKCc4ZicpO1xuICAgIHZhciBSZWFjdFJlZiA9IHt9O1xuICAgIGZ1bmN0aW9uIGF0dGFjaFJlZihyZWYsIGNvbXBvbmVudCwgb3duZXIpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlZihjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBSZWFjdE93bmVyLmFkZENvbXBvbmVudEFzUmVmVG8oY29tcG9uZW50LCByZWYsIG93bmVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZGV0YWNoUmVmKHJlZiwgY29tcG9uZW50LCBvd25lcikge1xuICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmVmKG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgUmVhY3RPd25lci5yZW1vdmVDb21wb25lbnRBc1JlZkZyb20oY29tcG9uZW50LCByZWYsIG93bmVyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgUmVhY3RSZWYuYXR0YWNoUmVmcyA9IGZ1bmN0aW9uKGluc3RhbmNlLCBlbGVtZW50KSB7XG4gICAgICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gICAgICBpZiAocmVmICE9IG51bGwpIHtcbiAgICAgICAgYXR0YWNoUmVmKHJlZiwgaW5zdGFuY2UsIGVsZW1lbnQuX293bmVyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMgPSBmdW5jdGlvbihwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgICAgIHZhciBwcmV2RW1wdHkgPSBwcmV2RWxlbWVudCA9PT0gbnVsbCB8fCBwcmV2RWxlbWVudCA9PT0gZmFsc2U7XG4gICAgICB2YXIgbmV4dEVtcHR5ID0gbmV4dEVsZW1lbnQgPT09IG51bGwgfHwgbmV4dEVsZW1lbnQgPT09IGZhbHNlO1xuICAgICAgcmV0dXJuIChwcmV2RW1wdHkgfHwgbmV4dEVtcHR5IHx8IG5leHRFbGVtZW50Ll9vd25lciAhPT0gcHJldkVsZW1lbnQuX293bmVyIHx8IG5leHRFbGVtZW50LnJlZiAhPT0gcHJldkVsZW1lbnQucmVmKTtcbiAgICB9O1xuICAgIFJlYWN0UmVmLmRldGFjaFJlZnMgPSBmdW5jdGlvbihpbnN0YW5jZSwgZWxlbWVudCkge1xuICAgICAgaWYgKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICAgICAgaWYgKHJlZiAhPSBudWxsKSB7XG4gICAgICAgIGRldGFjaFJlZihyZWYsIGluc3RhbmNlLCBlbGVtZW50Ll9vd25lcik7XG4gICAgICB9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVmO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIzZVwiLCBbXCI5MFwiLCBcIjI3XCIsIFwiMzBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgUmVhY3RSZWYgPSAkX19yZXF1aXJlKCc5MCcpO1xuICAgIHZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9ICRfX3JlcXVpcmUoJzI3Jyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgZnVuY3Rpb24gYXR0YWNoUmVmcygpIHtcbiAgICAgIFJlYWN0UmVmLmF0dGFjaFJlZnModGhpcywgdGhpcy5fY3VycmVudEVsZW1lbnQpO1xuICAgIH1cbiAgICB2YXIgUmVhY3RSZWNvbmNpbGVyID0ge1xuICAgICAgbW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsIHRyYW5zYWN0aW9uLCBuYXRpdmVQYXJlbnQsIG5hdGl2ZUNvbnRhaW5lckluZm8sIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVnaW5SZWNvbmNpbGVyVGltZXIoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCwgJ21vdW50Q29tcG9uZW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBtYXJrdXAgPSBpbnRlcm5hbEluc3RhbmNlLm1vdW50Q29tcG9uZW50KHRyYW5zYWN0aW9uLCBuYXRpdmVQYXJlbnQsIG5hdGl2ZUNvbnRhaW5lckluZm8sIGNvbnRleHQpO1xuICAgICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQgJiYgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQucmVmICE9IG51bGwpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGF0dGFjaFJlZnMsIGludGVybmFsSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZFJlY29uY2lsZXJUaW1lcihpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCAnbW91bnRDb21wb25lbnQnKTtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk1vdW50Q29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFya3VwO1xuICAgICAgfSxcbiAgICAgIGdldE5hdGl2ZU5vZGU6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuIGludGVybmFsSW5zdGFuY2UuZ2V0TmF0aXZlTm9kZSgpO1xuICAgICAgfSxcbiAgICAgIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsIHNhZmVseSkge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpblJlY29uY2lsZXJUaW1lcihpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCAndW5tb3VudENvbXBvbmVudCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBSZWFjdFJlZi5kZXRhY2hSZWZzKGludGVybmFsSW5zdGFuY2UsIGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50KTtcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KHNhZmVseSk7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZFJlY29uY2lsZXJUaW1lcihpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCAndW5tb3VudENvbXBvbmVudCcpO1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uVW5tb3VudENvbXBvbmVudChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZWNlaXZlQ29tcG9uZW50OiBmdW5jdGlvbihpbnRlcm5hbEluc3RhbmNlLCBuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHByZXZFbGVtZW50ID0gaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG4gICAgICAgIGlmIChuZXh0RWxlbWVudCA9PT0gcHJldkVsZW1lbnQgJiYgY29udGV4dCA9PT0gaW50ZXJuYWxJbnN0YW5jZS5fY29udGV4dCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpblJlY29uY2lsZXJUaW1lcihpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCAncmVjZWl2ZUNvbXBvbmVudCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVmc0NoYW5nZWQgPSBSZWFjdFJlZi5zaG91bGRVcGRhdGVSZWZzKHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCk7XG4gICAgICAgIGlmIChyZWZzQ2hhbmdlZCkge1xuICAgICAgICAgIFJlYWN0UmVmLmRldGFjaFJlZnMoaW50ZXJuYWxJbnN0YW5jZSwgcHJldkVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UucmVjZWl2ZUNvbXBvbmVudChuZXh0RWxlbWVudCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVmc0NoYW5nZWQgJiYgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQgJiYgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQucmVmICE9IG51bGwpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGF0dGFjaFJlZnMsIGludGVybmFsSW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZFJlY29uY2lsZXJUaW1lcihpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCAncmVjZWl2ZUNvbXBvbmVudCcpO1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uVXBkYXRlQ29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgdHJhbnNhY3Rpb24sIHVwZGF0ZUJhdGNoTnVtYmVyKSB7XG4gICAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl91cGRhdGVCYXRjaE51bWJlciAhPT0gdXBkYXRlQmF0Y2hOdW1iZXIpIHtcbiAgICAgICAgICAhKGludGVybmFsSW5zdGFuY2UuX3VwZGF0ZUJhdGNoTnVtYmVyID09IG51bGwgfHwgaW50ZXJuYWxJbnN0YW5jZS5fdXBkYXRlQmF0Y2hOdW1iZXIgPT09IHVwZGF0ZUJhdGNoTnVtYmVyICsgMSkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5OiBVbmV4cGVjdGVkIGJhdGNoIG51bWJlciAoY3VycmVudCAlcywgJyArICdwZW5kaW5nICVzKScsIHVwZGF0ZUJhdGNoTnVtYmVyLCBpbnRlcm5hbEluc3RhbmNlLl91cGRhdGVCYXRjaE51bWJlcikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpblJlY29uY2lsZXJUaW1lcihpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCAncGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KHRyYW5zYWN0aW9uKTtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kUmVjb25jaWxlclRpbWVyKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQsICdwZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnknKTtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVwZGF0ZUNvbXBvbmVudChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWNvbmNpbGVyO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI0YVwiLCBbXCIzMFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIHZhciBNaXhpbiA9IHtcbiAgICAgIHJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy5nZXRUcmFuc2FjdGlvbldyYXBwZXJzKCk7XG4gICAgICAgIGlmICh0aGlzLndyYXBwZXJJbml0RGF0YSkge1xuICAgICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy53cmFwcGVySW5pdERhdGEgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBfaXNJblRyYW5zYWN0aW9uOiBmYWxzZSxcbiAgICAgIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IG51bGwsXG4gICAgICBpc0luVHJhbnNhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9pc0luVHJhbnNhY3Rpb247XG4gICAgICB9LFxuICAgICAgcGVyZm9ybTogZnVuY3Rpb24obWV0aG9kLCBzY29wZSwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgICAhIXRoaXMuaXNJblRyYW5zYWN0aW9uKCkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJhbnNhY3Rpb24ucGVyZm9ybSguLi4pOiBDYW5ub3QgaW5pdGlhbGl6ZSBhIHRyYW5zYWN0aW9uIHdoZW4gdGhlcmUgJyArICdpcyBhbHJlYWR5IGFuIG91dHN0YW5kaW5nIHRyYW5zYWN0aW9uLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgdmFyIGVycm9yVGhyb3duO1xuICAgICAgICB2YXIgcmV0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IHRydWU7XG4gICAgICAgICAgZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZUFsbCgwKTtcbiAgICAgICAgICByZXQgPSBtZXRob2QuY2FsbChzY29wZSwgYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICAgICAgZXJyb3JUaHJvd24gPSBmYWxzZTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgICB9LFxuICAgICAgaW5pdGlhbGl6ZUFsbDogZnVuY3Rpb24oc3RhcnRJbmRleCkge1xuICAgICAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0SW5kZXg7IGkgPCB0cmFuc2FjdGlvbldyYXBwZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIHdyYXBwZXIgPSB0cmFuc2FjdGlvbldyYXBwZXJzW2ldO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SO1xuICAgICAgICAgICAgdGhpcy53cmFwcGVySW5pdERhdGFbaV0gPSB3cmFwcGVyLmluaXRpYWxpemUgPyB3cmFwcGVyLmluaXRpYWxpemUuY2FsbCh0aGlzKSA6IG51bGw7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9PT0gVHJhbnNhY3Rpb24uT0JTRVJWRURfRVJST1IpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVBbGwoaSArIDEpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHt9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY2xvc2VBbGw6IGZ1bmN0aW9uKHN0YXJ0SW5kZXgpIHtcbiAgICAgICAgIXRoaXMuaXNJblRyYW5zYWN0aW9uKCkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJhbnNhY3Rpb24uY2xvc2VBbGwoKTogQ2Fubm90IGNsb3NlIHRyYW5zYWN0aW9uIHdoZW4gbm9uZSBhcmUgb3Blbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHZhciB0cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzO1xuICAgICAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgd3JhcHBlciA9IHRyYW5zYWN0aW9uV3JhcHBlcnNbaV07XG4gICAgICAgICAgdmFyIGluaXREYXRhID0gdGhpcy53cmFwcGVySW5pdERhdGFbaV07XG4gICAgICAgICAgdmFyIGVycm9yVGhyb3duO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBlcnJvclRocm93biA9IHRydWU7XG4gICAgICAgICAgICBpZiAoaW5pdERhdGEgIT09IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SICYmIHdyYXBwZXIuY2xvc2UpIHtcbiAgICAgICAgICAgICAgd3JhcHBlci5jbG9zZS5jYWxsKHRoaXMsIGluaXREYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoaSArIDEpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIFRyYW5zYWN0aW9uID0ge1xuICAgICAgTWl4aW46IE1peGluLFxuICAgICAgT0JTRVJWRURfRVJST1I6IHt9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFRyYW5zYWN0aW9uO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMlwiLCBbXCI2XCIsIFwiNjdcIiwgXCI0XCIsIFwiOGVcIiwgXCIyN1wiLCBcIjNlXCIsIFwiNGFcIiwgXCIzMFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBfYXNzaWduID0gJF9fcmVxdWlyZSgnNicpO1xuICAgIHZhciBDYWxsYmFja1F1ZXVlID0gJF9fcmVxdWlyZSgnNjcnKTtcbiAgICB2YXIgUG9vbGVkQ2xhc3MgPSAkX19yZXF1aXJlKCc0Jyk7XG4gICAgdmFyIFJlYWN0RmVhdHVyZUZsYWdzID0gJF9fcmVxdWlyZSgnOGUnKTtcbiAgICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSAkX19yZXF1aXJlKCcyNycpO1xuICAgIHZhciBSZWFjdFJlY29uY2lsZXIgPSAkX19yZXF1aXJlKCczZScpO1xuICAgIHZhciBUcmFuc2FjdGlvbiA9ICRfX3JlcXVpcmUoJzRhJyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIGRpcnR5Q29tcG9uZW50cyA9IFtdO1xuICAgIHZhciB1cGRhdGVCYXRjaE51bWJlciA9IDA7XG4gICAgdmFyIGFzYXBDYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgICB2YXIgYXNhcEVucXVldWVkID0gZmFsc2U7XG4gICAgdmFyIGJhdGNoaW5nU3RyYXRlZ3kgPSBudWxsO1xuICAgIGZ1bmN0aW9uIGVuc3VyZUluamVjdGVkKCkge1xuICAgICAgIShSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiAmJiBiYXRjaGluZ1N0cmF0ZWd5KSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgaW5qZWN0IGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzIGFuZCBiYXRjaGluZyAnICsgJ3N0cmF0ZWd5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cbiAgICB2YXIgTkVTVEVEX1VQREFURVMgPSB7XG4gICAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoO1xuICAgICAgfSxcbiAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoICE9PSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgZGlydHlDb21wb25lbnRzLnNwbGljZSgwLCB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCk7XG4gICAgICAgICAgZmx1c2hCYXRjaGVkVXBkYXRlcygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRpcnR5Q29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgVVBEQVRFX1FVRVVFSU5HID0ge1xuICAgICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tRdWV1ZS5yZXNldCgpO1xuICAgICAgfSxcbiAgICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5jYWxsYmFja1F1ZXVlLm5vdGlmeUFsbCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW05FU1RFRF9VUERBVEVTLCBVUERBVEVfUVVFVUVJTkddO1xuICAgIGZ1bmN0aW9uIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24oKSB7XG4gICAgICB0aGlzLnJlaW5pdGlhbGl6ZVRyYW5zYWN0aW9uKCk7XG4gICAgICB0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCA9IG51bGw7XG4gICAgICB0aGlzLmNhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xuICAgICAgdGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZCh0cnVlKTtcbiAgICB9XG4gICAgX2Fzc2lnbihSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnByb3RvdHlwZSwgVHJhbnNhY3Rpb24uTWl4aW4sIHtcbiAgICAgIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gICAgICB9LFxuICAgICAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgICAgICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMuY2FsbGJhY2tRdWV1ZSk7XG4gICAgICAgIHRoaXMuY2FsbGJhY2tRdWV1ZSA9IG51bGw7XG4gICAgICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodGhpcy5yZWNvbmNpbGVUcmFuc2FjdGlvbik7XG4gICAgICAgIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24gPSBudWxsO1xuICAgICAgfSxcbiAgICAgIHBlcmZvcm06IGZ1bmN0aW9uKG1ldGhvZCwgc2NvcGUsIGEpIHtcbiAgICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uLk1peGluLnBlcmZvcm0uY2FsbCh0aGlzLCB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLnBlcmZvcm0sIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24sIG1ldGhvZCwgc2NvcGUsIGEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKTtcbiAgICBmdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyhjYWxsYmFjaywgYSwgYiwgYywgZCwgZSkge1xuICAgICAgZW5zdXJlSW5qZWN0ZWQoKTtcbiAgICAgIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIsIGMsIGQsIGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtb3VudE9yZGVyQ29tcGFyYXRvcihjMSwgYzIpIHtcbiAgICAgIHJldHVybiBjMS5fbW91bnRPcmRlciAtIGMyLl9tb3VudE9yZGVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBydW5CYXRjaGVkVXBkYXRlcyh0cmFuc2FjdGlvbikge1xuICAgICAgdmFyIGxlbiA9IHRyYW5zYWN0aW9uLmRpcnR5Q29tcG9uZW50c0xlbmd0aDtcbiAgICAgICEobGVuID09PSBkaXJ0eUNvbXBvbmVudHMubGVuZ3RoKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBmbHVzaCB0cmFuc2FjdGlvblxcJ3Mgc3RvcmVkIGRpcnR5LWNvbXBvbmVudHMgbGVuZ3RoICglcykgdG8gJyArICdtYXRjaCBkaXJ0eS1jb21wb25lbnRzIGFycmF5IGxlbmd0aCAoJXMpLicsIGxlbiwgZGlydHlDb21wb25lbnRzLmxlbmd0aCkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgZGlydHlDb21wb25lbnRzLnNvcnQobW91bnRPcmRlckNvbXBhcmF0b3IpO1xuICAgICAgdXBkYXRlQmF0Y2hOdW1iZXIrKztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IGRpcnR5Q29tcG9uZW50c1tpXTtcbiAgICAgICAgdmFyIGNhbGxiYWNrcyA9IGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcztcbiAgICAgICAgY29tcG9uZW50Ll9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcbiAgICAgICAgdmFyIG1hcmtlck5hbWU7XG4gICAgICAgIGlmIChSZWFjdEZlYXR1cmVGbGFncy5sb2dUb3BMZXZlbFJlbmRlcnMpIHtcbiAgICAgICAgICB2YXIgbmFtZWRDb21wb25lbnQgPSBjb21wb25lbnQ7XG4gICAgICAgICAgaWYgKGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQucHJvcHMgPT09IGNvbXBvbmVudC5fcmVuZGVyZWRDb21wb25lbnQuX2N1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBuYW1lZENvbXBvbmVudCA9IGNvbXBvbmVudC5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hcmtlck5hbWUgPSAnUmVhY3QgdXBkYXRlOiAnICsgbmFtZWRDb21wb25lbnQuZ2V0TmFtZSgpO1xuICAgICAgICAgIGNvbnNvbGUudGltZShtYXJrZXJOYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBSZWFjdFJlY29uY2lsZXIucGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5KGNvbXBvbmVudCwgdHJhbnNhY3Rpb24ucmVjb25jaWxlVHJhbnNhY3Rpb24sIHVwZGF0ZUJhdGNoTnVtYmVyKTtcbiAgICAgICAgaWYgKG1hcmtlck5hbWUpIHtcbiAgICAgICAgICBjb25zb2xlLnRpbWVFbmQobWFya2VyTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY2FsbGJhY2tzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5jYWxsYmFja1F1ZXVlLmVucXVldWUoY2FsbGJhY2tzW2pdLCBjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBmbHVzaEJhdGNoZWRVcGRhdGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkZsdXNoKCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoZGlydHlDb21wb25lbnRzLmxlbmd0aCB8fCBhc2FwRW5xdWV1ZWQpIHtcbiAgICAgICAgaWYgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgdHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLmdldFBvb2xlZCgpO1xuICAgICAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0ocnVuQmF0Y2hlZFVwZGF0ZXMsIG51bGwsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhc2FwRW5xdWV1ZWQpIHtcbiAgICAgICAgICBhc2FwRW5xdWV1ZWQgPSBmYWxzZTtcbiAgICAgICAgICB2YXIgcXVldWUgPSBhc2FwQ2FsbGJhY2tRdWV1ZTtcbiAgICAgICAgICBhc2FwQ2FsbGJhY2tRdWV1ZSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKCk7XG4gICAgICAgICAgcXVldWUubm90aWZ5QWxsKCk7XG4gICAgICAgICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHF1ZXVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kRmx1c2goKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIGVucXVldWVVcGRhdGUoY29tcG9uZW50KSB7XG4gICAgICBlbnN1cmVJbmplY3RlZCgpO1xuICAgICAgaWYgKCFiYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgICAgIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoZW5xdWV1ZVVwZGF0ZSwgY29tcG9uZW50KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGlydHlDb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgIGlmIChjb21wb25lbnQuX3VwZGF0ZUJhdGNoTnVtYmVyID09IG51bGwpIHtcbiAgICAgICAgY29tcG9uZW50Ll91cGRhdGVCYXRjaE51bWJlciA9IHVwZGF0ZUJhdGNoTnVtYmVyICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gYXNhcChjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgIWJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzLmFzYXA6IENhblxcJ3QgZW5xdWV1ZSBhbiBhc2FwIGNhbGxiYWNrIGluIGEgY29udGV4dCB3aGVyZScgKyAndXBkYXRlcyBhcmUgbm90IGJlaW5nIGJhdGNoZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgYXNhcENhbGxiYWNrUXVldWUuZW5xdWV1ZShjYWxsYmFjaywgY29udGV4dCk7XG4gICAgICBhc2FwRW5xdWV1ZWQgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgUmVhY3RVcGRhdGVzSW5qZWN0aW9uID0ge1xuICAgICAgaW5qZWN0UmVjb25jaWxlVHJhbnNhY3Rpb246IGZ1bmN0aW9uKFJlY29uY2lsZVRyYW5zYWN0aW9uKSB7XG4gICAgICAgICFSZWNvbmNpbGVUcmFuc2FjdGlvbiA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIHJlY29uY2lsZSB0cmFuc2FjdGlvbiBjbGFzcycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSBSZWNvbmNpbGVUcmFuc2FjdGlvbjtcbiAgICAgIH0sXG4gICAgICBpbmplY3RCYXRjaGluZ1N0cmF0ZWd5OiBmdW5jdGlvbihfYmF0Y2hpbmdTdHJhdGVneSkge1xuICAgICAgICAhX2JhdGNoaW5nU3RyYXRlZ3kgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSBiYXRjaGluZyBzdHJhdGVneScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgISh0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMgPT09ICdmdW5jdGlvbicpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgYmF0Y2hlZFVwZGF0ZXMoKSBmdW5jdGlvbicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgISh0eXBlb2YgX2JhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPT09ICdib29sZWFuJykgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYW4gaXNCYXRjaGluZ1VwZGF0ZXMgYm9vbGVhbiBhdHRyaWJ1dGUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGJhdGNoaW5nU3RyYXRlZ3kgPSBfYmF0Y2hpbmdTdHJhdGVneTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBSZWFjdFVwZGF0ZXMgPSB7XG4gICAgICBSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uOiBudWxsLFxuICAgICAgYmF0Y2hlZFVwZGF0ZXM6IGJhdGNoZWRVcGRhdGVzLFxuICAgICAgZW5xdWV1ZVVwZGF0ZTogZW5xdWV1ZVVwZGF0ZSxcbiAgICAgIGZsdXNoQmF0Y2hlZFVwZGF0ZXM6IGZsdXNoQmF0Y2hlZFVwZGF0ZXMsXG4gICAgICBpbmplY3Rpb246IFJlYWN0VXBkYXRlc0luamVjdGlvbixcbiAgICAgIGFzYXA6IGFzYXBcbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVzO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI5MVwiLCBbXCI0N1wiLCBcIjgzXCIsIFwiMTJcIiwgXCIzMFwiLCBcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFJlYWN0Q3VycmVudE93bmVyID0gJF9fcmVxdWlyZSgnNDcnKTtcbiAgICB2YXIgUmVhY3RJbnN0YW5jZU1hcCA9ICRfX3JlcXVpcmUoJzgzJyk7XG4gICAgdmFyIFJlYWN0VXBkYXRlcyA9ICRfX3JlcXVpcmUoJzEyJyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIGZ1bmN0aW9uIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgUmVhY3RVcGRhdGVzLmVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGZvcm1hdFVuZXhwZWN0ZWRBcmd1bWVudChhcmcpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGFyZztcbiAgICAgIGlmICh0eXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH1cbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGFyZy5jb25zdHJ1Y3RvciAmJiBhcmcuY29uc3RydWN0b3IubmFtZSB8fCB0eXBlO1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhcmcpO1xuICAgICAgaWYgKGtleXMubGVuZ3RoID4gMCAmJiBrZXlzLmxlbmd0aCA8IDIwKSB7XG4gICAgICAgIHJldHVybiBkaXNwbGF5TmFtZSArICcgKGtleXM6ICcgKyBrZXlzLmpvaW4oJywgJykgKyAnKSc7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGlzcGxheU5hbWU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICAgICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7XG4gICAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY2FsbGVyTmFtZSwgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiAnICsgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4gJyArICdUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjYWxsZXJOYW1lLCBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsICclcyguLi4pOiBDYW5ub3QgdXBkYXRlIGR1cmluZyBhbiBleGlzdGluZyBzdGF0ZSB0cmFuc2l0aW9uIChzdWNoIGFzICcgKyAnd2l0aGluIGByZW5kZXJgIG9yIGFub3RoZXIgY29tcG9uZW50XFwncyBjb25zdHJ1Y3RvcikuIFJlbmRlciBtZXRob2RzICcgKyAnc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGU7IGNvbnN0cnVjdG9yICcgKyAnc2lkZS1lZmZlY3RzIGFyZSBhbiBhbnRpLXBhdHRlcm4sIGJ1dCBjYW4gYmUgbW92ZWQgdG8gJyArICdgY29tcG9uZW50V2lsbE1vdW50YC4nLCBjYWxsZXJOYW1lKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnRlcm5hbEluc3RhbmNlO1xuICAgIH1cbiAgICB2YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHtcbiAgICAgIGlzTW91bnRlZDogZnVuY3Rpb24ocHVibGljSW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgICAgICAgIGlmIChvd25lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcob3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyLCAnJXMgaXMgYWNjZXNzaW5nIGlzTW91bnRlZCBpbnNpZGUgaXRzIHJlbmRlcigpIGZ1bmN0aW9uLiAnICsgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArICduZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyAnICsgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgKyAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJywgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgICAgICAgb3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBSZWFjdEluc3RhbmNlTWFwLmdldChwdWJsaWNJbnN0YW5jZSk7XG4gICAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgICAgcmV0dXJuICEhaW50ZXJuYWxJbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZW5xdWV1ZUNhbGxiYWNrOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICAgICAgUmVhY3RVcGRhdGVRdWV1ZS52YWxpZGF0ZUNhbGxiYWNrKGNhbGxiYWNrLCBjYWxsZXJOYW1lKTtcbiAgICAgICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UpO1xuICAgICAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcykge1xuICAgICAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0NhbGxiYWNrcyA9IFtjYWxsYmFja107XG4gICAgICAgIH1cbiAgICAgICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgICAgIH0sXG4gICAgICBlbnF1ZXVlQ2FsbGJhY2tJbnRlcm5hbDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MpIHtcbiAgICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MgPSBbY2FsbGJhY2tdO1xuICAgICAgICB9XG4gICAgICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgICB9LFxuICAgICAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSkge1xuICAgICAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gICAgICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSB0cnVlO1xuICAgICAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICAgICAgfSxcbiAgICAgIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKSB7XG4gICAgICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gICAgICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtjb21wbGV0ZVN0YXRlXTtcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IHRydWU7XG4gICAgICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgICB9LFxuICAgICAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlLCAnc2V0U3RhdGUnKTtcbiAgICAgICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBxdWV1ZSA9IGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlIHx8IChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtdKTtcbiAgICAgICAgcXVldWUucHVzaChwYXJ0aWFsU3RhdGUpO1xuICAgICAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICAgICAgfSxcbiAgICAgIGVucXVldWVFbGVtZW50SW50ZXJuYWw6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsIG5ld0VsZW1lbnQpIHtcbiAgICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0VsZW1lbnQgPSBuZXdFbGVtZW50O1xuICAgICAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICAgICAgfSxcbiAgICAgIHZhbGlkYXRlQ2FsbGJhY2s6IGZ1bmN0aW9uKGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gICAgICAgICEoIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMoLi4uKTogRXhwZWN0ZWQgdGhlIGxhc3Qgb3B0aW9uYWwgYGNhbGxiYWNrYCBhcmd1bWVudCB0byBiZSBhICcgKyAnZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsIGNhbGxlck5hbWUsIGZvcm1hdFVuZXhwZWN0ZWRBcmd1bWVudChjYWxsYmFjaykpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVRdWV1ZTtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiOTJcIiwgW1wiNlwiLCBcIjQ1XCIsIFwiNDdcIiwgXCI4ZFwiLCBcIjg2XCIsIFwiODNcIiwgXCIyN1wiLCBcIjg1XCIsIFwiM2JcIiwgXCI5M1wiLCBcIjNlXCIsIFwiOTFcIiwgXCI5NFwiLCBcIjMwXCIsIFwiNDFcIiwgXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBfYXNzaWduID0gJF9fcmVxdWlyZSgnNicpO1xuICAgIHZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gJF9fcmVxdWlyZSgnNDUnKTtcbiAgICB2YXIgUmVhY3RDdXJyZW50T3duZXIgPSAkX19yZXF1aXJlKCc0NycpO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSAkX19yZXF1aXJlKCc4ZCcpO1xuICAgIHZhciBSZWFjdEVycm9yVXRpbHMgPSAkX19yZXF1aXJlKCc4NicpO1xuICAgIHZhciBSZWFjdEluc3RhbmNlTWFwID0gJF9fcmVxdWlyZSgnODMnKTtcbiAgICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSAkX19yZXF1aXJlKCcyNycpO1xuICAgIHZhciBSZWFjdE5vZGVUeXBlcyA9ICRfX3JlcXVpcmUoJzg1Jyk7XG4gICAgdmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSAkX19yZXF1aXJlKCczYicpO1xuICAgIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9ICRfX3JlcXVpcmUoJzkzJyk7XG4gICAgdmFyIFJlYWN0UmVjb25jaWxlciA9ICRfX3JlcXVpcmUoJzNlJyk7XG4gICAgdmFyIFJlYWN0VXBkYXRlUXVldWUgPSAkX19yZXF1aXJlKCc5MScpO1xuICAgIHZhciBlbXB0eU9iamVjdCA9ICRfX3JlcXVpcmUoJzk0Jyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gJF9fcmVxdWlyZSgnNDEnKTtcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGNvbXBvbmVudCkge1xuICAgICAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIgfHwgbnVsbDtcbiAgICAgIGlmIChvd25lcikge1xuICAgICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIFN0YXRlbGVzc0NvbXBvbmVudChDb21wb25lbnQpIHt9XG4gICAgU3RhdGVsZXNzQ29tcG9uZW50LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBDb21wb25lbnQgPSBSZWFjdEluc3RhbmNlTWFwLmdldCh0aGlzKS5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgIHZhciBlbGVtZW50ID0gQ29tcG9uZW50KHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCwgdGhpcy51cGRhdGVyKTtcbiAgICAgIHdhcm5JZkludmFsaWRFbGVtZW50KENvbXBvbmVudCwgZWxlbWVudCk7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIHdhcm5JZkludmFsaWRFbGVtZW50KENvbXBvbmVudCwgZWxlbWVudCkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSB8fCBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCksICclcyguLi4pOiBBIHZhbGlkIFJlYWN0IGVsZW1lbnQgKG9yIG51bGwpIG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSAnICsgJ3JldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC4nLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBpbnZva2VDb21wb25lbnREaWRNb3VudFdpdGhUaW1lcigpIHtcbiAgICAgIHZhciBwdWJsaWNJbnN0YW5jZSA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVnaW5MaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50RGlkTW91bnQnKTtcbiAgICAgIH1cbiAgICAgIHB1YmxpY0luc3RhbmNlLmNvbXBvbmVudERpZE1vdW50KCk7XG4gICAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50RGlkTW91bnQnKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaW52b2tlQ29tcG9uZW50RGlkVXBkYXRlV2l0aFRpbWVyKHByZXZQcm9wcywgcHJldlN0YXRlLCBwcmV2Q29udGV4dCkge1xuICAgICAgdmFyIHB1YmxpY0luc3RhbmNlID0gdGhpcy5faW5zdGFuY2U7XG4gICAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkxpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdjb21wb25lbnREaWRVcGRhdGUnKTtcbiAgICAgIH1cbiAgICAgIHB1YmxpY0luc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpO1xuICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudERpZFVwZGF0ZScpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ7XG4gICAgfVxuICAgIHZhciBuZXh0TW91bnRJRCA9IDE7XG4gICAgdmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW4gPSB7XG4gICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9uYXRpdmVQYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9uYXRpdmVDb250YWluZXJJbmZvID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdXBkYXRlQmF0Y2hOdW1iZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9wZW5kaW5nRWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcmVuZGVyZWROb2RlVHlwZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgICAgIHRoaXMuX21vdW50T3JkZXIgPSAwO1xuICAgICAgICB0aGlzLl90b3BMZXZlbFdyYXBwZXIgPSBudWxsO1xuICAgICAgICB0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fY2FsbGVkQ29tcG9uZW50V2lsbFVubW91bnQgPSBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIG5hdGl2ZVBhcmVudCwgbmF0aXZlQ29udGFpbmVySW5mbywgY29udGV4dCkge1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5fbW91bnRPcmRlciA9IG5leHRNb3VudElEKys7XG4gICAgICAgIHRoaXMuX25hdGl2ZVBhcmVudCA9IG5hdGl2ZVBhcmVudDtcbiAgICAgICAgdGhpcy5fbmF0aXZlQ29udGFpbmVySW5mbyA9IG5hdGl2ZUNvbnRhaW5lckluZm87XG4gICAgICAgIHZhciBwdWJsaWNQcm9wcyA9IHRoaXMuX3Byb2Nlc3NQcm9wcyh0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcyk7XG4gICAgICAgIHZhciBwdWJsaWNDb250ZXh0ID0gdGhpcy5fcHJvY2Vzc0NvbnRleHQoY29udGV4dCk7XG4gICAgICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgICAgICB2YXIgaW5zdCA9IHRoaXMuX2NvbnN0cnVjdENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCk7XG4gICAgICAgIHZhciByZW5kZXJlZEVsZW1lbnQ7XG4gICAgICAgIGlmICghc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkgJiYgKGluc3QgPT0gbnVsbCB8fCBpbnN0LnJlbmRlciA9PSBudWxsKSkge1xuICAgICAgICAgIHJlbmRlcmVkRWxlbWVudCA9IGluc3Q7XG4gICAgICAgICAgd2FybklmSW52YWxpZEVsZW1lbnQoQ29tcG9uZW50LCByZW5kZXJlZEVsZW1lbnQpO1xuICAgICAgICAgICEoaW5zdCA9PT0gbnVsbCB8fCBpbnN0ID09PSBmYWxzZSB8fCBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoaW5zdCkpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzKC4uLik6IEEgdmFsaWQgUmVhY3QgZWxlbWVudCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlICcgKyAncmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIGluc3QgPSBuZXcgU3RhdGVsZXNzQ29tcG9uZW50KENvbXBvbmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoaW5zdC5yZW5kZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyguLi4pOiBObyBgcmVuZGVyYCBtZXRob2QgZm91bmQgb24gdGhlIHJldHVybmVkIGNvbXBvbmVudCAnICsgJ2luc3RhbmNlOiB5b3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIGRlZmluZSBgcmVuZGVyYC4nLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcHJvcHNNdXRhdGVkID0gaW5zdC5wcm9wcyAhPT0gcHVibGljUHJvcHM7XG4gICAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoaW5zdC5wcm9wcyA9PT0gdW5kZWZpbmVkIHx8ICFwcm9wc011dGF0ZWQsICclcyguLi4pOiBXaGVuIGNhbGxpbmcgc3VwZXIoKSBpbiBgJXNgLCBtYWtlIHN1cmUgdG8gcGFzcyAnICsgJ3VwIHRoZSBzYW1lIHByb3BzIHRoYXQgeW91ciBjb21wb25lbnRcXCdzIGNvbnN0cnVjdG9yIHdhcyBwYXNzZWQuJywgY29tcG9uZW50TmFtZSwgY29tcG9uZW50TmFtZSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgaW5zdC5wcm9wcyA9IHB1YmxpY1Byb3BzO1xuICAgICAgICBpbnN0LmNvbnRleHQgPSBwdWJsaWNDb250ZXh0O1xuICAgICAgICBpbnN0LnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICAgICAgaW5zdC51cGRhdGVyID0gUmVhY3RVcGRhdGVRdWV1ZTtcbiAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBpbnN0O1xuICAgICAgICBSZWFjdEluc3RhbmNlTWFwLnNldChpbnN0LCB0aGlzKTtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5nZXRJbml0aWFsU3RhdGUgfHwgaW5zdC5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXRJbml0aWFsU3RhdGUgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnRGlkIHlvdSBtZWFuIHRvIGRlZmluZSBhIHN0YXRlIHByb3BlcnR5IGluc3RlYWQ/JywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QuZ2V0RGVmYXVsdFByb3BzIHx8IGluc3QuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLCAnZ2V0RGVmYXVsdFByb3BzIHdhcyBkZWZpbmVkIG9uICVzLCBhIHBsYWluIEphdmFTY3JpcHQgY2xhc3MuICcgKyAnVGhpcyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2xhc3NlcyBjcmVhdGVkIHVzaW5nIFJlYWN0LmNyZWF0ZUNsYXNzLiAnICsgJ1VzZSBhIHN0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgZGVmYXVsdFByb3BzIGluc3RlYWQuJywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QucHJvcFR5cGVzLCAncHJvcFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSBzdGF0aWMgJyArICdwcm9wZXJ0eSB0byBkZWZpbmUgcHJvcFR5cGVzIGluc3RlYWQuJywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QuY29udGV4dFR5cGVzLCAnY29udGV4dFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSAnICsgJ3N0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGVzIGluc3RlYWQuJywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3QuY29tcG9uZW50U2hvdWxkVXBkYXRlICE9PSAnZnVuY3Rpb24nLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/ICcgKyAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgKyAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJywgdGhpcy5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3QuY29tcG9uZW50RGlkVW5tb3VudCAhPT0gJ2Z1bmN0aW9uJywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnREaWRVbm1vdW50KCkuIEJ1dCB0aGVyZSBpcyBubyBzdWNoIGxpZmVjeWNsZSBtZXRob2QuICcgKyAnRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxVbm1vdW50KCk/JywgdGhpcy5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3QuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyAhPT0gJ2Z1bmN0aW9uJywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/JywgdGhpcy5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IGluc3Quc3RhdGU7XG4gICAgICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGluc3Quc3RhdGUgPSBpbml0aWFsU3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgICEodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuc3RhdGU6IG11c3QgYmUgc2V0IHRvIGFuIG9iamVjdCBvciBudWxsJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBtYXJrdXA7XG4gICAgICAgIGlmIChpbnN0LnVuc3RhYmxlX2hhbmRsZUVycm9yKSB7XG4gICAgICAgICAgbWFya3VwID0gdGhpcy5wZXJmb3JtSW5pdGlhbE1vdW50V2l0aEVycm9ySGFuZGxpbmcocmVuZGVyZWRFbGVtZW50LCBuYXRpdmVQYXJlbnQsIG5hdGl2ZUNvbnRhaW5lckluZm8sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXJrdXAgPSB0aGlzLnBlcmZvcm1Jbml0aWFsTW91bnQocmVuZGVyZWRFbGVtZW50LCBuYXRpdmVQYXJlbnQsIG5hdGl2ZUNvbnRhaW5lckluZm8sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zdC5jb21wb25lbnREaWRNb3VudCkge1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGludm9rZUNvbXBvbmVudERpZE1vdW50V2l0aFRpbWVyLCB0aGlzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnN0LmNvbXBvbmVudERpZE1vdW50LCBpbnN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcmt1cDtcbiAgICAgIH0sXG4gICAgICBfY29uc3RydWN0Q29tcG9uZW50OiBmdW5jdGlvbihwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCkge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fY29uc3RydWN0Q29tcG9uZW50V2l0aG91dE93bmVyKHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0KTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9jb25zdHJ1Y3RDb21wb25lbnRXaXRob3V0T3duZXIocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgX2NvbnN0cnVjdENvbXBvbmVudFdpdGhvdXRPd25lcjogZnVuY3Rpb24ocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQpIHtcbiAgICAgICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICAgIHZhciBpbnN0YW5jZU9yRWxlbWVudDtcbiAgICAgICAgaWYgKHNob3VsZENvbnN0cnVjdChDb21wb25lbnQpKSB7XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ2N0b3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaW5zdGFuY2VPckVsZW1lbnQgPSBuZXcgQ29tcG9uZW50KHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0LCBSZWFjdFVwZGF0ZVF1ZXVlKTtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ2N0b3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ3JlbmRlcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpbnN0YW5jZU9yRWxlbWVudCA9IENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgUmVhY3RVcGRhdGVRdWV1ZSk7XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZExpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdyZW5kZXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlT3JFbGVtZW50O1xuICAgICAgfSxcbiAgICAgIHBlcmZvcm1Jbml0aWFsTW91bnRXaXRoRXJyb3JIYW5kbGluZzogZnVuY3Rpb24ocmVuZGVyZWRFbGVtZW50LCBuYXRpdmVQYXJlbnQsIG5hdGl2ZUNvbnRhaW5lckluZm8sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBtYXJrdXA7XG4gICAgICAgIHZhciBjaGVja3BvaW50ID0gdHJhbnNhY3Rpb24uY2hlY2twb2ludCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG1hcmt1cCA9IHRoaXMucGVyZm9ybUluaXRpYWxNb3VudChyZW5kZXJlZEVsZW1lbnQsIG5hdGl2ZVBhcmVudCwgbmF0aXZlQ29udGFpbmVySW5mbywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24ucm9sbGJhY2soY2hlY2twb2ludCk7XG4gICAgICAgICAgdGhpcy5faW5zdGFuY2UudW5zdGFibGVfaGFuZGxlRXJyb3IoZSk7XG4gICAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZS5zdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUodGhpcy5faW5zdGFuY2UucHJvcHMsIHRoaXMuX2luc3RhbmNlLmNvbnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGVja3BvaW50ID0gdHJhbnNhY3Rpb24uY2hlY2twb2ludCgpO1xuICAgICAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LnVubW91bnRDb21wb25lbnQodHJ1ZSk7XG4gICAgICAgICAgdHJhbnNhY3Rpb24ucm9sbGJhY2soY2hlY2twb2ludCk7XG4gICAgICAgICAgbWFya3VwID0gdGhpcy5wZXJmb3JtSW5pdGlhbE1vdW50KHJlbmRlcmVkRWxlbWVudCwgbmF0aXZlUGFyZW50LCBuYXRpdmVDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcmt1cDtcbiAgICAgIH0sXG4gICAgICBwZXJmb3JtSW5pdGlhbE1vdW50OiBmdW5jdGlvbihyZW5kZXJlZEVsZW1lbnQsIG5hdGl2ZVBhcmVudCwgbmF0aXZlQ29udGFpbmVySW5mbywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgaWYgKGluc3QuY29tcG9uZW50V2lsbE1vdW50KSB7XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudFdpbGxNb3VudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50V2lsbE1vdW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSkge1xuICAgICAgICAgICAgaW5zdC5zdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUoaW5zdC5wcm9wcywgaW5zdC5jb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlbmRlcmVkRWxlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVuZGVyZWRFbGVtZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVuZGVyZWROb2RlVHlwZSA9IFJlYWN0Tm9kZVR5cGVzLmdldFR5cGUocmVuZGVyZWRFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSB0aGlzLl9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KHJlbmRlcmVkRWxlbWVudCk7XG4gICAgICAgIHZhciBtYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQodGhpcy5fcmVuZGVyZWRDb21wb25lbnQsIHRyYW5zYWN0aW9uLCBuYXRpdmVQYXJlbnQsIG5hdGl2ZUNvbnRhaW5lckluZm8sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCkpO1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbih0aGlzLl9kZWJ1Z0lELCB0aGlzLl9yZW5kZXJlZENvbXBvbmVudC5fZGVidWdJRCAhPT0gMCA/IFt0aGlzLl9yZW5kZXJlZENvbXBvbmVudC5fZGVidWdJRF0gOiBbXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXJrdXA7XG4gICAgICB9LFxuICAgICAgZ2V0TmF0aXZlTm9kZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBSZWFjdFJlY29uY2lsZXIuZ2V0TmF0aXZlTm9kZSh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCk7XG4gICAgICB9LFxuICAgICAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oc2FmZWx5KSB7XG4gICAgICAgIGlmICghdGhpcy5fcmVuZGVyZWRDb21wb25lbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFVubW91bnQgJiYgIWluc3QuX2NhbGxlZENvbXBvbmVudFdpbGxVbm1vdW50KSB7XG4gICAgICAgICAgaW5zdC5fY2FsbGVkQ29tcG9uZW50V2lsbFVubW91bnQgPSB0cnVlO1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkxpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdjb21wb25lbnRXaWxsVW5tb3VudCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2FmZWx5KSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMuZ2V0TmFtZSgpICsgJy5jb21wb25lbnRXaWxsVW5tb3VudCgpJztcbiAgICAgICAgICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sobmFtZSwgaW5zdC5jb21wb25lbnRXaWxsVW5tb3VudC5iaW5kKGluc3QpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5zdC5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudFdpbGxVbm1vdW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCkge1xuICAgICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LCBzYWZlbHkpO1xuICAgICAgICAgIHRoaXMuX3JlbmRlcmVkTm9kZVR5cGUgPSBudWxsO1xuICAgICAgICAgIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50ID0gbnVsbDtcbiAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgPSBudWxsO1xuICAgICAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wZW5kaW5nQ2FsbGJhY2tzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgICAgIHRoaXMuX3RvcExldmVsV3JhcHBlciA9IG51bGw7XG4gICAgICAgIFJlYWN0SW5zdGFuY2VNYXAucmVtb3ZlKGluc3QpO1xuICAgICAgfSxcbiAgICAgIF9tYXNrQ29udGV4dDogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgICAgdmFyIGNvbnRleHRUeXBlcyA9IENvbXBvbmVudC5jb250ZXh0VHlwZXM7XG4gICAgICAgIGlmICghY29udGV4dFR5cGVzKSB7XG4gICAgICAgICAgcmV0dXJuIGVtcHR5T2JqZWN0O1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXNrZWRDb250ZXh0ID0ge307XG4gICAgICAgIGZvciAodmFyIGNvbnRleHROYW1lIGluIGNvbnRleHRUeXBlcykge1xuICAgICAgICAgIG1hc2tlZENvbnRleHRbY29udGV4dE5hbWVdID0gY29udGV4dFtjb250ZXh0TmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG4gICAgICB9LFxuICAgICAgX3Byb2Nlc3NDb250ZXh0OiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgIHZhciBtYXNrZWRDb250ZXh0ID0gdGhpcy5fbWFza0NvbnRleHQoY29udGV4dCk7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICAgICAgaWYgKENvbXBvbmVudC5jb250ZXh0VHlwZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKENvbXBvbmVudC5jb250ZXh0VHlwZXMsIG1hc2tlZENvbnRleHQsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMuY29udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXNrZWRDb250ZXh0O1xuICAgICAgfSxcbiAgICAgIF9wcm9jZXNzQ2hpbGRDb250ZXh0OiBmdW5jdGlvbihjdXJyZW50Q29udGV4dCkge1xuICAgICAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpblByb2Nlc3NpbmdDaGlsZENvbnRleHQoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hpbGRDb250ZXh0ID0gaW5zdC5nZXRDaGlsZENvbnRleHQgJiYgaW5zdC5nZXRDaGlsZENvbnRleHQoKTtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkQ29udGV4dCkge1xuICAgICAgICAgICEodHlwZW9mIENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcyA9PT0gJ29iamVjdCcpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLmdldENoaWxkQ29udGV4dCgpOiBjaGlsZENvbnRleHRUeXBlcyBtdXN0IGJlIGRlZmluZWQgaW4gb3JkZXIgdG8gJyArICd1c2UgZ2V0Q2hpbGRDb250ZXh0KCkuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1Byb3BUeXBlcyhDb21wb25lbnQuY2hpbGRDb250ZXh0VHlwZXMsIGNoaWxkQ29udGV4dCwgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIGNoaWxkQ29udGV4dCkge1xuICAgICAgICAgICAgIShuYW1lIGluIENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcykgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGtleSBcIiVzXCIgaXMgbm90IGRlZmluZWQgaW4gY2hpbGRDb250ZXh0VHlwZXMuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gX2Fzc2lnbih7fSwgY3VycmVudENvbnRleHQsIGNoaWxkQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRDb250ZXh0O1xuICAgICAgfSxcbiAgICAgIF9wcm9jZXNzUHJvcHM6IGZ1bmN0aW9uKG5ld1Byb3BzKSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICAgICAgaWYgKENvbXBvbmVudC5wcm9wVHlwZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKENvbXBvbmVudC5wcm9wVHlwZXMsIG5ld1Byb3BzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3UHJvcHM7XG4gICAgICB9LFxuICAgICAgX2NoZWNrUHJvcFR5cGVzOiBmdW5jdGlvbihwcm9wVHlwZXMsIHByb3BzLCBsb2NhdGlvbikge1xuICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IHRoaXMuZ2V0TmFtZSgpO1xuICAgICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICAgICAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgISh0eXBlb2YgcHJvcFR5cGVzW3Byb3BOYW1lXSA9PT0gJ2Z1bmN0aW9uJykgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgJyArICdmcm9tIFJlYWN0LlByb3BUeXBlcy4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSh0aGlzKTtcbiAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApIHtcbiAgICAgICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICVzJXMnLCBlcnJvci5tZXNzYWdlLCBhZGRlbmR1bSkgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdGYWlsZWQgQ29udGV4dCBUeXBlczogJXMlcycsIGVycm9yLm1lc3NhZ2UsIGFkZGVuZHVtKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgbmV4dENvbnRleHQpIHtcbiAgICAgICAgdmFyIHByZXZFbGVtZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBwcmV2Q29udGV4dCA9IHRoaXMuX2NvbnRleHQ7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnQodHJhbnNhY3Rpb24sIHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCwgcHJldkNvbnRleHQsIG5leHRDb250ZXh0KTtcbiAgICAgIH0sXG4gICAgICBwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nRWxlbWVudCAhPSBudWxsKSB7XG4gICAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQodGhpcywgdGhpcy5fcGVuZGluZ0VsZW1lbnQsIHRyYW5zYWN0aW9uLCB0aGlzLl9jb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSAhPT0gbnVsbCB8fCB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgdGhpcy5fY3VycmVudEVsZW1lbnQsIHRoaXMuX2N1cnJlbnRFbGVtZW50LCB0aGlzLl9jb250ZXh0LCB0aGlzLl9jb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl91cGRhdGVCYXRjaE51bWJlciA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcmV2UGFyZW50RWxlbWVudCwgbmV4dFBhcmVudEVsZW1lbnQsIHByZXZVbm1hc2tlZENvbnRleHQsIG5leHRVbm1hc2tlZENvbnRleHQpIHtcbiAgICAgICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgdmFyIHdpbGxSZWNlaXZlID0gZmFsc2U7XG4gICAgICAgIHZhciBuZXh0Q29udGV4dDtcbiAgICAgICAgdmFyIG5leHRQcm9wcztcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRleHQgPT09IG5leHRVbm1hc2tlZENvbnRleHQpIHtcbiAgICAgICAgICBuZXh0Q29udGV4dCA9IGluc3QuY29udGV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0Q29udGV4dCA9IHRoaXMuX3Byb2Nlc3NDb250ZXh0KG5leHRVbm1hc2tlZENvbnRleHQpO1xuICAgICAgICAgIHdpbGxSZWNlaXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldlBhcmVudEVsZW1lbnQgPT09IG5leHRQYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgbmV4dFByb3BzID0gbmV4dFBhcmVudEVsZW1lbnQucHJvcHM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dFByb3BzID0gdGhpcy5fcHJvY2Vzc1Byb3BzKG5leHRQYXJlbnRFbGVtZW50LnByb3BzKTtcbiAgICAgICAgICB3aWxsUmVjZWl2ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHdpbGxSZWNlaXZlICYmIGluc3QuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcykge1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkxpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGluc3QuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRDb250ZXh0KTtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5leHRTdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG4gICAgICAgIHZhciBzaG91bGRVcGRhdGUgPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSAmJiBpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZSkge1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkxpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdzaG91bGRDb21wb25lbnRVcGRhdGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgc2hvdWxkVXBkYXRlID0gaW5zdC5zaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHNob3VsZFVwZGF0ZSAhPT0gdW5kZWZpbmVkLCAnJXMuc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk6IFJldHVybmVkIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIGEgJyArICdib29sZWFuIHZhbHVlLiBNYWtlIHN1cmUgdG8gcmV0dXJuIHRydWUgb3IgZmFsc2UuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlQmF0Y2hOdW1iZXIgPSBudWxsO1xuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5fcGVyZm9ybUNvbXBvbmVudFVwZGF0ZShuZXh0UGFyZW50RWxlbWVudCwgbmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0LCB0cmFuc2FjdGlvbiwgbmV4dFVubWFza2VkQ29udGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0UGFyZW50RWxlbWVudDtcbiAgICAgICAgICB0aGlzLl9jb250ZXh0ID0gbmV4dFVubWFza2VkQ29udGV4dDtcbiAgICAgICAgICBpbnN0LnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICAgIGluc3Quc3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgICAgICAgaW5zdC5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBfcHJvY2Vzc1BlbmRpbmdTdGF0ZTogZnVuY3Rpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgdmFyIHF1ZXVlID0gdGhpcy5fcGVuZGluZ1N0YXRlUXVldWU7XG4gICAgICAgIHZhciByZXBsYWNlID0gdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZTtcbiAgICAgICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgICAgIGlmICghcXVldWUpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdC5zdGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVwbGFjZSAmJiBxdWV1ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gcXVldWVbMF07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG5leHRTdGF0ZSA9IF9hc3NpZ24oe30sIHJlcGxhY2UgPyBxdWV1ZVswXSA6IGluc3Quc3RhdGUpO1xuICAgICAgICBmb3IgKHZhciBpID0gcmVwbGFjZSA/IDEgOiAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgcGFydGlhbCA9IHF1ZXVlW2ldO1xuICAgICAgICAgIF9hc3NpZ24obmV4dFN0YXRlLCB0eXBlb2YgcGFydGlhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcnRpYWwuY2FsbChpbnN0LCBuZXh0U3RhdGUsIHByb3BzLCBjb250ZXh0KSA6IHBhcnRpYWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgICB9LFxuICAgICAgX3BlcmZvcm1Db21wb25lbnRVcGRhdGU6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCBuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQsIHRyYW5zYWN0aW9uLCB1bm1hc2tlZENvbnRleHQpIHtcbiAgICAgICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICAgICAgdmFyIGhhc0NvbXBvbmVudERpZFVwZGF0ZSA9IEJvb2xlYW4oaW5zdC5jb21wb25lbnREaWRVcGRhdGUpO1xuICAgICAgICB2YXIgcHJldlByb3BzO1xuICAgICAgICB2YXIgcHJldlN0YXRlO1xuICAgICAgICB2YXIgcHJldkNvbnRleHQ7XG4gICAgICAgIGlmIChoYXNDb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgICAgICBwcmV2UHJvcHMgPSBpbnN0LnByb3BzO1xuICAgICAgICAgIHByZXZTdGF0ZSA9IGluc3Quc3RhdGU7XG4gICAgICAgICAgcHJldkNvbnRleHQgPSBpbnN0LmNvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFVwZGF0ZSkge1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkxpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdjb21wb25lbnRXaWxsVXBkYXRlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGluc3QuY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50V2lsbFVwZGF0ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRFbGVtZW50O1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gdW5tYXNrZWRDb250ZXh0O1xuICAgICAgICBpbnN0LnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgICBpbnN0LnN0YXRlID0gbmV4dFN0YXRlO1xuICAgICAgICBpbnN0LmNvbnRleHQgPSBuZXh0Q29udGV4dDtcbiAgICAgICAgdGhpcy5fdXBkYXRlUmVuZGVyZWRDb21wb25lbnQodHJhbnNhY3Rpb24sIHVubWFza2VkQ29udGV4dCk7XG4gICAgICAgIGlmIChoYXNDb21wb25lbnREaWRVcGRhdGUpIHtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnZva2VDb21wb25lbnREaWRVcGRhdGVXaXRoVGltZXIuYmluZCh0aGlzLCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpLCB0aGlzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnN0LmNvbXBvbmVudERpZFVwZGF0ZS5iaW5kKGluc3QsIHByZXZQcm9wcywgcHJldlN0YXRlLCBwcmV2Q29udGV4dCksIGluc3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIF91cGRhdGVSZW5kZXJlZENvbXBvbmVudDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHByZXZDb21wb25lbnRJbnN0YW5jZSA9IHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50O1xuICAgICAgICB2YXIgcHJldlJlbmRlcmVkRWxlbWVudCA9IHByZXZDb21wb25lbnRJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBuZXh0UmVuZGVyZWRFbGVtZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KCk7XG4gICAgICAgIGlmIChzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2UmVuZGVyZWRFbGVtZW50LCBuZXh0UmVuZGVyZWRFbGVtZW50KSkge1xuICAgICAgICAgIFJlYWN0UmVjb25jaWxlci5yZWNlaXZlQ29tcG9uZW50KHByZXZDb21wb25lbnRJbnN0YW5jZSwgbmV4dFJlbmRlcmVkRWxlbWVudCwgdHJhbnNhY3Rpb24sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBvbGROYXRpdmVOb2RlID0gUmVhY3RSZWNvbmNpbGVyLmdldE5hdGl2ZU5vZGUocHJldkNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChwcmV2Q29tcG9uZW50SW5zdGFuY2UsIGZhbHNlKTtcbiAgICAgICAgICB0aGlzLl9yZW5kZXJlZE5vZGVUeXBlID0gUmVhY3ROb2RlVHlwZXMuZ2V0VHlwZShuZXh0UmVuZGVyZWRFbGVtZW50KTtcbiAgICAgICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IHRoaXMuX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQobmV4dFJlbmRlcmVkRWxlbWVudCk7XG4gICAgICAgICAgdmFyIG5leHRNYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQodGhpcy5fcmVuZGVyZWRDb21wb25lbnQsIHRyYW5zYWN0aW9uLCB0aGlzLl9uYXRpdmVQYXJlbnQsIHRoaXMuX25hdGl2ZUNvbnRhaW5lckluZm8sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCkpO1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbih0aGlzLl9kZWJ1Z0lELCB0aGlzLl9yZW5kZXJlZENvbXBvbmVudC5fZGVidWdJRCAhPT0gMCA/IFt0aGlzLl9yZW5kZXJlZENvbXBvbmVudC5fZGVidWdJRF0gOiBbXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuX3JlcGxhY2VOb2RlV2l0aE1hcmt1cChvbGROYXRpdmVOb2RlLCBuZXh0TWFya3VwLCBwcmV2Q29tcG9uZW50SW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgX3JlcGxhY2VOb2RlV2l0aE1hcmt1cDogZnVuY3Rpb24ob2xkTmF0aXZlTm9kZSwgbmV4dE1hcmt1cCwgcHJldkluc3RhbmNlKSB7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwKG9sZE5hdGl2ZU5vZGUsIG5leHRNYXJrdXAsIHByZXZJbnN0YW5jZSk7XG4gICAgICB9LFxuICAgICAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ3JlbmRlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVuZGVyZWRDb21wb25lbnQgPSBpbnN0LnJlbmRlcigpO1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAncmVuZGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHJlbmRlcmVkQ29tcG9uZW50ID09PSB1bmRlZmluZWQgJiYgaW5zdC5yZW5kZXIuX2lzTW9ja0Z1bmN0aW9uKSB7XG4gICAgICAgICAgICByZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZW5kZXJlZENvbXBvbmVudDtcbiAgICAgIH0sXG4gICAgICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlbmRlcmVkQ29tcG9uZW50O1xuICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZW5kZXJlZENvbXBvbmVudCA9IHRoaXMuX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudFdpdGhvdXRPd25lck9yQ29udGV4dCgpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgICEocmVuZGVyZWRDb21wb25lbnQgPT09IG51bGwgfHwgcmVuZGVyZWRDb21wb25lbnQgPT09IGZhbHNlIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChyZW5kZXJlZENvbXBvbmVudCkpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLnJlbmRlcigpOiBBIHZhbGlkIFJlYWN0IGVsZW1lbnQgKG9yIG51bGwpIG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSAnICsgJ3JldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHJldHVybiByZW5kZXJlZENvbXBvbmVudDtcbiAgICAgIH0sXG4gICAgICBhdHRhY2hSZWY6IGZ1bmN0aW9uKHJlZiwgY29tcG9uZW50KSB7XG4gICAgICAgIHZhciBpbnN0ID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgICAgICAhKGluc3QgIT0gbnVsbCkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnU3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGhhdmUgcmVmcy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHZhciBwdWJsaWNDb21wb25lbnRJbnN0YW5jZSA9IGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50ICYmIGNvbXBvbmVudC5nZXROYW1lID8gY29tcG9uZW50LmdldE5hbWUoKSA6ICdhIGNvbXBvbmVudCc7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHVibGljQ29tcG9uZW50SW5zdGFuY2UgIT0gbnVsbCwgJ1N0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzICcgKyAnKFNlZSByZWYgXCIlc1wiIGluICVzIGNyZWF0ZWQgYnkgJXMpLiAnICsgJ0F0dGVtcHRzIHRvIGFjY2VzcyB0aGlzIHJlZiB3aWxsIGZhaWwuJywgcmVmLCBjb21wb25lbnROYW1lLCB0aGlzLmdldE5hbWUoKSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlZnMgPSBpbnN0LnJlZnMgPT09IGVtcHR5T2JqZWN0ID8gaW5zdC5yZWZzID0ge30gOiBpbnN0LnJlZnM7XG4gICAgICAgIHJlZnNbcmVmXSA9IHB1YmxpY0NvbXBvbmVudEluc3RhbmNlO1xuICAgICAgfSxcbiAgICAgIGRldGFjaFJlZjogZnVuY3Rpb24ocmVmKSB7XG4gICAgICAgIHZhciByZWZzID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnM7XG4gICAgICAgIGRlbGV0ZSByZWZzW3JlZl07XG4gICAgICB9LFxuICAgICAgZ2V0TmFtZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0eXBlID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgICAgdmFyIGNvbnN0cnVjdG9yID0gdGhpcy5faW5zdGFuY2UgJiYgdGhpcy5faW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBjb25zdHJ1Y3RvciAmJiBjb25zdHJ1Y3Rvci5uYW1lIHx8IG51bGw7XG4gICAgICB9LFxuICAgICAgZ2V0UHVibGljSW5zdGFuY2U6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgICBpZiAoaW5zdCBpbnN0YW5jZW9mIFN0YXRlbGVzc0NvbXBvbmVudCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnN0O1xuICAgICAgfSxcbiAgICAgIF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OiBudWxsXG4gICAgfTtcbiAgICB2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnQgPSB7TWl4aW46IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW59O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQ7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjY0XCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgZW1wdHlDb21wb25lbnRGYWN0b3J5O1xuICB2YXIgUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbiA9IHtpbmplY3RFbXB0eUNvbXBvbmVudEZhY3Rvcnk6IGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICAgIGVtcHR5Q29tcG9uZW50RmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgfX07XG4gIHZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0ge2NyZWF0ZTogZnVuY3Rpb24oaW5zdGFudGlhdGUpIHtcbiAgICAgIHJldHVybiBlbXB0eUNvbXBvbmVudEZhY3RvcnkoaW5zdGFudGlhdGUpO1xuICAgIH19O1xuICBSZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbiA9IFJlYWN0RW1wdHlDb21wb25lbnRJbmplY3Rpb247XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RFbXB0eUNvbXBvbmVudDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI2NVwiLCBbXCI2XCIsIFwiMzBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgX2Fzc2lnbiA9ICRfX3JlcXVpcmUoJzYnKTtcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIgYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzID0gbnVsbDtcbiAgICB2YXIgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gbnVsbDtcbiAgICB2YXIgdGFnVG9Db21wb25lbnRDbGFzcyA9IHt9O1xuICAgIHZhciB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBudWxsO1xuICAgIHZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgICAgIGluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzczogZnVuY3Rpb24oY29tcG9uZW50Q2xhc3MpIHtcbiAgICAgICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gICAgICB9LFxuICAgICAgaW5qZWN0VGV4dENvbXBvbmVudENsYXNzOiBmdW5jdGlvbihjb21wb25lbnRDbGFzcykge1xuICAgICAgICB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBjb21wb25lbnRDbGFzcztcbiAgICAgIH0sXG4gICAgICBpbmplY3RDb21wb25lbnRDbGFzc2VzOiBmdW5jdGlvbihjb21wb25lbnRDbGFzc2VzKSB7XG4gICAgICAgIF9hc3NpZ24odGFnVG9Db21wb25lbnRDbGFzcywgY29tcG9uZW50Q2xhc3Nlcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgaWYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQudHlwZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBlbGVtZW50LnR5cGU7XG4gICAgICB2YXIgY29tcG9uZW50Q2xhc3MgPSB0YWdUb0NvbXBvbmVudENsYXNzW3RhZ107XG4gICAgICBpZiAoY29tcG9uZW50Q2xhc3MgPT0gbnVsbCkge1xuICAgICAgICB0YWdUb0NvbXBvbmVudENsYXNzW3RhZ10gPSBjb21wb25lbnRDbGFzcyA9IGF1dG9HZW5lcmF0ZVdyYXBwZXJDbGFzcyh0YWcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbXBvbmVudENsYXNzO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudChlbGVtZW50KSB7XG4gICAgICAhZ2VuZXJpY0NvbXBvbmVudENsYXNzID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RoZXJlIGlzIG5vIHJlZ2lzdGVyZWQgY29tcG9uZW50IGZvciB0aGUgdGFnICVzJywgZWxlbWVudC50eXBlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gbmV3IGdlbmVyaWNDb21wb25lbnRDbGFzcyhlbGVtZW50KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VGb3JUZXh0KHRleHQpIHtcbiAgICAgIHJldHVybiBuZXcgdGV4dENvbXBvbmVudENsYXNzKHRleHQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1RleHRDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50IGluc3RhbmNlb2YgdGV4dENvbXBvbmVudENsYXNzO1xuICAgIH1cbiAgICB2YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSB7XG4gICAgICBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQ6IGdldENvbXBvbmVudENsYXNzRm9yRWxlbWVudCxcbiAgICAgIGNyZWF0ZUludGVybmFsQ29tcG9uZW50OiBjcmVhdGVJbnRlcm5hbENvbXBvbmVudCxcbiAgICAgIGNyZWF0ZUluc3RhbmNlRm9yVGV4dDogY3JlYXRlSW5zdGFuY2VGb3JUZXh0LFxuICAgICAgaXNUZXh0Q29tcG9uZW50OiBpc1RleHRDb21wb25lbnQsXG4gICAgICBpbmplY3Rpb246IFJlYWN0TmF0aXZlQ29tcG9uZW50SW5qZWN0aW9uXG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0TmF0aXZlQ29tcG9uZW50O1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIzZlwiLCBbXCI2XCIsIFwiOTJcIiwgXCI2NFwiLCBcIjY1XCIsIFwiMjdcIiwgXCIzMFwiLCBcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIF9hc3NpZ24gPSAkX19yZXF1aXJlKCc2Jyk7XG4gICAgdmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50ID0gJF9fcmVxdWlyZSgnOTInKTtcbiAgICB2YXIgUmVhY3RFbXB0eUNvbXBvbmVudCA9ICRfX3JlcXVpcmUoJzY0Jyk7XG4gICAgdmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gJF9fcmVxdWlyZSgnNjUnKTtcbiAgICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSAkX19yZXF1aXJlKCcyNycpO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICB2YXIgUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgdGhpcy5jb25zdHJ1Y3QoZWxlbWVudCk7XG4gICAgfTtcbiAgICBfYXNzaWduKFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlci5wcm90b3R5cGUsIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50Lk1peGluLCB7X2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQ6IGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnR9KTtcbiAgICBmdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpIHtcbiAgICAgIGlmIChvd25lcikge1xuICAgICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKGluc3RhbmNlKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IGluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcbiAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICcjZW1wdHknO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIGVsZW1lbnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiAnI3RleHQnO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gZWxlbWVudC50eXBlO1xuICAgICAgfSBlbHNlIGlmIChpbnN0YW5jZS5nZXROYW1lKSB7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS5nZXROYW1lKCkgfHwgJ1Vua25vd24nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQudHlwZS5kaXNwbGF5TmFtZSB8fCBlbGVtZW50LnR5cGUubmFtZSB8fCAnVW5rbm93bic7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzSW50ZXJuYWxDb21wb25lbnRUeXBlKHR5cGUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG4gICAgdmFyIG5leHREZWJ1Z0lEID0gMTtcbiAgICBmdW5jdGlvbiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5vZGUpIHtcbiAgICAgIHZhciBpbnN0YW5jZTtcbiAgICAgIHZhciBpc0VtcHR5ID0gbm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSBmYWxzZTtcbiAgICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICAgIGluc3RhbmNlID0gUmVhY3RFbXB0eUNvbXBvbmVudC5jcmVhdGUoaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgZWxlbWVudCA9IG5vZGU7XG4gICAgICAgICEoZWxlbWVudCAmJiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0VsZW1lbnQgdHlwZSBpcyBpbnZhbGlkOiBleHBlY3RlZCBhIHN0cmluZyAoZm9yIGJ1aWx0LWluIGNvbXBvbmVudHMpICcgKyAnb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSBjb21wb25lbnRzKSBidXQgZ290OiAlcy4lcycsIGVsZW1lbnQudHlwZSA9PSBudWxsID8gZWxlbWVudC50eXBlIDogdHlwZW9mIGVsZW1lbnQudHlwZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKGVsZW1lbnQuX293bmVyKSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpbnN0YW5jZSA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LmNyZWF0ZUludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzSW50ZXJuYWxDb21wb25lbnRUeXBlKGVsZW1lbnQudHlwZSkpIHtcbiAgICAgICAgICBpbnN0YW5jZSA9IG5ldyBlbGVtZW50LnR5cGUoZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5zdGFuY2UgPSBuZXcgUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygbm9kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaW5zdGFuY2UgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudC5jcmVhdGVJbnN0YW5jZUZvclRleHQobm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAhZmFsc2UgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRW5jb3VudGVyZWQgaW52YWxpZCBSZWFjdCBub2RlIG9mIHR5cGUgJXMnLCB0eXBlb2Ygbm9kZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3RhbmNlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5nZXROYXRpdmVOb2RlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS51bm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nLCAnT25seSBSZWFjdCBDb21wb25lbnRzIGNhbiBiZSBtb3VudGVkLicpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgaW5zdGFuY2UuX21vdW50SW5kZXggPSAwO1xuICAgICAgaW5zdGFuY2UuX21vdW50SW1hZ2UgPSBudWxsO1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaW5zdGFuY2UuX2lzT3duZXJOZWNlc3NhcnkgPSBmYWxzZTtcbiAgICAgICAgaW5zdGFuY2UuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgZGVidWdJRCA9IGlzRW1wdHkgPyAwIDogbmV4dERlYnVnSUQrKztcbiAgICAgICAgaW5zdGFuY2UuX2RlYnVnSUQgPSBkZWJ1Z0lEO1xuICAgICAgICBpZiAoZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKGluc3RhbmNlKTtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXREaXNwbGF5TmFtZShkZWJ1Z0lELCBkaXNwbGF5TmFtZSk7XG4gICAgICAgICAgdmFyIG93bmVyID0gbm9kZSAmJiBub2RlLl9vd25lcjtcbiAgICAgICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldE93bmVyKGRlYnVnSUQsIG93bmVyLl9kZWJ1Z0lEKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICAgICAgICBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoaW5zdGFuY2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNTlcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uID0gZnVuY3Rpb24oZnVuYykge1xuICAgIGlmICh0eXBlb2YgTVNBcHAgIT09ICd1bmRlZmluZWQnICYmIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oYXJnMCwgYXJnMSwgYXJnMiwgYXJnMykge1xuICAgICAgICBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYyhhcmcwLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI1YVwiLCBbXCJkXCIsIFwiNTlcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSAkX19yZXF1aXJlKCdkJyk7XG4gICAgdmFyIFdISVRFU1BBQ0VfVEVTVCA9IC9eWyBcXHJcXG5cXHRcXGZdLztcbiAgICB2YXIgTk9OVklTSUJMRV9URVNUID0gLzwoIS0tfGxpbmt8bm9zY3JpcHR8bWV0YXxzY3JpcHR8c3R5bGUpWyBcXHJcXG5cXHRcXGZcXC8+XS87XG4gICAgdmFyIGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSAkX19yZXF1aXJlKCc1OScpO1xuICAgIHZhciBzZXRJbm5lckhUTUwgPSBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKG5vZGUsIGh0bWwpIHtcbiAgICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgICB9KTtcbiAgICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gICAgICB2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRlc3RFbGVtZW50LmlubmVySFRNTCA9ICcgJztcbiAgICAgIGlmICh0ZXN0RWxlbWVudC5pbm5lckhUTUwgPT09ICcnKSB7XG4gICAgICAgIHNldElubmVySFRNTCA9IGZ1bmN0aW9uKG5vZGUsIGh0bWwpIHtcbiAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG5vZGUsIG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoV0hJVEVTUEFDRV9URVNULnRlc3QoaHRtbCkgfHwgaHRtbFswXSA9PT0gJzwnICYmIE5PTlZJU0lCTEVfVEVTVC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgICBub2RlLmlubmVySFRNTCA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGRUZGKSArIGh0bWw7XG4gICAgICAgICAgICB2YXIgdGV4dE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBpZiAodGV4dE5vZGUuZGF0YS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZCh0ZXh0Tm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0ZXh0Tm9kZS5kZWxldGVEYXRhKDAsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgdGVzdEVsZW1lbnQgPSBudWxsO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHNldElubmVySFRNTDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNDFcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIGZ1bmN0aW9uIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkge1xuICAgIHZhciBwcmV2RW1wdHkgPSBwcmV2RWxlbWVudCA9PT0gbnVsbCB8fCBwcmV2RWxlbWVudCA9PT0gZmFsc2U7XG4gICAgdmFyIG5leHRFbXB0eSA9IG5leHRFbGVtZW50ID09PSBudWxsIHx8IG5leHRFbGVtZW50ID09PSBmYWxzZTtcbiAgICBpZiAocHJldkVtcHR5IHx8IG5leHRFbXB0eSkge1xuICAgICAgcmV0dXJuIHByZXZFbXB0eSA9PT0gbmV4dEVtcHR5O1xuICAgIH1cbiAgICB2YXIgcHJldlR5cGUgPSB0eXBlb2YgcHJldkVsZW1lbnQ7XG4gICAgdmFyIG5leHRUeXBlID0gdHlwZW9mIG5leHRFbGVtZW50O1xuICAgIGlmIChwcmV2VHlwZSA9PT0gJ3N0cmluZycgfHwgcHJldlR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICByZXR1cm4gbmV4dFR5cGUgPT09ICdzdHJpbmcnIHx8IG5leHRUeXBlID09PSAnbnVtYmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5leHRUeXBlID09PSAnb2JqZWN0JyAmJiBwcmV2RWxlbWVudC50eXBlID09PSBuZXh0RWxlbWVudC50eXBlICYmIHByZXZFbGVtZW50LmtleSA9PT0gbmV4dEVsZW1lbnQua2V5O1xuICAgIH1cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjk1XCIsIFtcIjRjXCIsIFwiMWJcIiwgXCI0ZVwiLCBcIjQ3XCIsIFwiMTFcIiwgXCI4OVwiLCBcIjhhXCIsIFwiOGRcIiwgXCI4ZVwiLCBcIjI3XCIsIFwiOGNcIiwgXCIzZVwiLCBcIjkxXCIsIFwiMTJcIiwgXCI5NFwiLCBcIjNmXCIsIFwiMzBcIiwgXCI1YVwiLCBcIjQxXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgRE9NTGF6eVRyZWUgPSAkX19yZXF1aXJlKCc0YycpO1xuICAgIHZhciBET01Qcm9wZXJ0eSA9ICRfX3JlcXVpcmUoJzFiJyk7XG4gICAgdmFyIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlciA9ICRfX3JlcXVpcmUoJzRlJyk7XG4gICAgdmFyIFJlYWN0Q3VycmVudE93bmVyID0gJF9fcmVxdWlyZSgnNDcnKTtcbiAgICB2YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gJF9fcmVxdWlyZSgnMTEnKTtcbiAgICB2YXIgUmVhY3RET01Db250YWluZXJJbmZvID0gJF9fcmVxdWlyZSgnODknKTtcbiAgICB2YXIgUmVhY3RET01GZWF0dXJlRmxhZ3MgPSAkX19yZXF1aXJlKCc4YScpO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSAkX19yZXF1aXJlKCc4ZCcpO1xuICAgIHZhciBSZWFjdEZlYXR1cmVGbGFncyA9ICRfX3JlcXVpcmUoJzhlJyk7XG4gICAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gJF9fcmVxdWlyZSgnMjcnKTtcbiAgICB2YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9ICRfX3JlcXVpcmUoJzhjJyk7XG4gICAgdmFyIFJlYWN0UmVjb25jaWxlciA9ICRfX3JlcXVpcmUoJzNlJyk7XG4gICAgdmFyIFJlYWN0VXBkYXRlUXVldWUgPSAkX19yZXF1aXJlKCc5MScpO1xuICAgIHZhciBSZWFjdFVwZGF0ZXMgPSAkX19yZXF1aXJlKCcxMicpO1xuICAgIHZhciBlbXB0eU9iamVjdCA9ICRfX3JlcXVpcmUoJzk0Jyk7XG4gICAgdmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSAkX19yZXF1aXJlKCczZicpO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIHZhciBzZXRJbm5lckhUTUwgPSAkX19yZXF1aXJlKCc1YScpO1xuICAgIHZhciBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCA9ICRfX3JlcXVpcmUoJzQxJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBBVFRSX05BTUUgPSBET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRTtcbiAgICB2YXIgUk9PVF9BVFRSX05BTUUgPSBET01Qcm9wZXJ0eS5ST09UX0FUVFJJQlVURV9OQU1FO1xuICAgIHZhciBFTEVNRU5UX05PREVfVFlQRSA9IDE7XG4gICAgdmFyIERPQ19OT0RFX1RZUEUgPSA5O1xuICAgIHZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUgPSAxMTtcbiAgICB2YXIgaW5zdGFuY2VzQnlSZWFjdFJvb3RJRCA9IHt9O1xuICAgIGZ1bmN0aW9uIGZpcnN0RGlmZmVyZW5jZUluZGV4KHN0cmluZzEsIHN0cmluZzIpIHtcbiAgICAgIHZhciBtaW5MZW4gPSBNYXRoLm1pbihzdHJpbmcxLmxlbmd0aCwgc3RyaW5nMi5sZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaW5MZW47IGkrKykge1xuICAgICAgICBpZiAoc3RyaW5nMS5jaGFyQXQoaSkgIT09IHN0cmluZzIuY2hhckF0KGkpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzdHJpbmcxLmxlbmd0aCA9PT0gc3RyaW5nMi5sZW5ndGggPyAtMSA6IG1pbkxlbjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgICAgIHJldHVybiBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBpbnRlcm5hbEdldElEKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZShBVFRSX05BTUUpIHx8ICcnO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtb3VudENvbXBvbmVudEludG9Ob2RlKHdyYXBwZXJJbnN0YW5jZSwgY29udGFpbmVyLCB0cmFuc2FjdGlvbiwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpIHtcbiAgICAgIHZhciBtYXJrZXJOYW1lO1xuICAgICAgaWYgKFJlYWN0RmVhdHVyZUZsYWdzLmxvZ1RvcExldmVsUmVuZGVycykge1xuICAgICAgICB2YXIgd3JhcHBlZEVsZW1lbnQgPSB3cmFwcGVySW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgICAgICB2YXIgdHlwZSA9IHdyYXBwZWRFbGVtZW50LnR5cGU7XG4gICAgICAgIG1hcmtlck5hbWUgPSAnUmVhY3QgbW91bnQ6ICcgKyAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnID8gdHlwZSA6IHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lKTtcbiAgICAgICAgY29uc29sZS50aW1lKG1hcmtlck5hbWUpO1xuICAgICAgfVxuICAgICAgdmFyIG1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudCh3cmFwcGVySW5zdGFuY2UsIHRyYW5zYWN0aW9uLCBudWxsLCBSZWFjdERPTUNvbnRhaW5lckluZm8od3JhcHBlckluc3RhbmNlLCBjb250YWluZXIpLCBjb250ZXh0KTtcbiAgICAgIGlmIChtYXJrZXJOYW1lKSB7XG4gICAgICAgIGNvbnNvbGUudGltZUVuZChtYXJrZXJOYW1lKTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJJbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQuX3RvcExldmVsV3JhcHBlciA9IHdyYXBwZXJJbnN0YW5jZTtcbiAgICAgIFJlYWN0TW91bnQuX21vdW50SW1hZ2VJbnRvTm9kZShtYXJrdXAsIGNvbnRhaW5lciwgd3JhcHBlckluc3RhbmNlLCBzaG91bGRSZXVzZU1hcmt1cCwgdHJhbnNhY3Rpb24pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZShjb21wb25lbnRJbnN0YW5jZSwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCkge1xuICAgICAgdmFyIHRyYW5zYWN0aW9uID0gUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24uZ2V0UG9vbGVkKCFzaG91bGRSZXVzZU1hcmt1cCAmJiBSZWFjdERPTUZlYXR1cmVGbGFncy51c2VDcmVhdGVFbGVtZW50KTtcbiAgICAgIHRyYW5zYWN0aW9uLnBlcmZvcm0obW91bnRDb21wb25lbnRJbnRvTm9kZSwgbnVsbCwgY29tcG9uZW50SW5zdGFuY2UsIGNvbnRhaW5lciwgdHJhbnNhY3Rpb24sIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KTtcbiAgICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1bm1vdW50Q29tcG9uZW50RnJvbU5vZGUoaW5zdGFuY2UsIGNvbnRhaW5lciwgc2FmZWx5KSB7XG4gICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChpbnN0YW5jZSwgc2FmZWx5KTtcbiAgICAgIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUpIHtcbiAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChjb250YWluZXIubGFzdENoaWxkKSB7XG4gICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIubGFzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzTm9uUm9vdFJlYWN0Q2hpbGQoY29udGFpbmVyKSB7XG4gICAgICB2YXIgcm9vdEVsID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICBpZiAocm9vdEVsKSB7XG4gICAgICAgIHZhciBpbnN0ID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUocm9vdEVsKTtcbiAgICAgICAgcmV0dXJuICEhKGluc3QgJiYgaW5zdC5fbmF0aXZlUGFyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlUm9vdEluc3RhbmNlSW5Db250YWluZXIoY29udGFpbmVyKSB7XG4gICAgICB2YXIgcm9vdEVsID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICB2YXIgcHJldk5hdGl2ZUluc3RhbmNlID0gcm9vdEVsICYmIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKHJvb3RFbCk7XG4gICAgICByZXR1cm4gcHJldk5hdGl2ZUluc3RhbmNlICYmICFwcmV2TmF0aXZlSW5zdGFuY2UuX25hdGl2ZVBhcmVudCA/IHByZXZOYXRpdmVJbnN0YW5jZSA6IG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFRvcExldmVsV3JhcHBlckluQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICAgICAgdmFyIHJvb3QgPSBnZXROYXRpdmVSb290SW5zdGFuY2VJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgcmV0dXJuIHJvb3QgPyByb290Ll9uYXRpdmVDb250YWluZXJJbmZvLl90b3BMZXZlbFdyYXBwZXIgOiBudWxsO1xuICAgIH1cbiAgICB2YXIgdG9wTGV2ZWxSb290Q291bnRlciA9IDE7XG4gICAgdmFyIFRvcExldmVsV3JhcHBlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yb290SUQgPSB0b3BMZXZlbFJvb3RDb3VudGVyKys7XG4gICAgfTtcbiAgICBUb3BMZXZlbFdyYXBwZXIucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB7fTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgVG9wTGV2ZWxXcmFwcGVyLmRpc3BsYXlOYW1lID0gJ1RvcExldmVsV3JhcHBlcic7XG4gICAgfVxuICAgIFRvcExldmVsV3JhcHBlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcztcbiAgICB9O1xuICAgIHZhciBSZWFjdE1vdW50ID0ge1xuICAgICAgVG9wTGV2ZWxXcmFwcGVyOiBUb3BMZXZlbFdyYXBwZXIsXG4gICAgICBfaW5zdGFuY2VzQnlSZWFjdFJvb3RJRDogaW5zdGFuY2VzQnlSZWFjdFJvb3RJRCxcbiAgICAgIHNjcm9sbE1vbml0b3I6IGZ1bmN0aW9uKGNvbnRhaW5lciwgcmVuZGVyQ2FsbGJhY2spIHtcbiAgICAgICAgcmVuZGVyQ2FsbGJhY2soKTtcbiAgICAgIH0sXG4gICAgICBfdXBkYXRlUm9vdENvbXBvbmVudDogZnVuY3Rpb24ocHJldkNvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAgICAgUmVhY3RNb3VudC5zY3JvbGxNb25pdG9yKGNvbnRhaW5lciwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgUmVhY3RVcGRhdGVRdWV1ZS5lbnF1ZXVlRWxlbWVudEludGVybmFsKHByZXZDb21wb25lbnQsIG5leHRFbGVtZW50KTtcbiAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWwocHJldkNvbXBvbmVudCwgY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcmV2Q29tcG9uZW50O1xuICAgICAgfSxcbiAgICAgIF9yZW5kZXJOZXdSb290Q29tcG9uZW50OiBmdW5jdGlvbihuZXh0RWxlbWVudCwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCkge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luRmx1c2goKTtcbiAgICAgICAgfVxuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgKyAnb2YgcHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tICcgKyAncmVuZGVyIGlzIG5vdCBhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArICdjb21wb25lbnREaWRVcGRhdGUuIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICVzLicsIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgICEoY29udGFpbmVyICYmIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREVfVFlQRSkpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ19yZWdpc3RlckNvbXBvbmVudCguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmVuc3VyZVNjcm9sbFZhbHVlTW9uaXRvcmluZygpO1xuICAgICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5leHRFbGVtZW50KTtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb21wb25lbnRJbnN0YW5jZS5fZGVidWdJRCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKGJhdGNoZWRNb3VudENvbXBvbmVudEludG9Ob2RlLCBjb21wb25lbnRJbnN0YW5jZSwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCk7XG4gICAgICAgIHZhciB3cmFwcGVySUQgPSBjb21wb25lbnRJbnN0YW5jZS5faW5zdGFuY2Uucm9vdElEO1xuICAgICAgICBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3dyYXBwZXJJRF0gPSBjb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25Nb3VudFJvb3RDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UuX3JlbmRlcmVkQ29tcG9uZW50Ll9kZWJ1Z0lEKTtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRGbHVzaCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIH0sXG4gICAgICByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjogZnVuY3Rpb24ocGFyZW50Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICAgICAhKHBhcmVudENvbXBvbmVudCAhPSBudWxsICYmIHBhcmVudENvbXBvbmVudC5fcmVhY3RJbnRlcm5hbEluc3RhbmNlICE9IG51bGwpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3BhcmVudENvbXBvbmVudCBtdXN0IGJlIGEgdmFsaWQgUmVhY3QgQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gUmVhY3RNb3VudC5fcmVuZGVyU3VidHJlZUludG9Db250YWluZXIocGFyZW50Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gICAgICB9LFxuICAgICAgX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOiBmdW5jdGlvbihwYXJlbnRDb21wb25lbnQsIG5leHRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgICAgIFJlYWN0VXBkYXRlUXVldWUudmFsaWRhdGVDYWxsYmFjayhjYWxsYmFjaywgJ1JlYWN0RE9NLnJlbmRlcicpO1xuICAgICAgICAhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5leHRFbGVtZW50KSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdERPTS5yZW5kZXIoKTogSW52YWxpZCBjb21wb25lbnQgZWxlbWVudC4lcycsIHR5cGVvZiBuZXh0RWxlbWVudCA9PT0gJ3N0cmluZycgPyAnIEluc3RlYWQgb2YgcGFzc2luZyBhIHN0cmluZyBsaWtlIFxcJ2RpdlxcJywgcGFzcyAnICsgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQoXFwnZGl2XFwnKSBvciA8ZGl2IC8+LicgOiB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdmdW5jdGlvbicgPyAnIEluc3RlYWQgb2YgcGFzc2luZyBhIGNsYXNzIGxpa2UgRm9vLCBwYXNzICcgKyAnUmVhY3QuY3JlYXRlRWxlbWVudChGb28pIG9yIDxGb28gLz4uJyA6IG5leHRFbGVtZW50ICE9IG51bGwgJiYgbmV4dEVsZW1lbnQucHJvcHMgIT09IHVuZGVmaW5lZCA/ICcgVGhpcyBtYXkgYmUgY2F1c2VkIGJ5IHVuaW50ZW50aW9uYWxseSBsb2FkaW5nIHR3byBpbmRlcGVuZGVudCAnICsgJ2NvcGllcyBvZiBSZWFjdC4nIDogJycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWNvbnRhaW5lciB8fCAhY29udGFpbmVyLnRhZ05hbWUgfHwgY29udGFpbmVyLnRhZ05hbWUudG9VcHBlckNhc2UoKSAhPT0gJ0JPRFknLCAncmVuZGVyKCk6IFJlbmRlcmluZyBjb21wb25lbnRzIGRpcmVjdGx5IGludG8gZG9jdW1lbnQuYm9keSBpcyAnICsgJ2Rpc2NvdXJhZ2VkLCBzaW5jZSBpdHMgY2hpbGRyZW4gYXJlIG9mdGVuIG1hbmlwdWxhdGVkIGJ5IHRoaXJkLXBhcnR5ICcgKyAnc2NyaXB0cyBhbmQgYnJvd3NlciBleHRlbnNpb25zLiBUaGlzIG1heSBsZWFkIHRvIHN1YnRsZSAnICsgJ3JlY29uY2lsaWF0aW9uIGlzc3Vlcy4gVHJ5IHJlbmRlcmluZyBpbnRvIGEgY29udGFpbmVyIGVsZW1lbnQgY3JlYXRlZCAnICsgJ2ZvciB5b3VyIGFwcC4nKSA6IHZvaWQgMDtcbiAgICAgICAgdmFyIG5leHRXcmFwcGVkRWxlbWVudCA9IFJlYWN0RWxlbWVudChUb3BMZXZlbFdyYXBwZXIsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG5leHRFbGVtZW50KTtcbiAgICAgICAgdmFyIHByZXZDb21wb25lbnQgPSBnZXRUb3BMZXZlbFdyYXBwZXJJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgICBpZiAocHJldkNvbXBvbmVudCkge1xuICAgICAgICAgIHZhciBwcmV2V3JhcHBlZEVsZW1lbnQgPSBwcmV2Q29tcG9uZW50Ll9jdXJyZW50RWxlbWVudDtcbiAgICAgICAgICB2YXIgcHJldkVsZW1lbnQgPSBwcmV2V3JhcHBlZEVsZW1lbnQucHJvcHM7XG4gICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgICAgIHZhciBwdWJsaWNJbnN0ID0gcHJldkNvbXBvbmVudC5fcmVuZGVyZWRDb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICAgICAgICAgIHZhciB1cGRhdGVkQ2FsbGJhY2sgPSBjYWxsYmFjayAmJiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChwdWJsaWNJbnN0KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBSZWFjdE1vdW50Ll91cGRhdGVSb290Q29tcG9uZW50KHByZXZDb21wb25lbnQsIG5leHRXcmFwcGVkRWxlbWVudCwgY29udGFpbmVyLCB1cGRhdGVkQ2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuIHB1YmxpY0luc3Q7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZShjb250YWluZXIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVhY3RSb290RWxlbWVudCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgICB2YXIgY29udGFpbmVySGFzUmVhY3RNYXJrdXAgPSByZWFjdFJvb3RFbGVtZW50ICYmICEhaW50ZXJuYWxHZXRJRChyZWFjdFJvb3RFbGVtZW50KTtcbiAgICAgICAgdmFyIGNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkID0gaGFzTm9uUm9vdFJlYWN0Q2hpbGQoY29udGFpbmVyKTtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQsICdyZW5kZXIoLi4uKTogUmVwbGFjaW5nIFJlYWN0LXJlbmRlcmVkIGNoaWxkcmVuIHdpdGggYSBuZXcgcm9vdCAnICsgJ2NvbXBvbmVudC4gSWYgeW91IGludGVuZGVkIHRvIHVwZGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlLCAnICsgJ3lvdSBzaG91bGQgaW5zdGVhZCBoYXZlIHRoZSBleGlzdGluZyBjaGlsZHJlbiB1cGRhdGUgdGhlaXIgc3RhdGUgJyArICdhbmQgcmVuZGVyIHRoZSBuZXcgY29tcG9uZW50cyBpbnN0ZWFkIG9mIGNhbGxpbmcgUmVhY3RET00ucmVuZGVyLicpIDogdm9pZCAwO1xuICAgICAgICAgIGlmICghY29udGFpbmVySGFzUmVhY3RNYXJrdXAgfHwgcmVhY3RSb290RWxlbWVudC5uZXh0U2libGluZykge1xuICAgICAgICAgICAgdmFyIHJvb3RFbGVtZW50U2libGluZyA9IHJlYWN0Um9vdEVsZW1lbnQ7XG4gICAgICAgICAgICB3aGlsZSAocm9vdEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgICAgICAgIGlmIChpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50U2libGluZykpIHtcbiAgICAgICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ3JlbmRlcigpOiBUYXJnZXQgbm9kZSBoYXMgbWFya3VwIHJlbmRlcmVkIGJ5IFJlYWN0LCBidXQgdGhlcmUgJyArICdhcmUgdW5yZWxhdGVkIG5vZGVzIGFzIHdlbGwuIFRoaXMgaXMgbW9zdCBjb21tb25seSBjYXVzZWQgYnkgJyArICd3aGl0ZS1zcGFjZSBpbnNlcnRlZCBhcm91bmQgc2VydmVyLXJlbmRlcmVkIG1hcmt1cC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByb290RWxlbWVudFNpYmxpbmcgPSByb290RWxlbWVudFNpYmxpbmcubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBzaG91bGRSZXVzZU1hcmt1cCA9IGNvbnRhaW5lckhhc1JlYWN0TWFya3VwICYmICFwcmV2Q29tcG9uZW50ICYmICFjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZDtcbiAgICAgICAgdmFyIGNvbXBvbmVudCA9IFJlYWN0TW91bnQuX3JlbmRlck5ld1Jvb3RDb21wb25lbnQobmV4dFdyYXBwZWRFbGVtZW50LCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwLCBwYXJlbnRDb21wb25lbnQgIT0gbnVsbCA/IHBhcmVudENvbXBvbmVudC5fcmVhY3RJbnRlcm5hbEluc3RhbmNlLl9wcm9jZXNzQ2hpbGRDb250ZXh0KHBhcmVudENvbXBvbmVudC5fcmVhY3RJbnRlcm5hbEluc3RhbmNlLl9jb250ZXh0KSA6IGVtcHR5T2JqZWN0KS5fcmVuZGVyZWRDb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2suY2FsbChjb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgICB9LFxuICAgICAgcmVuZGVyOiBmdW5jdGlvbihuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4gUmVhY3RNb3VudC5fcmVuZGVyU3VidHJlZUludG9Db250YWluZXIobnVsbCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spO1xuICAgICAgfSxcbiAgICAgIHVubW91bnRDb21wb25lbnRBdE5vZGU6IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsICd1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gJyArICdvZiBwcm9wcyBhbmQgc3RhdGU7IHRyaWdnZXJpbmcgbmVzdGVkIGNvbXBvbmVudCB1cGRhdGVzIGZyb20gcmVuZGVyICcgKyAnaXMgbm90IGFsbG93ZWQuIElmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiAnICsgJ2NvbXBvbmVudERpZFVwZGF0ZS4gQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgJXMuJywgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgIShjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFKSkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndW5tb3VudENvbXBvbmVudEF0Tm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgdmFyIHByZXZDb21wb25lbnQgPSBnZXRUb3BMZXZlbFdyYXBwZXJJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgICBpZiAoIXByZXZDb21wb25lbnQpIHtcbiAgICAgICAgICB2YXIgY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQgPSBoYXNOb25Sb290UmVhY3RDaGlsZChjb250YWluZXIpO1xuICAgICAgICAgIHZhciBpc0NvbnRhaW5lclJlYWN0Um9vdCA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSAmJiBjb250YWluZXIuaGFzQXR0cmlidXRlKFJPT1RfQVRUUl9OQU1FKTtcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkLCAndW5tb3VudENvbXBvbmVudEF0Tm9kZSgpOiBUaGUgbm9kZSB5b3VcXCdyZSBhdHRlbXB0aW5nIHRvIHVubW91bnQgJyArICd3YXMgcmVuZGVyZWQgYnkgUmVhY3QgYW5kIGlzIG5vdCBhIHRvcC1sZXZlbCBjb250YWluZXIuICVzJywgaXNDb250YWluZXJSZWFjdFJvb3QgPyAnWW91IG1heSBoYXZlIGFjY2lkZW50YWxseSBwYXNzZWQgaW4gYSBSZWFjdCByb290IG5vZGUgaW5zdGVhZCAnICsgJ29mIGl0cyBjb250YWluZXIuJyA6ICdJbnN0ZWFkLCBoYXZlIHRoZSBwYXJlbnQgY29tcG9uZW50IHVwZGF0ZSBpdHMgc3RhdGUgYW5kICcgKyAncmVyZW5kZXIgaW4gb3JkZXIgdG8gcmVtb3ZlIHRoaXMgY29tcG9uZW50LicpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGluc3RhbmNlc0J5UmVhY3RSb290SURbcHJldkNvbXBvbmVudC5faW5zdGFuY2Uucm9vdElEXTtcbiAgICAgICAgUmVhY3RVcGRhdGVzLmJhdGNoZWRVcGRhdGVzKHVubW91bnRDb21wb25lbnRGcm9tTm9kZSwgcHJldkNvbXBvbmVudCwgY29udGFpbmVyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSxcbiAgICAgIF9tb3VudEltYWdlSW50b05vZGU6IGZ1bmN0aW9uKG1hcmt1cCwgY29udGFpbmVyLCBpbnN0YW5jZSwgc2hvdWxkUmV1c2VNYXJrdXAsIHRyYW5zYWN0aW9uKSB7XG4gICAgICAgICEoY29udGFpbmVyICYmIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREVfVFlQRSkpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21vdW50Q29tcG9uZW50SW50b05vZGUoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgdmFsaWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBpZiAoc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAgICAgICB2YXIgcm9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICAgICAgICBpZiAoUmVhY3RNYXJrdXBDaGVja3N1bS5jYW5SZXVzZU1hcmt1cChtYXJrdXAsIHJvb3RFbGVtZW50KSkge1xuICAgICAgICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZShpbnN0YW5jZSwgcm9vdEVsZW1lbnQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgY2hlY2tzdW0gPSByb290RWxlbWVudC5nZXRBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUpO1xuICAgICAgICAgICAgcm9vdEVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FKTtcbiAgICAgICAgICAgIHZhciByb290TWFya3VwID0gcm9vdEVsZW1lbnQub3V0ZXJIVE1MO1xuICAgICAgICAgICAgcm9vdEVsZW1lbnQuc2V0QXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FLCBjaGVja3N1bSk7XG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZE1hcmt1cCA9IG1hcmt1cDtcbiAgICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIHZhciBub3JtYWxpemVyO1xuICAgICAgICAgICAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSkge1xuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVyLmlubmVySFRNTCA9IG1hcmt1cDtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkTWFya3VwID0gbm9ybWFsaXplci5pbm5lckhUTUw7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9ybWFsaXplcik7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplci5jb250ZW50RG9jdW1lbnQud3JpdGUobWFya3VwKTtcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkTWFya3VwID0gbm9ybWFsaXplci5jb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTDtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKG5vcm1hbGl6ZXIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZGlmZkluZGV4ID0gZmlyc3REaWZmZXJlbmNlSW5kZXgobm9ybWFsaXplZE1hcmt1cCwgcm9vdE1hcmt1cCk7XG4gICAgICAgICAgICB2YXIgZGlmZmVyZW5jZSA9ICcgKGNsaWVudCkgJyArIG5vcm1hbGl6ZWRNYXJrdXAuc3Vic3RyaW5nKGRpZmZJbmRleCAtIDIwLCBkaWZmSW5kZXggKyAyMCkgKyAnXFxuIChzZXJ2ZXIpICcgKyByb290TWFya3VwLnN1YnN0cmluZyhkaWZmSW5kZXggLSAyMCwgZGlmZkluZGV4ICsgMjApO1xuICAgICAgICAgICAgIShjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IHVzaW5nICcgKyAnc2VydmVyIHJlbmRlcmluZyBidXQgdGhlIGNoZWNrc3VtIHdhcyBpbnZhbGlkLiBUaGlzIHVzdWFsbHkgJyArICdtZWFucyB5b3UgcmVuZGVyZWQgYSBkaWZmZXJlbnQgY29tcG9uZW50IHR5cGUgb3IgcHJvcHMgb24gJyArICd0aGUgY2xpZW50IGZyb20gdGhlIG9uZSBvbiB0aGUgc2VydmVyLCBvciB5b3VyIHJlbmRlcigpICcgKyAnbWV0aG9kcyBhcmUgaW1wdXJlLiBSZWFjdCBjYW5ub3QgaGFuZGxlIHRoaXMgY2FzZSBkdWUgdG8gJyArICdjcm9zcy1icm93c2VyIHF1aXJrcyBieSByZW5kZXJpbmcgYXQgdGhlIGRvY3VtZW50IHJvb3QuIFlvdSAnICsgJ3Nob3VsZCBsb29rIGZvciBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY29kZSBpbiB5b3VyIGNvbXBvbmVudHMgJyArICdhbmQgZW5zdXJlIHRoZSBwcm9wcyBhcmUgdGhlIHNhbWUgY2xpZW50IGFuZCBzZXJ2ZXIgc2lkZTpcXG4lcycsIGRpZmZlcmVuY2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnUmVhY3QgYXR0ZW1wdGVkIHRvIHJldXNlIG1hcmt1cCBpbiBhIGNvbnRhaW5lciBidXQgdGhlICcgKyAnY2hlY2tzdW0gd2FzIGludmFsaWQuIFRoaXMgZ2VuZXJhbGx5IG1lYW5zIHRoYXQgeW91IGFyZSAnICsgJ3VzaW5nIHNlcnZlciByZW5kZXJpbmcgYW5kIHRoZSBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSAnICsgJ3NlcnZlciB3YXMgbm90IHdoYXQgdGhlIGNsaWVudCB3YXMgZXhwZWN0aW5nLiBSZWFjdCBpbmplY3RlZCAnICsgJ25ldyBtYXJrdXAgdG8gY29tcGVuc2F0ZSB3aGljaCB3b3JrcyBidXQgeW91IGhhdmUgbG9zdCBtYW55ICcgKyAnb2YgdGhlIGJlbmVmaXRzIG9mIHNlcnZlciByZW5kZXJpbmcuIEluc3RlYWQsIGZpZ3VyZSBvdXQgJyArICd3aHkgdGhlIG1hcmt1cCBiZWluZyBnZW5lcmF0ZWQgaXMgZGlmZmVyZW50IG9uIHRoZSBjbGllbnQgJyArICdvciBzZXJ2ZXI6XFxuJXMnLCBkaWZmZXJlbmNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgIShjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IGJ1dCAnICsgJ3lvdSBkaWRuXFwndCB1c2Ugc2VydmVyIHJlbmRlcmluZy4gV2UgY2FuXFwndCBkbyB0aGlzICcgKyAnd2l0aG91dCB1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGR1ZSB0byBjcm9zcy1icm93c2VyIHF1aXJrcy4gJyArICdTZWUgUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcoKSBmb3Igc2VydmVyIHJlbmRlcmluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGlmICh0cmFuc2FjdGlvbi51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgICAgICAgd2hpbGUgKGNvbnRhaW5lci5sYXN0Q2hpbGQpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIubGFzdENoaWxkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgRE9NTGF6eVRyZWUuaW5zZXJ0VHJlZUJlZm9yZShjb250YWluZXIsIG1hcmt1cCwgbnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0SW5uZXJIVE1MKGNvbnRhaW5lciwgbWFya3VwKTtcbiAgICAgICAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUucHJlY2FjaGVOb2RlKGluc3RhbmNlLCBjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgbmF0aXZlTm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgICAgICBpZiAobmF0aXZlTm9kZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKG5hdGl2ZU5vZGUuX2RlYnVnSUQsICdtb3VudCcsIG1hcmt1cC50b1N0cmluZygpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RNb3VudDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiOTZcIiwgW1wiOTVcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBSZWFjdE1vdW50ID0gJF9fcmVxdWlyZSgnOTUnKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1vdW50LnJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjk3XCIsIFtcIjExXCIsIFwiODFcIiwgXCI5NVwiLCBcIjNlXCIsIFwiMTJcIiwgXCI5OFwiLCBcIjgyXCIsIFwiODRcIiwgXCI5NlwiLCBcIjIyXCIsIFwiZFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSAkX19yZXF1aXJlKCcxMScpO1xuICAgIHZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSAkX19yZXF1aXJlKCc4MScpO1xuICAgIHZhciBSZWFjdE1vdW50ID0gJF9fcmVxdWlyZSgnOTUnKTtcbiAgICB2YXIgUmVhY3RSZWNvbmNpbGVyID0gJF9fcmVxdWlyZSgnM2UnKTtcbiAgICB2YXIgUmVhY3RVcGRhdGVzID0gJF9fcmVxdWlyZSgnMTInKTtcbiAgICB2YXIgUmVhY3RWZXJzaW9uID0gJF9fcmVxdWlyZSgnOTgnKTtcbiAgICB2YXIgZmluZERPTU5vZGUgPSAkX19yZXF1aXJlKCc4MicpO1xuICAgIHZhciBnZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlID0gJF9fcmVxdWlyZSgnODQnKTtcbiAgICB2YXIgcmVuZGVyU3VidHJlZUludG9Db250YWluZXIgPSAkX19yZXF1aXJlKCc5NicpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICBSZWFjdERlZmF1bHRJbmplY3Rpb24uaW5qZWN0KCk7XG4gICAgdmFyIFJlYWN0ID0ge1xuICAgICAgZmluZERPTU5vZGU6IGZpbmRET01Ob2RlLFxuICAgICAgcmVuZGVyOiBSZWFjdE1vdW50LnJlbmRlcixcbiAgICAgIHVubW91bnRDb21wb25lbnRBdE5vZGU6IFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZSxcbiAgICAgIHZlcnNpb246IFJlYWN0VmVyc2lvbixcbiAgICAgIHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOiBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMsXG4gICAgICB1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjogcmVuZGVyU3VidHJlZUludG9Db250YWluZXJcbiAgICB9O1xuICAgIGlmICh0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCh7XG4gICAgICAgIENvbXBvbmVudFRyZWU6IHtcbiAgICAgICAgICBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTogUmVhY3RET01Db21wb25lbnRUcmVlLmdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlLFxuICAgICAgICAgIGdldE5vZGVGcm9tSW5zdGFuY2U6IGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgICAgICAgIGlmIChpbnN0Ll9yZW5kZXJlZENvbXBvbmVudCkge1xuICAgICAgICAgICAgICBpbnN0ID0gZ2V0TmF0aXZlQ29tcG9uZW50RnJvbUNvbXBvc2l0ZShpbnN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpbnN0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgTW91bnQ6IFJlYWN0TW91bnQsXG4gICAgICAgIFJlY29uY2lsZXI6IFJlYWN0UmVjb25jaWxlclxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSAkX19yZXF1aXJlKCdkJyk7XG4gICAgICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHdpbmRvdy50b3AgPT09IHdpbmRvdy5zZWxmKSB7XG4gICAgICAgIGlmICh0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpID4gLTEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdFZGdlJykgPT09IC0xIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTEpIHtcbiAgICAgICAgICAgIHZhciBzaG93RmlsZVVybE1lc3NhZ2UgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wuaW5kZXhPZignaHR0cCcpID09PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdEb3dubG9hZCB0aGUgUmVhY3QgRGV2VG9vbHMgJyArIChzaG93RmlsZVVybE1lc3NhZ2UgPyAnYW5kIHVzZSBhbiBIVFRQIHNlcnZlciAoaW5zdGVhZCBvZiBhIGZpbGU6IFVSTCkgJyA6ICcnKSArICdmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWRldnRvb2xzJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB0ZXN0RnVuYyA9IGZ1bmN0aW9uIHRlc3RGbigpIHt9O1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZygodGVzdEZ1bmMubmFtZSB8fCB0ZXN0RnVuYy50b1N0cmluZygpKS5pbmRleE9mKCd0ZXN0Rm4nKSAhPT0gLTEsICdJdCBsb29rcyBsaWtlIHlvdVxcJ3JlIHVzaW5nIGEgbWluaWZpZWQgY29weSBvZiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgJyArICdvZiBSZWFjdC4gV2hlbiBkZXBsb3lpbmcgUmVhY3QgYXBwcyB0byBwcm9kdWN0aW9uLCBtYWtlIHN1cmUgdG8gdXNlICcgKyAndGhlIHByb2R1Y3Rpb24gYnVpbGQgd2hpY2ggc2tpcHMgZGV2ZWxvcG1lbnQgd2FybmluZ3MgYW5kIGlzIGZhc3Rlci4gJyArICdTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1taW5pZmljYXRpb24gZm9yIG1vcmUgZGV0YWlscy4nKSA6IHZvaWQgMDtcbiAgICAgICAgdmFyIGllQ29tcGF0aWJpbGl0eU1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDwgODtcbiAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWllQ29tcGF0aWJpbGl0eU1vZGUsICdJbnRlcm5ldCBFeHBsb3JlciBpcyBydW5uaW5nIGluIGNvbXBhdGliaWxpdHkgbW9kZTsgcGxlYXNlIGFkZCB0aGUgJyArICdmb2xsb3dpbmcgdGFnIHRvIHlvdXIgSFRNTCB0byBwcmV2ZW50IHRoaXMgZnJvbSBoYXBwZW5pbmc6ICcgKyAnPG1ldGEgaHR0cC1lcXVpdj1cIlgtVUEtQ29tcGF0aWJsZVwiIGNvbnRlbnQ9XCJJRT1lZGdlXCIgLz4nKSA6IHZvaWQgMDtcbiAgICAgICAgdmFyIGV4cGVjdGVkRmVhdHVyZXMgPSBbQXJyYXkuaXNBcnJheSwgQXJyYXkucHJvdG90eXBlLmV2ZXJ5LCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCwgQXJyYXkucHJvdG90eXBlLmluZGV4T2YsIEFycmF5LnByb3RvdHlwZS5tYXAsIERhdGUubm93LCBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCwgT2JqZWN0LmtleXMsIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsIFN0cmluZy5wcm90b3R5cGUudHJpbV07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRGZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICghZXhwZWN0ZWRGZWF0dXJlc1tpXSkge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdPbmUgb3IgbW9yZSBFUzUgc2hpbXMgZXhwZWN0ZWQgYnkgUmVhY3QgYXJlIG5vdCBhdmFpbGFibGU6ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLXBvbHlmaWxscycpIDogdm9pZCAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjk5XCIsIFtcIjk3XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9ICRfX3JlcXVpcmUoJzk3Jyk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiOWFcIiwgW1wiOTlcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgbW9kdWxlLmV4cG9ydHMgPSAkX19yZXF1aXJlKCc5OScpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyKCc5YicsIFsnOWMnXSwgZnVuY3Rpb24gKF9leHBvcnQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBSZWFjdCwgTWFpbkhlYWRlcjtcbiAgcmV0dXJuIHtcbiAgICBzZXR0ZXJzOiBbZnVuY3Rpb24gKF9jKSB7XG4gICAgICBSZWFjdCA9IF9jWydkZWZhdWx0J107XG4gICAgfV0sXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgTWFpbkhlYWRlciA9IGZ1bmN0aW9uIE1haW5IZWFkZXIoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdoZWFkZXInLFxuICAgICAgICAgIHsgY2xhc3NOYW1lOiAnaGVhZGVyJywgcm9sZTogJ2Jhbm5lcicgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdsb2dvJywgaHJlZjogJy4vJywgcm9sZTogJ2xvZ28nIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpbWcnLCB7IHNyYzogJ3N2Zy9sb2dvLnN2ZycgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnYScsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2J0bi1saW5rJyxcbiAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9mcm9udGVuZGJyL2V2ZW50b3MnLFxuICAgICAgICAgICAgICB0aXRsZTogJ0FudW5jaWUgc2V1IGV2ZW50bycgfSxcbiAgICAgICAgICAgICdBbnVuY2lhciBFdmVudG8nXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgX2V4cG9ydCgnZGVmYXVsdCcsIE1haW5IZWFkZXIpO1xuICAgIH1cbiAgfTtcbn0pO1xuJF9fU3lzdGVtLnJlZ2lzdGVyKCc5ZCcsIFsnOWMnLCAnOWUnXSwgZnVuY3Rpb24gKF9leHBvcnQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBSZWFjdCwgUHJvcFR5cGVzLCBMYXp5SW1nLCBCYW5uZXJCb3g7XG4gIHJldHVybiB7XG4gICAgc2V0dGVyczogW2Z1bmN0aW9uIChfYykge1xuICAgICAgUmVhY3QgPSBfY1snZGVmYXVsdCddO1xuICAgICAgUHJvcFR5cGVzID0gX2MuUHJvcFR5cGVzO1xuICAgIH0sIGZ1bmN0aW9uIChfZSkge1xuICAgICAgTGF6eUltZyA9IF9lWydkZWZhdWx0J107XG4gICAgfV0sXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgQmFubmVyQm94ID0gZnVuY3Rpb24gQmFubmVyQm94KF9yZWYpIHtcbiAgICAgICAgdmFyIGxpbmsgPSBfcmVmLmxpbms7XG4gICAgICAgIHZhciB0aXRsZSA9IF9yZWYudGl0bGU7XG4gICAgICAgIHZhciBkYXRlID0gX3JlZi5kYXRlO1xuICAgICAgICB2YXIgaW1hZ2UgPSBfcmVmLmltYWdlO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnYScsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdiYW5uZXItYm94JywgaHJlZjogbGluaywgdGl0bGU6IHRpdGxlICsgJyAnICsgZGF0ZSB9LFxuICAgICAgICAgICEhaW1hZ2UgJiYgUmVhY3QuY3JlYXRlRWxlbWVudChMYXp5SW1nLCB7IHNyYzogaW1hZ2UsIGFsdDogdGl0bGUgfSksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdoMicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3RpdGxlJyB9LFxuICAgICAgICAgICAgdGl0bGUgKyAnICcsXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnc3BhbicsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZGF0ZScgfSxcbiAgICAgICAgICAgICAgZGF0ZVxuICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICAgIEJhbm5lckJveC5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGxpbms6ICcjJ1xuICAgICAgfTtcblxuICAgICAgQmFubmVyQm94LnByb3BUeXBlcyA9IHtcbiAgICAgICAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgZGF0ZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICBsaW5rOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBpbWFnZTogUHJvcFR5cGVzLnN0cmluZ1xuICAgICAgfTtcblxuICAgICAgX2V4cG9ydCgnZGVmYXVsdCcsIEJhbm5lckJveCk7XG4gICAgfVxuICB9O1xufSk7XG4kX19TeXN0ZW0ucmVnaXN0ZXIoJzlmJywgWyc5YycsICc5ZCddLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIFJlYWN0LCBQcm9wVHlwZXMsIEJhbm5lckJveCwgZ2V0RGF0ZSwgSGVhZGVyQmFubmVyO1xuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoX2MpIHtcbiAgICAgIFJlYWN0ID0gX2NbJ2RlZmF1bHQnXTtcbiAgICAgIFByb3BUeXBlcyA9IF9jLlByb3BUeXBlcztcbiAgICB9LCBmdW5jdGlvbiAoX2QpIHtcbiAgICAgIEJhbm5lckJveCA9IF9kWydkZWZhdWx0J107XG4gICAgfV0sXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZ2V0RGF0ZSA9IGZ1bmN0aW9uIGdldERhdGUoZGF0ZSkge1xuICAgICAgICByZXR1cm4gZGF0ZS5kYXkgKyAnIC0gJyArIGRhdGUubW9udGg7XG4gICAgICB9O1xuXG4gICAgICBIZWFkZXJCYW5uZXIgPSBmdW5jdGlvbiBIZWFkZXJCYW5uZXIoX3JlZikge1xuICAgICAgICB2YXIgZXZlbnRzID0gX3JlZi5ldmVudHM7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdzZWN0aW9uJyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Jhbm5lcicgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Jhbm5lci1tYWluJyB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChCYW5uZXJCb3gsIHtcbiAgICAgICAgICAgICAgbGluazogZXZlbnRzWzBdLmxpbmssXG4gICAgICAgICAgICAgIHRpdGxlOiBldmVudHNbMF0udGl0bGUsXG4gICAgICAgICAgICAgIGRhdGU6IGdldERhdGUoZXZlbnRzWzBdLmRhdGUpLFxuICAgICAgICAgICAgICBpbWFnZTogZXZlbnRzWzBdLmltYWdlIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGtleTogMCwgY2xhc3NOYW1lOiAnYmFubmVyLWFzaWRlJyB9LFxuICAgICAgICAgICAgZXZlbnRzLnNsaWNlKDEsIDMpLm1hcChmdW5jdGlvbiAoZXZlbnQsIGluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhbm5lckJveCwge1xuICAgICAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICAgICAgbGluazogZXZlbnQubGluayxcbiAgICAgICAgICAgICAgICB0aXRsZTogZXZlbnQudGl0bGUsXG4gICAgICAgICAgICAgICAgZGF0ZTogZ2V0RGF0ZShldmVudC5kYXRlKSB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGtleTogMSwgY2xhc3NOYW1lOiAnYmFubmVyLWFzaWRlJyB9LFxuICAgICAgICAgICAgZXZlbnRzLnNsaWNlKDMpLm1hcChmdW5jdGlvbiAoZXZlbnQsIGluZGV4KSB7XG4gICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KEJhbm5lckJveCwge1xuICAgICAgICAgICAgICAgIGtleTogaW5kZXgsXG4gICAgICAgICAgICAgICAgbGluazogZXZlbnQubGluayxcbiAgICAgICAgICAgICAgICB0aXRsZTogZXZlbnQudGl0bGUsXG4gICAgICAgICAgICAgICAgZGF0ZTogZ2V0RGF0ZShldmVudC5kYXRlKSB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgSGVhZGVyQmFubmVyLnByb3BUeXBlcyA9IHtcbiAgICAgICAgZXZlbnRzOiBQcm9wVHlwZXMuYXJyYXkuaXNSZXF1aXJlZFxuICAgICAgfTtcblxuICAgICAgX2V4cG9ydCgnZGVmYXVsdCcsIEhlYWRlckJhbm5lcik7XG4gICAgfVxuICB9O1xufSk7XG4kX19TeXN0ZW0ucmVnaXN0ZXIoJ2EwJywgWydhMycsICdhNCcsICdhNScsICdhNicsICc5YycsICdhMicsICc5ZicsICdhMSddLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICB2YXIgX2dldCwgX2luaGVyaXRzLCBfY3JlYXRlQ2xhc3MsIF9jbGFzc0NhbGxDaGVjaywgUmVhY3QsIFByb3BUeXBlcywgQ29tcG9uZW50LCBjb25uZWN0LCBIZWFkZXJCYW5uZXIsIGZldGNoRXZlbnRzLCBIZWFkZXIsIG1hcFN0YXRlVG9Qcm9wcztcblxuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoX2EzKSB7XG4gICAgICBfZ2V0ID0gX2EzWydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9hNCkge1xuICAgICAgX2luaGVyaXRzID0gX2E0WydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9hNSkge1xuICAgICAgX2NyZWF0ZUNsYXNzID0gX2E1WydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9hNikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrID0gX2E2WydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9jKSB7XG4gICAgICBSZWFjdCA9IF9jWydkZWZhdWx0J107XG4gICAgICBQcm9wVHlwZXMgPSBfYy5Qcm9wVHlwZXM7XG4gICAgICBDb21wb25lbnQgPSBfYy5Db21wb25lbnQ7XG4gICAgfSwgZnVuY3Rpb24gKF9hMikge1xuICAgICAgY29ubmVjdCA9IF9hMi5jb25uZWN0O1xuICAgIH0sIGZ1bmN0aW9uIChfZikge1xuICAgICAgSGVhZGVyQmFubmVyID0gX2ZbJ2RlZmF1bHQnXTtcbiAgICB9LCBmdW5jdGlvbiAoX2ExKSB7XG4gICAgICBmZXRjaEV2ZW50cyA9IF9hMS5mZXRjaEV2ZW50cztcbiAgICB9XSxcbiAgICBleGVjdXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG5cbiAgICAgIC8vIGltcG9ydCBIZWFkZXJGaWx0ZXIgZnJvbSAnLi9oZWFkZXItZmlsdGVyJ1xuXG4gICAgICBIZWFkZXIgPSAoZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICAgICAgX2luaGVyaXRzKEhlYWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICAgICAgZnVuY3Rpb24gSGVhZGVyKCkge1xuICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIZWFkZXIpO1xuXG4gICAgICAgICAgX2dldChPYmplY3QuZ2V0UHJvdG90eXBlT2YoSGVhZGVyLnByb3RvdHlwZSksICdjb25zdHJ1Y3RvcicsIHRoaXMpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICBfY3JlYXRlQ2xhc3MoSGVhZGVyLCBbe1xuICAgICAgICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BhdGNoKGZldGNoRXZlbnRzKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGtleTogJ3JlbmRlcicsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnaGVhZGVyJyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICd3ZWxsbmVzcycgfSxcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnaDEnLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAndGl0bGUnIH0sXG4gICAgICAgICAgICAgICAgJ0VuY29udHJlIGV2ZW50b3MgZGUgRnJvbnQtRW5kIGVtIHRvZG8gbyBCcmFzaWwnXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSGVhZGVyQmFubmVyLCB7IGV2ZW50czogdGhpcy5wcm9wcy5ldmVudHMgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIEhlYWRlcjtcbiAgICAgIH0pKENvbXBvbmVudCk7XG5cbiAgICAgIEhlYWRlci5wcm9wVHlwZXMgPSB7XG4gICAgICAgIGV2ZW50czogUHJvcFR5cGVzLnNoYXBlLmlzUmVxdWlyZWRcbiAgICAgIH07XG5cbiAgICAgIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGV2ZW50czogc3RhdGUuZXZlbnRzLmV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKF8sIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPCA1O1xuICAgICAgICAgIH0pXG4gICAgICAgIH07XG4gICAgICB9O1xuXG4gICAgICBfZXhwb3J0KCdkZWZhdWx0JywgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKEhlYWRlcikpO1xuICAgIH1cbiAgfTtcbn0pO1xuLyogPEhlYWRlckZpbHRlciAvPiAqL1xuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImE3XCIsIFtcImFhXCIsIFwiYThcIiwgXCJhOVwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gICAgZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB1bmRlZmluZWQ7XG4gICAgdmFyIF9yZWFjdCA9ICRfX3JlcXVpcmUoJ2FhJyk7XG4gICAgdmFyIF9zdG9yZVNoYXBlID0gJF9fcmVxdWlyZSgnYTgnKTtcbiAgICB2YXIgX3N0b3JlU2hhcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmVTaGFwZSk7XG4gICAgdmFyIF93YXJuaW5nID0gJF9fcmVxdWlyZSgnYTknKTtcbiAgICB2YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG4gICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XCJkZWZhdWx0XCI6IG9ian07XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICAgIGlmICghc2VsZikge1xuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgICAgfVxuICAgICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7Y29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH19KTtcbiAgICAgIGlmIChzdXBlckNsYXNzKVxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgICB9XG4gICAgdmFyIGRpZFdhcm5BYm91dFJlY2VpdmluZ1N0b3JlID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gd2FybkFib3V0UmVjZWl2aW5nU3RvcmUoKSB7XG4gICAgICBpZiAoZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSB0cnVlO1xuICAgICAgKDAsIF93YXJuaW5nMltcImRlZmF1bHRcIl0pKCc8UHJvdmlkZXI+IGRvZXMgbm90IHN1cHBvcnQgY2hhbmdpbmcgYHN0b3JlYCBvbiB0aGUgZmx5LiAnICsgJ0l0IGlzIG1vc3QgbGlrZWx5IHRoYXQgeW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IHVwZGF0ZWQgdG8gJyArICdSZWR1eCAyLnggYW5kIFJlYWN0IFJlZHV4IDIueCB3aGljaCBubyBsb25nZXIgaG90IHJlbG9hZCByZWR1Y2VycyAnICsgJ2F1dG9tYXRpY2FsbHkuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yZWR1eC9yZWxlYXNlcy8nICsgJ3RhZy92Mi4wLjAgZm9yIHRoZSBtaWdyYXRpb24gaW5zdHJ1Y3Rpb25zLicpO1xuICAgIH1cbiAgICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbihfQ29tcG9uZW50KSB7XG4gICAgICBfaW5oZXJpdHMoUHJvdmlkZXIsIF9Db21wb25lbnQpO1xuICAgICAgUHJvdmlkZXIucHJvdG90eXBlLmdldENoaWxkQ29udGV4dCA9IGZ1bmN0aW9uIGdldENoaWxkQ29udGV4dCgpIHtcbiAgICAgICAgcmV0dXJuIHtzdG9yZTogdGhpcy5zdG9yZX07XG4gICAgICB9O1xuICAgICAgZnVuY3Rpb24gUHJvdmlkZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcbiAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG4gICAgICAgIF90aGlzLnN0b3JlID0gcHJvcHMuc3RvcmU7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgIH1cbiAgICAgIFByb3ZpZGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgICAgIHJldHVybiBfcmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbik7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIFByb3ZpZGVyO1xuICAgIH0oX3JlYWN0LkNvbXBvbmVudCk7XG4gICAgZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBQcm92aWRlcjtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgUHJvdmlkZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbihuZXh0UHJvcHMpIHtcbiAgICAgICAgdmFyIHN0b3JlID0gdGhpcy5zdG9yZTtcbiAgICAgICAgdmFyIG5leHRTdG9yZSA9IG5leHRQcm9wcy5zdG9yZTtcbiAgICAgICAgaWYgKHN0b3JlICE9PSBuZXh0U3RvcmUpIHtcbiAgICAgICAgICB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgICBzdG9yZTogX3N0b3JlU2hhcGUyW1wiZGVmYXVsdFwiXS5pc1JlcXVpcmVkLFxuICAgICAgY2hpbGRyZW46IF9yZWFjdC5Qcm9wVHlwZXMuZWxlbWVudC5pc1JlcXVpcmVkXG4gICAgfTtcbiAgICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IHtzdG9yZTogX3N0b3JlU2hhcGUyW1wiZGVmYXVsdFwiXS5pc1JlcXVpcmVkfTtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiYWJcIiwgW1wiMzBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIgb25lQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihjb3B5RmllbGRzRnJvbSkge1xuICAgICAgdmFyIEtsYXNzID0gdGhpcztcbiAgICAgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICAgICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgY29weUZpZWxkc0Zyb20pO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEtsYXNzKGNvcHlGaWVsZHNGcm9tKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciB0d29Bcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMikge1xuICAgICAgdmFyIEtsYXNzID0gdGhpcztcbiAgICAgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICAgICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIsIGEzKSB7XG4gICAgICB2YXIgS2xhc3MgPSB0aGlzO1xuICAgICAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgICAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBmb3VyQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIsIGEzLCBhNCkge1xuICAgICAgdmFyIEtsYXNzID0gdGhpcztcbiAgICAgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICAgICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMywgYTQpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMsIGE0KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBmaXZlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgICAgIHZhciBLbGFzcyA9IHRoaXM7XG4gICAgICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgIHZhciBLbGFzcyA9IHRoaXM7XG4gICAgICAhKGluc3RhbmNlIGluc3RhbmNlb2YgS2xhc3MpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuICAgICAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGggPCBLbGFzcy5wb29sU2l6ZSkge1xuICAgICAgICBLbGFzcy5pbnN0YW5jZVBvb2wucHVzaChpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgREVGQVVMVF9QT09MX1NJWkUgPSAxMDtcbiAgICB2YXIgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcbiAgICB2YXIgYWRkUG9vbGluZ1RvID0gZnVuY3Rpb24oQ29weUNvbnN0cnVjdG9yLCBwb29sZXIpIHtcbiAgICAgIHZhciBOZXdLbGFzcyA9IENvcHlDb25zdHJ1Y3RvcjtcbiAgICAgIE5ld0tsYXNzLmluc3RhbmNlUG9vbCA9IFtdO1xuICAgICAgTmV3S2xhc3MuZ2V0UG9vbGVkID0gcG9vbGVyIHx8IERFRkFVTFRfUE9PTEVSO1xuICAgICAgaWYgKCFOZXdLbGFzcy5wb29sU2l6ZSkge1xuICAgICAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuICAgICAgfVxuICAgICAgTmV3S2xhc3MucmVsZWFzZSA9IHN0YW5kYXJkUmVsZWFzZXI7XG4gICAgICByZXR1cm4gTmV3S2xhc3M7XG4gICAgfTtcbiAgICB2YXIgUG9vbGVkQ2xhc3MgPSB7XG4gICAgICBhZGRQb29saW5nVG86IGFkZFBvb2xpbmdUbyxcbiAgICAgIG9uZUFyZ3VtZW50UG9vbGVyOiBvbmVBcmd1bWVudFBvb2xlcixcbiAgICAgIHR3b0FyZ3VtZW50UG9vbGVyOiB0d29Bcmd1bWVudFBvb2xlcixcbiAgICAgIHRocmVlQXJndW1lbnRQb29sZXI6IHRocmVlQXJndW1lbnRQb29sZXIsXG4gICAgICBmb3VyQXJndW1lbnRQb29sZXI6IGZvdXJBcmd1bWVudFBvb2xlcixcbiAgICAgIGZpdmVBcmd1bWVudFBvb2xlcjogZml2ZUFyZ3VtZW50UG9vbGVyXG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFBvb2xlZENsYXNzO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJhY1wiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICAgIHZhciBlc2NhcGVSZWdleCA9IC9bPTpdL2c7XG4gICAgdmFyIGVzY2FwZXJMb29rdXAgPSB7XG4gICAgICAnPSc6ICc9MCcsXG4gICAgICAnOic6ICc9MidcbiAgICB9O1xuICAgIHZhciBlc2NhcGVkU3RyaW5nID0gKCcnICsga2V5KS5yZXBsYWNlKGVzY2FwZVJlZ2V4LCBmdW5jdGlvbihtYXRjaCkge1xuICAgICAgcmV0dXJuIGVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICAgIH0pO1xuICAgIHJldHVybiAnJCcgKyBlc2NhcGVkU3RyaW5nO1xuICB9XG4gIGZ1bmN0aW9uIHVuZXNjYXBlKGtleSkge1xuICAgIHZhciB1bmVzY2FwZVJlZ2V4ID0gLyg9MHw9MikvZztcbiAgICB2YXIgdW5lc2NhcGVyTG9va3VwID0ge1xuICAgICAgJz0wJzogJz0nLFxuICAgICAgJz0yJzogJzonXG4gICAgfTtcbiAgICB2YXIga2V5U3Vic3RyaW5nID0ga2V5WzBdID09PSAnLicgJiYga2V5WzFdID09PSAnJCcgPyBrZXkuc3Vic3RyaW5nKDIpIDoga2V5LnN1YnN0cmluZygxKTtcbiAgICByZXR1cm4gKCcnICsga2V5U3Vic3RyaW5nKS5yZXBsYWNlKHVuZXNjYXBlUmVnZXgsIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICByZXR1cm4gdW5lc2NhcGVyTG9va3VwW21hdGNoXTtcbiAgICB9KTtcbiAgfVxuICB2YXIgS2V5RXNjYXBlVXRpbHMgPSB7XG4gICAgZXNjYXBlOiBlc2NhcGUsXG4gICAgdW5lc2NhcGU6IHVuZXNjYXBlXG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gS2V5RXNjYXBlVXRpbHM7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiYWRcIiwgW1wiYWVcIiwgXCJhZlwiLCBcImIwXCIsIFwiMzBcIiwgXCJhY1wiLCBcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFJlYWN0Q3VycmVudE93bmVyID0gJF9fcmVxdWlyZSgnYWUnKTtcbiAgICB2YXIgUmVhY3RFbGVtZW50ID0gJF9fcmVxdWlyZSgnYWYnKTtcbiAgICB2YXIgZ2V0SXRlcmF0b3JGbiA9ICRfX3JlcXVpcmUoJ2IwJyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIEtleUVzY2FwZVV0aWxzID0gJF9fcmVxdWlyZSgnYWMnKTtcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgdmFyIFNFUEFSQVRPUiA9ICcuJztcbiAgICB2YXIgU1VCU0VQQVJBVE9SID0gJzonO1xuICAgIHZhciBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50S2V5KGNvbXBvbmVudCwgaW5kZXgpIHtcbiAgICAgIGlmIChjb21wb25lbnQgJiYgdHlwZW9mIGNvbXBvbmVudCA9PT0gJ29iamVjdCcgJiYgY29tcG9uZW50LmtleSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiBLZXlFc2NhcGVVdGlscy5lc2NhcGUoY29tcG9uZW50LmtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgbmFtZVNvRmFyLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiBjaGlsZHJlbjtcbiAgICAgIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGNoaWxkcmVuID09PSBudWxsIHx8IHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdudW1iZXInIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpIHtcbiAgICAgICAgY2FsbGJhY2sodHJhdmVyc2VDb250ZXh0LCBjaGlsZHJlbiwgbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiArIGdldENvbXBvbmVudEtleShjaGlsZHJlbiwgMCkgOiBuYW1lU29GYXIpO1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZDtcbiAgICAgIHZhciBuZXh0TmFtZTtcbiAgICAgIHZhciBzdWJ0cmVlQ291bnQgPSAwO1xuICAgICAgdmFyIG5leHROYW1lUHJlZml4ID0gbmFtZVNvRmFyID09PSAnJyA/IFNFUEFSQVRPUiA6IG5hbWVTb0ZhciArIFNVQlNFUEFSQVRPUjtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkLCBpKTtcbiAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwoY2hpbGRyZW4pO1xuICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBjaGlsZHJlbi5lbnRyaWVzKSB7XG4gICAgICAgICAgICB2YXIgaWkgPSAwO1xuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICBjaGlsZCA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGlpKyspO1xuICAgICAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZGlkV2FybkFib3V0TWFwcywgJ1VzaW5nIE1hcHMgYXMgY2hpbGRyZW4gaXMgbm90IHlldCBmdWxseSBzdXBwb3J0ZWQuIEl0IGlzIGFuICcgKyAnZXhwZXJpbWVudGFsIGZlYXR1cmUgdGhhdCBtaWdodCBiZSByZW1vdmVkLiBDb252ZXJ0IGl0IHRvIGEgJyArICdzZXF1ZW5jZSAvIGl0ZXJhYmxlIG9mIGtleWVkIFJlYWN0RWxlbWVudHMgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgZGlkV2FybkFib3V0TWFwcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIGNoaWxkID0gZW50cnlbMV07XG4gICAgICAgICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIEtleUVzY2FwZVV0aWxzLmVzY2FwZShlbnRyeVswXSkgKyBTVUJTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIDApO1xuICAgICAgICAgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgdmFyIGFkZGVuZHVtID0gJyc7XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGFkZGVuZHVtID0gJyBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5ICcgKyAnaW5zdGVhZCBvciB3cmFwIHRoZSBvYmplY3QgdXNpbmcgY3JlYXRlRnJhZ21lbnQob2JqZWN0KSBmcm9tIHRoZSAnICsgJ1JlYWN0IGFkZC1vbnMuJztcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5faXNSZWFjdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgYWRkZW5kdW0gPSAnIEl0IGxvb2tzIGxpa2UgeW91XFwncmUgdXNpbmcgYW4gZWxlbWVudCBjcmVhdGVkIGJ5IGEgZGlmZmVyZW50ICcgKyAndmVyc2lvbiBvZiBSZWFjdC4gTWFrZSBzdXJlIHRvIHVzZSBvbmx5IG9uZSBjb3B5IG9mIFJlYWN0Lic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICAgICAgICB2YXIgbmFtZSA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpO1xuICAgICAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgICAgIGFkZGVuZHVtICs9ICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY2hpbGRyZW5TdHJpbmcgPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgICAgICAgICFmYWxzZSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6ICVzKS4lcycsIGNoaWxkcmVuU3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJyA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oJywgJykgKyAnfScgOiBjaGlsZHJlblN0cmluZywgYWRkZW5kdW0pIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN1YnRyZWVDb3VudDtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICAgICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sICcnLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB0cmF2ZXJzZUFsbENoaWxkcmVuO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJiMVwiLCBbXCJhYlwiLCBcImFmXCIsIFwiNDhcIiwgXCJhZFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFBvb2xlZENsYXNzID0gJF9fcmVxdWlyZSgnYWInKTtcbiAgdmFyIFJlYWN0RWxlbWVudCA9ICRfX3JlcXVpcmUoJ2FmJyk7XG4gIHZhciBlbXB0eUZ1bmN0aW9uID0gJF9fcmVxdWlyZSgnNDgnKTtcbiAgdmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSAkX19yZXF1aXJlKCdhZCcpO1xuICB2YXIgdHdvQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlcjtcbiAgdmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLmZvdXJBcmd1bWVudFBvb2xlcjtcbiAgdmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1xcLysvZztcbiAgZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgICByZXR1cm4gKCcnICsgdGV4dCkucmVwbGFjZSh1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCwgJyQmLycpO1xuICB9XG4gIGZ1bmN0aW9uIEZvckVhY2hCb29rS2VlcGluZyhmb3JFYWNoRnVuY3Rpb24sIGZvckVhY2hDb250ZXh0KSB7XG4gICAgdGhpcy5mdW5jID0gZm9yRWFjaEZ1bmN0aW9uO1xuICAgIHRoaXMuY29udGV4dCA9IGZvckVhY2hDb250ZXh0O1xuICAgIHRoaXMuY291bnQgPSAwO1xuICB9XG4gIEZvckVhY2hCb29rS2VlcGluZy5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZnVuYyA9IG51bGw7XG4gICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgfTtcbiAgUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZvckVhY2hCb29rS2VlcGluZywgdHdvQXJndW1lbnRQb29sZXIpO1xuICBmdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGQoYm9va0tlZXBpbmcsIGNoaWxkLCBuYW1lKSB7XG4gICAgdmFyIGZ1bmMgPSBib29rS2VlcGluZy5mdW5jO1xuICAgIHZhciBjb250ZXh0ID0gYm9va0tlZXBpbmcuY29udGV4dDtcbiAgICBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGJvb2tLZWVwaW5nLmNvdW50KyspO1xuICB9XG4gIGZ1bmN0aW9uIGZvckVhY2hDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG4gICAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IEZvckVhY2hCb29rS2VlcGluZy5nZXRQb29sZWQoZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KTtcbiAgICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGQsIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgRm9yRWFjaEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbiAgfVxuICBmdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsIGtleVByZWZpeCwgbWFwRnVuY3Rpb24sIG1hcENvbnRleHQpIHtcbiAgICB0aGlzLnJlc3VsdCA9IG1hcFJlc3VsdDtcbiAgICB0aGlzLmtleVByZWZpeCA9IGtleVByZWZpeDtcbiAgICB0aGlzLmZ1bmMgPSBtYXBGdW5jdGlvbjtcbiAgICB0aGlzLmNvbnRleHQgPSBtYXBDb250ZXh0O1xuICAgIHRoaXMuY291bnQgPSAwO1xuICB9XG4gIE1hcEJvb2tLZWVwaW5nLnByb3RvdHlwZS5kZXN0cnVjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXN1bHQgPSBudWxsO1xuICAgIHRoaXMua2V5UHJlZml4ID0gbnVsbDtcbiAgICB0aGlzLmZ1bmMgPSBudWxsO1xuICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5jb3VudCA9IDA7XG4gIH07XG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhNYXBCb29rS2VlcGluZywgZm91ckFyZ3VtZW50UG9vbGVyKTtcbiAgZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChib29rS2VlcGluZywgY2hpbGQsIGNoaWxkS2V5KSB7XG4gICAgdmFyIHJlc3VsdCA9IGJvb2tLZWVwaW5nLnJlc3VsdDtcbiAgICB2YXIga2V5UHJlZml4ID0gYm9va0tlZXBpbmcua2V5UHJlZml4O1xuICAgIHZhciBmdW5jID0gYm9va0tlZXBpbmcuZnVuYztcbiAgICB2YXIgY29udGV4dCA9IGJvb2tLZWVwaW5nLmNvbnRleHQ7XG4gICAgdmFyIG1hcHBlZENoaWxkID0gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtYXBwZWRDaGlsZCkpIHtcbiAgICAgIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwobWFwcGVkQ2hpbGQsIHJlc3VsdCwgY2hpbGRLZXksIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gICAgfSBlbHNlIGlmIChtYXBwZWRDaGlsZCAhPSBudWxsKSB7XG4gICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG1hcHBlZENoaWxkKSkge1xuICAgICAgICBtYXBwZWRDaGlsZCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VLZXkobWFwcGVkQ2hpbGQsIGtleVByZWZpeCArIChtYXBwZWRDaGlsZC5rZXkgJiYgKCFjaGlsZCB8fCBjaGlsZC5rZXkgIT09IG1hcHBlZENoaWxkLmtleSkgPyBlc2NhcGVVc2VyUHJvdmlkZWRLZXkobWFwcGVkQ2hpbGQua2V5KSArICcvJyA6ICcnKSArIGNoaWxkS2V5KTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKG1hcHBlZENoaWxkKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgYXJyYXksIHByZWZpeCwgZnVuYywgY29udGV4dCkge1xuICAgIHZhciBlc2NhcGVkUHJlZml4ID0gJyc7XG4gICAgaWYgKHByZWZpeCAhPSBudWxsKSB7XG4gICAgICBlc2NhcGVkUHJlZml4ID0gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHByZWZpeCkgKyAnLyc7XG4gICAgfVxuICAgIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBNYXBCb29rS2VlcGluZy5nZXRQb29sZWQoYXJyYXksIGVzY2FwZWRQcmVmaXgsIGZ1bmMsIGNvbnRleHQpO1xuICAgIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgTWFwQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xuICB9XG4gIGZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZnVuYywgY29udGV4dCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBmdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gY291bnRDaGlsZHJlbihjaGlsZHJlbiwgY29udGV4dCkge1xuICAgIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSwgbnVsbCk7XG4gIH1cbiAgZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKGNoaWxkcmVuLCByZXN1bHQsIG51bGwsIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB2YXIgUmVhY3RDaGlsZHJlbiA9IHtcbiAgICBmb3JFYWNoOiBmb3JFYWNoQ2hpbGRyZW4sXG4gICAgbWFwOiBtYXBDaGlsZHJlbixcbiAgICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsOiBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsLFxuICAgIGNvdW50OiBjb3VudENoaWxkcmVuLFxuICAgIHRvQXJyYXk6IHRvQXJyYXlcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkcmVuO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImIyXCIsIFtcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgcHJvY2Vzc2luZ0NoaWxkQ29udGV4dCA9IGZhbHNlO1xuICAgICAgdmFyIHdhcm5JbnZhbGlkU2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIXByb2Nlc3NpbmdDaGlsZENvbnRleHQsICdzZXRTdGF0ZSguLi4pOiBDYW5ub3QgY2FsbCBzZXRTdGF0ZSgpIGluc2lkZSBnZXRDaGlsZENvbnRleHQoKScpIDogdm9pZCAwO1xuICAgICAgfTtcbiAgICB9XG4gICAgdmFyIFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0RldlRvb2wgPSB7XG4gICAgICBvbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHByb2Nlc3NpbmdDaGlsZENvbnRleHQgPSB0cnVlO1xuICAgICAgfSxcbiAgICAgIG9uRW5kUHJvY2Vzc2luZ0NoaWxkQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHByb2Nlc3NpbmdDaGlsZENvbnRleHQgPSBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBvblNldFN0YXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgd2FybkludmFsaWRTZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJiM1wiLCBbXCJiMlwiLCBcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0RldlRvb2wgPSAkX19yZXF1aXJlKCdiMicpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICB2YXIgZXZlbnRIYW5kbGVycyA9IFtdO1xuICAgIHZhciBoYW5kbGVyRG9lc1Rocm93Rm9yRXZlbnQgPSB7fTtcbiAgICBmdW5jdGlvbiBlbWl0RXZlbnQoaGFuZGxlckZ1bmN0aW9uTmFtZSwgYXJnMSwgYXJnMiwgYXJnMywgYXJnNCwgYXJnNSkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZXZlbnRIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJbaGFuZGxlckZ1bmN0aW9uTmFtZV0pIHtcbiAgICAgICAgICAgICAgaGFuZGxlcltoYW5kbGVyRnVuY3Rpb25OYW1lXShhcmcxLCBhcmcyLCBhcmczLCBhcmc0LCBhcmc1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaGFuZGxlckRvZXNUaHJvd0ZvckV2ZW50W2hhbmRsZXJGdW5jdGlvbk5hbWVdLCAnZXhjZXB0aW9uIHRocm93biBieSBkZXZ0b29sIHdoaWxlIGhhbmRsaW5nICVzOiAlcycsIGhhbmRsZXJGdW5jdGlvbk5hbWUsIGUubWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBoYW5kbGVyRG9lc1Rocm93Rm9yRXZlbnRbaGFuZGxlckZ1bmN0aW9uTmFtZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBSZWFjdERlYnVnVG9vbCA9IHtcbiAgICAgIGFkZERldnRvb2w6IGZ1bmN0aW9uKGRldnRvb2wpIHtcbiAgICAgICAgZXZlbnRIYW5kbGVycy5wdXNoKGRldnRvb2wpO1xuICAgICAgfSxcbiAgICAgIHJlbW92ZURldnRvb2w6IGZ1bmN0aW9uKGRldnRvb2wpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlcnNbaV0gPT09IGRldnRvb2wpIHtcbiAgICAgICAgICAgIGV2ZW50SGFuZGxlcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uQmVnaW5Qcm9jZXNzaW5nQ2hpbGRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgZW1pdEV2ZW50KCdvbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dCcpO1xuICAgICAgfSxcbiAgICAgIG9uRW5kUHJvY2Vzc2luZ0NoaWxkQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGVtaXRFdmVudCgnb25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0Jyk7XG4gICAgICB9LFxuICAgICAgb25TZXRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGVtaXRFdmVudCgnb25TZXRTdGF0ZScpO1xuICAgICAgfSxcbiAgICAgIG9uTW91bnRSb290Q29tcG9uZW50OiBmdW5jdGlvbihpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgIGVtaXRFdmVudCgnb25Nb3VudFJvb3RDb21wb25lbnQnLCBpbnRlcm5hbEluc3RhbmNlKTtcbiAgICAgIH0sXG4gICAgICBvbk1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgIGVtaXRFdmVudCgnb25Nb3VudENvbXBvbmVudCcsIGludGVybmFsSW5zdGFuY2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbihpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgIGVtaXRFdmVudCgnb25VcGRhdGVDb21wb25lbnQnLCBpbnRlcm5hbEluc3RhbmNlKTtcbiAgICAgIH0sXG4gICAgICBvblVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgICAgZW1pdEV2ZW50KCdvblVubW91bnRDb21wb25lbnQnLCBpbnRlcm5hbEluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFJlYWN0RGVidWdUb29sLmFkZERldnRvb2woUmVhY3RJbnZhbGlkU2V0U3RhdGVXYXJuaW5nRGV2VG9vbCk7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlYnVnVG9vbDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiYjRcIiwgW1wiYjNcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBSZWFjdERlYnVnVG9vbCA9ICRfX3JlcXVpcmUoJ2IzJyk7XG4gIG1vZHVsZS5leHBvcnRzID0ge2RlYnVnVG9vbDogUmVhY3REZWJ1Z1Rvb2x9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImI1XCIsIFtcImI2XCIsIFwiYjRcIiwgXCJiN1wiLCBcIjk0XCIsIFwiMzBcIiwgXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9ICRfX3JlcXVpcmUoJ2I2Jyk7XG4gICAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gJF9fcmVxdWlyZSgnYjQnKTtcbiAgICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSAkX19yZXF1aXJlKCdiNycpO1xuICAgIHZhciBlbXB0eU9iamVjdCA9ICRfX3JlcXVpcmUoJzk0Jyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIGZ1bmN0aW9uIFJlYWN0Q29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gICAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gICAgICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xuICAgIH1cbiAgICBSZWFjdENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuICAgIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAgICEodHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHBhcnRpYWxTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyB8fCBwYXJ0aWFsU3RhdGUgPT0gbnVsbCkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnc2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSAnICsgJ2Z1bmN0aW9uIHdoaWNoIHJldHVybnMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRTdGF0ZSgpO1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwYXJ0aWFsU3RhdGUgIT0gbnVsbCwgJ3NldFN0YXRlKC4uLik6IFlvdSBwYXNzZWQgYW4gdW5kZWZpbmVkIG9yIG51bGwgc3RhdGUgb2JqZWN0OyAnICsgJ2luc3RlYWQsIHVzZSBmb3JjZVVwZGF0ZSgpLicpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUpO1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2ssICdzZXRTdGF0ZScpO1xuICAgICAgfVxuICAgIH07XG4gICAgUmVhY3RDb21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyk7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjaywgJ2ZvcmNlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGRlcHJlY2F0ZWRBUElzID0ge1xuICAgICAgICBpc01vdW50ZWQ6IFsnaXNNb3VudGVkJywgJ0luc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCBzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluICcgKyAnY29tcG9uZW50V2lsbFVubW91bnQgdG8gcHJldmVudCBtZW1vcnkgbGVha3MuJ10sXG4gICAgICAgIHJlcGxhY2VTdGF0ZTogWydyZXBsYWNlU3RhdGUnLCAnUmVmYWN0b3IgeW91ciBjb2RlIHRvIHVzZSBzZXRTdGF0ZSBpbnN0ZWFkIChzZWUgJyArICdodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzMyMzYpLiddXG4gICAgICB9O1xuICAgICAgdmFyIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyA9IGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZm8pIHtcbiAgICAgICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kTmFtZSwge2dldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKSBpcyBkZXByZWNhdGVkIGluIHBsYWluIEphdmFTY3JpcHQgUmVhY3QgY2xhc3Nlcy4gJXMnLCBpbmZvWzBdLCBpbmZvWzFdKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH19KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGZvciAodmFyIGZuTmFtZSBpbiBkZXByZWNhdGVkQVBJcykge1xuICAgICAgICBpZiAoZGVwcmVjYXRlZEFQSXMuaGFzT3duUHJvcGVydHkoZm5OYW1lKSkge1xuICAgICAgICAgIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyhmbk5hbWUsIGRlcHJlY2F0ZWRBUElzW2ZuTmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnQ7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImI2XCIsIFtcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIGZ1bmN0aW9uIHdhcm5URFoocHVibGljSW5zdGFuY2UsIGNhbGxlck5hbWUpIHtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuICcgKyAnVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICsgJ1RoaXMgaXMgYSBuby1vcC4gUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNhbGxlck5hbWUsIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yICYmIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICcnKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0ge1xuICAgICAgaXNNb3VudGVkOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LFxuICAgICAgZW5xdWV1ZUNhbGxiYWNrOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2spIHt9LFxuICAgICAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSkge1xuICAgICAgICB3YXJuVERaKHB1YmxpY0luc3RhbmNlLCAnZm9yY2VVcGRhdGUnKTtcbiAgICAgIH0sXG4gICAgICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgY29tcGxldGVTdGF0ZSkge1xuICAgICAgICB3YXJuVERaKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gICAgICB9LFxuICAgICAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgICAgIHdhcm5URFoocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICAgICAgfVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiYjhcIiwgW1wiNlwiLCBcImI1XCIsIFwiYWZcIiwgXCJiOVwiLCBcImJhXCIsIFwiYjZcIiwgXCI5NFwiLCBcIjMwXCIsIFwiNThcIiwgXCJlXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgX2Fzc2lnbiA9ICRfX3JlcXVpcmUoJzYnKTtcbiAgICB2YXIgUmVhY3RDb21wb25lbnQgPSAkX19yZXF1aXJlKCdiNScpO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSAkX19yZXF1aXJlKCdhZicpO1xuICAgIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gJF9fcmVxdWlyZSgnYjknKTtcbiAgICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSAkX19yZXF1aXJlKCdiYScpO1xuICAgIHZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9ICRfX3JlcXVpcmUoJ2I2Jyk7XG4gICAgdmFyIGVtcHR5T2JqZWN0ID0gJF9fcmVxdWlyZSgnOTQnKTtcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIga2V5TWlycm9yID0gJF9fcmVxdWlyZSgnNTgnKTtcbiAgICB2YXIga2V5T2YgPSAkX19yZXF1aXJlKCdlJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBNSVhJTlNfS0VZID0ga2V5T2Yoe21peGluczogbnVsbH0pO1xuICAgIHZhciBTcGVjUG9saWN5ID0ga2V5TWlycm9yKHtcbiAgICAgIERFRklORV9PTkNFOiBudWxsLFxuICAgICAgREVGSU5FX01BTlk6IG51bGwsXG4gICAgICBPVkVSUklERV9CQVNFOiBudWxsLFxuICAgICAgREVGSU5FX01BTllfTUVSR0VEOiBudWxsXG4gICAgfSk7XG4gICAgdmFyIGluamVjdGVkTWl4aW5zID0gW107XG4gICAgdmFyIFJlYWN0Q2xhc3NJbnRlcmZhY2UgPSB7XG4gICAgICBtaXhpbnM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgICBzdGF0aWNzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgICAgcHJvcFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgICAgY29udGV4dFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgICBnZXREZWZhdWx0UHJvcHM6IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcbiAgICAgIGdldENoaWxkQ29udGV4dDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG4gICAgICByZW5kZXI6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG4gICAgICBjb21wb25lbnRXaWxsTW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgICBjb21wb25lbnREaWRNb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcbiAgICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgICBzaG91bGRDb21wb25lbnRVcGRhdGU6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG4gICAgICBjb21wb25lbnRXaWxsVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgICAgY29tcG9uZW50V2lsbFVubW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgICB1cGRhdGVDb21wb25lbnQ6IFNwZWNQb2xpY3kuT1ZFUlJJREVfQkFTRVxuICAgIH07XG4gICAgdmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcbiAgICAgIGRpc3BsYXlOYW1lOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZGlzcGxheU5hbWUpIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIH0sXG4gICAgICBtaXhpbnM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBtaXhpbnMpIHtcbiAgICAgICAgaWYgKG1peGlucykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgbWl4aW5zW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjaGlsZENvbnRleHRUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzKSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBjaGlsZENvbnRleHRUeXBlcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID0gX2Fzc2lnbih7fSwgQ29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMsIGNoaWxkQ29udGV4dFR5cGVzKTtcbiAgICAgIH0sXG4gICAgICBjb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMpIHtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIGNvbnRleHRUeXBlcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMgPSBfYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMsIGNvbnRleHRUeXBlcyk7XG4gICAgICB9LFxuICAgICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMgPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMsIGdldERlZmF1bHRQcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvcFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBwcm9wVHlwZXMsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCk7XG4gICAgICAgIH1cbiAgICAgICAgQ29uc3RydWN0b3IucHJvcFR5cGVzID0gX2Fzc2lnbih7fSwgQ29uc3RydWN0b3IucHJvcFR5cGVzLCBwcm9wVHlwZXMpO1xuICAgICAgfSxcbiAgICAgIHN0YXRpY3M6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgICAgIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKTtcbiAgICAgIH0sXG4gICAgICBhdXRvYmluZDogZnVuY3Rpb24oKSB7fVxuICAgIH07XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCB0eXBlRGVmLCBsb2NhdGlvbikge1xuICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gdHlwZURlZikge1xuICAgICAgICBpZiAodHlwZURlZi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgKyAnUmVhY3QuUHJvcFR5cGVzLicsIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCBwcm9wTmFtZSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKSB7XG4gICAgICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSkgPyBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdIDogbnVsbDtcbiAgICAgIGlmIChSZWFjdENsYXNzTWl4aW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgIShzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0UpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBvdmVycmlkZSAnICsgJ2Alc2AgZnJvbSB5b3VyIGNsYXNzIHNwZWNpZmljYXRpb24uIEVuc3VyZSB0aGF0IHlvdXIgbWV0aG9kIG5hbWVzICcgKyAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgICEoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSB8fCBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICsgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSAnICsgJ3RvIGEgbWl4aW4uJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3BlYykge1xuICAgICAgaWYgKCFzcGVjKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICEodHlwZW9mIHNwZWMgIT09ICdmdW5jdGlvbicpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdVxcJ3JlIGF0dGVtcHRpbmcgdG8gJyArICd1c2UgYSBjb21wb25lbnQgY2xhc3Mgb3IgZnVuY3Rpb24gYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSAnICsgJ3JlZ3VsYXIgb2JqZWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICEhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHNwZWMpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdVxcJ3JlIGF0dGVtcHRpbmcgdG8gJyArICd1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgcHJvdG8gPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICB2YXIgYXV0b0JpbmRQYWlycyA9IHByb3RvLl9fcmVhY3RBdXRvQmluZFBhaXJzO1xuICAgICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICAgICAgUkVTRVJWRURfU1BFQ19LRVlTLm1peGlucyhDb25zdHJ1Y3Rvciwgc3BlYy5taXhpbnMpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbmFtZSBpbiBzcGVjKSB7XG4gICAgICAgIGlmICghc3BlYy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lID09PSBNSVhJTlNfS0VZKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb3BlcnR5ID0gc3BlY1tuYW1lXTtcbiAgICAgICAgdmFyIGlzQWxyZWFkeURlZmluZWQgPSBwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKTtcbiAgICAgICAgaWYgKFJFU0VSVkVEX1NQRUNfS0VZUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIFJFU0VSVkVEX1NQRUNfS0VZU1tuYW1lXShDb25zdHJ1Y3RvciwgcHJvcGVydHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpc1JlYWN0Q2xhc3NNZXRob2QgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nO1xuICAgICAgICAgIHZhciBzaG91bGRBdXRvQmluZCA9IGlzRnVuY3Rpb24gJiYgIWlzUmVhY3RDbGFzc01ldGhvZCAmJiAhaXNBbHJlYWR5RGVmaW5lZCAmJiBzcGVjLmF1dG9iaW5kICE9PSBmYWxzZTtcbiAgICAgICAgICBpZiAoc2hvdWxkQXV0b0JpbmQpIHtcbiAgICAgICAgICAgIGF1dG9CaW5kUGFpcnMucHVzaChuYW1lLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaXNBbHJlYWR5RGVmaW5lZCkge1xuICAgICAgICAgICAgICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV07XG4gICAgICAgICAgICAgICEoaXNSZWFjdENsYXNzTWV0aG9kICYmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCB8fCBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZKSkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogVW5leHBlY3RlZCBzcGVjIHBvbGljeSAlcyBmb3Iga2V5ICVzICcgKyAnd2hlbiBtaXhpbmcgaW4gY29tcG9uZW50IHNwZWNzLicsIHNwZWNQb2xpY3ksIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgaWYgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEKSB7XG4gICAgICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkpIHtcbiAgICAgICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicgJiYgc3BlYy5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgcHJvdG9bbmFtZV0uZGlzcGxheU5hbWUgPSBzcGVjLmRpc3BsYXlOYW1lICsgJ18nICsgbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHN0YXRpY3MpIHtcbiAgICAgIGlmICghc3RhdGljcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHN0YXRpY3MpIHtcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICAgICAgaWYgKCFzdGF0aWNzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzUmVzZXJ2ZWQgPSBuYW1lIGluIFJFU0VSVkVEX1NQRUNfS0VZUztcbiAgICAgICAgISFpc1Jlc2VydmVkID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYSByZXNlcnZlZCAnICsgJ3Byb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCAnICsgJ2FzIGFuIGluc3RhbmNlIHByb3BlcnR5IGluc3RlYWQ7IGl0IHdpbGwgc3RpbGwgYmUgYWNjZXNzaWJsZSBvbiB0aGUgJyArICdjb25zdHJ1Y3Rvci4nLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHZhciBpc0luaGVyaXRlZCA9IG5hbWUgaW4gQ29uc3RydWN0b3I7XG4gICAgICAgICEhaXNJbmhlcml0ZWQgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICsgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlICcgKyAnZHVlIHRvIGEgbWl4aW4uJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBDb25zdHJ1Y3RvcltuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKG9uZSwgdHdvKSB7XG4gICAgICAhKG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0d28pIHtcbiAgICAgICAgaWYgKHR3by5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgIShvbmVba2V5XSA9PT0gdW5kZWZpbmVkKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6ICcgKyAnVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgJyArICdtYXkgYmUgZHVlIHRvIGEgbWl4aW47IGluIHBhcnRpY3VsYXIsIHRoaXMgbWF5IGJlIGNhdXNlZCBieSB0d28gJyArICdnZXRJbml0aWFsU3RhdGUoKSBvciBnZXREZWZhdWx0UHJvcHMoKSBtZXRob2RzIHJldHVybmluZyBvYmplY3RzICcgKyAnd2l0aCBjbGFzaGluZyBrZXlzLicsIGtleSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIG9uZVtrZXldID0gdHdvW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvbmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkUmVzdWx0KCkge1xuICAgICAgICB2YXIgYSA9IG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoYSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGMgPSB7fTtcbiAgICAgICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBhKTtcbiAgICAgICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBiKTtcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICAgIG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICAgICAgdmFyIGJvdW5kTWV0aG9kID0gbWV0aG9kLmJpbmQoY29tcG9uZW50KTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gbnVsbDtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgICAgIHZhciBfYmluZCA9IGJvdW5kTWV0aG9kLmJpbmQ7XG4gICAgICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbihuZXdUaGlzKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksXG4gICAgICAgICAgICAgIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5ld1RoaXMgIT09IGNvbXBvbmVudCAmJiBuZXdUaGlzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgKyAnY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJXMnLCBjb21wb25lbnROYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArICdSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSAnICsgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzJywgY29tcG9uZW50TmFtZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4gYm91bmRNZXRob2Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcbiAgICAgICAgICByZXR1cm4gcmVib3VuZE1ldGhvZDtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kcyhjb21wb25lbnQpIHtcbiAgICAgIHZhciBwYWlycyA9IGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRQYWlycztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgdmFyIGF1dG9CaW5kS2V5ID0gcGFpcnNbaV07XG4gICAgICAgIHZhciBtZXRob2QgPSBwYWlyc1tpICsgMV07XG4gICAgICAgIGNvbXBvbmVudFthdXRvQmluZEtleV0gPSBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgUmVhY3RDbGFzc01peGluID0ge1xuICAgICAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbihuZXdTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUodGhpcywgbmV3U3RhdGUpO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrLCAncmVwbGFjZVN0YXRlJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpc01vdW50ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVyLmlzTW91bnRlZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBSZWFjdENsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24oKSB7fTtcbiAgICBfYXNzaWduKFJlYWN0Q2xhc3NDb21wb25lbnQucHJvdG90eXBlLCBSZWFjdENvbXBvbmVudC5wcm90b3R5cGUsIFJlYWN0Q2xhc3NNaXhpbik7XG4gICAgdmFyIFJlYWN0Q2xhc3MgPSB7XG4gICAgICBjcmVhdGVDbGFzczogZnVuY3Rpb24oc3BlYykge1xuICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbihwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0aGlzIGluc3RhbmNlb2YgQ29uc3RydWN0b3IsICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICsgJ0pTWCBpbnN0ZWFkLiBTZWU6IGh0dHBzOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeScpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5fX3JlYWN0QXV0b0JpbmRQYWlycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGJpbmRBdXRvQmluZE1ldGhvZHModGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAgICAgICAgIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHRoaXMuZ2V0SW5pdGlhbFN0YXRlID8gdGhpcy5nZXRJbml0aWFsU3RhdGUoKSA6IG51bGw7XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLmdldEluaXRpYWxTdGF0ZS5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgaW5pdGlhbFN0YXRlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgISh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5nZXRJbml0aWFsU3RhdGUoKTogbXVzdCByZXR1cm4gYW4gb2JqZWN0IG9yIG51bGwnLCBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICAgICAgfTtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gbmV3IFJlYWN0Q2xhc3NDb21wb25lbnQoKTtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5fX3JlYWN0QXV0b0JpbmRQYWlycyA9IFtdO1xuICAgICAgICBpbmplY3RlZE1peGlucy5mb3JFYWNoKG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCwgQ29uc3RydWN0b3IpKTtcbiAgICAgICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUpIHtcbiAgICAgICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5yZW5kZXIgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnY3JlYXRlQ2xhc3MoLi4uKTogQ2xhc3Mgc3BlY2lmaWNhdGlvbiBtdXN0IGltcGxlbWVudCBhIGByZW5kZXJgIG1ldGhvZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRTaG91bGRVcGRhdGUsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLCBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/Jywgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIFJlYWN0Q2xhc3NJbnRlcmZhY2UpIHtcbiAgICAgICAgICBpZiAoIUNvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSkge1xuICAgICAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgICAgfSxcbiAgICAgIGluamVjdGlvbjoge2luamVjdE1peGluOiBmdW5jdGlvbihtaXhpbikge1xuICAgICAgICAgIGluamVjdGVkTWl4aW5zLnB1c2gobWl4aW4pO1xuICAgICAgICB9fVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENsYXNzO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJiYlwiLCBbXCJhZlwiLCBcImJjXCIsIFwiYmRcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgUmVhY3RFbGVtZW50ID0gJF9fcmVxdWlyZSgnYWYnKTtcbiAgICB2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gJF9fcmVxdWlyZSgnYmMnKTtcbiAgICB2YXIgbWFwT2JqZWN0ID0gJF9fcmVxdWlyZSgnYmQnKTtcbiAgICBmdW5jdGlvbiBjcmVhdGVET01GYWN0b3J5KHRhZykge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5KHRhZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkodGFnKTtcbiAgICB9XG4gICAgdmFyIFJlYWN0RE9NRmFjdG9yaWVzID0gbWFwT2JqZWN0KHtcbiAgICAgIGE6ICdhJyxcbiAgICAgIGFiYnI6ICdhYmJyJyxcbiAgICAgIGFkZHJlc3M6ICdhZGRyZXNzJyxcbiAgICAgIGFyZWE6ICdhcmVhJyxcbiAgICAgIGFydGljbGU6ICdhcnRpY2xlJyxcbiAgICAgIGFzaWRlOiAnYXNpZGUnLFxuICAgICAgYXVkaW86ICdhdWRpbycsXG4gICAgICBiOiAnYicsXG4gICAgICBiYXNlOiAnYmFzZScsXG4gICAgICBiZGk6ICdiZGknLFxuICAgICAgYmRvOiAnYmRvJyxcbiAgICAgIGJpZzogJ2JpZycsXG4gICAgICBibG9ja3F1b3RlOiAnYmxvY2txdW90ZScsXG4gICAgICBib2R5OiAnYm9keScsXG4gICAgICBicjogJ2JyJyxcbiAgICAgIGJ1dHRvbjogJ2J1dHRvbicsXG4gICAgICBjYW52YXM6ICdjYW52YXMnLFxuICAgICAgY2FwdGlvbjogJ2NhcHRpb24nLFxuICAgICAgY2l0ZTogJ2NpdGUnLFxuICAgICAgY29kZTogJ2NvZGUnLFxuICAgICAgY29sOiAnY29sJyxcbiAgICAgIGNvbGdyb3VwOiAnY29sZ3JvdXAnLFxuICAgICAgZGF0YTogJ2RhdGEnLFxuICAgICAgZGF0YWxpc3Q6ICdkYXRhbGlzdCcsXG4gICAgICBkZDogJ2RkJyxcbiAgICAgIGRlbDogJ2RlbCcsXG4gICAgICBkZXRhaWxzOiAnZGV0YWlscycsXG4gICAgICBkZm46ICdkZm4nLFxuICAgICAgZGlhbG9nOiAnZGlhbG9nJyxcbiAgICAgIGRpdjogJ2RpdicsXG4gICAgICBkbDogJ2RsJyxcbiAgICAgIGR0OiAnZHQnLFxuICAgICAgZW06ICdlbScsXG4gICAgICBlbWJlZDogJ2VtYmVkJyxcbiAgICAgIGZpZWxkc2V0OiAnZmllbGRzZXQnLFxuICAgICAgZmlnY2FwdGlvbjogJ2ZpZ2NhcHRpb24nLFxuICAgICAgZmlndXJlOiAnZmlndXJlJyxcbiAgICAgIGZvb3RlcjogJ2Zvb3RlcicsXG4gICAgICBmb3JtOiAnZm9ybScsXG4gICAgICBoMTogJ2gxJyxcbiAgICAgIGgyOiAnaDInLFxuICAgICAgaDM6ICdoMycsXG4gICAgICBoNDogJ2g0JyxcbiAgICAgIGg1OiAnaDUnLFxuICAgICAgaDY6ICdoNicsXG4gICAgICBoZWFkOiAnaGVhZCcsXG4gICAgICBoZWFkZXI6ICdoZWFkZXInLFxuICAgICAgaGdyb3VwOiAnaGdyb3VwJyxcbiAgICAgIGhyOiAnaHInLFxuICAgICAgaHRtbDogJ2h0bWwnLFxuICAgICAgaTogJ2knLFxuICAgICAgaWZyYW1lOiAnaWZyYW1lJyxcbiAgICAgIGltZzogJ2ltZycsXG4gICAgICBpbnB1dDogJ2lucHV0JyxcbiAgICAgIGluczogJ2lucycsXG4gICAgICBrYmQ6ICdrYmQnLFxuICAgICAga2V5Z2VuOiAna2V5Z2VuJyxcbiAgICAgIGxhYmVsOiAnbGFiZWwnLFxuICAgICAgbGVnZW5kOiAnbGVnZW5kJyxcbiAgICAgIGxpOiAnbGknLFxuICAgICAgbGluazogJ2xpbmsnLFxuICAgICAgbWFpbjogJ21haW4nLFxuICAgICAgbWFwOiAnbWFwJyxcbiAgICAgIG1hcms6ICdtYXJrJyxcbiAgICAgIG1lbnU6ICdtZW51JyxcbiAgICAgIG1lbnVpdGVtOiAnbWVudWl0ZW0nLFxuICAgICAgbWV0YTogJ21ldGEnLFxuICAgICAgbWV0ZXI6ICdtZXRlcicsXG4gICAgICBuYXY6ICduYXYnLFxuICAgICAgbm9zY3JpcHQ6ICdub3NjcmlwdCcsXG4gICAgICBvYmplY3Q6ICdvYmplY3QnLFxuICAgICAgb2w6ICdvbCcsXG4gICAgICBvcHRncm91cDogJ29wdGdyb3VwJyxcbiAgICAgIG9wdGlvbjogJ29wdGlvbicsXG4gICAgICBvdXRwdXQ6ICdvdXRwdXQnLFxuICAgICAgcDogJ3AnLFxuICAgICAgcGFyYW06ICdwYXJhbScsXG4gICAgICBwaWN0dXJlOiAncGljdHVyZScsXG4gICAgICBwcmU6ICdwcmUnLFxuICAgICAgcHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gICAgICBxOiAncScsXG4gICAgICBycDogJ3JwJyxcbiAgICAgIHJ0OiAncnQnLFxuICAgICAgcnVieTogJ3J1YnknLFxuICAgICAgczogJ3MnLFxuICAgICAgc2FtcDogJ3NhbXAnLFxuICAgICAgc2NyaXB0OiAnc2NyaXB0JyxcbiAgICAgIHNlY3Rpb246ICdzZWN0aW9uJyxcbiAgICAgIHNlbGVjdDogJ3NlbGVjdCcsXG4gICAgICBzbWFsbDogJ3NtYWxsJyxcbiAgICAgIHNvdXJjZTogJ3NvdXJjZScsXG4gICAgICBzcGFuOiAnc3BhbicsXG4gICAgICBzdHJvbmc6ICdzdHJvbmcnLFxuICAgICAgc3R5bGU6ICdzdHlsZScsXG4gICAgICBzdWI6ICdzdWInLFxuICAgICAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICAgICAgc3VwOiAnc3VwJyxcbiAgICAgIHRhYmxlOiAndGFibGUnLFxuICAgICAgdGJvZHk6ICd0Ym9keScsXG4gICAgICB0ZDogJ3RkJyxcbiAgICAgIHRleHRhcmVhOiAndGV4dGFyZWEnLFxuICAgICAgdGZvb3Q6ICd0Zm9vdCcsXG4gICAgICB0aDogJ3RoJyxcbiAgICAgIHRoZWFkOiAndGhlYWQnLFxuICAgICAgdGltZTogJ3RpbWUnLFxuICAgICAgdGl0bGU6ICd0aXRsZScsXG4gICAgICB0cjogJ3RyJyxcbiAgICAgIHRyYWNrOiAndHJhY2snLFxuICAgICAgdTogJ3UnLFxuICAgICAgdWw6ICd1bCcsXG4gICAgICAndmFyJzogJ3ZhcicsXG4gICAgICB2aWRlbzogJ3ZpZGVvJyxcbiAgICAgIHdicjogJ3dicicsXG4gICAgICBjaXJjbGU6ICdjaXJjbGUnLFxuICAgICAgY2xpcFBhdGg6ICdjbGlwUGF0aCcsXG4gICAgICBkZWZzOiAnZGVmcycsXG4gICAgICBlbGxpcHNlOiAnZWxsaXBzZScsXG4gICAgICBnOiAnZycsXG4gICAgICBpbWFnZTogJ2ltYWdlJyxcbiAgICAgIGxpbmU6ICdsaW5lJyxcbiAgICAgIGxpbmVhckdyYWRpZW50OiAnbGluZWFyR3JhZGllbnQnLFxuICAgICAgbWFzazogJ21hc2snLFxuICAgICAgcGF0aDogJ3BhdGgnLFxuICAgICAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICAgICAgcG9seWdvbjogJ3BvbHlnb24nLFxuICAgICAgcG9seWxpbmU6ICdwb2x5bGluZScsXG4gICAgICByYWRpYWxHcmFkaWVudDogJ3JhZGlhbEdyYWRpZW50JyxcbiAgICAgIHJlY3Q6ICdyZWN0JyxcbiAgICAgIHN0b3A6ICdzdG9wJyxcbiAgICAgIHN2ZzogJ3N2ZycsXG4gICAgICB0ZXh0OiAndGV4dCcsXG4gICAgICB0c3BhbjogJ3RzcGFuJ1xuICAgIH0sIGNyZWF0ZURPTUZhY3RvcnkpO1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01GYWN0b3JpZXM7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImI5XCIsIFtcIjU4XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIga2V5TWlycm9yID0gJF9fcmVxdWlyZSgnNTgnKTtcbiAgdmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSBrZXlNaXJyb3Ioe1xuICAgIHByb3A6IG51bGwsXG4gICAgY29udGV4dDogbnVsbCxcbiAgICBjaGlsZENvbnRleHQ6IG51bGxcbiAgfSk7XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9ucztcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJiY1wiLCBbXCJhZlwiLCBcImI5XCIsIFwiYmFcIiwgXCJhZVwiLCBcImI3XCIsIFwiYjBcIiwgXCIzMFwiLCBcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFJlYWN0RWxlbWVudCA9ICRfX3JlcXVpcmUoJ2FmJyk7XG4gICAgdmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSAkX19yZXF1aXJlKCdiOScpO1xuICAgIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9ICRfX3JlcXVpcmUoJ2JhJyk7XG4gICAgdmFyIFJlYWN0Q3VycmVudE93bmVyID0gJF9fcmVxdWlyZSgnYWUnKTtcbiAgICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSAkX19yZXF1aXJlKCdiNycpO1xuICAgIHZhciBnZXRJdGVyYXRvckZuID0gJF9fcmVxdWlyZSgnYjAnKTtcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkge1xuICAgICAgaWYgKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKTtcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBvd25lckhhc0tleVVzZVdhcm5pbmcgPSB7fTtcbiAgICB2YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVFeHBsaWNpdEtleShlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gICAgICBpZiAoIWVsZW1lbnQuX3N0b3JlIHx8IGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCB8fCBlbGVtZW50LmtleSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICB2YXIgYWRkZW5kYSA9IGdldEFkZGVuZGFGb3JLZXlVc2UoJ3VuaXF1ZUtleScsIGVsZW1lbnQsIHBhcmVudFR5cGUpO1xuICAgICAgaWYgKGFkZGVuZGEgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdFYWNoIGNoaWxkIGluIGFuIGFycmF5IG9yIGl0ZXJhdG9yIHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4nICsgJyVzJXMlcycsIGFkZGVuZGEucGFyZW50T3JPd25lciB8fCAnJywgYWRkZW5kYS5jaGlsZE93bmVyIHx8ICcnLCBhZGRlbmRhLnVybCB8fCAnJykgOiB2b2lkIDA7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldEFkZGVuZGFGb3JLZXlVc2UobWVzc2FnZVR5cGUsIGVsZW1lbnQsIHBhcmVudFR5cGUpIHtcbiAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgICAgaWYgKCFhZGRlbmR1bSkge1xuICAgICAgICB2YXIgcGFyZW50TmFtZSA9IHR5cGVvZiBwYXJlbnRUeXBlID09PSAnc3RyaW5nJyA/IHBhcmVudFR5cGUgOiBwYXJlbnRUeXBlLmRpc3BsYXlOYW1lIHx8IHBhcmVudFR5cGUubmFtZTtcbiAgICAgICAgaWYgKHBhcmVudE5hbWUpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgQ2hlY2sgdGhlIHRvcC1sZXZlbCByZW5kZXIgY2FsbCB1c2luZyA8JyArIHBhcmVudE5hbWUgKyAnPi4nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbWVtb2l6ZXIgPSBvd25lckhhc0tleVVzZVdhcm5pbmdbbWVzc2FnZVR5cGVdIHx8IChvd25lckhhc0tleVVzZVdhcm5pbmdbbWVzc2FnZVR5cGVdID0ge30pO1xuICAgICAgaWYgKG1lbW9pemVyW2FkZGVuZHVtXSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIG1lbW9pemVyW2FkZGVuZHVtXSA9IHRydWU7XG4gICAgICB2YXIgYWRkZW5kYSA9IHtcbiAgICAgICAgcGFyZW50T3JPd25lcjogYWRkZW5kdW0sXG4gICAgICAgIHVybDogJyBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyxcbiAgICAgICAgY2hpbGRPd25lcjogbnVsbFxuICAgICAgfTtcbiAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuX293bmVyICYmIGVsZW1lbnQuX293bmVyICE9PSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgICAgIGFkZGVuZGEuY2hpbGRPd25lciA9ICcgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gJyArIGVsZW1lbnQuX293bmVyLmdldE5hbWUoKSArICcuJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBhZGRlbmRhO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlLCBwYXJlbnRUeXBlKSB7XG4gICAgICBpZiAodHlwZW9mIG5vZGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciBjaGlsZCA9IG5vZGVbaV07XG4gICAgICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAgICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICAgICAgbm9kZS5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihub2RlKTtcbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwobm9kZSk7XG4gICAgICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXMoY29tcG9uZW50TmFtZSwgcHJvcFR5cGVzLCBwcm9wcywgbG9jYXRpb24pIHtcbiAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgICAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgISh0eXBlb2YgcHJvcFR5cGVzW3Byb3BOYW1lXSA9PT0gJ2Z1bmN0aW9uJykgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICsgJ1JlYWN0LlByb3BUeXBlcy4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIGVycm9yID0gcHJvcFR5cGVzW3Byb3BOYW1lXShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uKTtcbiAgICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgICB9XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRXJyb3IsICclczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgcHJvcE5hbWUsIHR5cGVvZiBlcnJvcikgOiB2b2lkIDA7XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcbiAgICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KSB7XG4gICAgICB2YXIgY29tcG9uZW50Q2xhc3MgPSBlbGVtZW50LnR5cGU7XG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudENsYXNzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBuYW1lID0gY29tcG9uZW50Q2xhc3MuZGlzcGxheU5hbWUgfHwgY29tcG9uZW50Q2xhc3MubmFtZTtcbiAgICAgIGlmIChjb21wb25lbnRDbGFzcy5wcm9wVHlwZXMpIHtcbiAgICAgICAgY2hlY2tQcm9wVHlwZXMobmFtZSwgY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzLCBlbGVtZW50LnByb3BzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLCAnZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzICcgKyAnZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0ge1xuICAgICAgY3JlYXRlRWxlbWVudDogZnVuY3Rpb24odHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gICAgICAgIHZhciB2YWxpZFR5cGUgPSB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHZhbGlkVHlwZSwgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQ6IHR5cGUgc2hvdWxkIG5vdCBiZSBudWxsLCB1bmRlZmluZWQsIGJvb2xlYW4sIG9yICcgKyAnbnVtYmVyLiBJdCBzaG91bGQgYmUgYSBzdHJpbmcgKGZvciBET00gZWxlbWVudHMpIG9yIGEgUmVhY3RDbGFzcyAnICsgJyhmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpLiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkpIDogdm9pZCAwO1xuICAgICAgICB2YXIgZWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsaWRUeXBlKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgdHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpO1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH0sXG4gICAgICBjcmVhdGVGYWN0b3J5OiBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIHZhciB2YWxpZGF0ZWRGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbiAgICAgICAgdmFsaWRhdGVkRmFjdG9yeS50eXBlID0gdHlwZTtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWxpZGF0ZWRGYWN0b3J5LCAndHlwZScsIHtcbiAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdGYWN0b3J5LnR5cGUgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHRoZSBjbGFzcyBkaXJlY3RseSAnICsgJ2JlZm9yZSBwYXNzaW5nIGl0IHRvIGNyZWF0ZUZhY3RvcnkuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0eXBlJywge3ZhbHVlOiB0eXBlfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsaWRhdGVkRmFjdG9yeTtcbiAgICAgIH0sXG4gICAgICBjbG9uZUVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BzLCBjaGlsZHJlbikge1xuICAgICAgICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIG5ld0VsZW1lbnQudHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRhdGVQcm9wVHlwZXMobmV3RWxlbWVudCk7XG4gICAgICAgIHJldHVybiBuZXdFbGVtZW50O1xuICAgICAgfVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3I7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImJhXCIsIFtcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHt9O1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHtcbiAgICAgICAgcHJvcDogJ3Byb3AnLFxuICAgICAgICBjb250ZXh0OiAnY29udGV4dCcsXG4gICAgICAgIGNoaWxkQ29udGV4dDogJ2NoaWxkIGNvbnRleHQnXG4gICAgICB9O1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJiMFwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xuICB2YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7XG4gIGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICAgIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgICB9XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBnZXRJdGVyYXRvckZuO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImJlXCIsIFtcImFmXCIsIFwiYmFcIiwgXCI0OFwiLCBcImIwXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgUmVhY3RFbGVtZW50ID0gJF9fcmVxdWlyZSgnYWYnKTtcbiAgdmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gJF9fcmVxdWlyZSgnYmEnKTtcbiAgdmFyIGVtcHR5RnVuY3Rpb24gPSAkX19yZXF1aXJlKCc0OCcpO1xuICB2YXIgZ2V0SXRlcmF0b3JGbiA9ICRfX3JlcXVpcmUoJ2IwJyk7XG4gIHZhciBBTk9OWU1PVVMgPSAnPDxhbm9ueW1vdXM+Pic7XG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2FycmF5JyksXG4gICAgYm9vbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Jvb2xlYW4nKSxcbiAgICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgICBudW1iZXI6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdudW1iZXInKSxcbiAgICBvYmplY3Q6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdvYmplY3QnKSxcbiAgICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcbiAgICBhbnk6IGNyZWF0ZUFueVR5cGVDaGVja2VyKCksXG4gICAgYXJyYXlPZjogY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyLFxuICAgIGVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpLFxuICAgIGluc3RhbmNlT2Y6IGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIsXG4gICAgbm9kZTogY3JlYXRlTm9kZUNoZWNrZXIoKSxcbiAgICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgICBvbmVPZjogY3JlYXRlRW51bVR5cGVDaGVja2VyLFxuICAgIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlclxuICB9O1xuICBmdW5jdGlvbiBpcyh4LCB5KSB7XG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgICBmdW5jdGlvbiBjaGVja1R5cGUoaXNSZXF1aXJlZCwgcHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09IG51bGwpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdSZXF1aXJlZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHdhcyBub3Qgc3BlY2lmaWVkIGluICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLicpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcbiAgICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcbiAgICByZXR1cm4gY2hhaW5lZENoZWNrVHlwZTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcmVjaXNlVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnYCcgKyBleHBlY3RlZFR5cGUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpIHtcbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyhudWxsKSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBhcnJheU9mLicpO1xuICAgICAgfVxuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJvcFR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYW4gYXJyYXkuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBpLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJ1snICsgaSArICddJyk7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAoIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBzaW5nbGUgUmVhY3RFbGVtZW50LicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCEocHJvcHNbcHJvcE5hbWVdIGluc3RhbmNlb2YgZXhwZWN0ZWRDbGFzcykpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgICAgdmFyIGFjdHVhbENsYXNzTmFtZSA9IGdldENsYXNzTmFtZShwcm9wc1twcm9wTmFtZV0pO1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIGFjdHVhbENsYXNzTmFtZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnaW5zdGFuY2Ugb2YgYCcgKyBleHBlY3RlZENsYXNzTmFtZSArICdgLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBleHBlY3RlZFZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaXMocHJvcFZhbHVlLCBleHBlY3RlZFZhbHVlc1tpXSkpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHZhciB2YWx1ZXNTdHJpbmcgPSBKU09OLnN0cmluZ2lmeShleHBlY3RlZFZhbHVlcyk7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBwcm9wVmFsdWUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBvYmplY3RPZi4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIG9iamVjdC4nKSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gcHJvcFZhbHVlKSB7XG4gICAgICAgIGlmIChwcm9wVmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJy4nICsga2V5KTtcbiAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlVW5pb25UeXBlQ2hlY2tlcihhcnJheU9mVHlwZUNoZWNrZXJzKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5T2ZUeXBlQ2hlY2tlcnMpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLCBleHBlY3RlZCBhbiBpbnN0YW5jZSBvZiBhcnJheS4nKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IGFycmF5T2ZUeXBlQ2hlY2tlcnNbaV07XG4gICAgICAgIGlmIChjaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICghaXNOb2RlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIFJlYWN0Tm9kZS4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGBvYmplY3RgLicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiBzaGFwZVR5cGVzKSB7XG4gICAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgICBpZiAoIWNoZWNrZXIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZXJyb3IgPSBjaGVja2VyKHByb3BWYWx1ZSwga2V5LCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lICsgJy4nICsga2V5KTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuICBmdW5jdGlvbiBpc05vZGUocHJvcFZhbHVlKSB7XG4gICAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcFZhbHVlID09PSBudWxsIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChwcm9wVmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKHByb3BWYWx1ZSk7XG4gICAgICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKHByb3BWYWx1ZSk7XG4gICAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IHByb3BWYWx1ZS5lbnRyaWVzKSB7XG4gICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICAgIGlmICghaXNOb2RlKHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gJ2FycmF5JztcbiAgICB9XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuICdvYmplY3QnO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKSB7XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXR1cm4gJ2RhdGUnO1xuICAgICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgICAgcmV0dXJuICdyZWdleHAnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcFR5cGU7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BWYWx1ZSkge1xuICAgIGlmICghcHJvcFZhbHVlLmNvbnN0cnVjdG9yIHx8ICFwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgICAgcmV0dXJuIEFOT05ZTU9VUztcbiAgICB9XG4gICAgcmV0dXJuIHByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXM7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiYmZcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gJzE1LjAuMic7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiYWVcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBSZWFjdEN1cnJlbnRPd25lciA9IHtjdXJyZW50OiBudWxsfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdEN1cnJlbnRPd25lcjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJiN1wiLCBbXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHtnZXQ6IGZ1bmN0aW9uKCkge319KTtcbiAgICAgICAgY2FuRGVmaW5lUHJvcGVydHkgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoeCkge31cbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBjYW5EZWZpbmVQcm9wZXJ0eTtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiYWZcIiwgW1wiNlwiLCBcImFlXCIsIFwiMjJcIiwgXCJiN1wiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBfYXNzaWduID0gJF9fcmVxdWlyZSgnNicpO1xuICAgIHZhciBSZWFjdEN1cnJlbnRPd25lciA9ICRfX3JlcXVpcmUoJ2FlJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9ICRfX3JlcXVpcmUoJ2I3Jyk7XG4gICAgdmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sWydmb3InXSAmJiBTeW1ib2xbJ2ZvciddKCdyZWFjdC5lbGVtZW50JykgfHwgMHhlYWM3O1xuICAgIHZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAgICAgIGtleTogdHJ1ZSxcbiAgICAgIHJlZjogdHJ1ZSxcbiAgICAgIF9fc2VsZjogdHJ1ZSxcbiAgICAgIF9fc291cmNlOiB0cnVlXG4gICAgfTtcbiAgICB2YXIgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24sXG4gICAgICAgIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSBmdW5jdGlvbih0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgICAgIHZhciBlbGVtZW50ID0ge1xuICAgICAgICAkJHR5cGVvZjogUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgcmVmOiByZWYsXG4gICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgX293bmVyOiBvd25lclxuICAgICAgfTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGVsZW1lbnQuX3N0b3JlID0ge307XG4gICAgICAgIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50Ll9zdG9yZSwgJ3ZhbGlkYXRlZCcsIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc2VsZicsIHtcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBzZWxmXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc291cmNlJywge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHNvdXJjZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICAgIGVsZW1lbnQuX3NlbGYgPSBzZWxmO1xuICAgICAgICAgIGVsZW1lbnQuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICAgIE9iamVjdC5mcmVlemUoZWxlbWVudC5wcm9wcyk7XG4gICAgICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfTtcbiAgICBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uKHR5cGUsIGNvbmZpZywgY2hpbGRyZW4pIHtcbiAgICAgIHZhciBwcm9wTmFtZTtcbiAgICAgIHZhciBwcm9wcyA9IHt9O1xuICAgICAgdmFyIGtleSA9IG51bGw7XG4gICAgICB2YXIgcmVmID0gbnVsbDtcbiAgICAgIHZhciBzZWxmID0gbnVsbDtcbiAgICAgIHZhciBzb3VyY2UgPSBudWxsO1xuICAgICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcmVmID0gIWNvbmZpZy5oYXNPd25Qcm9wZXJ0eSgncmVmJykgfHwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdyZWYnKS5nZXQgPyBudWxsIDogY29uZmlnLnJlZjtcbiAgICAgICAgICBrZXkgPSAhY29uZmlnLmhhc093blByb3BlcnR5KCdrZXknKSB8fCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNvbmZpZywgJ2tleScpLmdldCA/IG51bGwgOiAnJyArIGNvbmZpZy5rZXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVmID0gY29uZmlnLnJlZiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5yZWY7XG4gICAgICAgICAga2V5ID0gY29uZmlnLmtleSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6ICcnICsgY29uZmlnLmtleTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmID0gY29uZmlnLl9fc2VsZiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NlbGY7XG4gICAgICAgIHNvdXJjZSA9IGNvbmZpZy5fX3NvdXJjZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NvdXJjZTtcbiAgICAgICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgICAgICBpZiAoY29uZmlnLmhhc093blByb3BlcnR5KHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gICAgICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICAgICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgICAgICB2YXIgZGVmYXVsdFByb3BzID0gdHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgICAgIGZvciAocHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wcy4kJHR5cGVvZiA9PT0gJ3VuZGVmaW5lZCcgfHwgcHJvcHMuJCR0eXBlb2YgIT09IFJFQUNUX0VMRU1FTlRfVFlQRSkge1xuICAgICAgICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkoJ2tleScpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdrZXknLCB7XG4gICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bikge1xuICAgICAgICAgICAgICAgICAgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclczogYGtleWAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vZmIubWUvcmVhY3Qtc3BlY2lhbC1wcm9wcyknLCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiAnZGlzcGxheU5hbWUnIGluIHR5cGUgPyB0eXBlLmRpc3BsYXlOYW1lIDogJ0VsZW1lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eSgncmVmJykpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ3JlZicsIHtcbiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duKSB7XG4gICAgICAgICAgICAgICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKScsIHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nICYmICdkaXNwbGF5TmFtZScgaW4gdHlwZSA/IHR5cGUuZGlzcGxheU5hbWUgOiAnRWxlbWVudCcpIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LCBwcm9wcyk7XG4gICAgfTtcbiAgICBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIHZhciBmYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbiAgICAgIGZhY3RvcnkudHlwZSA9IHR5cGU7XG4gICAgICByZXR1cm4gZmFjdG9yeTtcbiAgICB9O1xuICAgIFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VLZXkgPSBmdW5jdGlvbihvbGRFbGVtZW50LCBuZXdLZXkpIHtcbiAgICAgIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50KG9sZEVsZW1lbnQudHlwZSwgbmV3S2V5LCBvbGRFbGVtZW50LnJlZiwgb2xkRWxlbWVudC5fc2VsZiwgb2xkRWxlbWVudC5fc291cmNlLCBvbGRFbGVtZW50Ll9vd25lciwgb2xkRWxlbWVudC5wcm9wcyk7XG4gICAgICByZXR1cm4gbmV3RWxlbWVudDtcbiAgICB9O1xuICAgIFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gICAgICB2YXIgcHJvcE5hbWU7XG4gICAgICB2YXIgcHJvcHMgPSBfYXNzaWduKHt9LCBlbGVtZW50LnByb3BzKTtcbiAgICAgIHZhciBrZXkgPSBlbGVtZW50LmtleTtcbiAgICAgIHZhciByZWYgPSBlbGVtZW50LnJlZjtcbiAgICAgIHZhciBzZWxmID0gZWxlbWVudC5fc2VsZjtcbiAgICAgIHZhciBzb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG4gICAgICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICBpZiAoY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmVmID0gY29uZmlnLnJlZjtcbiAgICAgICAgICBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVmYXVsdFByb3BzO1xuICAgICAgICBpZiAoZWxlbWVudC50eXBlICYmIGVsZW1lbnQudHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgICBkZWZhdWx0UHJvcHMgPSBlbGVtZW50LnR5cGUuZGVmYXVsdFByb3BzO1xuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICAgICAgaWYgKGNvbmZpZ1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCAmJiBkZWZhdWx0UHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgICAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgICAgIH1cbiAgICAgICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFJlYWN0RWxlbWVudChlbGVtZW50LnR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcyk7XG4gICAgfTtcbiAgICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0JyAmJiBvYmplY3QgIT09IG51bGwgJiYgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiYzBcIiwgW1wiYWZcIiwgXCIzMFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSAkX19yZXF1aXJlKCdhZicpO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIGZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICAgICAgIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnb25seUNoaWxkIG11c3QgYmUgcGFzc2VkIGEgY2hpbGRyZW4gd2l0aCBleGFjdGx5IG9uZSBjaGlsZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gb25seUNoaWxkO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJjMVwiLCBbXCI2XCIsIFwiYjFcIiwgXCJiNVwiLCBcImI4XCIsIFwiYmJcIiwgXCJhZlwiLCBcImJjXCIsIFwiYmVcIiwgXCJiZlwiLCBcImMwXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgX2Fzc2lnbiA9ICRfX3JlcXVpcmUoJzYnKTtcbiAgICB2YXIgUmVhY3RDaGlsZHJlbiA9ICRfX3JlcXVpcmUoJ2IxJyk7XG4gICAgdmFyIFJlYWN0Q29tcG9uZW50ID0gJF9fcmVxdWlyZSgnYjUnKTtcbiAgICB2YXIgUmVhY3RDbGFzcyA9ICRfX3JlcXVpcmUoJ2I4Jyk7XG4gICAgdmFyIFJlYWN0RE9NRmFjdG9yaWVzID0gJF9fcmVxdWlyZSgnYmInKTtcbiAgICB2YXIgUmVhY3RFbGVtZW50ID0gJF9fcmVxdWlyZSgnYWYnKTtcbiAgICB2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gJF9fcmVxdWlyZSgnYmMnKTtcbiAgICB2YXIgUmVhY3RQcm9wVHlwZXMgPSAkX19yZXF1aXJlKCdiZScpO1xuICAgIHZhciBSZWFjdFZlcnNpb24gPSAkX19yZXF1aXJlKCdiZicpO1xuICAgIHZhciBvbmx5Q2hpbGQgPSAkX19yZXF1aXJlKCdjMCcpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICB2YXIgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50O1xuICAgIHZhciBjcmVhdGVGYWN0b3J5ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3Rvcnk7XG4gICAgdmFyIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQ7XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudDtcbiAgICAgIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeTtcbiAgICAgIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jbG9uZUVsZW1lbnQ7XG4gICAgfVxuICAgIHZhciBfX3NwcmVhZCA9IF9hc3NpZ247XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuZWQgPSBmYWxzZTtcbiAgICAgIF9fc3ByZWFkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHdhcm5lZCwgJ1JlYWN0Ll9fc3ByZWFkIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZC4gVXNlICcgKyAnT2JqZWN0LmFzc2lnbiBkaXJlY3RseSBvciBhbm90aGVyIGhlbHBlciBmdW5jdGlvbiB3aXRoIHNpbWlsYXIgJyArICdzZW1hbnRpY3MuIFlvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8geW91ciBjb21waWxlci4gJyArICdTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcHJlYWQtZGVwcmVjYXRpb24gZm9yIG1vcmUgZGV0YWlscy4nKSA6IHZvaWQgMDtcbiAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIF9hc3NpZ24uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBSZWFjdCA9IHtcbiAgICAgIENoaWxkcmVuOiB7XG4gICAgICAgIG1hcDogUmVhY3RDaGlsZHJlbi5tYXAsXG4gICAgICAgIGZvckVhY2g6IFJlYWN0Q2hpbGRyZW4uZm9yRWFjaCxcbiAgICAgICAgY291bnQ6IFJlYWN0Q2hpbGRyZW4uY291bnQsXG4gICAgICAgIHRvQXJyYXk6IFJlYWN0Q2hpbGRyZW4udG9BcnJheSxcbiAgICAgICAgb25seTogb25seUNoaWxkXG4gICAgICB9LFxuICAgICAgQ29tcG9uZW50OiBSZWFjdENvbXBvbmVudCxcbiAgICAgIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQsXG4gICAgICBjbG9uZUVsZW1lbnQ6IGNsb25lRWxlbWVudCxcbiAgICAgIGlzVmFsaWRFbGVtZW50OiBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQsXG4gICAgICBQcm9wVHlwZXM6IFJlYWN0UHJvcFR5cGVzLFxuICAgICAgY3JlYXRlQ2xhc3M6IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3MsXG4gICAgICBjcmVhdGVGYWN0b3J5OiBjcmVhdGVGYWN0b3J5LFxuICAgICAgY3JlYXRlTWl4aW46IGZ1bmN0aW9uKG1peGluKSB7XG4gICAgICAgIHJldHVybiBtaXhpbjtcbiAgICAgIH0sXG4gICAgICBET006IFJlYWN0RE9NRmFjdG9yaWVzLFxuICAgICAgdmVyc2lvbjogUmVhY3RWZXJzaW9uLFxuICAgICAgX19zcHJlYWQ6IF9fc3ByZWFkXG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJjMlwiLCBbXCJjMVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgbW9kdWxlLmV4cG9ydHMgPSAkX19yZXF1aXJlKCdjMScpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImFhXCIsIFtcImMyXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnYzInKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJhOFwiLCBbXCJhYVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgdmFyIF9yZWFjdCA9ICRfX3JlcXVpcmUoJ2FhJyk7XG4gIGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX3JlYWN0LlByb3BUeXBlcy5zaGFwZSh7XG4gICAgc3Vic2NyaWJlOiBfcmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkaXNwYXRjaDogX3JlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZ2V0U3RhdGU6IF9yZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gIH0pO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImMzXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHNoYWxsb3dFcXVhbDtcbiAgZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgICBpZiAob2JqQSA9PT0gb2JqQikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICAgIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICAgIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB2YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIWhhc093bi5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCBvYmpBW2tleXNBW2ldXSAhPT0gb2JqQltrZXlzQVtpXV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImM0XCIsIFtcImM1XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHdyYXBBY3Rpb25DcmVhdG9ycztcbiAgdmFyIF9yZWR1eCA9ICRfX3JlcXVpcmUoJ2M1Jyk7XG4gIGZ1bmN0aW9uIHdyYXBBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycykge1xuICAgIHJldHVybiBmdW5jdGlvbihkaXNwYXRjaCkge1xuICAgICAgcmV0dXJuICgwLCBfcmVkdXguYmluZEFjdGlvbkNyZWF0b3JzKShhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJhOVwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB3YXJuaW5nO1xuICBmdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJjNlwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgbWl4aW5zOiB0cnVlLFxuICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICB0eXBlOiB0cnVlXG4gIH07XG4gIHZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoIVJFQUNUX1NUQVRJQ1Nba2V5c1tpXV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5c1tpXV0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0YXJnZXRDb21wb25lbnRba2V5c1tpXV0gPSBzb3VyY2VDb21wb25lbnRba2V5c1tpXV07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImM3XCIsIFtcImM2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnYzYnKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJjOFwiLCBbXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcignTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLicpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJjOVwiLCBbXCJjOFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9ICRfX3JlcXVpcmUoJ2M4Jyk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiY2FcIiwgW1wiYWFcIiwgXCJhOFwiLCBcImMzXCIsIFwiYzRcIiwgXCJhOVwiLCBcImNiXCIsIFwiYzdcIiwgXCJjOVwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH07XG4gICAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgICBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IGNvbm5lY3Q7XG4gICAgdmFyIF9yZWFjdCA9ICRfX3JlcXVpcmUoJ2FhJyk7XG4gICAgdmFyIF9zdG9yZVNoYXBlID0gJF9fcmVxdWlyZSgnYTgnKTtcbiAgICB2YXIgX3N0b3JlU2hhcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmVTaGFwZSk7XG4gICAgdmFyIF9zaGFsbG93RXF1YWwgPSAkX19yZXF1aXJlKCdjMycpO1xuICAgIHZhciBfc2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoYWxsb3dFcXVhbCk7XG4gICAgdmFyIF93cmFwQWN0aW9uQ3JlYXRvcnMgPSAkX19yZXF1aXJlKCdjNCcpO1xuICAgIHZhciBfd3JhcEFjdGlvbkNyZWF0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dyYXBBY3Rpb25DcmVhdG9ycyk7XG4gICAgdmFyIF93YXJuaW5nID0gJF9fcmVxdWlyZSgnYTknKTtcbiAgICB2YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG4gICAgdmFyIF9pc1BsYWluT2JqZWN0ID0gJF9fcmVxdWlyZSgnY2InKTtcbiAgICB2YXIgX2lzUGxhaW5PYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQbGFpbk9iamVjdCk7XG4gICAgdmFyIF9ob2lzdE5vblJlYWN0U3RhdGljcyA9ICRfX3JlcXVpcmUoJ2M3Jyk7XG4gICAgdmFyIF9ob2lzdE5vblJlYWN0U3RhdGljczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ob2lzdE5vblJlYWN0U3RhdGljcyk7XG4gICAgdmFyIF9pbnZhcmlhbnQgPSAkX19yZXF1aXJlKCdjOScpO1xuICAgIHZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG4gICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XCJkZWZhdWx0XCI6IG9ian07XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICAgIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICAgIGlmICghc2VsZikge1xuICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgICAgfVxuICAgICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7Y29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH19KTtcbiAgICAgIGlmIChzdXBlckNsYXNzKVxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgICB9XG4gICAgdmFyIGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfTtcbiAgICB2YXIgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gpIHtcbiAgICAgIHJldHVybiB7ZGlzcGF0Y2g6IGRpc3BhdGNofTtcbiAgICB9O1xuICAgIHZhciBkZWZhdWx0TWVyZ2VQcm9wcyA9IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIHBhcmVudFByb3BzKSB7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHBhcmVudFByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBXcmFwcGVkQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IFdyYXBwZWRDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICB9XG4gICAgdmFyIGVycm9yT2JqZWN0ID0ge3ZhbHVlOiBudWxsfTtcbiAgICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgY3R4KSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoY3R4KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyb3JPYmplY3QudmFsdWUgPSBlO1xuICAgICAgICByZXR1cm4gZXJyb3JPYmplY3Q7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBuZXh0VmVyc2lvbiA9IDA7XG4gICAgZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykge1xuICAgICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDMgfHwgYXJndW1lbnRzWzNdID09PSB1bmRlZmluZWQgPyB7fSA6IGFyZ3VtZW50c1szXTtcbiAgICAgIHZhciBzaG91bGRTdWJzY3JpYmUgPSBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyk7XG4gICAgICB2YXIgbWFwU3RhdGUgPSBtYXBTdGF0ZVRvUHJvcHMgfHwgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wcztcbiAgICAgIHZhciBtYXBEaXNwYXRjaCA9IHVuZGVmaW5lZDtcbiAgICAgIGlmICh0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG1hcERpc3BhdGNoID0gbWFwRGlzcGF0Y2hUb1Byb3BzO1xuICAgICAgfSBlbHNlIGlmICghbWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gICAgICAgIG1hcERpc3BhdGNoID0gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcERpc3BhdGNoID0gKDAsIF93cmFwQWN0aW9uQ3JlYXRvcnMyW1wiZGVmYXVsdFwiXSkobWFwRGlzcGF0Y2hUb1Byb3BzKTtcbiAgICAgIH1cbiAgICAgIHZhciBmaW5hbE1lcmdlUHJvcHMgPSBtZXJnZVByb3BzIHx8IGRlZmF1bHRNZXJnZVByb3BzO1xuICAgICAgdmFyIF9vcHRpb25zJHB1cmUgPSBvcHRpb25zLnB1cmU7XG4gICAgICB2YXIgcHVyZSA9IF9vcHRpb25zJHB1cmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfb3B0aW9ucyRwdXJlO1xuICAgICAgdmFyIF9vcHRpb25zJHdpdGhSZWYgPSBvcHRpb25zLndpdGhSZWY7XG4gICAgICB2YXIgd2l0aFJlZiA9IF9vcHRpb25zJHdpdGhSZWYgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX29wdGlvbnMkd2l0aFJlZjtcbiAgICAgIHZhciBjaGVja01lcmdlZEVxdWFscyA9IHB1cmUgJiYgZmluYWxNZXJnZVByb3BzICE9PSBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgICAgIHZhciB2ZXJzaW9uID0gbmV4dFZlcnNpb24rKztcbiAgICAgIHJldHVybiBmdW5jdGlvbiB3cmFwV2l0aENvbm5lY3QoV3JhcHBlZENvbXBvbmVudCkge1xuICAgICAgICB2YXIgY29ubmVjdERpc3BsYXlOYW1lID0gJ0Nvbm5lY3QoJyArIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpICsgJyknO1xuICAgICAgICBmdW5jdGlvbiBjaGVja1N0YXRlU2hhcGUocHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgICAgICAgICBpZiAoISgwLCBfaXNQbGFpbk9iamVjdDJbXCJkZWZhdWx0XCJdKShwcm9wcykpIHtcbiAgICAgICAgICAgICgwLCBfd2FybmluZzJbXCJkZWZhdWx0XCJdKShtZXRob2ROYW1lICsgJygpIGluICcgKyBjb25uZWN0RGlzcGxheU5hbWUgKyAnIG11c3QgcmV0dXJuIGEgcGxhaW4gb2JqZWN0LiAnICsgKCdJbnN0ZWFkIHJlY2VpdmVkICcgKyBwcm9wcyArICcuJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjb21wdXRlTWVyZ2VkUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgcGFyZW50UHJvcHMpIHtcbiAgICAgICAgICB2YXIgbWVyZ2VkUHJvcHMgPSBmaW5hbE1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgcGFyZW50UHJvcHMpO1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBjaGVja1N0YXRlU2hhcGUobWVyZ2VkUHJvcHMsICdtZXJnZVByb3BzJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICAgICAgfVxuICAgICAgICB2YXIgQ29ubmVjdCA9IGZ1bmN0aW9uKF9Db21wb25lbnQpIHtcbiAgICAgICAgICBfaW5oZXJpdHMoQ29ubmVjdCwgX0NvbXBvbmVudCk7XG4gICAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICAgICAgcmV0dXJuICFwdXJlIHx8IHRoaXMuaGF2ZU93blByb3BzQ2hhbmdlZCB8fCB0aGlzLmhhc1N0b3JlU3RhdGVDaGFuZ2VkO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcywgY29udGV4dCkge1xuICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbm5lY3QpO1xuICAgICAgICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0NvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG4gICAgICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICAgIF90aGlzLnN0b3JlID0gcHJvcHMuc3RvcmUgfHwgY29udGV4dC5zdG9yZTtcbiAgICAgICAgICAgICgwLCBfaW52YXJpYW50MltcImRlZmF1bHRcIl0pKF90aGlzLnN0b3JlLCAnQ291bGQgbm90IGZpbmQgXCJzdG9yZVwiIGluIGVpdGhlciB0aGUgY29udGV4dCBvciAnICsgKCdwcm9wcyBvZiBcIicgKyBjb25uZWN0RGlzcGxheU5hbWUgKyAnXCIuICcpICsgJ0VpdGhlciB3cmFwIHRoZSByb290IGNvbXBvbmVudCBpbiBhIDxQcm92aWRlcj4sICcgKyAoJ29yIGV4cGxpY2l0bHkgcGFzcyBcInN0b3JlXCIgYXMgYSBwcm9wIHRvIFwiJyArIGNvbm5lY3REaXNwbGF5TmFtZSArICdcIi4nKSk7XG4gICAgICAgICAgICB2YXIgc3RvcmVTdGF0ZSA9IF90aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBfdGhpcy5zdGF0ZSA9IHtzdG9yZVN0YXRlOiBzdG9yZVN0YXRlfTtcbiAgICAgICAgICAgIF90aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgICB9XG4gICAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcHV0ZVN0YXRlUHJvcHMgPSBmdW5jdGlvbiBjb21wdXRlU3RhdGVQcm9wcyhzdG9yZSwgcHJvcHMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5maW5hbE1hcFN0YXRlVG9Qcm9wcykge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25maWd1cmVGaW5hbE1hcFN0YXRlKHN0b3JlLCBwcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgdmFyIHN0YXRlUHJvcHMgPSB0aGlzLmRvU3RhdGVQcm9wc0RlcGVuZE9uT3duUHJvcHMgPyB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBwcm9wcykgOiB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzKHN0YXRlKTtcbiAgICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNoZWNrU3RhdGVTaGFwZShzdGF0ZVByb3BzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhdGVQcm9wcztcbiAgICAgICAgICB9O1xuICAgICAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbmZpZ3VyZUZpbmFsTWFwU3RhdGUgPSBmdW5jdGlvbiBjb25maWd1cmVGaW5hbE1hcFN0YXRlKHN0b3JlLCBwcm9wcykge1xuICAgICAgICAgICAgdmFyIG1hcHBlZFN0YXRlID0gbWFwU3RhdGUoc3RvcmUuZ2V0U3RhdGUoKSwgcHJvcHMpO1xuICAgICAgICAgICAgdmFyIGlzRmFjdG9yeSA9IHR5cGVvZiBtYXBwZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgICAgIHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMgPSBpc0ZhY3RvcnkgPyBtYXBwZWRTdGF0ZSA6IG1hcFN0YXRlO1xuICAgICAgICAgICAgdGhpcy5kb1N0YXRlUHJvcHNEZXBlbmRPbk93blByb3BzID0gdGhpcy5maW5hbE1hcFN0YXRlVG9Qcm9wcy5sZW5ndGggIT09IDE7XG4gICAgICAgICAgICBpZiAoaXNGYWN0b3J5KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVTdGF0ZVByb3BzKHN0b3JlLCBwcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBjaGVja1N0YXRlU2hhcGUobWFwcGVkU3RhdGUsICdtYXBTdGF0ZVRvUHJvcHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXBwZWRTdGF0ZTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXB1dGVEaXNwYXRjaFByb3BzID0gZnVuY3Rpb24gY29tcHV0ZURpc3BhdGNoUHJvcHMoc3RvcmUsIHByb3BzKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlndXJlRmluYWxNYXBEaXNwYXRjaChzdG9yZSwgcHJvcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRpc3BhdGNoID0gc3RvcmUuZGlzcGF0Y2g7XG4gICAgICAgICAgICB2YXIgZGlzcGF0Y2hQcm9wcyA9IHRoaXMuZG9EaXNwYXRjaFByb3BzRGVwZW5kT25Pd25Qcm9wcyA/IHRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIHByb3BzKSA6IHRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gpO1xuICAgICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgY2hlY2tTdGF0ZVNoYXBlKGRpc3BhdGNoUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaFByb3BzO1xuICAgICAgICAgIH07XG4gICAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29uZmlndXJlRmluYWxNYXBEaXNwYXRjaCA9IGZ1bmN0aW9uIGNvbmZpZ3VyZUZpbmFsTWFwRGlzcGF0Y2goc3RvcmUsIHByb3BzKSB7XG4gICAgICAgICAgICB2YXIgbWFwcGVkRGlzcGF0Y2ggPSBtYXBEaXNwYXRjaChzdG9yZS5kaXNwYXRjaCwgcHJvcHMpO1xuICAgICAgICAgICAgdmFyIGlzRmFjdG9yeSA9IHR5cGVvZiBtYXBwZWREaXNwYXRjaCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgICAgIHRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMgPSBpc0ZhY3RvcnkgPyBtYXBwZWREaXNwYXRjaCA6IG1hcERpc3BhdGNoO1xuICAgICAgICAgICAgdGhpcy5kb0Rpc3BhdGNoUHJvcHNEZXBlbmRPbk93blByb3BzID0gdGhpcy5maW5hbE1hcERpc3BhdGNoVG9Qcm9wcy5sZW5ndGggIT09IDE7XG4gICAgICAgICAgICBpZiAoaXNGYWN0b3J5KSB7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVEaXNwYXRjaFByb3BzKHN0b3JlLCBwcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBjaGVja1N0YXRlU2hhcGUobWFwcGVkRGlzcGF0Y2gsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtYXBwZWREaXNwYXRjaDtcbiAgICAgICAgICB9O1xuICAgICAgICAgIENvbm5lY3QucHJvdG90eXBlLnVwZGF0ZVN0YXRlUHJvcHNJZk5lZWRlZCA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXRlUHJvcHNJZk5lZWRlZCgpIHtcbiAgICAgICAgICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IHRoaXMuY29tcHV0ZVN0YXRlUHJvcHModGhpcy5zdG9yZSwgdGhpcy5wcm9wcyk7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZVByb3BzICYmICgwLCBfc2hhbGxvd0VxdWFsMltcImRlZmF1bHRcIl0pKG5leHRTdGF0ZVByb3BzLCB0aGlzLnN0YXRlUHJvcHMpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3RhdGVQcm9wcyA9IG5leHRTdGF0ZVByb3BzO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBDb25uZWN0LnByb3RvdHlwZS51cGRhdGVEaXNwYXRjaFByb3BzSWZOZWVkZWQgPSBmdW5jdGlvbiB1cGRhdGVEaXNwYXRjaFByb3BzSWZOZWVkZWQoKSB7XG4gICAgICAgICAgICB2YXIgbmV4dERpc3BhdGNoUHJvcHMgPSB0aGlzLmNvbXB1dGVEaXNwYXRjaFByb3BzKHRoaXMuc3RvcmUsIHRoaXMucHJvcHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlzcGF0Y2hQcm9wcyAmJiAoMCwgX3NoYWxsb3dFcXVhbDJbXCJkZWZhdWx0XCJdKShuZXh0RGlzcGF0Y2hQcm9wcywgdGhpcy5kaXNwYXRjaFByb3BzKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoUHJvcHMgPSBuZXh0RGlzcGF0Y2hQcm9wcztcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH07XG4gICAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUudXBkYXRlTWVyZ2VkUHJvcHNJZk5lZWRlZCA9IGZ1bmN0aW9uIHVwZGF0ZU1lcmdlZFByb3BzSWZOZWVkZWQoKSB7XG4gICAgICAgICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gY29tcHV0ZU1lcmdlZFByb3BzKHRoaXMuc3RhdGVQcm9wcywgdGhpcy5kaXNwYXRjaFByb3BzLCB0aGlzLnByb3BzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLm1lcmdlZFByb3BzICYmIGNoZWNrTWVyZ2VkRXF1YWxzICYmICgwLCBfc2hhbGxvd0VxdWFsMltcImRlZmF1bHRcIl0pKG5leHRNZXJnZWRQcm9wcywgdGhpcy5tZXJnZWRQcm9wcykpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tZXJnZWRQcm9wcyA9IG5leHRNZXJnZWRQcm9wcztcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH07XG4gICAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaXNTdWJzY3JpYmVkID0gZnVuY3Rpb24gaXNTdWJzY3JpYmVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nO1xuICAgICAgICAgIH07XG4gICAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUudHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgaWYgKHNob3VsZFN1YnNjcmliZSAmJiAhdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlID0gdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICBDb25uZWN0LnByb3RvdHlwZS50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgICAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICAgICAgICBpZiAoIXB1cmUgfHwgISgwLCBfc2hhbGxvd0VxdWFsMltcImRlZmF1bHRcIl0pKG5leHRQcm9wcywgdGhpcy5wcm9wcykpIHtcbiAgICAgICAgICAgICAgdGhpcy5oYXZlT3duUHJvcHNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgICAgICB0aGlzLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIENvbm5lY3QucHJvdG90eXBlLmNsZWFyQ2FjaGUgPSBmdW5jdGlvbiBjbGVhckNhY2hlKCkge1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaFByb3BzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVQcm9wcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLm1lcmdlZFByb3BzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGF2ZU93blByb3BzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmhhc1N0b3JlU3RhdGVDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaGF2ZVN0YXRlUHJvcHNCZWVuUHJlY2FsY3VsYXRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZVByb3BzUHJlY2FsY3VsYXRpb25FcnJvciA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMgPSBudWxsO1xuICAgICAgICAgIH07XG4gICAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKCkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdG9yZVN0YXRlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgdmFyIHByZXZTdG9yZVN0YXRlID0gdGhpcy5zdGF0ZS5zdG9yZVN0YXRlO1xuICAgICAgICAgICAgaWYgKHB1cmUgJiYgcHJldlN0b3JlU3RhdGUgPT09IHN0b3JlU3RhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHB1cmUgJiYgIXRoaXMuZG9TdGF0ZVByb3BzRGVwZW5kT25Pd25Qcm9wcykge1xuICAgICAgICAgICAgICB2YXIgaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkID0gdHJ5Q2F0Y2godGhpcy51cGRhdGVTdGF0ZVByb3BzSWZOZWVkZWQsIHRoaXMpO1xuICAgICAgICAgICAgICBpZiAoIWhhdmVTdGF0ZVByb3BzQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkID09PSBlcnJvck9iamVjdCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVQcm9wc1ByZWNhbGN1bGF0aW9uRXJyb3IgPSBlcnJvck9iamVjdC52YWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0aGlzLmhhdmVTdGF0ZVByb3BzQmVlblByZWNhbGN1bGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5oYXNTdG9yZVN0YXRlQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtzdG9yZVN0YXRlOiBzdG9yZVN0YXRlfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBnZXRXcmFwcGVkSW5zdGFuY2UoKSB7XG4gICAgICAgICAgICAoMCwgX2ludmFyaWFudDJbXCJkZWZhdWx0XCJdKSh3aXRoUmVmLCAnVG8gYWNjZXNzIHRoZSB3cmFwcGVkIGluc3RhbmNlLCB5b3UgbmVlZCB0byBzcGVjaWZ5ICcgKyAneyB3aXRoUmVmOiB0cnVlIH0gYXMgdGhlIGZvdXJ0aCBhcmd1bWVudCBvZiB0aGUgY29ubmVjdCgpIGNhbGwuJyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZzLndyYXBwZWRJbnN0YW5jZTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIENvbm5lY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHZhciBoYXZlT3duUHJvcHNDaGFuZ2VkID0gdGhpcy5oYXZlT3duUHJvcHNDaGFuZ2VkO1xuICAgICAgICAgICAgdmFyIGhhc1N0b3JlU3RhdGVDaGFuZ2VkID0gdGhpcy5oYXNTdG9yZVN0YXRlQ2hhbmdlZDtcbiAgICAgICAgICAgIHZhciBoYXZlU3RhdGVQcm9wc0JlZW5QcmVjYWxjdWxhdGVkID0gdGhpcy5oYXZlU3RhdGVQcm9wc0JlZW5QcmVjYWxjdWxhdGVkO1xuICAgICAgICAgICAgdmFyIHN0YXRlUHJvcHNQcmVjYWxjdWxhdGlvbkVycm9yID0gdGhpcy5zdGF0ZVByb3BzUHJlY2FsY3VsYXRpb25FcnJvcjtcbiAgICAgICAgICAgIHZhciByZW5kZXJlZEVsZW1lbnQgPSB0aGlzLnJlbmRlcmVkRWxlbWVudDtcbiAgICAgICAgICAgIHRoaXMuaGF2ZU93blByb3BzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5oYXNTdG9yZVN0YXRlQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5oYXZlU3RhdGVQcm9wc0JlZW5QcmVjYWxjdWxhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnN0YXRlUHJvcHNQcmVjYWxjdWxhdGlvbkVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChzdGF0ZVByb3BzUHJlY2FsY3VsYXRpb25FcnJvcikge1xuICAgICAgICAgICAgICB0aHJvdyBzdGF0ZVByb3BzUHJlY2FsY3VsYXRpb25FcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzaG91bGRVcGRhdGVTdGF0ZVByb3BzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBzaG91bGRVcGRhdGVEaXNwYXRjaFByb3BzID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChwdXJlICYmIHJlbmRlcmVkRWxlbWVudCkge1xuICAgICAgICAgICAgICBzaG91bGRVcGRhdGVTdGF0ZVByb3BzID0gaGFzU3RvcmVTdGF0ZUNoYW5nZWQgfHwgaGF2ZU93blByb3BzQ2hhbmdlZCAmJiB0aGlzLmRvU3RhdGVQcm9wc0RlcGVuZE9uT3duUHJvcHM7XG4gICAgICAgICAgICAgIHNob3VsZFVwZGF0ZURpc3BhdGNoUHJvcHMgPSBoYXZlT3duUHJvcHNDaGFuZ2VkICYmIHRoaXMuZG9EaXNwYXRjaFByb3BzRGVwZW5kT25Pd25Qcm9wcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoYXZlU3RhdGVQcm9wc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBoYXZlRGlzcGF0Y2hQcm9wc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChoYXZlU3RhdGVQcm9wc0JlZW5QcmVjYWxjdWxhdGVkKSB7XG4gICAgICAgICAgICAgIGhhdmVTdGF0ZVByb3BzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNob3VsZFVwZGF0ZVN0YXRlUHJvcHMpIHtcbiAgICAgICAgICAgICAgaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkID0gdGhpcy51cGRhdGVTdGF0ZVByb3BzSWZOZWVkZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaG91bGRVcGRhdGVEaXNwYXRjaFByb3BzKSB7XG4gICAgICAgICAgICAgIGhhdmVEaXNwYXRjaFByb3BzQ2hhbmdlZCA9IHRoaXMudXBkYXRlRGlzcGF0Y2hQcm9wc0lmTmVlZGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaGF2ZU1lcmdlZFByb3BzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkIHx8IGhhdmVEaXNwYXRjaFByb3BzQ2hhbmdlZCB8fCBoYXZlT3duUHJvcHNDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgIGhhdmVNZXJnZWRQcm9wc0NoYW5nZWQgPSB0aGlzLnVwZGF0ZU1lcmdlZFByb3BzSWZOZWVkZWQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGhhdmVNZXJnZWRQcm9wc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaGF2ZU1lcmdlZFByb3BzQ2hhbmdlZCAmJiByZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlcmVkRWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3aXRoUmVmKSB7XG4gICAgICAgICAgICAgIHRoaXMucmVuZGVyZWRFbGVtZW50ID0gKDAsIF9yZWFjdC5jcmVhdGVFbGVtZW50KShXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgdGhpcy5tZXJnZWRQcm9wcywge3JlZjogJ3dyYXBwZWRJbnN0YW5jZSd9KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudCA9ICgwLCBfcmVhY3QuY3JlYXRlRWxlbWVudCkoV3JhcHBlZENvbXBvbmVudCwgdGhpcy5tZXJnZWRQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZW5kZXJlZEVsZW1lbnQ7XG4gICAgICAgICAgfTtcbiAgICAgICAgICByZXR1cm4gQ29ubmVjdDtcbiAgICAgICAgfShfcmVhY3QuQ29tcG9uZW50KTtcbiAgICAgICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGNvbm5lY3REaXNwbGF5TmFtZTtcbiAgICAgICAgQ29ubmVjdC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgICAgQ29ubmVjdC5jb250ZXh0VHlwZXMgPSB7c3RvcmU6IF9zdG9yZVNoYXBlMltcImRlZmF1bHRcIl19O1xuICAgICAgICBDb25uZWN0LnByb3BUeXBlcyA9IHtzdG9yZTogX3N0b3JlU2hhcGUyW1wiZGVmYXVsdFwiXX07XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy52ZXJzaW9uID09PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICAgICAgdGhpcy5jbGVhckNhY2hlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIF9ob2lzdE5vblJlYWN0U3RhdGljczJbXCJkZWZhdWx0XCJdKShDb25uZWN0LCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgIH07XG4gICAgfVxuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJjY1wiLCBbXCJhN1wiLCBcImNhXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICBleHBvcnRzLmNvbm5lY3QgPSBleHBvcnRzLlByb3ZpZGVyID0gdW5kZWZpbmVkO1xuICB2YXIgX1Byb3ZpZGVyID0gJF9fcmVxdWlyZSgnYTcnKTtcbiAgdmFyIF9Qcm92aWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm92aWRlcik7XG4gIHZhciBfY29ubmVjdCA9ICRfX3JlcXVpcmUoJ2NhJyk7XG4gIHZhciBfY29ubmVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb25uZWN0KTtcbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1wiZGVmYXVsdFwiOiBvYmp9O1xuICB9XG4gIGV4cG9ydHMuUHJvdmlkZXIgPSBfUHJvdmlkZXIyW1wiZGVmYXVsdFwiXTtcbiAgZXhwb3J0cy5jb25uZWN0ID0gX2Nvbm5lY3QyW1wiZGVmYXVsdFwiXTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJhMlwiLCBbXCJjY1wiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9ICRfX3JlcXVpcmUoJ2NjJyk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiY2RcIiwgW1wiY2VcIiwgXCJjZlwiLCBcImQwXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciAkZXhwb3J0ID0gJF9fcmVxdWlyZSgnY2UnKSxcbiAgICAgIGNvcmUgPSAkX19yZXF1aXJlKCdjZicpLFxuICAgICAgZmFpbHMgPSAkX19yZXF1aXJlKCdkMCcpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSwgZXhlYykge1xuICAgIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXSxcbiAgICAgICAgZXhwID0ge307XG4gICAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCkge1xuICAgICAgZm4oMSk7XG4gICAgfSksICdPYmplY3QnLCBleHApO1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImQxXCIsIFtcImQyXCIsIFwiY2RcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIHRvSU9iamVjdCA9ICRfX3JlcXVpcmUoJ2QyJyk7XG4gICRfX3JlcXVpcmUoJ2NkJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uKCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZDNcIiwgW1wiZDRcIiwgXCJkMVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgJCA9ICRfX3JlcXVpcmUoJ2Q0Jyk7XG4gICRfX3JlcXVpcmUoJ2QxJyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gJC5nZXREZXNjKGl0LCBrZXkpO1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImQ1XCIsIFtcImQzXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFwiZGVmYXVsdFwiOiAkX19yZXF1aXJlKCdkMycpLFxuICAgIF9fZXNNb2R1bGU6IHRydWVcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJhM1wiLCBbXCJkNVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIF9PYmplY3QkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gJF9fcmVxdWlyZSgnZDUnKVtcImRlZmF1bHRcIl07XG4gIGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZnVuY3Rpb24gZ2V0KF94LCBfeDIsIF94Mykge1xuICAgIHZhciBfYWdhaW4gPSB0cnVlO1xuICAgIF9mdW5jdGlvbjogd2hpbGUgKF9hZ2Fpbikge1xuICAgICAgdmFyIG9iamVjdCA9IF94LFxuICAgICAgICAgIHByb3BlcnR5ID0gX3gyLFxuICAgICAgICAgIHJlY2VpdmVyID0gX3gzO1xuICAgICAgX2FnYWluID0gZmFsc2U7XG4gICAgICBpZiAob2JqZWN0ID09PSBudWxsKVxuICAgICAgICBvYmplY3QgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG4gICAgICB2YXIgZGVzYyA9IF9PYmplY3QkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcGVydHkpO1xuICAgICAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgcGFyZW50ID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iamVjdCk7XG4gICAgICAgIGlmIChwYXJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF94ID0gcGFyZW50O1xuICAgICAgICAgIF94MiA9IHByb3BlcnR5O1xuICAgICAgICAgIF94MyA9IHJlY2VpdmVyO1xuICAgICAgICAgIF9hZ2FpbiA9IHRydWU7XG4gICAgICAgICAgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBjb250aW51ZSBfZnVuY3Rpb247XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHtcbiAgICAgICAgcmV0dXJuIGRlc2MudmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7XG4gICAgICAgIGlmIChnZXR0ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldHRlci5jYWxsKHJlY2VpdmVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZDZcIiwgW1wiZDRcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyICQgPSAkX19yZXF1aXJlKCdkNCcpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZShQLCBEKSB7XG4gICAgcmV0dXJuICQuY3JlYXRlKFAsIEQpO1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImQ3XCIsIFtcImQ2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFwiZGVmYXVsdFwiOiAkX19yZXF1aXJlKCdkNicpLFxuICAgIF9fZXNNb2R1bGU6IHRydWVcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJkOFwiLCBbXCJjZVwiLCBcImQ5XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciAkZXhwb3J0ID0gJF9fcmVxdWlyZSgnY2UnKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6ICRfX3JlcXVpcmUoJ2Q5Jykuc2V0fSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZGFcIiwgW1wiZDhcIiwgXCJjZlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAkX19yZXF1aXJlKCdkOCcpO1xuICBtb2R1bGUuZXhwb3J0cyA9ICRfX3JlcXVpcmUoJ2NmJykuT2JqZWN0LnNldFByb3RvdHlwZU9mO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImRiXCIsIFtcImRhXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFwiZGVmYXVsdFwiOiAkX19yZXF1aXJlKCdkYScpLFxuICAgIF9fZXNNb2R1bGU6IHRydWVcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJhNFwiLCBbXCJkN1wiLCBcImRiXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgX09iamVjdCRjcmVhdGUgPSAkX19yZXF1aXJlKCdkNycpW1wiZGVmYXVsdFwiXTtcbiAgdmFyIF9PYmplY3Qkc2V0UHJvdG90eXBlT2YgPSAkX19yZXF1aXJlKCdkYicpW1wiZGVmYXVsdFwiXTtcbiAgZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbihzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpO1xuICAgIH1cbiAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBfT2JqZWN0JGNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7Y29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfX0pO1xuICAgIGlmIChzdXBlckNsYXNzKVxuICAgICAgX09iamVjdCRzZXRQcm90b3R5cGVPZiA/IF9PYmplY3Qkc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbiAgfTtcbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJkY1wiLCBbXCJkNFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgJCA9ICRfX3JlcXVpcmUoJ2Q0Jyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYykge1xuICAgIHJldHVybiAkLnNldERlc2MoaXQsIGtleSwgZGVzYyk7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZGRcIiwgW1wiZGNcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgXCJkZWZhdWx0XCI6ICRfX3JlcXVpcmUoJ2RjJyksXG4gICAgX19lc01vZHVsZTogdHJ1ZVxuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImE1XCIsIFtcImRkXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgX09iamVjdCRkZWZpbmVQcm9wZXJ0eSA9ICRfX3JlcXVpcmUoJ2RkJylbXCJkZWZhdWx0XCJdO1xuICBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IChmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcilcbiAgICAgICAgICBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgX09iamVjdCRkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgICAgaWYgKHByb3RvUHJvcHMpXG4gICAgICAgIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICAgIGlmIChzdGF0aWNQcm9wcylcbiAgICAgICAgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH07XG4gIH0pKCk7XG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiYTZcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZnVuY3Rpb24oaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyKCc5ZScsIFsnYTMnLCAnYTQnLCAnYTUnLCAnYTYnLCAnOWMnXSwgZnVuY3Rpb24gKF9leHBvcnQpIHtcbiAgdmFyIF9nZXQsIF9pbmhlcml0cywgX2NyZWF0ZUNsYXNzLCBfY2xhc3NDYWxsQ2hlY2ssIFJlYWN0LCBQcm9wVHlwZXMsIENvbXBvbmVudCwgTGF6eUltZztcblxuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoX2EzKSB7XG4gICAgICBfZ2V0ID0gX2EzWydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9hNCkge1xuICAgICAgX2luaGVyaXRzID0gX2E0WydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9hNSkge1xuICAgICAgX2NyZWF0ZUNsYXNzID0gX2E1WydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9hNikge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrID0gX2E2WydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9jKSB7XG4gICAgICBSZWFjdCA9IF9jWydkZWZhdWx0J107XG4gICAgICBQcm9wVHlwZXMgPSBfYy5Qcm9wVHlwZXM7XG4gICAgICBDb21wb25lbnQgPSBfYy5Db21wb25lbnQ7XG4gICAgfV0sXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICBMYXp5SW1nID0gKGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICAgICAgIF9pbmhlcml0cyhMYXp5SW1nLCBfQ29tcG9uZW50KTtcblxuICAgICAgICBmdW5jdGlvbiBMYXp5SW1nKCkge1xuICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBMYXp5SW1nKTtcblxuICAgICAgICAgIF9nZXQoT2JqZWN0LmdldFByb3RvdHlwZU9mKExhenlJbWcucHJvdG90eXBlKSwgJ2NvbnN0cnVjdG9yJywgdGhpcykuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jcmVhdGVDbGFzcyhMYXp5SW1nLCBbe1xuICAgICAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc0xvYWRlZDogZmFsc2UgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiAnaGFuZGxlTG9hZCcsXG4gICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgaXNMb2FkZWQ6IHRydWUgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAga2V5OiAncmVuZGVyJyxcbiAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2ltZycsIHtcbiAgICAgICAgICAgICAgY2xhc3NOYW1lOiAodGhpcy5zdGF0ZS5pc0xvYWRlZCA/ICdsYXp5bG9hZGVkJyA6ICdsYXp5bG9hZCcpICsgJyBsYXp5Ymx1cicsXG4gICAgICAgICAgICAgIHNyYzogdGhpcy5wcm9wcy5zcmMsXG4gICAgICAgICAgICAgIG9uTG9hZDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5oYW5kbGVMb2FkKCk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGFsdDogdGhpcy5wcm9wcy5hbHQgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XSk7XG5cbiAgICAgICAgcmV0dXJuIExhenlJbWc7XG4gICAgICB9KShDb21wb25lbnQpO1xuXG4gICAgICBMYXp5SW1nLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgYWx0OiAnJ1xuICAgICAgfTtcblxuICAgICAgTGF6eUltZy5wcm9wVHlwZXMgPSB7XG4gICAgICAgIHNyYzogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICBhbHQ6IFByb3BUeXBlcy5zdHJpbmdcbiAgICAgIH07XG5cbiAgICAgIF9leHBvcnQoJ2RlZmF1bHQnLCBMYXp5SW1nKTtcbiAgICB9XG4gIH07XG59KTtcbiRfX1N5c3RlbS5yZWdpc3RlcignZGUnLCBbJzljJ10sIGZ1bmN0aW9uIChfZXhwb3J0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgUmVhY3QsIFByb3BUeXBlcywgU3ZnSWNvbjtcbiAgcmV0dXJuIHtcbiAgICBzZXR0ZXJzOiBbZnVuY3Rpb24gKF9jKSB7XG4gICAgICBSZWFjdCA9IF9jWydkZWZhdWx0J107XG4gICAgICBQcm9wVHlwZXMgPSBfYy5Qcm9wVHlwZXM7XG4gICAgfV0sXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgU3ZnSWNvbiA9IGZ1bmN0aW9uIFN2Z0ljb24oX3JlZikge1xuICAgICAgICB2YXIgaWQgPSBfcmVmLmlkO1xuICAgICAgICB2YXIgbGFiZWwgPSBfcmVmLmxhYmVsO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc3ZnJyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2ljb24nLCAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsICdhcmlhLWxhYmVsJzogbGFiZWwgfSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCd1c2UnLCB7IHhsaW5rSHJlZjogJ3N2Zy9pY29ucy5zdmcjJyArIGlkIH0pXG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICBTdmdJY29uLmRlZmF1bHRQcm9wcyA9IHtcbiAgICAgICAgbGFiZWw6ICcnXG4gICAgICB9O1xuXG4gICAgICBTdmdJY29uLnByb3BUeXBlcyA9IHtcbiAgICAgICAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmdcbiAgICAgIH07XG5cbiAgICAgIF9leHBvcnQoJ2RlZmF1bHQnLCBTdmdJY29uKTtcbiAgICB9XG4gIH07XG59KTtcbiRfX1N5c3RlbS5yZWdpc3RlcignZGYnLCBbJzljJywgJzllJywgJ2RlJ10sIGZ1bmN0aW9uIChfZXhwb3J0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgUmVhY3QsIFByb3BUeXBlcywgTGF6eUltZywgU3ZnSWNvbiwgZ2V0TW9udGgsIGZvcm1hdERhdGUsIEV2ZW50TGlzdEl0ZW07XG4gIHJldHVybiB7XG4gICAgc2V0dGVyczogW2Z1bmN0aW9uIChfYykge1xuICAgICAgUmVhY3QgPSBfY1snZGVmYXVsdCddO1xuICAgICAgUHJvcFR5cGVzID0gX2MuUHJvcFR5cGVzO1xuICAgIH0sIGZ1bmN0aW9uIChfZSkge1xuICAgICAgTGF6eUltZyA9IF9lWydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9kZSkge1xuICAgICAgU3ZnSWNvbiA9IF9kZVsnZGVmYXVsdCddO1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGdldE1vbnRoID0gZnVuY3Rpb24gZ2V0TW9udGgobW9udGgpIHtcbiAgICAgICAgdmFyIG1vbnRocyA9IFsnSmFuZWlybycsICdGZXZlcmVpcm8nLCAnTWFyw6dvJywgJ0FicmlsJywgJ01haW8nLCAnSnVuaG8nLCAnSnVsaG8nLCAnQWdvc3RvJywgJ1NldGVtYnJvJywgJ091dHVicm8nLCAnTm92ZW1icm8nLCAnRGV6ZW1icm8nXTtcbiAgICAgICAgdmFyIG0gPSBtb250aHMuaW5kZXhPZihtb250aCkgKyAxO1xuICAgICAgICByZXR1cm4gKG0gPCAxMCA/ICcwJyA6ICcnKSArIG07XG4gICAgICB9O1xuXG4gICAgICBmb3JtYXREYXRlID0gZnVuY3Rpb24gZm9ybWF0RGF0ZShfcmVmKSB7XG4gICAgICAgIHZhciBkYXkgPSBfcmVmLmRheTtcbiAgICAgICAgdmFyIG1vbnRoID0gX3JlZi5tb250aDtcbiAgICAgICAgdmFyIHllYXIgPSBfcmVmLnllYXI7XG5cbiAgICAgICAgcmV0dXJuIGRheSArICcvJyArIGdldE1vbnRoKG1vbnRoKSArICcvJyArIHllYXI7XG4gICAgICB9O1xuXG4gICAgICBFdmVudExpc3RJdGVtID0gZnVuY3Rpb24gRXZlbnRMaXN0SXRlbShfcmVmMikge1xuICAgICAgICB2YXIgdGl0bGUgPSBfcmVmMi50aXRsZTtcbiAgICAgICAgdmFyIGltYWdlID0gX3JlZjIuaW1hZ2U7XG4gICAgICAgIHZhciBpbm5lckxpbmsgPSBfcmVmMi5pbm5lckxpbms7XG4gICAgICAgIHZhciBsaW5rID0gX3JlZjIubGluaztcbiAgICAgICAgdmFyIGRhdGUgPSBfcmVmMi5kYXRlO1xuICAgICAgICB2YXIgcHJpY2UgPSBfcmVmMi5wcmljZTtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gX3JlZjIubG9jYXRpb247XG4gICAgICAgIHZhciBsb2NhdGlvblVybCA9IF9yZWYyLmxvY2F0aW9uVXJsO1xuICAgICAgICB2YXIgc2hvcnREZXNjcmlwdGlvbiA9IF9yZWYyLnNob3J0RGVzY3JpcHRpb247XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdhcnRpY2xlJyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogJ2V2ZW50JyB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnYScsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2V2ZW50LW1lZGlhJywgaHJlZjogbGluaywgdGl0bGU6ICdWZXIgZXZlbnRvJyB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChMYXp5SW1nLCB7IHNyYzogaW1hZ2UgfHwgJ3N2Zy9sb2dvLnN2ZycsIGFsdDogdGl0bGUgfSlcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZXZlbnQtbWFpbicgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdhJyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjb250ZW50JywgaHJlZjogbGluaywgdGl0bGU6ICdWZXIgZXZlbnRvJyB9LFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdoMicsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB0aXRsZVxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdwJyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIHNob3J0RGVzY3JpcHRpb25cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICEhbGluayAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnYScsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnYnRuLWxpbmsnLCBocmVmOiBsaW5rLCB0YXJnZXQ6ICdfYmxhbmsnLCB0aXRsZTogJ1Zpc2l0YXIgc2l0ZSBvZmljaWFsJyB9LFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFN2Z0ljb24sIHsgaWQ6ICdsaW5rJywgbGFiZWw6ICdMaW5rJyB9KSxcbiAgICAgICAgICAgICAgbGlua1xuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICd1bCcsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZXZlbnQtbGlzdCcgfSxcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnbGknLFxuICAgICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZXZlbnQtbGlzdC0taXRlbScgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFN2Z0ljb24sIHsgaWQ6ICdkYXRlJywgbGFiZWw6ICdEYXRhJyB9KSxcbiAgICAgICAgICAgICAgICBmb3JtYXREYXRlKGRhdGUpXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2V2ZW50LWxpc3QtLWl0ZW0nIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChTdmdJY29uLCB7IGlkOiAncHJpY2UnLCBsYWJlbDogJ1ByZcOnbycgfSksXG4gICAgICAgICAgICAgICAgcHJpY2VcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgISFsb2NhdGlvblVybCAmJiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdsaScsXG4gICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdldmVudC1saXN0LS1pdGVtJyB9LFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoU3ZnSWNvbiwgeyBpZDogJ2xvY2F0aW9uJywgbGFiZWw6ICdMb2NhbCcgfSksXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICdhJyxcbiAgICAgICAgICAgICAgICAgIHsgaHJlZjogbG9jYXRpb25VcmwsIHRhcmdldDogJ19ibGFuaycgfSxcbiAgICAgICAgICAgICAgICAgIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgRXZlbnRMaXN0SXRlbS5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGRhdGU6IHtcbiAgICAgICAgICBkYXk6ICcwMCcsXG4gICAgICAgICAgbW9udGg6ICd4eCcsXG4gICAgICAgICAgeWVhcjogJzAwMDAnXG4gICAgICAgIH0sXG4gICAgICAgIHByaWNlOiAnR3LDoXRpcydcbiAgICAgIH07XG5cbiAgICAgIEV2ZW50TGlzdEl0ZW0ucHJvcFR5cGVzID0ge1xuICAgICAgICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICBpbWFnZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgaW5uZXJMaW5rOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgIGxpbms6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGRhdGU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgICAgZGF5OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gICAgICAgICAgbW9udGg6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAgICAgICB5ZWFyOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbiAgICAgICAgfSkuaXNSZXF1aXJlZCxcbiAgICAgICAgcHJpY2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBsb2NhdGlvblVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgc2hvcnREZXNjcmlwdGlvbjogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkXG4gICAgICB9O1xuXG4gICAgICBfZXhwb3J0KCdkZWZhdWx0JywgRXZlbnRMaXN0SXRlbSk7XG4gICAgfVxuICB9O1xufSk7XG4kX19TeXN0ZW0ucmVnaXN0ZXIoJ2UwJywgWydlMScsICc5YycsICdhMicsICdkZiddLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICB2YXIgX2V4dGVuZHMsIFJlYWN0LCBQcm9wVHlwZXMsIGNvbm5lY3QsIEV2ZW50TGlzdEl0ZW0sIFBhZ2UsIG1hcFN0YXRlVG9Qcm9wcztcblxuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoX2UxKSB7XG4gICAgICBfZXh0ZW5kcyA9IF9lMVsnZGVmYXVsdCddO1xuICAgIH0sIGZ1bmN0aW9uIChfYykge1xuICAgICAgUmVhY3QgPSBfY1snZGVmYXVsdCddO1xuICAgICAgUHJvcFR5cGVzID0gX2MuUHJvcFR5cGVzO1xuICAgIH0sIGZ1bmN0aW9uIChfYTIpIHtcbiAgICAgIGNvbm5lY3QgPSBfYTIuY29ubmVjdDtcbiAgICB9LCBmdW5jdGlvbiAoX2RmKSB7XG4gICAgICBFdmVudExpc3RJdGVtID0gX2RmWydkZWZhdWx0J107XG4gICAgfV0sXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgLy8gaW1wb3J0IFBhZ2luYXRpb24gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9wYWdpbmF0aW9uL2luZGV4J1xuXG4gICAgICAndXNlIHN0cmljdCc7XG5cbiAgICAgIFBhZ2UgPSBmdW5jdGlvbiBQYWdlKF9yZWYpIHtcbiAgICAgICAgdmFyIGV2ZW50cyA9IF9yZWYuZXZlbnRzO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnc2VjdGlvbicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdwYWdlJyB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnaGVhZGVyJyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAncGFnZS1oZWFkZXInIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnaDMnLFxuICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3RpdGxlJyB9LFxuICAgICAgICAgICAgICAnUHLDs3hpbW9zIEV2ZW50b3MnXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ3BhZ2Utd3JhcCcgfSxcbiAgICAgICAgICAgIGV2ZW50cy5tYXAoZnVuY3Rpb24gKHByb3BzLCBpbmRleCkge1xuICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChFdmVudExpc3RJdGVtLCBfZXh0ZW5kcyh7IGtleTogaW5kZXggfSwgcHJvcHMpKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgUGFnZS5wcm9wVHlwZXMgPSB7XG4gICAgICAgIGV2ZW50czogUHJvcFR5cGVzLnNoYXBlLmlzUmVxdWlyZWRcbiAgICAgIH07XG5cbiAgICAgIG1hcFN0YXRlVG9Qcm9wcyA9IGZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGV2ZW50czogc3RhdGUuZXZlbnRzLmV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKF8sIGluZGV4KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5kZXggPj0gNTtcbiAgICAgICAgICB9KVxuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgX2V4cG9ydCgnZGVmYXVsdCcsIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShQYWdlKSk7XG4gICAgfVxuICB9O1xufSk7XG4vKiA8UGFnaW5hdGlvbiAvPiAqL1xuJF9fU3lzdGVtLnJlZ2lzdGVyKCdlMicsIFsnOWMnXSwgZnVuY3Rpb24gKF9leHBvcnQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBSZWFjdCwgQXNpZGU7XG4gIHJldHVybiB7XG4gICAgc2V0dGVyczogW2Z1bmN0aW9uIChfYykge1xuICAgICAgUmVhY3QgPSBfY1snZGVmYXVsdCddO1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIEFzaWRlID0gZnVuY3Rpb24gQXNpZGUoKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdhc2lkZScsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdkaXNjbGFpbWVyJyB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnZGlzY2xhaW1lci1pbm5lcicgfSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICdoMicsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAndGl0bGUnIH0sXG4gICAgICAgICAgICAgICdDb25oZWNlIGFsZ3VtIGV2ZW50byBkZSBGcm9udC1FbmQgcXVlIG7Do28gZXN0w6EgbGlzdGFkbz8nXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgaHJlZjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9mcm9udGVuZGJyL2V2ZW50b3MvaXNzdWVzJyxcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdidG4nLFxuICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogJ0FudW5jaWFyIEV2ZW50bycsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdBbnVuY2llIHNldSBldmVudG8nIH0sXG4gICAgICAgICAgICAgICdBbnVuY2lhciBFdmVudG8nXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfTtcblxuICAgICAgX2V4cG9ydCgnZGVmYXVsdCcsIEFzaWRlKTtcbiAgICB9XG4gIH07XG59KTtcbiRfX1N5c3RlbS5yZWdpc3RlcignZTMnLCBbJzljJywgJ2EwJywgJ2UwJywgJ2UyJ10sIGZ1bmN0aW9uIChfZXhwb3J0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgUmVhY3QsIEhlYWRlciwgUGFnZSwgQXNpZGUsIE1haW5Db250ZW50O1xuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoX2MpIHtcbiAgICAgIFJlYWN0ID0gX2NbJ2RlZmF1bHQnXTtcbiAgICB9LCBmdW5jdGlvbiAoX2EwKSB7XG4gICAgICBIZWFkZXIgPSBfYTBbJ2RlZmF1bHQnXTtcbiAgICB9LCBmdW5jdGlvbiAoX2UwKSB7XG4gICAgICBQYWdlID0gX2UwWydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9lMikge1xuICAgICAgQXNpZGUgPSBfZTJbJ2RlZmF1bHQnXTtcbiAgICB9XSxcbiAgICBleGVjdXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBNYWluQ29udGVudCA9IGZ1bmN0aW9uIE1haW5Db250ZW50KCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnbWFpbicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdtYWluJywgcm9sZTogJ21haW4nIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChIZWFkZXIsIG51bGwpLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUGFnZSwgbnVsbCksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChBc2lkZSwgbnVsbClcbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICAgIF9leHBvcnQoJ2RlZmF1bHQnLCBNYWluQ29udGVudCk7XG4gICAgfVxuICB9O1xufSk7XG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNFwiLCBbXCIzMFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIHZhciBvbmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGNvcHlGaWVsZHNGcm9tKSB7XG4gICAgICB2YXIgS2xhc3MgPSB0aGlzO1xuICAgICAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgICAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyKSB7XG4gICAgICB2YXIgS2xhc3MgPSB0aGlzO1xuICAgICAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgICAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMik7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgdGhyZWVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMpIHtcbiAgICAgIHZhciBLbGFzcyA9IHRoaXM7XG4gICAgICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMpO1xuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMsIGE0KSB7XG4gICAgICB2YXIgS2xhc3MgPSB0aGlzO1xuICAgICAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgICAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGZpdmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICAgICAgdmFyIEtsYXNzID0gdGhpcztcbiAgICAgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICAgICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIsIGEzLCBhNCwgYTUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHN0YW5kYXJkUmVsZWFzZXIgPSBmdW5jdGlvbihpbnN0YW5jZSkge1xuICAgICAgdmFyIEtsYXNzID0gdGhpcztcbiAgICAgICEoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBpbnN0YW5jZS5kZXN0cnVjdG9yKCk7XG4gICAgICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCA8IEtsYXNzLnBvb2xTaXplKSB7XG4gICAgICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBERUZBVUxUX1BPT0xfU0laRSA9IDEwO1xuICAgIHZhciBERUZBVUxUX1BPT0xFUiA9IG9uZUFyZ3VtZW50UG9vbGVyO1xuICAgIHZhciBhZGRQb29saW5nVG8gPSBmdW5jdGlvbihDb3B5Q29uc3RydWN0b3IsIHBvb2xlcikge1xuICAgICAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICAgICAgTmV3S2xhc3MuaW5zdGFuY2VQb29sID0gW107XG4gICAgICBOZXdLbGFzcy5nZXRQb29sZWQgPSBwb29sZXIgfHwgREVGQVVMVF9QT09MRVI7XG4gICAgICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgICAgIE5ld0tsYXNzLnBvb2xTaXplID0gREVGQVVMVF9QT09MX1NJWkU7XG4gICAgICB9XG4gICAgICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgICAgIHJldHVybiBOZXdLbGFzcztcbiAgICB9O1xuICAgIHZhciBQb29sZWRDbGFzcyA9IHtcbiAgICAgIGFkZFBvb2xpbmdUbzogYWRkUG9vbGluZ1RvLFxuICAgICAgb25lQXJndW1lbnRQb29sZXI6IG9uZUFyZ3VtZW50UG9vbGVyLFxuICAgICAgdHdvQXJndW1lbnRQb29sZXI6IHR3b0FyZ3VtZW50UG9vbGVyLFxuICAgICAgdGhyZWVBcmd1bWVudFBvb2xlcjogdGhyZWVBcmd1bWVudFBvb2xlcixcbiAgICAgIGZvdXJBcmd1bWVudFBvb2xlcjogZm91ckFyZ3VtZW50UG9vbGVyLFxuICAgICAgZml2ZUFyZ3VtZW50UG9vbGVyOiBmaXZlQXJndW1lbnRQb29sZXJcbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUG9vbGVkQ2xhc3M7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjQwXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBmdW5jdGlvbiBlc2NhcGUoa2V5KSB7XG4gICAgdmFyIGVzY2FwZVJlZ2V4ID0gL1s9Ol0vZztcbiAgICB2YXIgZXNjYXBlckxvb2t1cCA9IHtcbiAgICAgICc9JzogJz0wJyxcbiAgICAgICc6JzogJz0yJ1xuICAgIH07XG4gICAgdmFyIGVzY2FwZWRTdHJpbmcgPSAoJycgKyBrZXkpLnJlcGxhY2UoZXNjYXBlUmVnZXgsIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICByZXR1cm4gZXNjYXBlckxvb2t1cFttYXRjaF07XG4gICAgfSk7XG4gICAgcmV0dXJuICckJyArIGVzY2FwZWRTdHJpbmc7XG4gIH1cbiAgZnVuY3Rpb24gdW5lc2NhcGUoa2V5KSB7XG4gICAgdmFyIHVuZXNjYXBlUmVnZXggPSAvKD0wfD0yKS9nO1xuICAgIHZhciB1bmVzY2FwZXJMb29rdXAgPSB7XG4gICAgICAnPTAnOiAnPScsXG4gICAgICAnPTInOiAnOidcbiAgICB9O1xuICAgIHZhciBrZXlTdWJzdHJpbmcgPSBrZXlbMF0gPT09ICcuJyAmJiBrZXlbMV0gPT09ICckJyA/IGtleS5zdWJzdHJpbmcoMikgOiBrZXkuc3Vic3RyaW5nKDEpO1xuICAgIHJldHVybiAoJycgKyBrZXlTdWJzdHJpbmcpLnJlcGxhY2UodW5lc2NhcGVSZWdleCwgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHJldHVybiB1bmVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICAgIH0pO1xuICB9XG4gIHZhciBLZXlFc2NhcGVVdGlscyA9IHtcbiAgICBlc2NhcGU6IGVzY2FwZSxcbiAgICB1bmVzY2FwZTogdW5lc2NhcGVcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBLZXlFc2NhcGVVdGlscztcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI0MlwiLCBbXCI0N1wiLCBcIjhkXCIsIFwiZTRcIiwgXCIzMFwiLCBcIjQwXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgUmVhY3RDdXJyZW50T3duZXIgPSAkX19yZXF1aXJlKCc0NycpO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSAkX19yZXF1aXJlKCc4ZCcpO1xuICAgIHZhciBnZXRJdGVyYXRvckZuID0gJF9fcmVxdWlyZSgnZTQnKTtcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIgS2V5RXNjYXBlVXRpbHMgPSAkX19yZXF1aXJlKCc0MCcpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICB2YXIgU0VQQVJBVE9SID0gJy4nO1xuICAgIHZhciBTVUJTRVBBUkFUT1IgPSAnOic7XG4gICAgdmFyIGRpZFdhcm5BYm91dE1hcHMgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBnZXRDb21wb25lbnRLZXkoY29tcG9uZW50LCBpbmRleCkge1xuICAgICAgaWYgKGNvbXBvbmVudCAmJiB0eXBlb2YgY29tcG9uZW50ID09PSAnb2JqZWN0JyAmJiBjb21wb25lbnQua2V5ICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIEtleUVzY2FwZVV0aWxzLmVzY2FwZShjb21wb25lbnQua2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCBuYW1lU29GYXIsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuICAgICAgaWYgKHR5cGUgPT09ICd1bmRlZmluZWQnIHx8IHR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoY2hpbGRyZW4gPT09IG51bGwgfHwgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZSA9PT0gJ251bWJlcicgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgICBjYWxsYmFjayh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkcmVuLCBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SICsgZ2V0Q29tcG9uZW50S2V5KGNoaWxkcmVuLCAwKSA6IG5hbWVTb0Zhcik7XG4gICAgICAgIHJldHVybiAxO1xuICAgICAgfVxuICAgICAgdmFyIGNoaWxkO1xuICAgICAgdmFyIG5leHROYW1lO1xuICAgICAgdmFyIHN1YnRyZWVDb3VudCA9IDA7XG4gICAgICB2YXIgbmV4dE5hbWVQcmVmaXggPSBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SIDogbmFtZVNvRmFyICsgU1VCU0VQQVJBVE9SO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGkpO1xuICAgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oY2hpbGRyZW4pO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG4gICAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IGNoaWxkcmVuLmVudHJpZXMpIHtcbiAgICAgICAgICAgIHZhciBpaSA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhkaWRXYXJuQWJvdXRNYXBzLCAnVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyBub3QgeWV0IGZ1bGx5IHN1cHBvcnRlZC4gSXQgaXMgYW4gJyArICdleHBlcmltZW50YWwgZmVhdHVyZSB0aGF0IG1pZ2h0IGJlIHJlbW92ZWQuIENvbnZlcnQgaXQgdG8gYSAnICsgJ3NlcXVlbmNlIC8gaXRlcmFibGUgb2Yga2V5ZWQgUmVhY3RFbGVtZW50cyBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgY2hpbGQgPSBlbnRyeVsxXTtcbiAgICAgICAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgS2V5RXNjYXBlVXRpbHMuZXNjYXBlKGVudHJ5WzBdKSArIFNVQlNFUEFSQVRPUiArIGdldENvbXBvbmVudEtleShjaGlsZCwgMCk7XG4gICAgICAgICAgICAgICAgc3VidHJlZUNvdW50ICs9IHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkLCBuZXh0TmFtZSwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICB2YXIgYWRkZW5kdW0gPSAnJztcbiAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgYWRkZW5kdW0gPSAnIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgJyArICdpbnN0ZWFkIG9yIHdyYXAgdGhlIG9iamVjdCB1c2luZyBjcmVhdGVGcmFnbWVudChvYmplY3QpIGZyb20gdGhlICcgKyAnUmVhY3QgYWRkLW9ucy4nO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuLl9pc1JlYWN0RWxlbWVudCkge1xuICAgICAgICAgICAgICBhZGRlbmR1bSA9ICcgSXQgbG9va3MgbGlrZSB5b3VcXCdyZSB1c2luZyBhbiBlbGVtZW50IGNyZWF0ZWQgYnkgYSBkaWZmZXJlbnQgJyArICd2ZXJzaW9uIG9mIFJlYWN0LiBNYWtlIHN1cmUgdG8gdXNlIG9ubHkgb25lIGNvcHkgb2YgUmVhY3QuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgYWRkZW5kdW0gKz0gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgICAgICAgIWZhbHNlID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ09iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogJXMpLiVzJywgY2hpbGRyZW5TdHJpbmcgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gJ29iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhjaGlsZHJlbikuam9pbignLCAnKSArICd9JyA6IGNoaWxkcmVuU3RyaW5nLCBhZGRlbmR1bSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3VidHJlZUNvdW50O1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KSB7XG4gICAgICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZHJlbiwgJycsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHRyYXZlcnNlQWxsQ2hpbGRyZW47XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjMyXCIsIFtcIjRcIiwgXCI4ZFwiLCBcIjQ4XCIsIFwiNDJcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBQb29sZWRDbGFzcyA9ICRfX3JlcXVpcmUoJzQnKTtcbiAgdmFyIFJlYWN0RWxlbWVudCA9ICRfX3JlcXVpcmUoJzhkJyk7XG4gIHZhciBlbXB0eUZ1bmN0aW9uID0gJF9fcmVxdWlyZSgnNDgnKTtcbiAgdmFyIHRyYXZlcnNlQWxsQ2hpbGRyZW4gPSAkX19yZXF1aXJlKCc0MicpO1xuICB2YXIgdHdvQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlcjtcbiAgdmFyIGZvdXJBcmd1bWVudFBvb2xlciA9IFBvb2xlZENsYXNzLmZvdXJBcmd1bWVudFBvb2xlcjtcbiAgdmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1xcLysvZztcbiAgZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgICByZXR1cm4gKCcnICsgdGV4dCkucmVwbGFjZSh1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCwgJyQmLycpO1xuICB9XG4gIGZ1bmN0aW9uIEZvckVhY2hCb29rS2VlcGluZyhmb3JFYWNoRnVuY3Rpb24sIGZvckVhY2hDb250ZXh0KSB7XG4gICAgdGhpcy5mdW5jID0gZm9yRWFjaEZ1bmN0aW9uO1xuICAgIHRoaXMuY29udGV4dCA9IGZvckVhY2hDb250ZXh0O1xuICAgIHRoaXMuY291bnQgPSAwO1xuICB9XG4gIEZvckVhY2hCb29rS2VlcGluZy5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZnVuYyA9IG51bGw7XG4gICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLmNvdW50ID0gMDtcbiAgfTtcbiAgUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKEZvckVhY2hCb29rS2VlcGluZywgdHdvQXJndW1lbnRQb29sZXIpO1xuICBmdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGQoYm9va0tlZXBpbmcsIGNoaWxkLCBuYW1lKSB7XG4gICAgdmFyIGZ1bmMgPSBib29rS2VlcGluZy5mdW5jO1xuICAgIHZhciBjb250ZXh0ID0gYm9va0tlZXBpbmcuY29udGV4dDtcbiAgICBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGJvb2tLZWVwaW5nLmNvdW50KyspO1xuICB9XG4gIGZ1bmN0aW9uIGZvckVhY2hDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG4gICAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IEZvckVhY2hCb29rS2VlcGluZy5nZXRQb29sZWQoZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KTtcbiAgICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGQsIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgRm9yRWFjaEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbiAgfVxuICBmdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsIGtleVByZWZpeCwgbWFwRnVuY3Rpb24sIG1hcENvbnRleHQpIHtcbiAgICB0aGlzLnJlc3VsdCA9IG1hcFJlc3VsdDtcbiAgICB0aGlzLmtleVByZWZpeCA9IGtleVByZWZpeDtcbiAgICB0aGlzLmZ1bmMgPSBtYXBGdW5jdGlvbjtcbiAgICB0aGlzLmNvbnRleHQgPSBtYXBDb250ZXh0O1xuICAgIHRoaXMuY291bnQgPSAwO1xuICB9XG4gIE1hcEJvb2tLZWVwaW5nLnByb3RvdHlwZS5kZXN0cnVjdG9yID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXN1bHQgPSBudWxsO1xuICAgIHRoaXMua2V5UHJlZml4ID0gbnVsbDtcbiAgICB0aGlzLmZ1bmMgPSBudWxsO1xuICAgIHRoaXMuY29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5jb3VudCA9IDA7XG4gIH07XG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhNYXBCb29rS2VlcGluZywgZm91ckFyZ3VtZW50UG9vbGVyKTtcbiAgZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChib29rS2VlcGluZywgY2hpbGQsIGNoaWxkS2V5KSB7XG4gICAgdmFyIHJlc3VsdCA9IGJvb2tLZWVwaW5nLnJlc3VsdDtcbiAgICB2YXIga2V5UHJlZml4ID0gYm9va0tlZXBpbmcua2V5UHJlZml4O1xuICAgIHZhciBmdW5jID0gYm9va0tlZXBpbmcuZnVuYztcbiAgICB2YXIgY29udGV4dCA9IGJvb2tLZWVwaW5nLmNvbnRleHQ7XG4gICAgdmFyIG1hcHBlZENoaWxkID0gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBib29rS2VlcGluZy5jb3VudCsrKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtYXBwZWRDaGlsZCkpIHtcbiAgICAgIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwobWFwcGVkQ2hpbGQsIHJlc3VsdCwgY2hpbGRLZXksIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gICAgfSBlbHNlIGlmIChtYXBwZWRDaGlsZCAhPSBudWxsKSB7XG4gICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG1hcHBlZENoaWxkKSkge1xuICAgICAgICBtYXBwZWRDaGlsZCA9IFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VLZXkobWFwcGVkQ2hpbGQsIGtleVByZWZpeCArIChtYXBwZWRDaGlsZC5rZXkgJiYgKCFjaGlsZCB8fCBjaGlsZC5rZXkgIT09IG1hcHBlZENoaWxkLmtleSkgPyBlc2NhcGVVc2VyUHJvdmlkZWRLZXkobWFwcGVkQ2hpbGQua2V5KSArICcvJyA6ICcnKSArIGNoaWxkS2V5KTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wdXNoKG1hcHBlZENoaWxkKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgYXJyYXksIHByZWZpeCwgZnVuYywgY29udGV4dCkge1xuICAgIHZhciBlc2NhcGVkUHJlZml4ID0gJyc7XG4gICAgaWYgKHByZWZpeCAhPSBudWxsKSB7XG4gICAgICBlc2NhcGVkUHJlZml4ID0gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHByZWZpeCkgKyAnLyc7XG4gICAgfVxuICAgIHZhciB0cmF2ZXJzZUNvbnRleHQgPSBNYXBCb29rS2VlcGluZy5nZXRQb29sZWQoYXJyYXksIGVzY2FwZWRQcmVmaXgsIGZ1bmMsIGNvbnRleHQpO1xuICAgIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsIHRyYXZlcnNlQ29udGV4dCk7XG4gICAgTWFwQm9va0tlZXBpbmcucmVsZWFzZSh0cmF2ZXJzZUNvbnRleHQpO1xuICB9XG4gIGZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gICAgaWYgKGNoaWxkcmVuID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjaGlsZHJlbjtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIG1hcEludG9XaXRoS2V5UHJlZml4SW50ZXJuYWwoY2hpbGRyZW4sIHJlc3VsdCwgbnVsbCwgZnVuYywgY29udGV4dCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBmdW5jdGlvbiBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSh0cmF2ZXJzZUNvbnRleHQsIGNoaWxkLCBuYW1lKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gY291bnRDaGlsZHJlbihjaGlsZHJlbiwgY29udGV4dCkge1xuICAgIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSwgbnVsbCk7XG4gIH1cbiAgZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKGNoaWxkcmVuLCByZXN1bHQsIG51bGwsIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNBcmd1bWVudCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB2YXIgUmVhY3RDaGlsZHJlbiA9IHtcbiAgICBmb3JFYWNoOiBmb3JFYWNoQ2hpbGRyZW4sXG4gICAgbWFwOiBtYXBDaGlsZHJlbixcbiAgICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsOiBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsLFxuICAgIGNvdW50OiBjb3VudENoaWxkcmVuLFxuICAgIHRvQXJyYXk6IHRvQXJyYXlcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkcmVuO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImRcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSB7XG4gICAgY2FuVXNlRE9NOiBjYW5Vc2VET00sXG4gICAgY2FuVXNlV29ya2VyczogdHlwZW9mIFdvcmtlciAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgY2FuVXNlRXZlbnRMaXN0ZW5lcnM6IGNhblVzZURPTSAmJiAhISh3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCB3aW5kb3cuYXR0YWNoRXZlbnQpLFxuICAgIGNhblVzZVZpZXdwb3J0OiBjYW5Vc2VET00gJiYgISF3aW5kb3cuc2NyZWVuLFxuICAgIGlzSW5Xb3JrZXI6ICFjYW5Vc2VET01cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJlNVwiLCBbXCJkXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSAkX19yZXF1aXJlKCdkJyk7XG4gIHZhciBwZXJmb3JtYW5jZTtcbiAgaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlIHx8IHdpbmRvdy5tc1BlcmZvcm1hbmNlIHx8IHdpbmRvdy53ZWJraXRQZXJmb3JtYW5jZTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlIHx8IHt9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImU2XCIsIFtcImU1XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgcGVyZm9ybWFuY2UgPSAkX19yZXF1aXJlKCdlNScpO1xuICB2YXIgcGVyZm9ybWFuY2VOb3c7XG4gIGlmIChwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICBwZXJmb3JtYW5jZU5vdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybWFuY2VOb3cgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBEYXRlLm5vdygpO1xuICAgIH07XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBwZXJmb3JtYW5jZU5vdztcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJlN1wiLCBbXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHByb2Nlc3NpbmdDaGlsZENvbnRleHQgPSBmYWxzZTtcbiAgICAgIHZhciB3YXJuSW52YWxpZFNldFN0YXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFwcm9jZXNzaW5nQ2hpbGRDb250ZXh0LCAnc2V0U3RhdGUoLi4uKTogQ2Fubm90IGNhbGwgc2V0U3RhdGUoKSBpbnNpZGUgZ2V0Q2hpbGRDb250ZXh0KCknKSA6IHZvaWQgMDtcbiAgICAgIH07XG4gICAgfVxuICAgIHZhciBSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sID0ge1xuICAgICAgb25CZWdpblByb2Nlc3NpbmdDaGlsZENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBwcm9jZXNzaW5nQ2hpbGRDb250ZXh0ID0gdHJ1ZTtcbiAgICAgIH0sXG4gICAgICBvbkVuZFByb2Nlc3NpbmdDaGlsZENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBwcm9jZXNzaW5nQ2hpbGRDb250ZXh0ID0gZmFsc2U7XG4gICAgICB9LFxuICAgICAgb25TZXRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHdhcm5JbnZhbGlkU2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RJbnZhbGlkU2V0U3RhdGVXYXJuaW5nRGV2VG9vbDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZThcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBoaXN0b3J5ID0gW107XG4gIHZhciBSZWFjdE5hdGl2ZU9wZXJhdGlvbkhpc3RvcnlEZXZ0b29sID0ge1xuICAgIG9uTmF0aXZlT3BlcmF0aW9uOiBmdW5jdGlvbihkZWJ1Z0lELCB0eXBlLCBwYXlsb2FkKSB7XG4gICAgICBoaXN0b3J5LnB1c2goe1xuICAgICAgICBpbnN0YW5jZUlEOiBkZWJ1Z0lELFxuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBwYXlsb2FkOiBwYXlsb2FkXG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNsZWFySGlzdG9yeTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoUmVhY3ROYXRpdmVPcGVyYXRpb25IaXN0b3J5RGV2dG9vbC5fcHJldmVudENsZWFyaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGhpc3RvcnkgPSBbXTtcbiAgICB9LFxuICAgIGdldEhpc3Rvcnk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGhpc3Rvcnk7XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0TmF0aXZlT3BlcmF0aW9uSGlzdG9yeURldnRvb2w7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZTlcIiwgW1wiMzBcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIgdHJlZSA9IHt9O1xuICAgIHZhciByb290SURzID0gW107XG4gICAgZnVuY3Rpb24gdXBkYXRlVHJlZShpZCwgdXBkYXRlKSB7XG4gICAgICBpZiAoIXRyZWVbaWRdKSB7XG4gICAgICAgIHRyZWVbaWRdID0ge1xuICAgICAgICAgIHBhcmVudElEOiBudWxsLFxuICAgICAgICAgIG93bmVySUQ6IG51bGwsXG4gICAgICAgICAgdGV4dDogbnVsbCxcbiAgICAgICAgICBjaGlsZElEczogW10sXG4gICAgICAgICAgZGlzcGxheU5hbWU6ICdVbmtub3duJyxcbiAgICAgICAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgICAgICAgIHVwZGF0ZUNvdW50OiAwXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICB1cGRhdGUodHJlZVtpZF0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwdXJnZURlZXAoaWQpIHtcbiAgICAgIHZhciBpdGVtID0gdHJlZVtpZF07XG4gICAgICBpZiAoaXRlbSkge1xuICAgICAgICB2YXIgY2hpbGRJRHMgPSBpdGVtLmNoaWxkSURzO1xuICAgICAgICBkZWxldGUgdHJlZVtpZF07XG4gICAgICAgIGNoaWxkSURzLmZvckVhY2gocHVyZ2VEZWVwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2wgPSB7XG4gICAgICBvblNldERpc3BsYXlOYW1lOiBmdW5jdGlvbihpZCwgZGlzcGxheU5hbWUpIHtcbiAgICAgICAgdXBkYXRlVHJlZShpZCwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uU2V0Q2hpbGRyZW46IGZ1bmN0aW9uKGlkLCBuZXh0Q2hpbGRJRHMpIHtcbiAgICAgICAgdXBkYXRlVHJlZShpZCwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHZhciBwcmV2Q2hpbGRJRHMgPSBpdGVtLmNoaWxkSURzO1xuICAgICAgICAgIGl0ZW0uY2hpbGRJRHMgPSBuZXh0Q2hpbGRJRHM7XG4gICAgICAgICAgbmV4dENoaWxkSURzLmZvckVhY2goZnVuY3Rpb24obmV4dENoaWxkSUQpIHtcbiAgICAgICAgICAgIHZhciBuZXh0Q2hpbGQgPSB0cmVlW25leHRDaGlsZElEXTtcbiAgICAgICAgICAgICFuZXh0Q2hpbGQgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgZGV2dG9vbCBldmVudHMgdG8gZmlyZSBmb3IgdGhlIGNoaWxkICcgKyAnYmVmb3JlIGl0cyBwYXJlbnQgaW5jbHVkZXMgaXQgaW4gb25TZXRDaGlsZHJlbigpLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICEobmV4dENoaWxkLmRpc3BsYXlOYW1lICE9IG51bGwpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIG9uU2V0RGlzcGxheU5hbWUoKSB0byBmaXJlIGZvciB0aGUgY2hpbGQgJyArICdiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgIShuZXh0Q2hpbGQuY2hpbGRJRHMgIT0gbnVsbCB8fCBuZXh0Q2hpbGQudGV4dCAhPSBudWxsKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBvblNldENoaWxkcmVuKCkgb3Igb25TZXRUZXh0KCkgdG8gZmlyZSBmb3IgdGhlIGNoaWxkICcgKyAnYmVmb3JlIGl0cyBwYXJlbnQgaW5jbHVkZXMgaXQgaW4gb25TZXRDaGlsZHJlbigpLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICFuZXh0Q2hpbGQuaXNNb3VudGVkID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIG9uTW91bnRDb21wb25lbnQoKSB0byBmaXJlIGZvciB0aGUgY2hpbGQgJyArICdiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgaWYgKHByZXZDaGlsZElEcy5pbmRleE9mKG5leHRDaGlsZElEKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgbmV4dENoaWxkLnBhcmVudElEID0gaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uU2V0T3duZXI6IGZ1bmN0aW9uKGlkLCBvd25lcklEKSB7XG4gICAgICAgIHVwZGF0ZVRyZWUoaWQsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5vd25lcklEID0gb3duZXJJRDtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgb25TZXRUZXh0OiBmdW5jdGlvbihpZCwgdGV4dCkge1xuICAgICAgICB1cGRhdGVUcmVlKGlkLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW0udGV4dCA9IHRleHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uTW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIHVwZGF0ZVRyZWUoaWQsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICByZXR1cm4gaXRlbS5pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvbk1vdW50Um9vdENvbXBvbmVudDogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgcm9vdElEcy5wdXNoKGlkKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgdXBkYXRlVHJlZShpZCwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLnVwZGF0ZUNvdW50Kys7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgdXBkYXRlVHJlZShpZCwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgIHJldHVybiBpdGVtLmlzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgcm9vdElEcyA9IHJvb3RJRHMuZmlsdGVyKGZ1bmN0aW9uKHJvb3RJRCkge1xuICAgICAgICAgIHJldHVybiByb290SUQgIT09IGlkO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBwdXJnZVVubW91bnRlZENvbXBvbmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbC5fcHJldmVudFB1cmdpbmcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmtleXModHJlZSkuZmlsdGVyKGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgICAgcmV0dXJuICF0cmVlW2lkXS5pc01vdW50ZWQ7XG4gICAgICAgIH0pLmZvckVhY2gocHVyZ2VEZWVwKTtcbiAgICAgIH0sXG4gICAgICBpc01vdW50ZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIHZhciBpdGVtID0gdHJlZVtpZF07XG4gICAgICAgIHJldHVybiBpdGVtID8gaXRlbS5pc01vdW50ZWQgOiBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBnZXRDaGlsZElEczogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSB0cmVlW2lkXTtcbiAgICAgICAgcmV0dXJuIGl0ZW0gPyBpdGVtLmNoaWxkSURzIDogW107XG4gICAgICB9LFxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIHZhciBpdGVtID0gdHJlZVtpZF07XG4gICAgICAgIHJldHVybiBpdGVtID8gaXRlbS5kaXNwbGF5TmFtZSA6ICdVbmtub3duJztcbiAgICAgIH0sXG4gICAgICBnZXRPd25lcklEOiBmdW5jdGlvbihpZCkge1xuICAgICAgICB2YXIgaXRlbSA9IHRyZWVbaWRdO1xuICAgICAgICByZXR1cm4gaXRlbSA/IGl0ZW0ub3duZXJJRCA6IG51bGw7XG4gICAgICB9LFxuICAgICAgZ2V0UGFyZW50SUQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIHZhciBpdGVtID0gdHJlZVtpZF07XG4gICAgICAgIHJldHVybiBpdGVtID8gaXRlbS5wYXJlbnRJRCA6IG51bGw7XG4gICAgICB9LFxuICAgICAgZ2V0VGV4dDogZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSB0cmVlW2lkXTtcbiAgICAgICAgcmV0dXJuIGl0ZW0gPyBpdGVtLnRleHQgOiBudWxsO1xuICAgICAgfSxcbiAgICAgIGdldFVwZGF0ZUNvdW50OiBmdW5jdGlvbihpZCkge1xuICAgICAgICB2YXIgaXRlbSA9IHRyZWVbaWRdO1xuICAgICAgICByZXR1cm4gaXRlbSA/IGl0ZW0udXBkYXRlQ291bnQgOiAwO1xuICAgICAgfSxcbiAgICAgIGdldFJvb3RJRHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcm9vdElEcztcbiAgICAgIH0sXG4gICAgICBnZXRSZWdpc3RlcmVkSURzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRyZWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudFRyZWVEZXZ0b29sO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJlYVwiLCBbXCJkXCIsIFwiZTZcIiwgXCIyMlwiLCBcImU3XCIsIFwiZThcIiwgXCJlOVwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9ICRfX3JlcXVpcmUoJ2QnKTtcbiAgICB2YXIgcGVyZm9ybWFuY2VOb3cgPSAkX19yZXF1aXJlKCdlNicpO1xuICAgIHZhciB3YXJuaW5nID0gJF9fcmVxdWlyZSgnMjInKTtcbiAgICB2YXIgZXZlbnRIYW5kbGVycyA9IFtdO1xuICAgIHZhciBoYW5kbGVyRG9lc1Rocm93Rm9yRXZlbnQgPSB7fTtcbiAgICBmdW5jdGlvbiBlbWl0RXZlbnQoaGFuZGxlckZ1bmN0aW9uTmFtZSwgYXJnMSwgYXJnMiwgYXJnMywgYXJnNCwgYXJnNSkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZXZlbnRIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXJbaGFuZGxlckZ1bmN0aW9uTmFtZV0pIHtcbiAgICAgICAgICAgICAgaGFuZGxlcltoYW5kbGVyRnVuY3Rpb25OYW1lXShhcmcxLCBhcmcyLCBhcmczLCBhcmc0LCBhcmc1KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaGFuZGxlckRvZXNUaHJvd0ZvckV2ZW50W2hhbmRsZXJGdW5jdGlvbk5hbWVdLCAnZXhjZXB0aW9uIHRocm93biBieSBkZXZ0b29sIHdoaWxlIGhhbmRsaW5nICVzOiAlcycsIGhhbmRsZXJGdW5jdGlvbk5hbWUsIGUubWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBoYW5kbGVyRG9lc1Rocm93Rm9yRXZlbnRbaGFuZGxlckZ1bmN0aW9uTmFtZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBpc1Byb2ZpbGluZyA9IGZhbHNlO1xuICAgIHZhciBmbHVzaEhpc3RvcnkgPSBbXTtcbiAgICB2YXIgY3VycmVudEZsdXNoTmVzdGluZyA9IDA7XG4gICAgdmFyIGN1cnJlbnRGbHVzaE1lYXN1cmVtZW50cyA9IG51bGw7XG4gICAgdmFyIGN1cnJlbnRGbHVzaFN0YXJ0VGltZSA9IG51bGw7XG4gICAgdmFyIGN1cnJlbnRUaW1lckRlYnVnSUQgPSBudWxsO1xuICAgIHZhciBjdXJyZW50VGltZXJTdGFydFRpbWUgPSBudWxsO1xuICAgIHZhciBjdXJyZW50VGltZXJUeXBlID0gbnVsbDtcbiAgICBmdW5jdGlvbiBjbGVhckhpc3RvcnkoKSB7XG4gICAgICBSZWFjdENvbXBvbmVudFRyZWVEZXZ0b29sLnB1cmdlVW5tb3VudGVkQ29tcG9uZW50cygpO1xuICAgICAgUmVhY3ROYXRpdmVPcGVyYXRpb25IaXN0b3J5RGV2dG9vbC5jbGVhckhpc3RvcnkoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VHJlZVNuYXBzaG90KHJlZ2lzdGVyZWRJRHMpIHtcbiAgICAgIHJldHVybiByZWdpc3RlcmVkSURzLnJlZHVjZShmdW5jdGlvbih0cmVlLCBpZCkge1xuICAgICAgICB2YXIgb3duZXJJRCA9IFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2wuZ2V0T3duZXJJRChpZCk7XG4gICAgICAgIHZhciBwYXJlbnRJRCA9IFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2wuZ2V0UGFyZW50SUQoaWQpO1xuICAgICAgICB0cmVlW2lkXSA9IHtcbiAgICAgICAgICBkaXNwbGF5TmFtZTogUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbC5nZXREaXNwbGF5TmFtZShpZCksXG4gICAgICAgICAgdGV4dDogUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbC5nZXRUZXh0KGlkKSxcbiAgICAgICAgICB1cGRhdGVDb3VudDogUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbC5nZXRVcGRhdGVDb3VudChpZCksXG4gICAgICAgICAgY2hpbGRJRHM6IFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2wuZ2V0Q2hpbGRJRHMoaWQpLFxuICAgICAgICAgIG93bmVySUQ6IG93bmVySUQgfHwgUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbC5nZXRPd25lcklEKHBhcmVudElEKSxcbiAgICAgICAgICBwYXJlbnRJRDogcGFyZW50SURcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRyZWU7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlc2V0TWVhc3VyZW1lbnRzKCkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIHByZXZpb3VzU3RhcnRUaW1lID0gY3VycmVudEZsdXNoU3RhcnRUaW1lO1xuICAgICAgICB2YXIgcHJldmlvdXNNZWFzdXJlbWVudHMgPSBjdXJyZW50Rmx1c2hNZWFzdXJlbWVudHMgfHwgW107XG4gICAgICAgIHZhciBwcmV2aW91c09wZXJhdGlvbnMgPSBSZWFjdE5hdGl2ZU9wZXJhdGlvbkhpc3RvcnlEZXZ0b29sLmdldEhpc3RvcnkoKTtcbiAgICAgICAgaWYgKCFpc1Byb2ZpbGluZyB8fCBjdXJyZW50Rmx1c2hOZXN0aW5nID09PSAwKSB7XG4gICAgICAgICAgY3VycmVudEZsdXNoU3RhcnRUaW1lID0gbnVsbDtcbiAgICAgICAgICBjdXJyZW50Rmx1c2hNZWFzdXJlbWVudHMgPSBudWxsO1xuICAgICAgICAgIGNsZWFySGlzdG9yeSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJldmlvdXNNZWFzdXJlbWVudHMubGVuZ3RoIHx8IHByZXZpb3VzT3BlcmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcmVnaXN0ZXJlZElEcyA9IFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2wuZ2V0UmVnaXN0ZXJlZElEcygpO1xuICAgICAgICAgIGZsdXNoSGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiBwZXJmb3JtYW5jZU5vdygpIC0gcHJldmlvdXNTdGFydFRpbWUsXG4gICAgICAgICAgICBtZWFzdXJlbWVudHM6IHByZXZpb3VzTWVhc3VyZW1lbnRzIHx8IFtdLFxuICAgICAgICAgICAgb3BlcmF0aW9uczogcHJldmlvdXNPcGVyYXRpb25zIHx8IFtdLFxuICAgICAgICAgICAgdHJlZVNuYXBzaG90OiBnZXRUcmVlU25hcHNob3QocmVnaXN0ZXJlZElEcylcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjbGVhckhpc3RvcnkoKTtcbiAgICAgICAgY3VycmVudEZsdXNoU3RhcnRUaW1lID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgY3VycmVudEZsdXNoTWVhc3VyZW1lbnRzID0gW107XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrRGVidWdJRChkZWJ1Z0lEKSB7XG4gICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhkZWJ1Z0lELCAnUmVhY3REZWJ1Z1Rvb2w6IGRlYnVnSUQgbWF5IG5vdCBiZSBlbXB0eS4nKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgdmFyIFJlYWN0RGVidWdUb29sID0ge1xuICAgICAgYWRkRGV2dG9vbDogZnVuY3Rpb24oZGV2dG9vbCkge1xuICAgICAgICBldmVudEhhbmRsZXJzLnB1c2goZGV2dG9vbCk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlRGV2dG9vbDogZnVuY3Rpb24oZGV2dG9vbCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50SGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyc1tpXSA9PT0gZGV2dG9vbCkge1xuICAgICAgICAgICAgZXZlbnRIYW5kbGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICBpLS07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYmVnaW5Qcm9maWxpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChpc1Byb2ZpbGluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpc1Byb2ZpbGluZyA9IHRydWU7XG4gICAgICAgICAgZmx1c2hIaXN0b3J5Lmxlbmd0aCA9IDA7XG4gICAgICAgICAgcmVzZXRNZWFzdXJlbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVuZFByb2ZpbGluZzogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFpc1Byb2ZpbGluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpc1Byb2ZpbGluZyA9IGZhbHNlO1xuICAgICAgICAgIHJlc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBnZXRGbHVzaEhpc3Rvcnk6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHJldHVybiBmbHVzaEhpc3Rvcnk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbkJlZ2luRmx1c2g6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGN1cnJlbnRGbHVzaE5lc3RpbmcrKztcbiAgICAgICAgICByZXNldE1lYXN1cmVtZW50cygpO1xuICAgICAgICB9XG4gICAgICAgIGVtaXRFdmVudCgnb25CZWdpbkZsdXNoJyk7XG4gICAgICB9LFxuICAgICAgb25FbmRGbHVzaDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgcmVzZXRNZWFzdXJlbWVudHMoKTtcbiAgICAgICAgICBjdXJyZW50Rmx1c2hOZXN0aW5nLS07XG4gICAgICAgIH1cbiAgICAgICAgZW1pdEV2ZW50KCdvbkVuZEZsdXNoJyk7XG4gICAgICB9LFxuICAgICAgb25CZWdpbkxpZmVDeWNsZVRpbWVyOiBmdW5jdGlvbihkZWJ1Z0lELCB0aW1lclR5cGUpIHtcbiAgICAgICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgICAgICBlbWl0RXZlbnQoJ29uQmVnaW5MaWZlQ3ljbGVUaW1lcicsIGRlYnVnSUQsIHRpbWVyVHlwZSk7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGlzUHJvZmlsaW5nICYmIGN1cnJlbnRGbHVzaE5lc3RpbmcgPiAwKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY3VycmVudFRpbWVyVHlwZSwgJ1RoZXJlIGlzIGFuIGludGVybmFsIGVycm9yIGluIHRoZSBSZWFjdCBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudCBjb2RlLiAnICsgJ0RpZCBub3QgZXhwZWN0ICVzIHRpbWVyIHRvIHN0YXJ0IHdoaWxlICVzIHRpbWVyIGlzIHN0aWxsIGluICcgKyAncHJvZ3Jlc3MgZm9yICVzIGluc3RhbmNlLicsIHRpbWVyVHlwZSwgY3VycmVudFRpbWVyVHlwZSB8fCAnbm8nLCBkZWJ1Z0lEID09PSBjdXJyZW50VGltZXJEZWJ1Z0lEID8gJ3RoZSBzYW1lJyA6ICdhbm90aGVyJykgOiB2b2lkIDA7XG4gICAgICAgICAgICBjdXJyZW50VGltZXJTdGFydFRpbWUgPSBwZXJmb3JtYW5jZU5vdygpO1xuICAgICAgICAgICAgY3VycmVudFRpbWVyRGVidWdJRCA9IGRlYnVnSUQ7XG4gICAgICAgICAgICBjdXJyZW50VGltZXJUeXBlID0gdGltZXJUeXBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uRW5kTGlmZUN5Y2xlVGltZXI6IGZ1bmN0aW9uKGRlYnVnSUQsIHRpbWVyVHlwZSkge1xuICAgICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGlzUHJvZmlsaW5nICYmIGN1cnJlbnRGbHVzaE5lc3RpbmcgPiAwKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhjdXJyZW50VGltZXJUeXBlID09PSB0aW1lclR5cGUsICdUaGVyZSBpcyBhbiBpbnRlcm5hbCBlcnJvciBpbiB0aGUgUmVhY3QgcGVyZm9ybWFuY2UgbWVhc3VyZW1lbnQgY29kZS4gJyArICdXZSBkaWQgbm90IGV4cGVjdCAlcyB0aW1lciB0byBzdG9wIHdoaWxlICVzIHRpbWVyIGlzIHN0aWxsIGluICcgKyAncHJvZ3Jlc3MgZm9yICVzIGluc3RhbmNlLiBQbGVhc2UgcmVwb3J0IHRoaXMgYXMgYSBidWcgaW4gUmVhY3QuJywgdGltZXJUeXBlLCBjdXJyZW50VGltZXJUeXBlIHx8ICdubycsIGRlYnVnSUQgPT09IGN1cnJlbnRUaW1lckRlYnVnSUQgPyAndGhlIHNhbWUnIDogJ2Fub3RoZXInKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIGN1cnJlbnRGbHVzaE1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgdGltZXJUeXBlOiB0aW1lclR5cGUsXG4gICAgICAgICAgICAgIGluc3RhbmNlSUQ6IGRlYnVnSUQsXG4gICAgICAgICAgICAgIGR1cmF0aW9uOiBwZXJmb3JtYW5jZU5vdygpIC0gY3VycmVudFRpbWVyU3RhcnRUaW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lclN0YXJ0VGltZSA9IG51bGw7XG4gICAgICAgICAgICBjdXJyZW50VGltZXJEZWJ1Z0lEID0gbnVsbDtcbiAgICAgICAgICAgIGN1cnJlbnRUaW1lclR5cGUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbWl0RXZlbnQoJ29uRW5kTGlmZUN5Y2xlVGltZXInLCBkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICAgICAgfSxcbiAgICAgIG9uQmVnaW5SZWNvbmNpbGVyVGltZXI6IGZ1bmN0aW9uKGRlYnVnSUQsIHRpbWVyVHlwZSkge1xuICAgICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICAgIGVtaXRFdmVudCgnb25CZWdpblJlY29uY2lsZXJUaW1lcicsIGRlYnVnSUQsIHRpbWVyVHlwZSk7XG4gICAgICB9LFxuICAgICAgb25FbmRSZWNvbmNpbGVyVGltZXI6IGZ1bmN0aW9uKGRlYnVnSUQsIHRpbWVyVHlwZSkge1xuICAgICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICAgIGVtaXRFdmVudCgnb25FbmRSZWNvbmNpbGVyVGltZXInLCBkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICAgICAgfSxcbiAgICAgIG9uQmVnaW5Qcm9jZXNzaW5nQ2hpbGRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgZW1pdEV2ZW50KCdvbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dCcpO1xuICAgICAgfSxcbiAgICAgIG9uRW5kUHJvY2Vzc2luZ0NoaWxkQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGVtaXRFdmVudCgnb25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0Jyk7XG4gICAgICB9LFxuICAgICAgb25OYXRpdmVPcGVyYXRpb246IGZ1bmN0aW9uKGRlYnVnSUQsIHR5cGUsIHBheWxvYWQpIHtcbiAgICAgICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgICAgICBlbWl0RXZlbnQoJ29uTmF0aXZlT3BlcmF0aW9uJywgZGVidWdJRCwgdHlwZSwgcGF5bG9hZCk7XG4gICAgICB9LFxuICAgICAgb25TZXRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGVtaXRFdmVudCgnb25TZXRTdGF0ZScpO1xuICAgICAgfSxcbiAgICAgIG9uU2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uKGRlYnVnSUQsIGRpc3BsYXlOYW1lKSB7XG4gICAgICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICAgICAgZW1pdEV2ZW50KCdvblNldERpc3BsYXlOYW1lJywgZGVidWdJRCwgZGlzcGxheU5hbWUpO1xuICAgICAgfSxcbiAgICAgIG9uU2V0Q2hpbGRyZW46IGZ1bmN0aW9uKGRlYnVnSUQsIGNoaWxkRGVidWdJRHMpIHtcbiAgICAgICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgICAgICBlbWl0RXZlbnQoJ29uU2V0Q2hpbGRyZW4nLCBkZWJ1Z0lELCBjaGlsZERlYnVnSURzKTtcbiAgICAgIH0sXG4gICAgICBvblNldE93bmVyOiBmdW5jdGlvbihkZWJ1Z0lELCBvd25lckRlYnVnSUQpIHtcbiAgICAgICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgICAgICBlbWl0RXZlbnQoJ29uU2V0T3duZXInLCBkZWJ1Z0lELCBvd25lckRlYnVnSUQpO1xuICAgICAgfSxcbiAgICAgIG9uU2V0VGV4dDogZnVuY3Rpb24oZGVidWdJRCwgdGV4dCkge1xuICAgICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICAgIGVtaXRFdmVudCgnb25TZXRUZXh0JywgZGVidWdJRCwgdGV4dCk7XG4gICAgICB9LFxuICAgICAgb25Nb3VudFJvb3RDb21wb25lbnQ6IGZ1bmN0aW9uKGRlYnVnSUQpIHtcbiAgICAgICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgICAgICBlbWl0RXZlbnQoJ29uTW91bnRSb290Q29tcG9uZW50JywgZGVidWdJRCk7XG4gICAgICB9LFxuICAgICAgb25Nb3VudENvbXBvbmVudDogZnVuY3Rpb24oZGVidWdJRCkge1xuICAgICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICAgIGVtaXRFdmVudCgnb25Nb3VudENvbXBvbmVudCcsIGRlYnVnSUQpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbihkZWJ1Z0lEKSB7XG4gICAgICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICAgICAgZW1pdEV2ZW50KCdvblVwZGF0ZUNvbXBvbmVudCcsIGRlYnVnSUQpO1xuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oZGVidWdJRCkge1xuICAgICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICAgIGVtaXRFdmVudCgnb25Vbm1vdW50Q29tcG9uZW50JywgZGVidWdJRCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0RldlRvb2wgPSAkX19yZXF1aXJlKCdlNycpO1xuICAgICAgdmFyIFJlYWN0TmF0aXZlT3BlcmF0aW9uSGlzdG9yeURldnRvb2wgPSAkX19yZXF1aXJlKCdlOCcpO1xuICAgICAgdmFyIFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2wgPSAkX19yZXF1aXJlKCdlOScpO1xuICAgICAgUmVhY3REZWJ1Z1Rvb2wuYWRkRGV2dG9vbChSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sKTtcbiAgICAgIFJlYWN0RGVidWdUb29sLmFkZERldnRvb2woUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbCk7XG4gICAgICBSZWFjdERlYnVnVG9vbC5hZGREZXZ0b29sKFJlYWN0TmF0aXZlT3BlcmF0aW9uSGlzdG9yeURldnRvb2wpO1xuICAgICAgdmFyIHVybCA9IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiB3aW5kb3cubG9jYXRpb24uaHJlZiB8fCAnJztcbiAgICAgIGlmICgvWz8mXXJlYWN0X3BlcmZcXGIvLnRlc3QodXJsKSkge1xuICAgICAgICBSZWFjdERlYnVnVG9vbC5iZWdpblByb2ZpbGluZygpO1xuICAgICAgfVxuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVidWdUb29sO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIyN1wiLCBbXCJlYVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFJlYWN0RGVidWdUb29sID0gJF9fcmVxdWlyZSgnZWEnKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7ZGVidWdUb29sOiBSZWFjdERlYnVnVG9vbH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZWJcIiwgW1wiZWNcIiwgXCIyN1wiLCBcImVkXCIsIFwiOTRcIiwgXCIzMFwiLCBcIjIyXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gJF9fcmVxdWlyZSgnZWMnKTtcbiAgICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSAkX19yZXF1aXJlKCcyNycpO1xuICAgIHZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9ICRfX3JlcXVpcmUoJ2VkJyk7XG4gICAgdmFyIGVtcHR5T2JqZWN0ID0gJF9fcmVxdWlyZSgnOTQnKTtcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgZnVuY3Rpb24gUmVhY3RDb21wb25lbnQocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICAgIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG4gICAgfVxuICAgIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG4gICAgUmVhY3RDb21wb25lbnQucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24ocGFydGlhbFN0YXRlLCBjYWxsYmFjaykge1xuICAgICAgISh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nIHx8IHBhcnRpYWxTdGF0ZSA9PSBudWxsKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhICcgKyAnZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldFN0YXRlKCk7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHBhcnRpYWxTdGF0ZSAhPSBudWxsLCAnc2V0U3RhdGUoLi4uKTogWW91IHBhc3NlZCBhbiB1bmRlZmluZWQgb3IgbnVsbCBzdGF0ZSBvYmplY3Q7ICcgKyAnaW5zdGVhZCwgdXNlIGZvcmNlVXBkYXRlKCkuJykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIHBhcnRpYWxTdGF0ZSk7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjaywgJ3NldFN0YXRlJyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBSZWFjdENvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzKTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrLCAnZm9yY2VVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgZGVwcmVjYXRlZEFQSXMgPSB7XG4gICAgICAgIGlzTW91bnRlZDogWydpc01vdW50ZWQnLCAnSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gJyArICdjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy4nXSxcbiAgICAgICAgcmVwbGFjZVN0YXRlOiBbJ3JlcGxhY2VTdGF0ZScsICdSZWZhY3RvciB5b3VyIGNvZGUgdG8gdXNlIHNldFN0YXRlIGluc3RlYWQgKHNlZSAnICsgJ2h0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzIzNikuJ11cbiAgICAgIH07XG4gICAgICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5mbykge1xuICAgICAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhY3RDb21wb25lbnQucHJvdG90eXBlLCBtZXRob2ROYW1lLCB7Z2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyguLi4pIGlzIGRlcHJlY2F0ZWQgaW4gcGxhaW4gSmF2YVNjcmlwdCBSZWFjdCBjbGFzc2VzLiAlcycsIGluZm9bMF0sIGluZm9bMV0pIDogdm9pZCAwO1xuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfX0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZm9yICh2YXIgZm5OYW1lIGluIGRlcHJlY2F0ZWRBUElzKSB7XG4gICAgICAgIGlmIChkZXByZWNhdGVkQVBJcy5oYXNPd25Qcm9wZXJ0eShmbk5hbWUpKSB7XG4gICAgICAgICAgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSwgZGVwcmVjYXRlZEFQSXNbZm5OYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZWNcIiwgW1wiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgZnVuY3Rpb24gd2FyblREWihwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIG9yIG1vdW50aW5nIGNvbXBvbmVudC4gJyArICdUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGNhbGxlZCAlcygpIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuICcgKyAnVGhpcyBpcyBhIG5vLW9wLiBQbGVhc2UgY2hlY2sgdGhlIGNvZGUgZm9yIHRoZSAlcyBjb21wb25lbnQuJywgY2FsbGVyTmFtZSwgY2FsbGVyTmFtZSwgcHVibGljSW5zdGFuY2UuY29uc3RydWN0b3IgJiYgcHVibGljSW5zdGFuY2UuY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJycpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgUmVhY3ROb29wVXBkYXRlUXVldWUgPSB7XG4gICAgICBpc01vdW50ZWQ6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0sXG4gICAgICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaykge30sXG4gICAgICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgICAgIHdhcm5URFoocHVibGljSW5zdGFuY2UsICdmb3JjZVVwZGF0ZScpO1xuICAgICAgfSxcbiAgICAgIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKSB7XG4gICAgICAgIHdhcm5URFoocHVibGljSW5zdGFuY2UsICdyZXBsYWNlU3RhdGUnKTtcbiAgICAgIH0sXG4gICAgICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICAgICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ3NldFN0YXRlJyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI5NFwiLCBbXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgZW1wdHlPYmplY3QgPSB7fTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gZW1wdHlPYmplY3Q7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImVcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBrZXlPZiA9IGZ1bmN0aW9uKG9uZUtleU9iaikge1xuICAgIHZhciBrZXk7XG4gICAgZm9yIChrZXkgaW4gb25lS2V5T2JqKSB7XG4gICAgICBpZiAoIW9uZUtleU9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0ga2V5T2Y7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiNjNcIiwgW1wiNlwiLCBcImViXCIsIFwiOGRcIiwgXCIzYlwiLCBcIjkzXCIsIFwiZWNcIiwgXCI5NFwiLCBcIjMwXCIsIFwiNThcIiwgXCJlXCIsIFwiMjJcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgX2Fzc2lnbiA9ICRfX3JlcXVpcmUoJzYnKTtcbiAgICB2YXIgUmVhY3RDb21wb25lbnQgPSAkX19yZXF1aXJlKCdlYicpO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSAkX19yZXF1aXJlKCc4ZCcpO1xuICAgIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gJF9fcmVxdWlyZSgnM2InKTtcbiAgICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSAkX19yZXF1aXJlKCc5MycpO1xuICAgIHZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9ICRfX3JlcXVpcmUoJ2VjJyk7XG4gICAgdmFyIGVtcHR5T2JqZWN0ID0gJF9fcmVxdWlyZSgnOTQnKTtcbiAgICB2YXIgaW52YXJpYW50ID0gJF9fcmVxdWlyZSgnMzAnKTtcbiAgICB2YXIga2V5TWlycm9yID0gJF9fcmVxdWlyZSgnNTgnKTtcbiAgICB2YXIga2V5T2YgPSAkX19yZXF1aXJlKCdlJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBNSVhJTlNfS0VZID0ga2V5T2Yoe21peGluczogbnVsbH0pO1xuICAgIHZhciBTcGVjUG9saWN5ID0ga2V5TWlycm9yKHtcbiAgICAgIERFRklORV9PTkNFOiBudWxsLFxuICAgICAgREVGSU5FX01BTlk6IG51bGwsXG4gICAgICBPVkVSUklERV9CQVNFOiBudWxsLFxuICAgICAgREVGSU5FX01BTllfTUVSR0VEOiBudWxsXG4gICAgfSk7XG4gICAgdmFyIGluamVjdGVkTWl4aW5zID0gW107XG4gICAgdmFyIFJlYWN0Q2xhc3NJbnRlcmZhY2UgPSB7XG4gICAgICBtaXhpbnM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgICBzdGF0aWNzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgICAgcHJvcFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgICAgY29udGV4dFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgICAgY2hpbGRDb250ZXh0VHlwZXM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgICBnZXREZWZhdWx0UHJvcHM6IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuICAgICAgZ2V0SW5pdGlhbFN0YXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcbiAgICAgIGdldENoaWxkQ29udGV4dDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG4gICAgICByZW5kZXI6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG4gICAgICBjb21wb25lbnRXaWxsTW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgICBjb21wb25lbnREaWRNb3VudDogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcbiAgICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgICBzaG91bGRDb21wb25lbnRVcGRhdGU6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG4gICAgICBjb21wb25lbnRXaWxsVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgICAgY29tcG9uZW50RGlkVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgICAgY29tcG9uZW50V2lsbFVubW91bnQ6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgICB1cGRhdGVDb21wb25lbnQ6IFNwZWNQb2xpY3kuT1ZFUlJJREVfQkFTRVxuICAgIH07XG4gICAgdmFyIFJFU0VSVkVEX1NQRUNfS0VZUyA9IHtcbiAgICAgIGRpc3BsYXlOYW1lOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZGlzcGxheU5hbWUpIHtcbiAgICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIH0sXG4gICAgICBtaXhpbnM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBtaXhpbnMpIHtcbiAgICAgICAgaWYgKG1peGlucykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWl4aW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3RvciwgbWl4aW5zW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjaGlsZENvbnRleHRUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzKSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBjaGlsZENvbnRleHRUeXBlcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jaGlsZENvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzID0gX2Fzc2lnbih7fSwgQ29uc3RydWN0b3IuY2hpbGRDb250ZXh0VHlwZXMsIGNoaWxkQ29udGV4dFR5cGVzKTtcbiAgICAgIH0sXG4gICAgICBjb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMpIHtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIGNvbnRleHRUeXBlcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMgPSBfYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5jb250ZXh0VHlwZXMsIGNvbnRleHRUeXBlcyk7XG4gICAgICB9LFxuICAgICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIGlmIChDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMgPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMsIGdldERlZmF1bHRQcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvcFR5cGVzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgcHJvcFR5cGVzKSB7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBwcm9wVHlwZXMsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCk7XG4gICAgICAgIH1cbiAgICAgICAgQ29uc3RydWN0b3IucHJvcFR5cGVzID0gX2Fzc2lnbih7fSwgQ29uc3RydWN0b3IucHJvcFR5cGVzLCBwcm9wVHlwZXMpO1xuICAgICAgfSxcbiAgICAgIHN0YXRpY3M6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgICAgIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKTtcbiAgICAgIH0sXG4gICAgICBhdXRvYmluZDogZnVuY3Rpb24oKSB7fVxuICAgIH07XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCB0eXBlRGVmLCBsb2NhdGlvbikge1xuICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gdHlwZURlZikge1xuICAgICAgICBpZiAodHlwZURlZi5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgKyAnUmVhY3QuUHJvcFR5cGVzLicsIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCBwcm9wTmFtZSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKSB7XG4gICAgICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q2xhc3NJbnRlcmZhY2UuaGFzT3duUHJvcGVydHkobmFtZSkgPyBSZWFjdENsYXNzSW50ZXJmYWNlW25hbWVdIDogbnVsbDtcbiAgICAgIGlmIChSZWFjdENsYXNzTWl4aW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgIShzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5Lk9WRVJSSURFX0JBU0UpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBvdmVycmlkZSAnICsgJ2Alc2AgZnJvbSB5b3VyIGNsYXNzIHNwZWNpZmljYXRpb24uIEVuc3VyZSB0aGF0IHlvdXIgbWV0aG9kIG5hbWVzICcgKyAnZG8gbm90IG92ZXJsYXAgd2l0aCBSZWFjdCBtZXRob2RzLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgICEoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSB8fCBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzc0ludGVyZmFjZTogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICsgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlIGR1ZSAnICsgJ3RvIGEgbWl4aW4uJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3BlYykge1xuICAgICAgaWYgKCFzcGVjKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICEodHlwZW9mIHNwZWMgIT09ICdmdW5jdGlvbicpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdVxcJ3JlIGF0dGVtcHRpbmcgdG8gJyArICd1c2UgYSBjb21wb25lbnQgY2xhc3Mgb3IgZnVuY3Rpb24gYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSAnICsgJ3JlZ3VsYXIgb2JqZWN0LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICEhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHNwZWMpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdVxcJ3JlIGF0dGVtcHRpbmcgdG8gJyArICd1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgcHJvdG8gPSBDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICB2YXIgYXV0b0JpbmRQYWlycyA9IHByb3RvLl9fcmVhY3RBdXRvQmluZFBhaXJzO1xuICAgICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICAgICAgUkVTRVJWRURfU1BFQ19LRVlTLm1peGlucyhDb25zdHJ1Y3Rvciwgc3BlYy5taXhpbnMpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbmFtZSBpbiBzcGVjKSB7XG4gICAgICAgIGlmICghc3BlYy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lID09PSBNSVhJTlNfS0VZKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb3BlcnR5ID0gc3BlY1tuYW1lXTtcbiAgICAgICAgdmFyIGlzQWxyZWFkeURlZmluZWQgPSBwcm90by5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKTtcbiAgICAgICAgaWYgKFJFU0VSVkVEX1NQRUNfS0VZUy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIFJFU0VSVkVEX1NQRUNfS0VZU1tuYW1lXShDb25zdHJ1Y3RvciwgcHJvcGVydHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpc1JlYWN0Q2xhc3NNZXRob2QgPSBSZWFjdENsYXNzSW50ZXJmYWNlLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgICAgIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nO1xuICAgICAgICAgIHZhciBzaG91bGRBdXRvQmluZCA9IGlzRnVuY3Rpb24gJiYgIWlzUmVhY3RDbGFzc01ldGhvZCAmJiAhaXNBbHJlYWR5RGVmaW5lZCAmJiBzcGVjLmF1dG9iaW5kICE9PSBmYWxzZTtcbiAgICAgICAgICBpZiAoc2hvdWxkQXV0b0JpbmQpIHtcbiAgICAgICAgICAgIGF1dG9CaW5kUGFpcnMucHVzaChuYW1lLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaXNBbHJlYWR5RGVmaW5lZCkge1xuICAgICAgICAgICAgICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV07XG4gICAgICAgICAgICAgICEoaXNSZWFjdENsYXNzTWV0aG9kICYmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCB8fCBzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZKSkgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogVW5leHBlY3RlZCBzcGVjIHBvbGljeSAlcyBmb3Iga2V5ICVzICcgKyAnd2hlbiBtaXhpbmcgaW4gY29tcG9uZW50IHNwZWNzLicsIHNwZWNQb2xpY3ksIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgaWYgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VEKSB7XG4gICAgICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkpIHtcbiAgICAgICAgICAgICAgICBwcm90b1tuYW1lXSA9IGNyZWF0ZUNoYWluZWRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgICAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicgJiYgc3BlYy5kaXNwbGF5TmFtZSkge1xuICAgICAgICAgICAgICAgICAgcHJvdG9bbmFtZV0uZGlzcGxheU5hbWUgPSBzcGVjLmRpc3BsYXlOYW1lICsgJ18nICsgbmFtZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHN0YXRpY3MpIHtcbiAgICAgIGlmICghc3RhdGljcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHN0YXRpY3MpIHtcbiAgICAgICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICAgICAgaWYgKCFzdGF0aWNzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzUmVzZXJ2ZWQgPSBuYW1lIGluIFJFU0VSVkVEX1NQRUNfS0VZUztcbiAgICAgICAgISFpc1Jlc2VydmVkID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgYSByZXNlcnZlZCAnICsgJ3Byb3BlcnR5LCBgJXNgLCB0aGF0IHNob3VsZG5cXCd0IGJlIG9uIHRoZSBcInN0YXRpY3NcIiBrZXkuIERlZmluZSBpdCAnICsgJ2FzIGFuIGluc3RhbmNlIHByb3BlcnR5IGluc3RlYWQ7IGl0IHdpbGwgc3RpbGwgYmUgYWNjZXNzaWJsZSBvbiB0aGUgJyArICdjb25zdHJ1Y3Rvci4nLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHZhciBpc0luaGVyaXRlZCA9IG5hbWUgaW4gQ29uc3RydWN0b3I7XG4gICAgICAgICEhaXNJbmhlcml0ZWQgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSAnICsgJ2Alc2Agb24geW91ciBjb21wb25lbnQgbW9yZSB0aGFuIG9uY2UuIFRoaXMgY29uZmxpY3QgbWF5IGJlICcgKyAnZHVlIHRvIGEgbWl4aW4uJywgbmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBDb25zdHJ1Y3RvcltuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKG9uZSwgdHdvKSB7XG4gICAgICAhKG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGZvciAodmFyIGtleSBpbiB0d28pIHtcbiAgICAgICAgaWYgKHR3by5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgIShvbmVba2V5XSA9PT0gdW5kZWZpbmVkKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6ICcgKyAnVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgJyArICdtYXkgYmUgZHVlIHRvIGEgbWl4aW47IGluIHBhcnRpY3VsYXIsIHRoaXMgbWF5IGJlIGNhdXNlZCBieSB0d28gJyArICdnZXRJbml0aWFsU3RhdGUoKSBvciBnZXREZWZhdWx0UHJvcHMoKSBtZXRob2RzIHJldHVybmluZyBvYmplY3RzICcgKyAnd2l0aCBjbGFzaGluZyBrZXlzLicsIGtleSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIG9uZVtrZXldID0gdHdvW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvbmU7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkUmVzdWx0KCkge1xuICAgICAgICB2YXIgYSA9IG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoYSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGMgPSB7fTtcbiAgICAgICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBhKTtcbiAgICAgICAgbWVyZ2VJbnRvV2l0aE5vRHVwbGljYXRlS2V5cyhjLCBiKTtcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBjaGFpbmVkRnVuY3Rpb24oKSB7XG4gICAgICAgIG9uZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICAgICAgdmFyIGJvdW5kTWV0aG9kID0gbWV0aG9kLmJpbmQoY29tcG9uZW50KTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gbnVsbDtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgICAgIHZhciBfYmluZCA9IGJvdW5kTWV0aG9kLmJpbmQ7XG4gICAgICAgIGJvdW5kTWV0aG9kLmJpbmQgPSBmdW5jdGlvbihuZXdUaGlzKSB7XG4gICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICAgIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksXG4gICAgICAgICAgICAgIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5ld1RoaXMgIT09IGNvbXBvbmVudCAmJiBuZXdUaGlzICE9PSBudWxsKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgKyAnY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJXMnLCBjb21wb25lbnROYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdiaW5kKCk6IFlvdSBhcmUgYmluZGluZyBhIGNvbXBvbmVudCBtZXRob2QgdG8gdGhlIGNvbXBvbmVudC4gJyArICdSZWFjdCBkb2VzIHRoaXMgZm9yIHlvdSBhdXRvbWF0aWNhbGx5IGluIGEgaGlnaC1wZXJmb3JtYW5jZSAnICsgJ3dheSwgc28geW91IGNhbiBzYWZlbHkgcmVtb3ZlIHRoaXMgY2FsbC4gU2VlICVzJywgY29tcG9uZW50TmFtZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4gYm91bmRNZXRob2Q7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZWJvdW5kTWV0aG9kID0gX2JpbmQuYXBwbHkoYm91bmRNZXRob2QsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kTWV0aG9kID0gbWV0aG9kO1xuICAgICAgICAgIHJlYm91bmRNZXRob2QuX19yZWFjdEJvdW5kQXJndW1lbnRzID0gYXJncztcbiAgICAgICAgICByZXR1cm4gcmVib3VuZE1ldGhvZDtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgICB9XG4gICAgZnVuY3Rpb24gYmluZEF1dG9CaW5kTWV0aG9kcyhjb21wb25lbnQpIHtcbiAgICAgIHZhciBwYWlycyA9IGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRQYWlycztcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFpcnMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgICAgdmFyIGF1dG9CaW5kS2V5ID0gcGFpcnNbaV07XG4gICAgICAgIHZhciBtZXRob2QgPSBwYWlyc1tpICsgMV07XG4gICAgICAgIGNvbXBvbmVudFthdXRvQmluZEtleV0gPSBiaW5kQXV0b0JpbmRNZXRob2QoY29tcG9uZW50LCBtZXRob2QpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgUmVhY3RDbGFzc01peGluID0ge1xuICAgICAgcmVwbGFjZVN0YXRlOiBmdW5jdGlvbihuZXdTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUodGhpcywgbmV3U3RhdGUpO1xuICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrLCAncmVwbGFjZVN0YXRlJyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpc01vdW50ZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVyLmlzTW91bnRlZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBSZWFjdENsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24oKSB7fTtcbiAgICBfYXNzaWduKFJlYWN0Q2xhc3NDb21wb25lbnQucHJvdG90eXBlLCBSZWFjdENvbXBvbmVudC5wcm90b3R5cGUsIFJlYWN0Q2xhc3NNaXhpbik7XG4gICAgdmFyIFJlYWN0Q2xhc3MgPSB7XG4gICAgICBjcmVhdGVDbGFzczogZnVuY3Rpb24oc3BlYykge1xuICAgICAgICB2YXIgQ29uc3RydWN0b3IgPSBmdW5jdGlvbihwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICAgICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0aGlzIGluc3RhbmNlb2YgQ29uc3RydWN0b3IsICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICsgJ0pTWCBpbnN0ZWFkLiBTZWU6IGh0dHBzOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeScpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5fX3JlYWN0QXV0b0JpbmRQYWlycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGJpbmRBdXRvQmluZE1ldGhvZHModGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICAgIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICAgICAgICAgIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHRoaXMuZ2V0SW5pdGlhbFN0YXRlID8gdGhpcy5nZXRJbml0aWFsU3RhdGUoKSA6IG51bGw7XG4gICAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLmdldEluaXRpYWxTdGF0ZS5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgaW5pdGlhbFN0YXRlID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgISh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShpbml0aWFsU3RhdGUpKSA/IFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5nZXRJbml0aWFsU3RhdGUoKTogbXVzdCByZXR1cm4gYW4gb2JqZWN0IG9yIG51bGwnLCBDb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICAgICAgfTtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gbmV3IFJlYWN0Q2xhc3NDb21wb25lbnQoKTtcbiAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7XG4gICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5fX3JlYWN0QXV0b0JpbmRQYWlycyA9IFtdO1xuICAgICAgICBpbmplY3RlZE1peGlucy5mb3JFYWNoKG1peFNwZWNJbnRvQ29tcG9uZW50LmJpbmQobnVsbCwgQ29uc3RydWN0b3IpKTtcbiAgICAgICAgbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpO1xuICAgICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgICAgQ29uc3RydWN0b3IuZGVmYXVsdFByb3BzID0gQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgICAgICBDb25zdHJ1Y3Rvci5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUpIHtcbiAgICAgICAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQgPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5yZW5kZXIgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnY3JlYXRlQ2xhc3MoLi4uKTogQ2xhc3Mgc3BlY2lmaWNhdGlvbiBtdXN0IGltcGxlbWVudCBhIGByZW5kZXJgIG1ldGhvZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRTaG91bGRVcGRhdGUsICclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLCBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/Jywgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBtZXRob2ROYW1lIGluIFJlYWN0Q2xhc3NJbnRlcmZhY2UpIHtcbiAgICAgICAgICBpZiAoIUNvbnN0cnVjdG9yLnByb3RvdHlwZVttZXRob2ROYW1lXSkge1xuICAgICAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgICAgfSxcbiAgICAgIGluamVjdGlvbjoge2luamVjdE1peGluOiBmdW5jdGlvbihtaXhpbikge1xuICAgICAgICAgIGluamVjdGVkTWl4aW5zLnB1c2gobWl4aW4pO1xuICAgICAgICB9fVxuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENsYXNzO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJiZFwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgZnVuY3Rpb24gbWFwT2JqZWN0KG9iamVjdCwgY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICBpZiAoIW9iamVjdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBuYW1lKSkge1xuICAgICAgICByZXN1bHRbbmFtZV0gPSBjYWxsYmFjay5jYWxsKGNvbnRleHQsIG9iamVjdFtuYW1lXSwgbmFtZSwgb2JqZWN0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IG1hcE9iamVjdDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJlZVwiLCBbXCI4ZFwiLCBcImVmXCIsIFwiYmRcIiwgXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgUmVhY3RFbGVtZW50ID0gJF9fcmVxdWlyZSgnOGQnKTtcbiAgICB2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gJF9fcmVxdWlyZSgnZWYnKTtcbiAgICB2YXIgbWFwT2JqZWN0ID0gJF9fcmVxdWlyZSgnYmQnKTtcbiAgICBmdW5jdGlvbiBjcmVhdGVET01GYWN0b3J5KHRhZykge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5KHRhZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkodGFnKTtcbiAgICB9XG4gICAgdmFyIFJlYWN0RE9NRmFjdG9yaWVzID0gbWFwT2JqZWN0KHtcbiAgICAgIGE6ICdhJyxcbiAgICAgIGFiYnI6ICdhYmJyJyxcbiAgICAgIGFkZHJlc3M6ICdhZGRyZXNzJyxcbiAgICAgIGFyZWE6ICdhcmVhJyxcbiAgICAgIGFydGljbGU6ICdhcnRpY2xlJyxcbiAgICAgIGFzaWRlOiAnYXNpZGUnLFxuICAgICAgYXVkaW86ICdhdWRpbycsXG4gICAgICBiOiAnYicsXG4gICAgICBiYXNlOiAnYmFzZScsXG4gICAgICBiZGk6ICdiZGknLFxuICAgICAgYmRvOiAnYmRvJyxcbiAgICAgIGJpZzogJ2JpZycsXG4gICAgICBibG9ja3F1b3RlOiAnYmxvY2txdW90ZScsXG4gICAgICBib2R5OiAnYm9keScsXG4gICAgICBicjogJ2JyJyxcbiAgICAgIGJ1dHRvbjogJ2J1dHRvbicsXG4gICAgICBjYW52YXM6ICdjYW52YXMnLFxuICAgICAgY2FwdGlvbjogJ2NhcHRpb24nLFxuICAgICAgY2l0ZTogJ2NpdGUnLFxuICAgICAgY29kZTogJ2NvZGUnLFxuICAgICAgY29sOiAnY29sJyxcbiAgICAgIGNvbGdyb3VwOiAnY29sZ3JvdXAnLFxuICAgICAgZGF0YTogJ2RhdGEnLFxuICAgICAgZGF0YWxpc3Q6ICdkYXRhbGlzdCcsXG4gICAgICBkZDogJ2RkJyxcbiAgICAgIGRlbDogJ2RlbCcsXG4gICAgICBkZXRhaWxzOiAnZGV0YWlscycsXG4gICAgICBkZm46ICdkZm4nLFxuICAgICAgZGlhbG9nOiAnZGlhbG9nJyxcbiAgICAgIGRpdjogJ2RpdicsXG4gICAgICBkbDogJ2RsJyxcbiAgICAgIGR0OiAnZHQnLFxuICAgICAgZW06ICdlbScsXG4gICAgICBlbWJlZDogJ2VtYmVkJyxcbiAgICAgIGZpZWxkc2V0OiAnZmllbGRzZXQnLFxuICAgICAgZmlnY2FwdGlvbjogJ2ZpZ2NhcHRpb24nLFxuICAgICAgZmlndXJlOiAnZmlndXJlJyxcbiAgICAgIGZvb3RlcjogJ2Zvb3RlcicsXG4gICAgICBmb3JtOiAnZm9ybScsXG4gICAgICBoMTogJ2gxJyxcbiAgICAgIGgyOiAnaDInLFxuICAgICAgaDM6ICdoMycsXG4gICAgICBoNDogJ2g0JyxcbiAgICAgIGg1OiAnaDUnLFxuICAgICAgaDY6ICdoNicsXG4gICAgICBoZWFkOiAnaGVhZCcsXG4gICAgICBoZWFkZXI6ICdoZWFkZXInLFxuICAgICAgaGdyb3VwOiAnaGdyb3VwJyxcbiAgICAgIGhyOiAnaHInLFxuICAgICAgaHRtbDogJ2h0bWwnLFxuICAgICAgaTogJ2knLFxuICAgICAgaWZyYW1lOiAnaWZyYW1lJyxcbiAgICAgIGltZzogJ2ltZycsXG4gICAgICBpbnB1dDogJ2lucHV0JyxcbiAgICAgIGluczogJ2lucycsXG4gICAgICBrYmQ6ICdrYmQnLFxuICAgICAga2V5Z2VuOiAna2V5Z2VuJyxcbiAgICAgIGxhYmVsOiAnbGFiZWwnLFxuICAgICAgbGVnZW5kOiAnbGVnZW5kJyxcbiAgICAgIGxpOiAnbGknLFxuICAgICAgbGluazogJ2xpbmsnLFxuICAgICAgbWFpbjogJ21haW4nLFxuICAgICAgbWFwOiAnbWFwJyxcbiAgICAgIG1hcms6ICdtYXJrJyxcbiAgICAgIG1lbnU6ICdtZW51JyxcbiAgICAgIG1lbnVpdGVtOiAnbWVudWl0ZW0nLFxuICAgICAgbWV0YTogJ21ldGEnLFxuICAgICAgbWV0ZXI6ICdtZXRlcicsXG4gICAgICBuYXY6ICduYXYnLFxuICAgICAgbm9zY3JpcHQ6ICdub3NjcmlwdCcsXG4gICAgICBvYmplY3Q6ICdvYmplY3QnLFxuICAgICAgb2w6ICdvbCcsXG4gICAgICBvcHRncm91cDogJ29wdGdyb3VwJyxcbiAgICAgIG9wdGlvbjogJ29wdGlvbicsXG4gICAgICBvdXRwdXQ6ICdvdXRwdXQnLFxuICAgICAgcDogJ3AnLFxuICAgICAgcGFyYW06ICdwYXJhbScsXG4gICAgICBwaWN0dXJlOiAncGljdHVyZScsXG4gICAgICBwcmU6ICdwcmUnLFxuICAgICAgcHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gICAgICBxOiAncScsXG4gICAgICBycDogJ3JwJyxcbiAgICAgIHJ0OiAncnQnLFxuICAgICAgcnVieTogJ3J1YnknLFxuICAgICAgczogJ3MnLFxuICAgICAgc2FtcDogJ3NhbXAnLFxuICAgICAgc2NyaXB0OiAnc2NyaXB0JyxcbiAgICAgIHNlY3Rpb246ICdzZWN0aW9uJyxcbiAgICAgIHNlbGVjdDogJ3NlbGVjdCcsXG4gICAgICBzbWFsbDogJ3NtYWxsJyxcbiAgICAgIHNvdXJjZTogJ3NvdXJjZScsXG4gICAgICBzcGFuOiAnc3BhbicsXG4gICAgICBzdHJvbmc6ICdzdHJvbmcnLFxuICAgICAgc3R5bGU6ICdzdHlsZScsXG4gICAgICBzdWI6ICdzdWInLFxuICAgICAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICAgICAgc3VwOiAnc3VwJyxcbiAgICAgIHRhYmxlOiAndGFibGUnLFxuICAgICAgdGJvZHk6ICd0Ym9keScsXG4gICAgICB0ZDogJ3RkJyxcbiAgICAgIHRleHRhcmVhOiAndGV4dGFyZWEnLFxuICAgICAgdGZvb3Q6ICd0Zm9vdCcsXG4gICAgICB0aDogJ3RoJyxcbiAgICAgIHRoZWFkOiAndGhlYWQnLFxuICAgICAgdGltZTogJ3RpbWUnLFxuICAgICAgdGl0bGU6ICd0aXRsZScsXG4gICAgICB0cjogJ3RyJyxcbiAgICAgIHRyYWNrOiAndHJhY2snLFxuICAgICAgdTogJ3UnLFxuICAgICAgdWw6ICd1bCcsXG4gICAgICAndmFyJzogJ3ZhcicsXG4gICAgICB2aWRlbzogJ3ZpZGVvJyxcbiAgICAgIHdicjogJ3dicicsXG4gICAgICBjaXJjbGU6ICdjaXJjbGUnLFxuICAgICAgY2xpcFBhdGg6ICdjbGlwUGF0aCcsXG4gICAgICBkZWZzOiAnZGVmcycsXG4gICAgICBlbGxpcHNlOiAnZWxsaXBzZScsXG4gICAgICBnOiAnZycsXG4gICAgICBpbWFnZTogJ2ltYWdlJyxcbiAgICAgIGxpbmU6ICdsaW5lJyxcbiAgICAgIGxpbmVhckdyYWRpZW50OiAnbGluZWFyR3JhZGllbnQnLFxuICAgICAgbWFzazogJ21hc2snLFxuICAgICAgcGF0aDogJ3BhdGgnLFxuICAgICAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICAgICAgcG9seWdvbjogJ3BvbHlnb24nLFxuICAgICAgcG9seWxpbmU6ICdwb2x5bGluZScsXG4gICAgICByYWRpYWxHcmFkaWVudDogJ3JhZGlhbEdyYWRpZW50JyxcbiAgICAgIHJlY3Q6ICdyZWN0JyxcbiAgICAgIHN0b3A6ICdzdG9wJyxcbiAgICAgIHN2ZzogJ3N2ZycsXG4gICAgICB0ZXh0OiAndGV4dCcsXG4gICAgICB0c3BhbjogJ3RzcGFuJ1xuICAgIH0sIGNyZWF0ZURPTUZhY3RvcnkpO1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01GYWN0b3JpZXM7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjU4XCIsIFtcIjMwXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIGtleU1pcnJvciA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIHJldCA9IHt9O1xuICAgICAgdmFyIGtleTtcbiAgICAgICEob2JqIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KG9iaikpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2tleU1pcnJvciguLi4pOiBBcmd1bWVudCBtdXN0IGJlIGFuIG9iamVjdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBmb3IgKGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldFtrZXldID0ga2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0ga2V5TWlycm9yO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIzYlwiLCBbXCI1OFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGtleU1pcnJvciA9ICRfX3JlcXVpcmUoJzU4Jyk7XG4gIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0ga2V5TWlycm9yKHtcbiAgICBwcm9wOiBudWxsLFxuICAgIGNvbnRleHQ6IG51bGwsXG4gICAgY2hpbGRDb250ZXh0OiBudWxsXG4gIH0pO1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbnM7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZWZcIiwgW1wiOGRcIiwgXCIzYlwiLCBcIjkzXCIsIFwiNDdcIiwgXCJlZFwiLCBcImU0XCIsIFwiMzBcIiwgXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSAkX19yZXF1aXJlKCc4ZCcpO1xuICAgIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gJF9fcmVxdWlyZSgnM2InKTtcbiAgICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSAkX19yZXF1aXJlKCc5MycpO1xuICAgIHZhciBSZWFjdEN1cnJlbnRPd25lciA9ICRfX3JlcXVpcmUoJzQ3Jyk7XG4gICAgdmFyIGNhbkRlZmluZVByb3BlcnR5ID0gJF9fcmVxdWlyZSgnZWQnKTtcbiAgICB2YXIgZ2V0SXRlcmF0b3JGbiA9ICRfX3JlcXVpcmUoJ2U0Jyk7XG4gICAgdmFyIGludmFyaWFudCA9ICRfX3JlcXVpcmUoJzMwJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIGZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpIHtcbiAgICAgIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG4gICAgdmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICAgICAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgdmFyIGFkZGVuZGEgPSBnZXRBZGRlbmRhRm9yS2V5VXNlKCd1bmlxdWVLZXknLCBlbGVtZW50LCBwYXJlbnRUeXBlKTtcbiAgICAgIGlmIChhZGRlbmRhID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyArICclcyVzJXMnLCBhZGRlbmRhLnBhcmVudE9yT3duZXIgfHwgJycsIGFkZGVuZGEuY2hpbGRPd25lciB8fCAnJywgYWRkZW5kYS51cmwgfHwgJycpIDogdm9pZCAwO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRBZGRlbmRhRm9yS2V5VXNlKG1lc3NhZ2VUeXBlLCBlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcbiAgICAgIGlmICghYWRkZW5kdW0pIHtcbiAgICAgICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG4gICAgICAgIGlmIChwYXJlbnROYW1lKSB7XG4gICAgICAgICAgYWRkZW5kdW0gPSAnIENoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPCcgKyBwYXJlbnROYW1lICsgJz4uJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVyID0gb3duZXJIYXNLZXlVc2VXYXJuaW5nW21lc3NhZ2VUeXBlXSB8fCAob3duZXJIYXNLZXlVc2VXYXJuaW5nW21lc3NhZ2VUeXBlXSA9IHt9KTtcbiAgICAgIGlmIChtZW1vaXplclthZGRlbmR1bV0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBtZW1vaXplclthZGRlbmR1bV0gPSB0cnVlO1xuICAgICAgdmFyIGFkZGVuZGEgPSB7XG4gICAgICAgIHBhcmVudE9yT3duZXI6IGFkZGVuZHVtLFxuICAgICAgICB1cmw6ICcgU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtd2FybmluZy1rZXlzIGZvciBtb3JlIGluZm9ybWF0aW9uLicsXG4gICAgICAgIGNoaWxkT3duZXI6IG51bGxcbiAgICAgIH07XG4gICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgICBhZGRlbmRhLmNoaWxkT3duZXIgPSAnIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tICcgKyBlbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLic7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWRkZW5kYTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVDaGlsZEtleXMobm9kZSwgcGFyZW50VHlwZSkge1xuICAgICAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuICAgICAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KGNoaWxkLCBwYXJlbnRUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5vZGUpKSB7XG4gICAgICAgIGlmIChub2RlLl9zdG9yZSkge1xuICAgICAgICAgIG5vZGUuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9kZSkge1xuICAgICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obm9kZSk7XG4gICAgICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IG5vZGUuZW50cmllcykge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICAgIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKGNvbXBvbmVudE5hbWUsIHByb3BUeXBlcywgcHJvcHMsIGxvY2F0aW9uKSB7XG4gICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICAgICAgaWYgKHByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICEodHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0gPT09ICdmdW5jdGlvbicpID8gXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gJyArICdSZWFjdC5Qcm9wVHlwZXMuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHByb3BOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBlcnJvciA9IHByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgIGVycm9yID0gZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFlcnJvciB8fCBlcnJvciBpbnN0YW5jZW9mIEVycm9yLCAnJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcyBgJXNgIGlzIGludmFsaWQ7IHRoZSB0eXBlIGNoZWNrZXIgJyArICdmdW5jdGlvbiBtdXN0IHJldHVybiBgbnVsbGAgb3IgYW4gYEVycm9yYCBidXQgcmV0dXJuZWQgYSAlcy4gJyArICdZb3UgbWF5IGhhdmUgZm9yZ290dGVuIHRvIHBhc3MgYW4gYXJndW1lbnQgdG8gdGhlIHR5cGUgY2hlY2tlciAnICsgJ2NyZWF0b3IgKGFycmF5T2YsIGluc3RhbmNlT2YsIG9iamVjdE9mLCBvbmVPZiwgb25lT2ZUeXBlLCBhbmQgJyArICdzaGFwZSBhbGwgcmVxdWlyZSBhbiBhcmd1bWVudCkuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHByb3BOYW1lLCB0eXBlb2YgZXJyb3IpIDogdm9pZCAwO1xuICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuICAgICAgICAgICAgdmFyIGFkZGVuZHVtID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG4gICAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBwcm9wVHlwZTogJXMlcycsIGVycm9yLm1lc3NhZ2UsIGFkZGVuZHVtKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCkge1xuICAgICAgdmFyIGNvbXBvbmVudENsYXNzID0gZWxlbWVudC50eXBlO1xuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnRDbGFzcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmFtZSA9IGNvbXBvbmVudENsYXNzLmRpc3BsYXlOYW1lIHx8IGNvbXBvbmVudENsYXNzLm5hbWU7XG4gICAgICBpZiAoY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzKSB7XG4gICAgICAgIGNoZWNrUHJvcFR5cGVzKG5hbWUsIGNvbXBvbmVudENsYXNzLnByb3BUeXBlcywgZWxlbWVudC5wcm9wcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGNvbXBvbmVudENsYXNzLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCwgJ2dldERlZmF1bHRQcm9wcyBpcyBvbmx5IHVzZWQgb24gY2xhc3NpYyBSZWFjdC5jcmVhdGVDbGFzcyAnICsgJ2RlZmluaXRpb25zLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgYGRlZmF1bHRQcm9wc2AgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHtcbiAgICAgIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICAgICAgICB2YXIgdmFsaWRUeXBlID0gdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nO1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh2YWxpZFR5cGUsICdSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIHNob3VsZCBub3QgYmUgbnVsbCwgdW5kZWZpbmVkLCBib29sZWFuLCBvciAnICsgJ251bWJlci4gSXQgc2hvdWxkIGJlIGEgc3RyaW5nIChmb3IgRE9NIGVsZW1lbnRzKSBvciBhIFJlYWN0Q2xhc3MgJyArICcoZm9yIGNvbXBvc2l0ZSBjb21wb25lbnRzKS4lcycsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpKSA6IHZvaWQgMDtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbGlkVHlwZSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9LFxuICAgICAgY3JlYXRlRmFjdG9yeTogZnVuY3Rpb24odHlwZSkge1xuICAgICAgICB2YXIgdmFsaWRhdGVkRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG4gICAgICAgIHZhbGlkYXRlZEZhY3RvcnkudHlwZSA9IHR5cGU7XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsaWRhdGVkRmFjdG9yeSwgJ3R5cGUnLCB7XG4gICAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFjdG9yeS50eXBlIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB0aGUgY2xhc3MgZGlyZWN0bHkgJyArICdiZWZvcmUgcGFzc2luZyBpdCB0byBjcmVhdGVGYWN0b3J5LicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndHlwZScsIHt2YWx1ZTogdHlwZX0pO1xuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlZEZhY3Rvcnk7XG4gICAgICB9LFxuICAgICAgY2xvbmVFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICAgICAgdmFyIG5ld0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCBuZXdFbGVtZW50LnR5cGUpO1xuICAgICAgICB9XG4gICAgICAgIHZhbGlkYXRlUHJvcFR5cGVzKG5ld0VsZW1lbnQpO1xuICAgICAgICByZXR1cm4gbmV3RWxlbWVudDtcbiAgICAgIH1cbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI5M1wiLCBbXCIxNlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICAoZnVuY3Rpb24ocHJvY2Vzcykge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7fTtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7XG4gICAgICAgIHByb3A6ICdwcm9wJyxcbiAgICAgICAgY29udGV4dDogJ2NvbnRleHQnLFxuICAgICAgICBjaGlsZENvbnRleHQ6ICdjaGlsZCBjb250ZXh0J1xuICAgICAgfTtcbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcztcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZTRcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBJVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbiAgdmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuICBmdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gICAgfVxuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIzYVwiLCBbXCI4ZFwiLCBcIjkzXCIsIFwiNDhcIiwgXCJlNFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFJlYWN0RWxlbWVudCA9ICRfX3JlcXVpcmUoJzhkJyk7XG4gIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9ICRfX3JlcXVpcmUoJzkzJyk7XG4gIHZhciBlbXB0eUZ1bmN0aW9uID0gJF9fcmVxdWlyZSgnNDgnKTtcbiAgdmFyIGdldEl0ZXJhdG9yRm4gPSAkX19yZXF1aXJlKCdlNCcpO1xuICB2YXIgQU5PTllNT1VTID0gJzw8YW5vbnltb3VzPj4nO1xuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdhcnJheScpLFxuICAgIGJvb2w6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdib29sZWFuJyksXG4gICAgZnVuYzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Z1bmN0aW9uJyksXG4gICAgbnVtYmVyOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignbnVtYmVyJyksXG4gICAgb2JqZWN0OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignb2JqZWN0JyksXG4gICAgc3RyaW5nOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignc3RyaW5nJyksXG4gICAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICAgIGFycmF5T2Y6IGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcixcbiAgICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICAgIG5vZGU6IGNyZWF0ZU5vZGVDaGVja2VyKCksXG4gICAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG4gICAgb25lT2Y6IGNyZWF0ZUVudW1UeXBlQ2hlY2tlcixcbiAgICBvbmVPZlR5cGU6IGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIsXG4gICAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXJcbiAgfTtcbiAgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIGlmICh4ID09PSB5KSB7XG4gICAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgQU5PTllNT1VTO1xuICAgICAgcHJvcEZ1bGxOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignUmVxdWlyZWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCB3YXMgbm90IHNwZWNpZmllZCBpbiAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNoYWluZWRDaGVja1R5cGUgPSBjaGVja1R5cGUuYmluZChudWxsLCBmYWxzZSk7XG4gICAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG4gICAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZXhwZWN0ZWRUeXBlKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAgIHZhciBwcmVjaXNlVHlwZSA9IGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJlY2lzZVR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2AnICsgZXhwZWN0ZWRUeXBlICsgJ2AuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnMobnVsbCkpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgYXJyYXlPZi4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScpO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGEgc2luZ2xlIFJlYWN0RWxlbWVudC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyKGV4cGVjdGVkQ2xhc3MpIHtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIGlmICghKHByb3BzW3Byb3BOYW1lXSBpbnN0YW5jZW9mIGV4cGVjdGVkQ2xhc3MpKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAgIHZhciBleHBlY3RlZENsYXNzTmFtZSA9IGV4cGVjdGVkQ2xhc3MubmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICAgIHZhciBhY3R1YWxDbGFzc05hbWUgPSBnZXRDbGFzc05hbWUocHJvcHNbcHJvcE5hbWVdKTtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBhY3R1YWxDbGFzc05hbWUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2luc3RhbmNlIG9mIGAnICsgZXhwZWN0ZWRDbGFzc05hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIoZXhwZWN0ZWRWYWx1ZXMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRWYWx1ZXMpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2YsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGlzKHByb3BWYWx1ZSwgZXhwZWN0ZWRWYWx1ZXNbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHZhbHVlIGAnICsgcHJvcFZhbHVlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIG9uZSBvZiAnICsgdmFsdWVzU3RyaW5nICsgJy4nKSk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICAgIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBvYmplY3QuJykpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BWYWx1ZSkge1xuICAgICAgICBpZiAocHJvcFZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSk7XG4gICAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVVuaW9uVHlwZUNoZWNrZXIoYXJyYXlPZlR5cGVDaGVja2Vycykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mVHlwZSwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJyk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgICBpZiAoY2hlY2tlcihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKSk7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlTm9kZUNoZWNrZXIoKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICBpZiAoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBgb2JqZWN0YC4nKSk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc2hhcGVUeXBlcykge1xuICAgICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG4gIH1cbiAgZnVuY3Rpb24gaXNOb2RlKHByb3BWYWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHByb3BWYWx1ZSkge1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICByZXR1cm4gIXByb3BWYWx1ZTtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gcHJvcFZhbHVlLmV2ZXJ5KGlzTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gbnVsbCB8fCBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbikge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuICAgICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBwcm9wVmFsdWUuZW50cmllcykge1xuICAgICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgIGlmICghaXNOb2RlKGVudHJ5WzFdKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldFByb3BUeXBlKHByb3BWYWx1ZSkge1xuICAgIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgcmV0dXJuICdhcnJheSc7XG4gICAgfVxuICAgIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiAnb2JqZWN0JztcbiAgICB9XG4gICAgcmV0dXJuIHByb3BUeXBlO1xuICB9XG4gIGZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgaWYgKHByb3BUeXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgcmV0dXJuICdkYXRlJztcbiAgICAgIH0gZWxzZSBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb3BUeXBlO1xuICB9XG4gIGZ1bmN0aW9uIGdldENsYXNzTmFtZShwcm9wVmFsdWUpIHtcbiAgICBpZiAoIXByb3BWYWx1ZS5jb25zdHJ1Y3RvciB8fCAhcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICAgIHJldHVybiBBTk9OWU1PVVM7XG4gICAgfVxuICAgIHJldHVybiBwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjk4XCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9ICcxNS4xLjAnO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImYwXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICB2YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuICAgIGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QodmFsKTtcbiAgfVxuICBmdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghT2JqZWN0LmFzc2lnbikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTtcbiAgICAgIHRlc3QxWzVdID0gJ2RlJztcbiAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgdGVzdDIgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuICAgICAgICB0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG4gICAgICB9XG4gICAgICB2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0ZXN0MltuXTtcbiAgICAgIH0pO1xuICAgICAgaWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0ZXN0MyA9IHt9O1xuICAgICAgJ2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbihsZXR0ZXIpIHtcbiAgICAgICAgdGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcbiAgICAgIH0pO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uKHRhcmdldCwgc291cmNlKSB7XG4gICAgdmFyIGZyb207XG4gICAgdmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgICB2YXIgc3ltYm9scztcbiAgICBmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuICAgICAgZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuICAgICAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuICAgICAgICAgIHRvW2tleV0gPSBmcm9tW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG4gICAgICAgICAgICB0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0bztcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI2XCIsIFtcImYwXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnZjAnKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI0N1wiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIFJlYWN0Q3VycmVudE93bmVyID0ge2N1cnJlbnQ6IG51bGx9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q3VycmVudE93bmVyO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImVkXCIsIFtcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IGZhbHNlO1xuICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0cnkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICd4Jywge2dldDogZnVuY3Rpb24oKSB7fX0pO1xuICAgICAgICBjYW5EZWZpbmVQcm9wZXJ0eSA9IHRydWU7XG4gICAgICB9IGNhdGNoICh4KSB7fVxuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGNhbkRlZmluZVByb3BlcnR5O1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI4ZFwiLCBbXCI2XCIsIFwiNDdcIiwgXCIyMlwiLCBcImVkXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIF9hc3NpZ24gPSAkX19yZXF1aXJlKCc2Jyk7XG4gICAgdmFyIFJlYWN0Q3VycmVudE93bmVyID0gJF9fcmVxdWlyZSgnNDcnKTtcbiAgICB2YXIgd2FybmluZyA9ICRfX3JlcXVpcmUoJzIyJyk7XG4gICAgdmFyIGNhbkRlZmluZVByb3BlcnR5ID0gJF9fcmVxdWlyZSgnZWQnKTtcbiAgICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2xbJ2ZvciddICYmIFN5bWJvbFsnZm9yJ10oJ3JlYWN0LmVsZW1lbnQnKSB8fCAweGVhYzc7XG4gICAgdmFyIFJFU0VSVkVEX1BST1BTID0ge1xuICAgICAga2V5OiB0cnVlLFxuICAgICAgcmVmOiB0cnVlLFxuICAgICAgX19zZWxmOiB0cnVlLFxuICAgICAgX19zb3VyY2U6IHRydWVcbiAgICB9O1xuICAgIHZhciBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bixcbiAgICAgICAgc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd247XG4gICAgdmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uKHR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcykge1xuICAgICAgdmFyIGVsZW1lbnQgPSB7XG4gICAgICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGtleToga2V5LFxuICAgICAgICByZWY6IHJlZixcbiAgICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgICBfb3duZXI6IG93bmVyXG4gICAgICB9O1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZWxlbWVudC5fc3RvcmUgPSB7fTtcbiAgICAgICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQuX3N0b3JlLCAndmFsaWRhdGVkJywge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHNlbGZcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zb3VyY2UnLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgICB2YWx1ZTogc291cmNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgICAgZWxlbWVudC5fc2VsZiA9IHNlbGY7XG4gICAgICAgICAgZWxlbWVudC5fc291cmNlID0gc291cmNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50LnByb3BzKTtcbiAgICAgICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9O1xuICAgIFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24odHlwZSwgY29uZmlnLCBjaGlsZHJlbikge1xuICAgICAgdmFyIHByb3BOYW1lO1xuICAgICAgdmFyIHByb3BzID0ge307XG4gICAgICB2YXIga2V5ID0gbnVsbDtcbiAgICAgIHZhciByZWYgPSBudWxsO1xuICAgICAgdmFyIHNlbGYgPSBudWxsO1xuICAgICAgdmFyIHNvdXJjZSA9IG51bGw7XG4gICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhjb25maWcuX19wcm90b19fID09IG51bGwgfHwgY29uZmlnLl9fcHJvdG9fXyA9PT0gT2JqZWN0LnByb3RvdHlwZSwgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQoLi4uKTogRXhwZWN0ZWQgcHJvcHMgYXJndW1lbnQgdG8gYmUgYSBwbGFpbiBvYmplY3QuICcgKyAnUHJvcGVydGllcyBkZWZpbmVkIGluIGl0cyBwcm90b3R5cGUgY2hhaW4gd2lsbCBiZSBpZ25vcmVkLicpIDogdm9pZCAwO1xuICAgICAgICAgIHJlZiA9ICFjb25maWcuaGFzT3duUHJvcGVydHkoJ3JlZicpIHx8IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAncmVmJykuZ2V0ID8gbnVsbCA6IGNvbmZpZy5yZWY7XG4gICAgICAgICAga2V5ID0gIWNvbmZpZy5oYXNPd25Qcm9wZXJ0eSgna2V5JykgfHwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdrZXknKS5nZXQgPyBudWxsIDogJycgKyBjb25maWcua2V5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZiA9IGNvbmZpZy5yZWYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcucmVmO1xuICAgICAgICAgIGtleSA9IGNvbmZpZy5rZXkgPT09IHVuZGVmaW5lZCA/IG51bGwgOiAnJyArIGNvbmZpZy5rZXk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZiA9IGNvbmZpZy5fX3NlbGYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zZWxmO1xuICAgICAgICBzb3VyY2UgPSBjb25maWcuX19zb3VyY2UgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zb3VyY2U7XG4gICAgICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgICAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgICAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgICAgIH1cbiAgICAgICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuICAgICAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvcHMuJCR0eXBlb2YgPT09ICd1bmRlZmluZWQnIHx8IHByb3BzLiQkdHlwZW9mICE9PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICAgICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KCdrZXknKSkge1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAna2V5Jywge1xuICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICghc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24pIHtcbiAgICAgICAgICAgICAgICAgIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXM6IGBrZXlgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgJyArICdpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lICcgKyAndmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCAnICsgJ3Byb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpJywgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgJ2Rpc3BsYXlOYW1lJyBpbiB0eXBlID8gdHlwZS5kaXNwbGF5TmFtZSA6ICdFbGVtZW50JykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkoJ3JlZicpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdyZWYnLCB7XG4gICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bikge1xuICAgICAgICAgICAgICAgICAgc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclczogYHJlZmAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vZmIubWUvcmVhY3Qtc3BlY2lhbC1wcm9wcyknLCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiAnZGlzcGxheU5hbWUnIGluIHR5cGUgPyB0eXBlLmRpc3BsYXlOYW1lIDogJ0VsZW1lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCwgcHJvcHMpO1xuICAgIH07XG4gICAgUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgICB2YXIgZmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG4gICAgICBmYWN0b3J5LnR5cGUgPSB0eXBlO1xuICAgICAgcmV0dXJuIGZhY3Rvcnk7XG4gICAgfTtcbiAgICBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlS2V5ID0gZnVuY3Rpb24ob2xkRWxlbWVudCwgbmV3S2V5KSB7XG4gICAgICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudChvbGRFbGVtZW50LnR5cGUsIG5ld0tleSwgb2xkRWxlbWVudC5yZWYsIG9sZEVsZW1lbnQuX3NlbGYsIG9sZEVsZW1lbnQuX3NvdXJjZSwgb2xkRWxlbWVudC5fb3duZXIsIG9sZEVsZW1lbnQucHJvcHMpO1xuICAgICAgcmV0dXJuIG5ld0VsZW1lbnQ7XG4gICAgfTtcbiAgICBSZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICAgICAgdmFyIHByb3BOYW1lO1xuICAgICAgdmFyIHByb3BzID0gX2Fzc2lnbih7fSwgZWxlbWVudC5wcm9wcyk7XG4gICAgICB2YXIga2V5ID0gZWxlbWVudC5rZXk7XG4gICAgICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gICAgICB2YXIgc2VsZiA9IGVsZW1lbnQuX3NlbGY7XG4gICAgICB2YXIgc291cmNlID0gZWxlbWVudC5fc291cmNlO1xuICAgICAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhjb25maWcuX19wcm90b19fID09IG51bGwgfHwgY29uZmlnLl9fcHJvdG9fXyA9PT0gT2JqZWN0LnByb3RvdHlwZSwgJ1JlYWN0LmNsb25lRWxlbWVudCguLi4pOiBFeHBlY3RlZCBwcm9wcyBhcmd1bWVudCB0byBiZSBhIHBsYWluIG9iamVjdC4gJyArICdQcm9wZXJ0aWVzIGRlZmluZWQgaW4gaXRzIHByb3RvdHlwZSBjaGFpbiB3aWxsIGJlIGlnbm9yZWQuJykgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbmZpZy5yZWYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgICAgICAgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25maWcua2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlZmF1bHRQcm9wcztcbiAgICAgICAgaWYgKGVsZW1lbnQudHlwZSAmJiBlbGVtZW50LnR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgICAgICAgZGVmYXVsdFByb3BzID0gZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcztcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykge1xuICAgICAgICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICAgIGlmIChjb25maWdbcHJvcE5hbWVdID09PSB1bmRlZmluZWQgJiYgZGVmYXVsdFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgICAgIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgICAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgICAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICAgICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgICAgICB9XG4gICAgICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdEVsZW1lbnQoZWxlbWVudC50eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpO1xuICAgIH07XG4gICAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICAgIH07XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnQ7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjMwXCIsIFtcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgICAgfVxuICAgICAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZjFcIiwgW1wiOGRcIiwgXCIzMFwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSAkX19yZXF1aXJlKCc4ZCcpO1xuICAgIHZhciBpbnZhcmlhbnQgPSAkX19yZXF1aXJlKCczMCcpO1xuICAgIGZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICAgICAgIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnb25seUNoaWxkIG11c3QgYmUgcGFzc2VkIGEgY2hpbGRyZW4gd2l0aCBleGFjdGx5IG9uZSBjaGlsZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxuICAgIG1vZHVsZS5leHBvcnRzID0gb25seUNoaWxkO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCI0OFwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgZnVuY3Rpb24gbWFrZUVtcHR5RnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFyZztcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuICBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zID0gbWFrZUVtcHR5RnVuY3Rpb247XG4gIGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSA9IG1ha2VFbXB0eUZ1bmN0aW9uKGZhbHNlKTtcbiAgZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbiAgZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwgPSBtYWtlRW1wdHlGdW5jdGlvbihudWxsKTtcbiAgZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RoaXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZztcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjIyXCIsIFtcIjQ4XCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyIGVtcHR5RnVuY3Rpb24gPSAkX19yZXF1aXJlKCc0OCcpO1xuICAgIHZhciB3YXJuaW5nID0gZW1wdHlGdW5jdGlvbjtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KF9sZW4gPiAyID8gX2xlbiAtIDIgOiAwKSxcbiAgICAgICAgICAgIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5IC0gMl0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICsgJ21lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICsgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICB9IGNhdGNoICh4KSB7fVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImYyXCIsIFtcIjZcIiwgXCIzMlwiLCBcImViXCIsIFwiNjNcIiwgXCJlZVwiLCBcIjhkXCIsIFwiZWZcIiwgXCIzYVwiLCBcIjk4XCIsIFwiZjFcIiwgXCIyMlwiLCBcIjE2XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIChmdW5jdGlvbihwcm9jZXNzKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBfYXNzaWduID0gJF9fcmVxdWlyZSgnNicpO1xuICAgIHZhciBSZWFjdENoaWxkcmVuID0gJF9fcmVxdWlyZSgnMzInKTtcbiAgICB2YXIgUmVhY3RDb21wb25lbnQgPSAkX19yZXF1aXJlKCdlYicpO1xuICAgIHZhciBSZWFjdENsYXNzID0gJF9fcmVxdWlyZSgnNjMnKTtcbiAgICB2YXIgUmVhY3RET01GYWN0b3JpZXMgPSAkX19yZXF1aXJlKCdlZScpO1xuICAgIHZhciBSZWFjdEVsZW1lbnQgPSAkX19yZXF1aXJlKCc4ZCcpO1xuICAgIHZhciBSZWFjdEVsZW1lbnRWYWxpZGF0b3IgPSAkX19yZXF1aXJlKCdlZicpO1xuICAgIHZhciBSZWFjdFByb3BUeXBlcyA9ICRfX3JlcXVpcmUoJzNhJyk7XG4gICAgdmFyIFJlYWN0VmVyc2lvbiA9ICRfX3JlcXVpcmUoJzk4Jyk7XG4gICAgdmFyIG9ubHlDaGlsZCA9ICRfX3JlcXVpcmUoJ2YxJyk7XG4gICAgdmFyIHdhcm5pbmcgPSAkX19yZXF1aXJlKCcyMicpO1xuICAgIHZhciBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQ7XG4gICAgdmFyIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeTtcbiAgICB2YXIgY2xvbmVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudDtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50O1xuICAgICAgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5O1xuICAgICAgY2xvbmVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNsb25lRWxlbWVudDtcbiAgICB9XG4gICAgdmFyIF9fc3ByZWFkID0gX2Fzc2lnbjtcbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICAgICAgX19zcHJlYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcod2FybmVkLCAnUmVhY3QuX19zcHJlYWQgaXMgZGVwcmVjYXRlZCBhbmQgc2hvdWxkIG5vdCBiZSB1c2VkLiBVc2UgJyArICdPYmplY3QuYXNzaWduIGRpcmVjdGx5IG9yIGFub3RoZXIgaGVscGVyIGZ1bmN0aW9uIHdpdGggc2ltaWxhciAnICsgJ3NlbWFudGljcy4gWW91IG1heSBiZSBzZWVpbmcgdGhpcyB3YXJuaW5nIGR1ZSB0byB5b3VyIGNvbXBpbGVyLiAnICsgJ1NlZSBodHRwczovL2ZiLm1lL3JlYWN0LXNwcmVhZC1kZXByZWNhdGlvbiBmb3IgbW9yZSBkZXRhaWxzLicpIDogdm9pZCAwO1xuICAgICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gX2Fzc2lnbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdmFyIFJlYWN0ID0ge1xuICAgICAgQ2hpbGRyZW46IHtcbiAgICAgICAgbWFwOiBSZWFjdENoaWxkcmVuLm1hcCxcbiAgICAgICAgZm9yRWFjaDogUmVhY3RDaGlsZHJlbi5mb3JFYWNoLFxuICAgICAgICBjb3VudDogUmVhY3RDaGlsZHJlbi5jb3VudCxcbiAgICAgICAgdG9BcnJheTogUmVhY3RDaGlsZHJlbi50b0FycmF5LFxuICAgICAgICBvbmx5OiBvbmx5Q2hpbGRcbiAgICAgIH0sXG4gICAgICBDb21wb25lbnQ6IFJlYWN0Q29tcG9uZW50LFxuICAgICAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCxcbiAgICAgIGNsb25lRWxlbWVudDogY2xvbmVFbGVtZW50LFxuICAgICAgaXNWYWxpZEVsZW1lbnQ6IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCxcbiAgICAgIFByb3BUeXBlczogUmVhY3RQcm9wVHlwZXMsXG4gICAgICBjcmVhdGVDbGFzczogUmVhY3RDbGFzcy5jcmVhdGVDbGFzcyxcbiAgICAgIGNyZWF0ZUZhY3Rvcnk6IGNyZWF0ZUZhY3RvcnksXG4gICAgICBjcmVhdGVNaXhpbjogZnVuY3Rpb24obWl4aW4pIHtcbiAgICAgICAgcmV0dXJuIG1peGluO1xuICAgICAgfSxcbiAgICAgIERPTTogUmVhY3RET01GYWN0b3JpZXMsXG4gICAgICB2ZXJzaW9uOiBSZWFjdFZlcnNpb24sXG4gICAgICBfX3NwcmVhZDogX19zcHJlYWRcbiAgICB9O1xuICAgIG1vZHVsZS5leHBvcnRzID0gUmVhY3Q7XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImYzXCIsIFtcImYyXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9ICRfX3JlcXVpcmUoJ2YyJyk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiOWNcIiwgW1wiZjNcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgbW9kdWxlLmV4cG9ydHMgPSAkX19yZXF1aXJlKCdmMycpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyKCdmNCcsIFsnOWMnXSwgZnVuY3Rpb24gKF9leHBvcnQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciBSZWFjdCwgZm9vdGVyTGlua3MsIE1haW5Gb290ZXI7XG4gIHJldHVybiB7XG4gICAgc2V0dGVyczogW2Z1bmN0aW9uIChfYykge1xuICAgICAgUmVhY3QgPSBfY1snZGVmYXVsdCddO1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvb3RlckxpbmtzID0gW3tcbiAgICAgICAgaHJlZjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9mcm9udGVuZGJyL2ZvcnVtJyxcbiAgICAgICAgdGl0bGU6ICdBY2Vzc28gbm9zc28gZsOzcnVtJyxcbiAgICAgICAgY29udGVudDogJ0bDs3J1bSdcbiAgICAgIH0sIHtcbiAgICAgICAgaHJlZjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9mcm9udGVuZGJyL3ZhZ2FzJyxcbiAgICAgICAgdGl0bGU6ICdQdWJsaXF1ZSBvdSBlbmNvbnRyZSB1bWEgdmFnYScsXG4gICAgICAgIGNvbnRlbnQ6ICdWYWdhcydcbiAgICAgIH1dO1xuXG4gICAgICBNYWluRm9vdGVyID0gZnVuY3Rpb24gTWFpbkZvb3RlcigpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2Zvb3RlcicsXG4gICAgICAgICAgeyBjbGFzc05hbWU6ICdmb290ZXInLCByb2xlOiAnY29udGVudGluZm8nIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdmb290ZXItaW5uZXInIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdjb250YWluZXItZmxleCcgfSxcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Zvb3Rlci1pbm5lci0tbWFpbicgfSxcbiAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgJ3AnLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICdFc3NlIHByb2pldG8gw6kgdW1hIGluaWNpYXRpdmEgZGEgb3JnYW5pemHDp8OjbyAnLFxuICAgICAgICAgICAgICAgICAgJyAnLFxuICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgICAgICAgICB7IGhyZWY6ICdodHRwczovL2dpdGh1Yi5jb20vZnJvbnRlbmRicicgfSxcbiAgICAgICAgICAgICAgICAgICAgJ0Zyb250LUVuZCBCcmFzaWwgZG8gR2l0SHViLidcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ3VsJyxcbiAgICAgICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Zvb3Rlci1pbm5lci0tbmF2JyB9LFxuICAgICAgICAgICAgICAgIGZvb3RlckxpbmtzLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICAgICAgICAgICAgdmFyIGhyZWYgPSBfcmVmLmhyZWY7XG4gICAgICAgICAgICAgICAgICB2YXIgdGl0bGUgPSBfcmVmLnRpdGxlO1xuICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBfcmVmLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2xpJyxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAnYScsXG4gICAgICAgICAgICAgICAgICAgICAgeyBjbGFzc05hbWU6ICdidG4tbGluaycsIGhyZWY6IGhyZWYsIHRpdGxlOiB0aXRsZSB9LFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IGNsYXNzTmFtZTogJ2Zvb3Rlci1ob2xkJyB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgIHsgY2xhc3NOYW1lOiAnY29udGFpbmVyJyB9LFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdwJyxcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICfCqSAyMDE2ICcsXG4gICAgICAgICAgICAgICAgJyAnLFxuICAgICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAnYScsXG4gICAgICAgICAgICAgICAgICB7IGhyZWY6ICdodHRwczovL2dpdGh1Yi5jb20vZnJvbnRlbmRici8nIH0sXG4gICAgICAgICAgICAgICAgICAnRnJvbnQtRW5kIEJyYXNpbCdcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9O1xuXG4gICAgICBfZXhwb3J0KCdkZWZhdWx0JywgTWFpbkZvb3Rlcik7XG4gICAgfVxuICB9O1xufSk7XG4kX19TeXN0ZW0ucmVnaXN0ZXIoJ2Y1JywgWyc5YycsICc5YicsICdlMycsICdmNCddLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgdmFyIFJlYWN0LCBNYWluSGVhZGVyLCBNYWluQ29udGVudCwgTWFpbkZvb3RlciwgQXBwO1xuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoX2MpIHtcbiAgICAgIFJlYWN0ID0gX2NbJ2RlZmF1bHQnXTtcbiAgICB9LCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgIE1haW5IZWFkZXIgPSBfYlsnZGVmYXVsdCddO1xuICAgIH0sIGZ1bmN0aW9uIChfZTMpIHtcbiAgICAgIE1haW5Db250ZW50ID0gX2UzWydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF9mNCkge1xuICAgICAgTWFpbkZvb3RlciA9IF9mNFsnZGVmYXVsdCddO1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIEFwcCA9IGZ1bmN0aW9uIEFwcCgpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KE1haW5IZWFkZXIsIG51bGwpLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWFpbkNvbnRlbnQsIG51bGwpLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTWFpbkZvb3RlciwgbnVsbClcbiAgICAgICAgKTtcbiAgICAgIH07XG5cbiAgICAgIF9leHBvcnQoJ2RlZmF1bHQnLCBBcHApO1xuICAgIH1cbiAgfTtcbn0pO1xuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImY2XCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHN5bWJvbE9ic2VydmFibGVQb255ZmlsbChyb290KSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICB2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChTeW1ib2wub2JzZXJ2YWJsZSkge1xuICAgICAgICByZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpO1xuICAgICAgICBTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZjdcIiwgW1wiZjZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnZjYnKShnbG9iYWwgfHwgd2luZG93IHx8IHRoaXMpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImY4XCIsIFtcImY3XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnZjcnKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJmOVwiLCBbXCJjYlwiLCBcImY4XCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICBleHBvcnRzLkFjdGlvblR5cGVzID0gdW5kZWZpbmVkO1xuICBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IGNyZWF0ZVN0b3JlO1xuICB2YXIgX2lzUGxhaW5PYmplY3QgPSAkX19yZXF1aXJlKCdjYicpO1xuICB2YXIgX2lzUGxhaW5PYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQbGFpbk9iamVjdCk7XG4gIHZhciBfc3ltYm9sT2JzZXJ2YWJsZSA9ICRfX3JlcXVpcmUoJ2Y4Jyk7XG4gIHZhciBfc3ltYm9sT2JzZXJ2YWJsZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zeW1ib2xPYnNlcnZhYmxlKTtcbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1wiZGVmYXVsdFwiOiBvYmp9O1xuICB9XG4gIHZhciBBY3Rpb25UeXBlcyA9IGV4cG9ydHMuQWN0aW9uVHlwZXMgPSB7SU5JVDogJ0BAcmVkdXgvSU5JVCd9O1xuICBmdW5jdGlvbiBjcmVhdGVTdG9yZShyZWR1Y2VyLCBpbml0aWFsU3RhdGUsIGVuaGFuY2VyKSB7XG4gICAgdmFyIF9yZWYyO1xuICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVuaGFuY2VyID0gaW5pdGlhbFN0YXRlO1xuICAgICAgaW5pdGlhbFN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBpbml0aWFsU3RhdGUpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIHJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG4gICAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgICB2YXIgY3VycmVudFN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gICAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICAgIHZhciBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICAgIGlmIChuZXh0TGlzdGVuZXJzID09PSBjdXJyZW50TGlzdGVuZXJzKSB7XG4gICAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFN0YXRlKCkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgbGlzdGVuZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdmFyIGluZGV4ID0gbmV4dExpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgICBpZiAoISgwLCBfaXNQbGFpbk9iamVjdDJbXCJkZWZhdWx0XCJdKShhY3Rpb24pKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG1heSBub3QgaGF2ZSBhbiB1bmRlZmluZWQgXCJ0eXBlXCIgcHJvcGVydHkuICcgKyAnSGF2ZSB5b3UgbWlzc3BlbGxlZCBhIGNvbnN0YW50PycpO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGlzdGVuZXJzW2ldKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBuZXh0UmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgICAgfVxuICAgICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjtcbiAgICAgIGRpc3BhdGNoKHt0eXBlOiBBY3Rpb25UeXBlcy5JTklUfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgICB2YXIgX3JlZjtcbiAgICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICAgIHJldHVybiBfcmVmID0ge3N1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZ1bmN0aW9uIG9ic2VydmVTdGF0ZSgpIHtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgICAgcmV0dXJuIHt1bnN1YnNjcmliZTogdW5zdWJzY3JpYmV9O1xuICAgICAgICB9fSwgX3JlZltfc3ltYm9sT2JzZXJ2YWJsZTJbXCJkZWZhdWx0XCJdXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sIF9yZWY7XG4gICAgfVxuICAgIGRpc3BhdGNoKHt0eXBlOiBBY3Rpb25UeXBlcy5JTklUfSk7XG4gICAgcmV0dXJuIF9yZWYyID0ge1xuICAgICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgICAgc3Vic2NyaWJlOiBzdWJzY3JpYmUsXG4gICAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgICB9LCBfcmVmMltfc3ltYm9sT2JzZXJ2YWJsZTJbXCJkZWZhdWx0XCJdXSA9IG9ic2VydmFibGUsIF9yZWYyO1xuICB9XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZmFcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIG5hdGl2ZUdldFByb3RvdHlwZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgZnVuY3Rpb24gZ2V0UHJvdG90eXBlKHZhbHVlKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZShPYmplY3QodmFsdWUpKTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGdldFByb3RvdHlwZTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJmYlwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBmdW5jdGlvbiBpc0hvc3RPYmplY3QodmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9ICEhKHZhbHVlICsgJycpO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGlzSG9zdE9iamVjdDtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJmY1wiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiY2JcIiwgW1wiZmFcIiwgXCJmYlwiLCBcImZjXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBnZXRQcm90b3R5cGUgPSAkX19yZXF1aXJlKCdmYScpLFxuICAgICAgaXNIb3N0T2JqZWN0ID0gJF9fcmVxdWlyZSgnZmInKSxcbiAgICAgIGlzT2JqZWN0TGlrZSA9ICRfX3JlcXVpcmUoJ2ZjJyk7XG4gIHZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcbiAgdmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGZ1bmNUb1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbiAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG4gIHZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcbiAgdmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG4gIGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSkgIT0gb2JqZWN0VGFnIHx8IGlzSG9zdE9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiAodHlwZW9mIEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBDdG9yIGluc3RhbmNlb2YgQ3RvciAmJiBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nKTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZmRcIiwgW1wiZjlcIiwgXCJjYlwiLCBcImZlXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgICBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IGNvbWJpbmVSZWR1Y2VycztcbiAgICB2YXIgX2NyZWF0ZVN0b3JlID0gJF9fcmVxdWlyZSgnZjknKTtcbiAgICB2YXIgX2lzUGxhaW5PYmplY3QgPSAkX19yZXF1aXJlKCdjYicpO1xuICAgIHZhciBfaXNQbGFpbk9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1BsYWluT2JqZWN0KTtcbiAgICB2YXIgX3dhcm5pbmcgPSAkX19yZXF1aXJlKCdmZScpO1xuICAgIHZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcbiAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcImRlZmF1bHRcIjogb2JqfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgICAgIHZhciBhY3Rpb25UeXBlID0gYWN0aW9uICYmIGFjdGlvbi50eXBlO1xuICAgICAgdmFyIGFjdGlvbk5hbWUgPSBhY3Rpb25UeXBlICYmICdcIicgKyBhY3Rpb25UeXBlLnRvU3RyaW5nKCkgKyAnXCInIHx8ICdhbiBhY3Rpb24nO1xuICAgICAgcmV0dXJuICdHaXZlbiBhY3Rpb24gJyArIGFjdGlvbk5hbWUgKyAnLCByZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQuICcgKyAnVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLic7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbikge1xuICAgICAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICAgICAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gX2NyZWF0ZVN0b3JlLkFjdGlvblR5cGVzLklOSVQgPyAnaW5pdGlhbFN0YXRlIGFyZ3VtZW50IHBhc3NlZCB0byBjcmVhdGVTdG9yZScgOiAncHJldmlvdXMgc3RhdGUgcmVjZWl2ZWQgYnkgdGhlIHJlZHVjZXInO1xuICAgICAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gJ1N0b3JlIGRvZXMgbm90IGhhdmUgYSB2YWxpZCByZWR1Y2VyLiBNYWtlIHN1cmUgdGhlIGFyZ3VtZW50IHBhc3NlZCAnICsgJ3RvIGNvbWJpbmVSZWR1Y2VycyBpcyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSByZWR1Y2Vycy4nO1xuICAgICAgfVxuICAgICAgaWYgKCEoMCwgX2lzUGxhaW5PYmplY3QyW1wiZGVmYXVsdFwiXSkoaW5wdXRTdGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuICdUaGUgJyArIGFyZ3VtZW50TmFtZSArICcgaGFzIHVuZXhwZWN0ZWQgdHlwZSBvZiBcIicgKyB7fS50b1N0cmluZy5jYWxsKGlucHV0U3RhdGUpLm1hdGNoKC9cXHMoW2EtenxBLVpdKykvKVsxXSArICdcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyAnICsgKCdrZXlzOiBcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIicpO1xuICAgICAgfVxuICAgICAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSk7XG4gICAgICB9KTtcbiAgICAgIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHJldHVybiAnVW5leHBlY3RlZCAnICsgKHVuZXhwZWN0ZWRLZXlzLmxlbmd0aCA+IDEgPyAna2V5cycgOiAna2V5JykgKyAnICcgKyAoJ1wiJyArIHVuZXhwZWN0ZWRLZXlzLmpvaW4oJ1wiLCBcIicpICsgJ1wiIGZvdW5kIGluICcgKyBhcmd1bWVudE5hbWUgKyAnLiAnKSArICdFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6ICcgKyAoJ1wiJyArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgJ1wiLiBVbmV4cGVjdGVkIGtleXMgd2lsbCBiZSBpZ25vcmVkLicpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhc3NlcnRSZWR1Y2VyU2FuaXR5KHJlZHVjZXJzKSB7XG4gICAgICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgICAgICB2YXIgaW5pdGlhbFN0YXRlID0gcmVkdWNlcih1bmRlZmluZWQsIHt0eXBlOiBfY3JlYXRlU3RvcmUuQWN0aW9uVHlwZXMuSU5JVH0pO1xuICAgICAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uICcgKyAnSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0ICcgKyAnZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSAnICsgJ25vdCBiZSB1bmRlZmluZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHR5cGUgPSAnQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTl8nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG4gICAgICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHt0eXBlOiB0eXBlfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VyIFwiJyArIGtleSArICdcIiByZXR1cm5lZCB1bmRlZmluZWQgd2hlbiBwcm9iZWQgd2l0aCBhIHJhbmRvbSB0eXBlLiAnICsgKCdEb25cXCd0IHRyeSB0byBoYW5kbGUgJyArIF9jcmVhdGVTdG9yZS5BY3Rpb25UeXBlcy5JTklUICsgJyBvciBvdGhlciBhY3Rpb25zIGluIFwicmVkdXgvKlwiICcpICsgJ25hbWVzcGFjZS4gVGhleSBhcmUgY29uc2lkZXJlZCBwcml2YXRlLiBJbnN0ZWFkLCB5b3UgbXVzdCByZXR1cm4gdGhlICcgKyAnY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgJyArICdpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgJyArICdhY3Rpb24gdHlwZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IG5vdCBiZSB1bmRlZmluZWQuJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgICAgIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgICAgIHZhciBmaW5hbFJlZHVjZXJzID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcbiAgICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZmluYWxSZWR1Y2Vyc1trZXldID0gcmVkdWNlcnNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTtcbiAgICAgIHZhciBzYW5pdHlFcnJvcjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGFzc2VydFJlZHVjZXJTYW5pdHkoZmluYWxSZWR1Y2Vycyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHNhbml0eUVycm9yID0gZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbigpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8ge30gOiBhcmd1bWVudHNbMF07XG4gICAgICAgIHZhciBhY3Rpb24gPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGlmIChzYW5pdHlFcnJvcikge1xuICAgICAgICAgIHRocm93IHNhbml0eUVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHdhcm5pbmdNZXNzYWdlID0gZ2V0VW5leHBlY3RlZFN0YXRlU2hhcGVXYXJuaW5nTWVzc2FnZShzdGF0ZSwgZmluYWxSZWR1Y2VycywgYWN0aW9uKTtcbiAgICAgICAgICBpZiAod2FybmluZ01lc3NhZ2UpIHtcbiAgICAgICAgICAgICgwLCBfd2FybmluZzJbXCJkZWZhdWx0XCJdKSh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGtleSA9IGZpbmFsUmVkdWNlcktleXNbaV07XG4gICAgICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW2tleV07XG4gICAgICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtrZXldO1xuICAgICAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuZXh0U3RhdGVGb3JLZXkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHRTdGF0ZVtrZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzQ2hhbmdlZCA/IG5leHRTdGF0ZSA6IHN0YXRlO1xuICAgICAgfTtcbiAgICB9XG4gIH0pKCRfX3JlcXVpcmUoJzE2JykpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImZmXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IGJpbmRBY3Rpb25DcmVhdG9ycztcbiAgZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgJyArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyAnLiAnICsgJ0RpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7XG4gICAgfVxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoYWN0aW9uQ3JlYXRvcnMpO1xuICAgIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xuICB9XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTAwXCIsIFtcIjEwMVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgdmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gYXBwbHlNaWRkbGV3YXJlO1xuICB2YXIgX2NvbXBvc2UgPSAkX19yZXF1aXJlKCcxMDEnKTtcbiAgdmFyIF9jb21wb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvc2UpO1xuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XCJkZWZhdWx0XCI6IG9ian07XG4gIH1cbiAgZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICBtaWRkbGV3YXJlcyA9IEFycmF5KF9sZW4pLFxuICAgICAgICBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihjcmVhdGVTdG9yZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHJlZHVjZXIsIGluaXRpYWxTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUocmVkdWNlciwgaW5pdGlhbFN0YXRlLCBlbmhhbmNlcik7XG4gICAgICAgIHZhciBfZGlzcGF0Y2ggPSBzdG9yZS5kaXNwYXRjaDtcbiAgICAgICAgdmFyIGNoYWluID0gW107XG4gICAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICAgIGdldFN0YXRlOiBzdG9yZS5nZXRTdGF0ZSxcbiAgICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoKGFjdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbihtaWRkbGV3YXJlKSB7XG4gICAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfZGlzcGF0Y2ggPSBfY29tcG9zZTJbXCJkZWZhdWx0XCJdLmFwcGx5KHVuZGVmaW5lZCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdG9yZSwge2Rpc3BhdGNoOiBfZGlzcGF0Y2h9KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEwMVwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBjb21wb3NlO1xuICBmdW5jdGlvbiBjb21wb3NlKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICBmdW5jcyA9IEFycmF5KF9sZW4pLFxuICAgICAgICBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuICAgIGlmIChmdW5jcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIGFyZztcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfcmV0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBsYXN0ID0gZnVuY3NbZnVuY3MubGVuZ3RoIC0gMV07XG4gICAgICAgIHZhciByZXN0ID0gZnVuY3Muc2xpY2UoMCwgLTEpO1xuICAgICAgICByZXR1cm4ge3Y6IGZ1bmN0aW9uIHYoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdC5yZWR1Y2VSaWdodChmdW5jdGlvbihjb21wb3NlZCwgZikge1xuICAgICAgICAgICAgICByZXR1cm4gZihjb21wb3NlZCk7XG4gICAgICAgICAgICB9LCBsYXN0LmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKSk7XG4gICAgICAgICAgfX07XG4gICAgICB9KCk7XG4gICAgICBpZiAodHlwZW9mIF9yZXQgPT09IFwib2JqZWN0XCIpXG4gICAgICAgIHJldHVybiBfcmV0LnY7XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZmVcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gd2FybmluZztcbiAgZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTAyXCIsIFtcImY5XCIsIFwiZmRcIiwgXCJmZlwiLCBcIjEwMFwiLCBcIjEwMVwiLCBcImZlXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgICBleHBvcnRzLmNvbXBvc2UgPSBleHBvcnRzLmFwcGx5TWlkZGxld2FyZSA9IGV4cG9ydHMuYmluZEFjdGlvbkNyZWF0b3JzID0gZXhwb3J0cy5jb21iaW5lUmVkdWNlcnMgPSBleHBvcnRzLmNyZWF0ZVN0b3JlID0gdW5kZWZpbmVkO1xuICAgIHZhciBfY3JlYXRlU3RvcmUgPSAkX19yZXF1aXJlKCdmOScpO1xuICAgIHZhciBfY3JlYXRlU3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlU3RvcmUpO1xuICAgIHZhciBfY29tYmluZVJlZHVjZXJzID0gJF9fcmVxdWlyZSgnZmQnKTtcbiAgICB2YXIgX2NvbWJpbmVSZWR1Y2VyczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jb21iaW5lUmVkdWNlcnMpO1xuICAgIHZhciBfYmluZEFjdGlvbkNyZWF0b3JzID0gJF9fcmVxdWlyZSgnZmYnKTtcbiAgICB2YXIgX2JpbmRBY3Rpb25DcmVhdG9yczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9iaW5kQWN0aW9uQ3JlYXRvcnMpO1xuICAgIHZhciBfYXBwbHlNaWRkbGV3YXJlID0gJF9fcmVxdWlyZSgnMTAwJyk7XG4gICAgdmFyIF9hcHBseU1pZGRsZXdhcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXBwbHlNaWRkbGV3YXJlKTtcbiAgICB2YXIgX2NvbXBvc2UgPSAkX19yZXF1aXJlKCcxMDEnKTtcbiAgICB2YXIgX2NvbXBvc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tcG9zZSk7XG4gICAgdmFyIF93YXJuaW5nID0gJF9fcmVxdWlyZSgnZmUnKTtcbiAgICB2YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG4gICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XCJkZWZhdWx0XCI6IG9ian07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQ3J1c2hlZCgpIHt9XG4gICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgICAgICgwLCBfd2FybmluZzJbXCJkZWZhdWx0XCJdKSgnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcXCdwcm9kdWN0aW9uXFwnLiAnICsgJ1RoaXMgbWVhbnMgdGhhdCB5b3UgYXJlIHJ1bm5pbmcgYSBzbG93ZXIgZGV2ZWxvcG1lbnQgYnVpbGQgb2YgUmVkdXguICcgKyAnWW91IGNhbiB1c2UgbG9vc2UtZW52aWZ5IChodHRwczovL2dpdGh1Yi5jb20vemVydG9zaC9sb29zZS1lbnZpZnkpIGZvciBicm93c2VyaWZ5ICcgKyAnb3IgRGVmaW5lUGx1Z2luIGZvciB3ZWJwYWNrIChodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMwMDMwMDMxKSAnICsgJ3RvIGVuc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCBjb2RlIGZvciB5b3VyIHByb2R1Y3Rpb24gYnVpbGQuJyk7XG4gICAgfVxuICAgIGV4cG9ydHMuY3JlYXRlU3RvcmUgPSBfY3JlYXRlU3RvcmUyW1wiZGVmYXVsdFwiXTtcbiAgICBleHBvcnRzLmNvbWJpbmVSZWR1Y2VycyA9IF9jb21iaW5lUmVkdWNlcnMyW1wiZGVmYXVsdFwiXTtcbiAgICBleHBvcnRzLmJpbmRBY3Rpb25DcmVhdG9ycyA9IF9iaW5kQWN0aW9uQ3JlYXRvcnMyW1wiZGVmYXVsdFwiXTtcbiAgICBleHBvcnRzLmFwcGx5TWlkZGxld2FyZSA9IF9hcHBseU1pZGRsZXdhcmUyW1wiZGVmYXVsdFwiXTtcbiAgICBleHBvcnRzLmNvbXBvc2UgPSBfY29tcG9zZTJbXCJkZWZhdWx0XCJdO1xuICB9KSgkX19yZXF1aXJlKCcxNicpKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCJjNVwiLCBbXCIxMDJcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgbW9kdWxlLmV4cG9ydHMgPSAkX19yZXF1aXJlKCcxMDInKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMDNcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIGV4cG9ydHNbJ2RlZmF1bHQnXSA9IHRodW5rTWlkZGxld2FyZTtcbiAgZnVuY3Rpb24gdGh1bmtNaWRkbGV3YXJlKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoO1xuICAgIHZhciBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihhY3Rpb24pIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gYWN0aW9uKGRpc3BhdGNoLCBnZXRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfVxuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEwNFwiLCBbXCIxMDNcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgbW9kdWxlLmV4cG9ydHMgPSAkX19yZXF1aXJlKCcxMDMnKTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlcignMTA1JywgWycxMDQnLCAnMTA2JywgJ2UxJywgJ2M1J10sIGZ1bmN0aW9uIChfZXhwb3J0KSB7XG4gIHZhciB0aHVua01pZGRsZXdhcmUsIF90b0NvbnN1bWFibGVBcnJheSwgX2V4dGVuZHMsIGNyZWF0ZVN0b3JlLCBjb21wb3NlLCBhcHBseU1pZGRsZXdhcmUsIGNvbWJpbmVSZWR1Y2VycztcblxuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoXzIpIHtcbiAgICAgIHRodW5rTWlkZGxld2FyZSA9IF8yWydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF8pIHtcbiAgICAgIF90b0NvbnN1bWFibGVBcnJheSA9IF9bJ2RlZmF1bHQnXTtcbiAgICB9LCBmdW5jdGlvbiAoX2UxKSB7XG4gICAgICBfZXh0ZW5kcyA9IF9lMVsnZGVmYXVsdCddO1xuICAgIH0sIGZ1bmN0aW9uIChfYzUpIHtcbiAgICAgIGNyZWF0ZVN0b3JlID0gX2M1LmNyZWF0ZVN0b3JlO1xuICAgICAgY29tcG9zZSA9IF9jNS5jb21wb3NlO1xuICAgICAgYXBwbHlNaWRkbGV3YXJlID0gX2M1LmFwcGx5TWlkZGxld2FyZTtcbiAgICAgIGNvbWJpbmVSZWR1Y2VycyA9IF9jNS5jb21iaW5lUmVkdWNlcnM7XG4gICAgfV0sXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICBfZXhwb3J0KCdkZWZhdWx0JywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIF9yZWYkaW5pdGlhbFN0YXRlID0gX3JlZi5pbml0aWFsU3RhdGU7XG4gICAgICAgIHZhciBpbml0aWFsU3RhdGUgPSBfcmVmJGluaXRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkID8ge30gOiBfcmVmJGluaXRpYWxTdGF0ZTtcbiAgICAgICAgdmFyIHJlZHVjZXJzID0gX3JlZi5yZWR1Y2VycztcbiAgICAgICAgdmFyIF9yZWYkbWlkZGxld2FyZXMgPSBfcmVmLm1pZGRsZXdhcmVzO1xuICAgICAgICB2YXIgbWlkZGxld2FyZXMgPSBfcmVmJG1pZGRsZXdhcmVzID09PSB1bmRlZmluZWQgPyBbXSA6IF9yZWYkbWlkZGxld2FyZXM7XG5cbiAgICAgICAgdmFyIHJvb3RSZWR1Y2VyID0gY29tYmluZVJlZHVjZXJzKF9leHRlbmRzKHt9LCByZWR1Y2VycykpO1xuICAgICAgICByZXR1cm4gY29tcG9zZShhcHBseU1pZGRsZXdhcmUuYXBwbHkodW5kZWZpbmVkLCBbdGh1bmtNaWRkbGV3YXJlXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG1pZGRsZXdhcmVzKSkpKShjcmVhdGVTdG9yZSkocm9vdFJlZHVjZXIsIGluaXRpYWxTdGF0ZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KTtcbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMDdcIiwgW1wiZDRcIiwgXCIxMDhcIiwgXCIxMDlcIiwgXCJkMFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgJCA9ICRfX3JlcXVpcmUoJ2Q0JyksXG4gICAgICB0b09iamVjdCA9ICRfX3JlcXVpcmUoJzEwOCcpLFxuICAgICAgSU9iamVjdCA9ICRfX3JlcXVpcmUoJzEwOScpO1xuICBtb2R1bGUuZXhwb3J0cyA9ICRfX3JlcXVpcmUoJ2QwJykoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSBPYmplY3QuYXNzaWduLFxuICAgICAgICBBID0ge30sXG4gICAgICAgIEIgPSB7fSxcbiAgICAgICAgUyA9IFN5bWJvbCgpLFxuICAgICAgICBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgICBBW1NdID0gNztcbiAgICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICAgIEJba10gPSBrO1xuICAgIH0pO1xuICAgIHJldHVybiBhKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKGEoe30sIEIpKS5qb2luKCcnKSAhPSBLO1xuICB9KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkge1xuICAgIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KSxcbiAgICAgICAgJCQgPSBhcmd1bWVudHMsXG4gICAgICAgICQkbGVuID0gJCQubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IDEsXG4gICAgICAgIGdldEtleXMgPSAkLmdldEtleXMsXG4gICAgICAgIGdldFN5bWJvbHMgPSAkLmdldFN5bWJvbHMsXG4gICAgICAgIGlzRW51bSA9ICQuaXNFbnVtO1xuICAgIHdoaWxlICgkJGxlbiA+IGluZGV4KSB7XG4gICAgICB2YXIgUyA9IElPYmplY3QoJCRbaW5kZXgrK10pLFxuICAgICAgICAgIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpLFxuICAgICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIGtleTtcbiAgICAgIHdoaWxlIChsZW5ndGggPiBqKVxuICAgICAgICBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSlcbiAgICAgICAgICBUW2tleV0gPSBTW2tleV07XG4gICAgfVxuICAgIHJldHVybiBUO1xuICB9IDogT2JqZWN0LmFzc2lnbjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMGFcIiwgW1wiY2VcIiwgXCIxMDdcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyICRleHBvcnQgPSAkX19yZXF1aXJlKCdjZScpO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiwgJ09iamVjdCcsIHthc3NpZ246ICRfX3JlcXVpcmUoJzEwNycpfSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTBiXCIsIFtcIjEwYVwiLCBcImNmXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gICRfX3JlcXVpcmUoJzEwYScpO1xuICBtb2R1bGUuZXhwb3J0cyA9ICRfX3JlcXVpcmUoJ2NmJykuT2JqZWN0LmFzc2lnbjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMGNcIiwgW1wiMTBiXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIFwiZGVmYXVsdFwiOiAkX19yZXF1aXJlKCcxMGInKSxcbiAgICBfX2VzTW9kdWxlOiB0cnVlXG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZTFcIiwgW1wiMTBjXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgX09iamVjdCRhc3NpZ24gPSAkX19yZXF1aXJlKCcxMGMnKVtcImRlZmF1bHRcIl07XG4gIGV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX09iamVjdCRhc3NpZ24gfHwgZnVuY3Rpb24odGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEwOFwiLCBbXCIxMGRcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGRlZmluZWQgPSAkX19yZXF1aXJlKCcxMGQnKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCkge1xuICAgIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEwZVwiLCBbXCIxMGZcIiwgXCJjZVwiLCBcIjEwOFwiLCBcIjExMFwiLCBcIjExMVwiLCBcIjExMlwiLCBcIjExM1wiLCBcIjExNFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGN0eCA9ICRfX3JlcXVpcmUoJzEwZicpLFxuICAgICAgJGV4cG9ydCA9ICRfX3JlcXVpcmUoJ2NlJyksXG4gICAgICB0b09iamVjdCA9ICRfX3JlcXVpcmUoJzEwOCcpLFxuICAgICAgY2FsbCA9ICRfX3JlcXVpcmUoJzExMCcpLFxuICAgICAgaXNBcnJheUl0ZXIgPSAkX19yZXF1aXJlKCcxMTEnKSxcbiAgICAgIHRvTGVuZ3RoID0gJF9fcmVxdWlyZSgnMTEyJyksXG4gICAgICBnZXRJdGVyRm4gPSAkX19yZXF1aXJlKCcxMTMnKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJF9fcmVxdWlyZSgnMTE0JykoZnVuY3Rpb24oaXRlcikge1xuICAgIEFycmF5LmZyb20oaXRlcik7XG4gIH0pLCAnQXJyYXknLCB7ZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UpIHtcbiAgICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKSxcbiAgICAgICAgICBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSxcbiAgICAgICAgICAkJCA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAkJGxlbiA9ICQkLmxlbmd0aCxcbiAgICAgICAgICBtYXBmbiA9ICQkbGVuID4gMSA/ICQkWzFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgICBpdGVyRm4gPSBnZXRJdGVyRm4oTyksXG4gICAgICAgICAgbGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBzdGVwLFxuICAgICAgICAgIGl0ZXJhdG9yO1xuICAgICAgaWYgKG1hcHBpbmcpXG4gICAgICAgIG1hcGZuID0gY3R4KG1hcGZuLCAkJGxlbiA+IDIgPyAkJFsyXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQzsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgICAgcmVzdWx0W2luZGV4XSA9IG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgICByZXN1bHRbaW5kZXhdID0gbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9fSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTE1XCIsIFtcIjExNlwiLCBcIjEwZVwiLCBcImNmXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gICRfX3JlcXVpcmUoJzExNicpO1xuICAkX19yZXF1aXJlKCcxMGUnKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSAkX19yZXF1aXJlKCdjZicpLkFycmF5LmZyb207XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTE3XCIsIFtcIjExNVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBcImRlZmF1bHRcIjogJF9fcmVxdWlyZSgnMTE1JyksXG4gICAgX19lc01vZHVsZTogdHJ1ZVxuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEwNlwiLCBbXCIxMTdcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBfQXJyYXkkZnJvbSA9ICRfX3JlcXVpcmUoJzExNycpW1wiZGVmYXVsdFwiXTtcbiAgZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbihhcnIpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCxcbiAgICAgICAgICBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspXG4gICAgICAgIGFycjJbaV0gPSBhcnJbaV07XG4gICAgICByZXR1cm4gYXJyMjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIF9BcnJheSRmcm9tKGFycik7XG4gICAgfVxuICB9O1xuICBleHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjExOFwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBcImZvcm1hdCBjanNcIjtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMTlcIiwgW1wiMTFhXCIsIFwiMTBkXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciB0b0ludGVnZXIgPSAkX19yZXF1aXJlKCcxMWEnKSxcbiAgICAgIGRlZmluZWQgPSAkX19yZXF1aXJlKCcxMGQnKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24odGhhdCwgcG9zKSB7XG4gICAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKSxcbiAgICAgICAgICBpID0gdG9JbnRlZ2VyKHBvcyksXG4gICAgICAgICAgbCA9IHMubGVuZ3RoLFxuICAgICAgICAgIGEsXG4gICAgICAgICAgYjtcbiAgICAgIGlmIChpIDwgMCB8fCBpID49IGwpXG4gICAgICAgIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgICByZXR1cm4gYSA8IDB4ZDgwMCB8fCBhID4gMHhkYmZmIHx8IGkgKyAxID09PSBsIHx8IChiID0gcy5jaGFyQ29kZUF0KGkgKyAxKSkgPCAweGRjMDAgfHwgYiA+IDB4ZGZmZiA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYSA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgICB9O1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjExNlwiLCBbXCIxMTlcIiwgXCIxMWJcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciAkYXQgPSAkX19yZXF1aXJlKCcxMTknKSh0cnVlKTtcbiAgJF9fcmVxdWlyZSgnMTFiJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpIHtcbiAgICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTtcbiAgICB0aGlzLl9pID0gMDtcbiAgfSwgZnVuY3Rpb24oKSB7XG4gICAgdmFyIE8gPSB0aGlzLl90LFxuICAgICAgICBpbmRleCA9IHRoaXMuX2ksXG4gICAgICAgIHBvaW50O1xuICAgIGlmIChpbmRleCA+PSBPLmxlbmd0aClcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH07XG4gICAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICAgIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogcG9pbnQsXG4gICAgICBkb25lOiBmYWxzZVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjExY1wiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge307XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTFkXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZG9uZSwgdmFsdWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZG9uZTogISFkb25lXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMDlcIiwgW1wiMTFlXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBjb2YgPSAkX19yZXF1aXJlKCcxMWUnKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uKGl0KSB7XG4gICAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEwZFwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgaWYgKGl0ID09IHVuZGVmaW5lZClcbiAgICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgICByZXR1cm4gaXQ7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZDJcIiwgW1wiMTA5XCIsIFwiMTBkXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBJT2JqZWN0ID0gJF9fcmVxdWlyZSgnMTA5JyksXG4gICAgICBkZWZpbmVkID0gJF9fcmVxdWlyZSgnMTBkJyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpIHtcbiAgICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTFmXCIsIFtcImQ0XCIsIFwiMTIwXCIsIFwiMTIxXCIsIFwiMTIyXCIsIFwiMTIzXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgJCA9ICRfX3JlcXVpcmUoJ2Q0JyksXG4gICAgICBkZXNjcmlwdG9yID0gJF9fcmVxdWlyZSgnMTIwJyksXG4gICAgICBzZXRUb1N0cmluZ1RhZyA9ICRfX3JlcXVpcmUoJzEyMScpLFxuICAgICAgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgJF9fcmVxdWlyZSgnMTIyJykoSXRlcmF0b3JQcm90b3R5cGUsICRfX3JlcXVpcmUoJzEyMycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSAkLmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwge25leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCl9KTtcbiAgICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMWJcIiwgW1wiMTI0XCIsIFwiY2VcIiwgXCIxMjVcIiwgXCIxMjJcIiwgXCIxMjZcIiwgXCIxMjdcIiwgXCIxMWZcIiwgXCIxMjFcIiwgXCJkNFwiLCBcIjEyM1wiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIExJQlJBUlkgPSAkX19yZXF1aXJlKCcxMjQnKSxcbiAgICAgICRleHBvcnQgPSAkX19yZXF1aXJlKCdjZScpLFxuICAgICAgcmVkZWZpbmUgPSAkX19yZXF1aXJlKCcxMjUnKSxcbiAgICAgIGhpZGUgPSAkX19yZXF1aXJlKCcxMjInKSxcbiAgICAgIGhhcyA9ICRfX3JlcXVpcmUoJzEyNicpLFxuICAgICAgSXRlcmF0b3JzID0gJF9fcmVxdWlyZSgnMTI3JyksXG4gICAgICAkaXRlckNyZWF0ZSA9ICRfX3JlcXVpcmUoJzExZicpLFxuICAgICAgc2V0VG9TdHJpbmdUYWcgPSAkX19yZXF1aXJlKCcxMjEnKSxcbiAgICAgIGdldFByb3RvID0gJF9fcmVxdWlyZSgnZDQnKS5nZXRQcm90byxcbiAgICAgIElURVJBVE9SID0gJF9fcmVxdWlyZSgnMTIzJykoJ2l0ZXJhdG9yJyksXG4gICAgICBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSxcbiAgICAgIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InLFxuICAgICAgS0VZUyA9ICdrZXlzJyxcbiAgICAgIFZBTFVFUyA9ICd2YWx1ZXMnO1xuICB2YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAgICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcbiAgICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCkge1xuICAgICAgaWYgKCFCVUdHWSAmJiBraW5kIGluIHByb3RvKVxuICAgICAgICByZXR1cm4gcHJvdG9ba2luZF07XG4gICAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgY2FzZSBLRVlTOlxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBrZXlzKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTtcbiAgICAgICAgICB9O1xuICAgICAgICBjYXNlIFZBTFVFUzpcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTtcbiAgICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7XG4gICAgICB9O1xuICAgIH07XG4gICAgdmFyIFRBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJyxcbiAgICAgICAgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTLFxuICAgICAgICBWQUxVRVNfQlVHID0gZmFsc2UsXG4gICAgICAgIHByb3RvID0gQmFzZS5wcm90b3R5cGUsXG4gICAgICAgICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF0sXG4gICAgICAgICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCksXG4gICAgICAgIG1ldGhvZHMsXG4gICAgICAgIGtleTtcbiAgICBpZiAoJG5hdGl2ZSkge1xuICAgICAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8oJGRlZmF1bHQuY2FsbChuZXcgQmFzZSkpO1xuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgICBpZiAoIUxJQlJBUlkgJiYgaGFzKHByb3RvLCBGRl9JVEVSQVRPUikpXG4gICAgICAgIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICAgICAgICByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gICAgfVxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICAgIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgICBpZiAoREVGQVVMVCkge1xuICAgICAgbWV0aG9kcyA9IHtcbiAgICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICAgIGVudHJpZXM6ICFERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoJ2VudHJpZXMnKVxuICAgICAgfTtcbiAgICAgIGlmIChGT1JDRUQpXG4gICAgICAgIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKVxuICAgICAgICAgICAgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgZWxzZVxuICAgICAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gICAgfVxuICAgIHJldHVybiBtZXRob2RzO1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEyOFwiLCBbXCIxMWNcIiwgXCIxMWRcIiwgXCIxMjdcIiwgXCJkMlwiLCBcIjExYlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGFkZFRvVW5zY29wYWJsZXMgPSAkX19yZXF1aXJlKCcxMWMnKSxcbiAgICAgIHN0ZXAgPSAkX19yZXF1aXJlKCcxMWQnKSxcbiAgICAgIEl0ZXJhdG9ycyA9ICRfX3JlcXVpcmUoJzEyNycpLFxuICAgICAgdG9JT2JqZWN0ID0gJF9fcmVxdWlyZSgnZDInKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSAkX19yZXF1aXJlKCcxMWInKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTtcbiAgICB0aGlzLl9pID0gMDtcbiAgICB0aGlzLl9rID0ga2luZDtcbiAgfSwgZnVuY3Rpb24oKSB7XG4gICAgdmFyIE8gPSB0aGlzLl90LFxuICAgICAgICBraW5kID0gdGhpcy5fayxcbiAgICAgICAgaW5kZXggPSB0aGlzLl9pKys7XG4gICAgaWYgKCFPIHx8IGluZGV4ID49IE8ubGVuZ3RoKSB7XG4gICAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgfVxuICAgIGlmIChraW5kID09ICdrZXlzJylcbiAgICAgIHJldHVybiBzdGVwKDAsIGluZGV4KTtcbiAgICBpZiAoa2luZCA9PSAndmFsdWVzJylcbiAgICAgIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XG4gIH0sICd2YWx1ZXMnKTtcbiAgSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcbiAgYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuICBhZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbiAgYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEyOVwiLCBbXCIxMjhcIiwgXCIxMjdcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgJF9fcmVxdWlyZSgnMTI4Jyk7XG4gIHZhciBJdGVyYXRvcnMgPSAkX19yZXF1aXJlKCcxMjcnKTtcbiAgSXRlcmF0b3JzLk5vZGVMaXN0ID0gSXRlcmF0b3JzLkhUTUxDb2xsZWN0aW9uID0gSXRlcmF0b3JzLkFycmF5O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEyNFwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9IHRydWU7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiY2VcIiwgW1wiMTJhXCIsIFwiY2ZcIiwgXCIxMGZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGdsb2JhbCA9ICRfX3JlcXVpcmUoJzEyYScpLFxuICAgICAgY29yZSA9ICRfX3JlcXVpcmUoJ2NmJyksXG4gICAgICBjdHggPSAkX19yZXF1aXJlKCcxMGYnKSxcbiAgICAgIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuICB2YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICAgIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydC5GLFxuICAgICAgICBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HLFxuICAgICAgICBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TLFxuICAgICAgICBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0LlAsXG4gICAgICAgIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CLFxuICAgICAgICBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVyxcbiAgICAgICAgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pLFxuICAgICAgICB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdLFxuICAgICAgICBrZXksXG4gICAgICAgIG93bixcbiAgICAgICAgb3V0O1xuICAgIGlmIChJU19HTE9CQUwpXG4gICAgICBzb3VyY2UgPSBuYW1lO1xuICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYga2V5IGluIHRhcmdldDtcbiAgICAgIGlmIChvd24gJiYga2V5IGluIGV4cG9ydHMpXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICAgIGV4cG9ydHNba2V5XSA9IElTX0dMT0JBTCAmJiB0eXBlb2YgdGFyZ2V0W2tleV0gIT0gJ2Z1bmN0aW9uJyA/IHNvdXJjZVtrZXldIDogSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfV1JBUCAmJiB0YXJnZXRba2V5XSA9PSBvdXQgPyAoZnVuY3Rpb24oQykge1xuICAgICAgICB2YXIgRiA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBDID8gbmV3IEMocGFyYW0pIDogQyhwYXJhbSk7XG4gICAgICAgIH07XG4gICAgICAgIEZbUFJPVE9UWVBFXSA9IENbUFJPVE9UWVBFXTtcbiAgICAgICAgcmV0dXJuIEY7XG4gICAgICB9KShvdXQpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgICBpZiAoSVNfUFJPVE8pXG4gICAgICAgIChleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KSlba2V5XSA9IG91dDtcbiAgICB9XG4gIH07XG4gICRleHBvcnQuRiA9IDE7XG4gICRleHBvcnQuRyA9IDI7XG4gICRleHBvcnQuUyA9IDQ7XG4gICRleHBvcnQuUCA9IDg7XG4gICRleHBvcnQuQiA9IDE2O1xuICAkZXhwb3J0LlcgPSAzMjtcbiAgbW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEyYlwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICAgIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKVxuICAgICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyBcIjogdXNlIHRoZSAnbmV3JyBvcGVyYXRvciFcIik7XG4gICAgcmV0dXJuIGl0O1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjExMFwiLCBbXCIxMmNcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGFuT2JqZWN0ID0gJF9fcmVxdWlyZSgnMTJjJyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpXG4gICAgICAgIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMTFcIiwgW1wiMTI3XCIsIFwiMTIzXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBJdGVyYXRvcnMgPSAkX19yZXF1aXJlKCcxMjcnKSxcbiAgICAgIElURVJBVE9SID0gJF9fcmVxdWlyZSgnMTIzJykoJ2l0ZXJhdG9yJyksXG4gICAgICBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMWFcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICBmbG9vciA9IE1hdGguZmxvb3I7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpIHtcbiAgICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMTJcIiwgW1wiMTFhXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciB0b0ludGVnZXIgPSAkX19yZXF1aXJlKCcxMWEnKSxcbiAgICAgIG1pbiA9IE1hdGgubWluO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTJkXCIsIFtcIjExZVwiLCBcIjEyM1wiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgY29mID0gJF9fcmVxdWlyZSgnMTFlJyksXG4gICAgICBUQUcgPSAkX19yZXF1aXJlKCcxMjMnKSgndG9TdHJpbmdUYWcnKSxcbiAgICAgIEFSRyA9IGNvZihmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3VtZW50cztcbiAgICAgIH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpIHtcbiAgICB2YXIgTyxcbiAgICAgICAgVCxcbiAgICAgICAgQjtcbiAgICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCcgOiB0eXBlb2YoVCA9IChPID0gT2JqZWN0KGl0KSlbVEFHXSkgPT0gJ3N0cmluZycgPyBUIDogQVJHID8gY29mKE8pIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEyN1wiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjExM1wiLCBbXCIxMmRcIiwgXCIxMjNcIiwgXCIxMjdcIiwgXCJjZlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgY2xhc3NvZiA9ICRfX3JlcXVpcmUoJzEyZCcpLFxuICAgICAgSVRFUkFUT1IgPSAkX19yZXF1aXJlKCcxMjMnKSgnaXRlcmF0b3InKSxcbiAgICAgIEl0ZXJhdG9ycyA9ICRfX3JlcXVpcmUoJzEyNycpO1xuICBtb2R1bGUuZXhwb3J0cyA9ICRfX3JlcXVpcmUoJ2NmJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbihpdCkge1xuICAgIGlmIChpdCAhPSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gaXRbSVRFUkFUT1JdIHx8IGl0WydAQGl0ZXJhdG9yJ10gfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMmVcIiwgW1wiMTBmXCIsIFwiMTEwXCIsIFwiMTExXCIsIFwiMTJjXCIsIFwiMTEyXCIsIFwiMTEzXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBjdHggPSAkX19yZXF1aXJlKCcxMGYnKSxcbiAgICAgIGNhbGwgPSAkX19yZXF1aXJlKCcxMTAnKSxcbiAgICAgIGlzQXJyYXlJdGVyID0gJF9fcmVxdWlyZSgnMTExJyksXG4gICAgICBhbk9iamVjdCA9ICRfX3JlcXVpcmUoJzEyYycpLFxuICAgICAgdG9MZW5ndGggPSAkX19yZXF1aXJlKCcxMTInKSxcbiAgICAgIGdldEl0ZXJGbiA9ICRfX3JlcXVpcmUoJzExMycpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCkge1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oaXRlcmFibGUpLFxuICAgICAgICBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpLFxuICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgIGxlbmd0aCxcbiAgICAgICAgc3RlcCxcbiAgICAgICAgaXRlcmF0b3I7XG4gICAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAgIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKVxuICAgICAgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICB9XG4gICAgZWxzZVxuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyApIHtcbiAgICAgICAgY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgICB9XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZDlcIiwgW1wiZDRcIiwgXCIxMmZcIiwgXCIxMmNcIiwgXCIxMGZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGdldERlc2MgPSAkX19yZXF1aXJlKCdkNCcpLmdldERlc2MsXG4gICAgICBpc09iamVjdCA9ICRfX3JlcXVpcmUoJzEyZicpLFxuICAgICAgYW5PYmplY3QgPSAkX19yZXF1aXJlKCcxMmMnKTtcbiAgdmFyIGNoZWNrID0gZnVuY3Rpb24oTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbClcbiAgICAgIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24odGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gJF9fcmVxdWlyZSgnMTBmJykoRnVuY3Rpb24uY2FsbCwgZ2V0RGVzYyhPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGJ1Z2d5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSlcbiAgICAgICAgICBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gICAgY2hlY2s6IGNoZWNrXG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTMwXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmlzIHx8IGZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMmNcIiwgW1wiMTJmXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBpc09iamVjdCA9ICRfX3JlcXVpcmUoJzEyZicpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgaWYgKCFpc09iamVjdChpdCkpXG4gICAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gICAgcmV0dXJuIGl0O1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEzMVwiLCBbXCIxMmNcIiwgXCIxMzJcIiwgXCIxMjNcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGFuT2JqZWN0ID0gJF9fcmVxdWlyZSgnMTJjJyksXG4gICAgICBhRnVuY3Rpb24gPSAkX19yZXF1aXJlKCcxMzInKSxcbiAgICAgIFNQRUNJRVMgPSAkX19yZXF1aXJlKCcxMjMnKSgnc3BlY2llcycpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE8sIEQpIHtcbiAgICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLFxuICAgICAgICBTO1xuICAgIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMzJcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCkge1xuICAgIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJylcbiAgICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gICAgcmV0dXJuIGl0O1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEwZlwiLCBbXCIxMzJcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGFGdW5jdGlvbiA9ICRfX3JlcXVpcmUoJzEzMicpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgICBhRnVuY3Rpb24oZm4pO1xuICAgIGlmICh0aGF0ID09PSB1bmRlZmluZWQpXG4gICAgICByZXR1cm4gZm47XG4gICAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMzNcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbiwgYXJncywgdGhhdCkge1xuICAgIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiB1biA/IGZuKCkgOiBmbi5jYWxsKHRoYXQpO1xuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gdW4gPyBmbihhcmdzWzBdKSA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSkgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgY2FzZSA0OlxuICAgICAgICByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKSA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMzRcIiwgW1wiMTJhXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnMTJhJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEyZlwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMzVcIiwgW1wiMTJmXCIsIFwiMTJhXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBpc09iamVjdCA9ICRfX3JlcXVpcmUoJzEyZicpLFxuICAgICAgZG9jdW1lbnQgPSAkX19yZXF1aXJlKCcxMmEnKS5kb2N1bWVudCxcbiAgICAgIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMzZcIiwgW1wiMTBmXCIsIFwiMTMzXCIsIFwiMTM0XCIsIFwiMTM1XCIsIFwiMTJhXCIsIFwiMTFlXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICB2YXIgY3R4ID0gJF9fcmVxdWlyZSgnMTBmJyksXG4gICAgICAgIGludm9rZSA9ICRfX3JlcXVpcmUoJzEzMycpLFxuICAgICAgICBodG1sID0gJF9fcmVxdWlyZSgnMTM0JyksXG4gICAgICAgIGNlbCA9ICRfX3JlcXVpcmUoJzEzNScpLFxuICAgICAgICBnbG9iYWwgPSAkX19yZXF1aXJlKCcxMmEnKSxcbiAgICAgICAgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzLFxuICAgICAgICBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZSxcbiAgICAgICAgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlLFxuICAgICAgICBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCxcbiAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgIHF1ZXVlID0ge30sXG4gICAgICAgIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnLFxuICAgICAgICBkZWZlcixcbiAgICAgICAgY2hhbm5lbCxcbiAgICAgICAgcG9ydDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaWQgPSArdGhpcztcbiAgICAgIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgICAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgICAgICBmbigpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGxpc3RuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG4gICAgfTtcbiAgICBpZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICAgICAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgICAgICB2YXIgYXJncyA9IFtdLFxuICAgICAgICAgICAgaSA9IDE7XG4gICAgICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSlcbiAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgICBkZWZlcihjb3VudGVyKTtcbiAgICAgICAgcmV0dXJuIGNvdW50ZXI7XG4gICAgICB9O1xuICAgICAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICAgICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICAgIH07XG4gICAgICBpZiAoJF9fcmVxdWlyZSgnMTFlJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7XG4gICAgICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RuZXI7XG4gICAgICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAgICAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgZGVmZXIgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgICAgICB9O1xuICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RuZXIsIGZhbHNlKTtcbiAgICAgIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICAgICAgZGVmZXIgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmZXIgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICBzZXQ6IHNldFRhc2ssXG4gICAgICBjbGVhcjogY2xlYXJUYXNrXG4gICAgfTtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTFlXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMzdcIiwgW1wiMTJhXCIsIFwiMTM2XCIsIFwiMTFlXCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICB2YXIgZ2xvYmFsID0gJF9fcmVxdWlyZSgnMTJhJyksXG4gICAgICAgIG1hY3JvdGFzayA9ICRfX3JlcXVpcmUoJzEzNicpLnNldCxcbiAgICAgICAgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcixcbiAgICAgICAgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzLFxuICAgICAgICBQcm9taXNlID0gZ2xvYmFsLlByb21pc2UsXG4gICAgICAgIGlzTm9kZSA9ICRfX3JlcXVpcmUoJzExZScpKHByb2Nlc3MpID09ICdwcm9jZXNzJyxcbiAgICAgICAgaGVhZCxcbiAgICAgICAgbGFzdCxcbiAgICAgICAgbm90aWZ5O1xuICAgIHZhciBmbHVzaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhcmVudCxcbiAgICAgICAgICBkb21haW4sXG4gICAgICAgICAgZm47XG4gICAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHtcbiAgICAgICAgcHJvY2Vzcy5kb21haW4gPSBudWxsO1xuICAgICAgICBwYXJlbnQuZXhpdCgpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgICAgZG9tYWluID0gaGVhZC5kb21haW47XG4gICAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgICAgaWYgKGRvbWFpbilcbiAgICAgICAgICBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgZm4oKTtcbiAgICAgICAgaWYgKGRvbWFpbilcbiAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgfVxuICAgICAgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgIGlmIChwYXJlbnQpXG4gICAgICAgIHBhcmVudC5lbnRlcigpO1xuICAgIH07XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgbm90aWZ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKE9ic2VydmVyKSB7XG4gICAgICB2YXIgdG9nZ2xlID0gMSxcbiAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7XG4gICAgICBub3RpZnkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gLXRvZ2dsZTtcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgICAgbm90aWZ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZmx1c2gpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm90aWZ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgICAgfTtcbiAgICB9XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhc2FwKGZuKSB7XG4gICAgICB2YXIgdGFzayA9IHtcbiAgICAgICAgZm46IGZuLFxuICAgICAgICBuZXh0OiB1bmRlZmluZWQsXG4gICAgICAgIGRvbWFpbjogaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluXG4gICAgICB9O1xuICAgICAgaWYgKGxhc3QpXG4gICAgICAgIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgICBpZiAoIWhlYWQpIHtcbiAgICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICAgIG5vdGlmeSgpO1xuICAgICAgfVxuICAgICAgbGFzdCA9IHRhc2s7XG4gICAgfTtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTIwXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9O1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEyMlwiLCBbXCJkNFwiLCBcIjEyMFwiLCBcIjEzOFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgJCA9ICRfX3JlcXVpcmUoJ2Q0JyksXG4gICAgICBjcmVhdGVEZXNjID0gJF9fcmVxdWlyZSgnMTIwJyk7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnMTM4JykgPyBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gJC5zZXREZXNjKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XG4gIH0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTI1XCIsIFtcIjEyMlwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9ICRfX3JlcXVpcmUoJzEyMicpO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEzOVwiLCBbXCIxMjVcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIHJlZGVmaW5lID0gJF9fcmVxdWlyZSgnMTI1Jyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odGFyZ2V0LCBzcmMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gc3JjKVxuICAgICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEyNlwiLCBbXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KSB7XG4gICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTIxXCIsIFtcImQ0XCIsIFwiMTI2XCIsIFwiMTIzXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBkZWYgPSAkX19yZXF1aXJlKCdkNCcpLnNldERlc2MsXG4gICAgICBoYXMgPSAkX19yZXF1aXJlKCcxMjYnKSxcbiAgICAgIFRBRyA9ICRfX3JlcXVpcmUoJzEyMycpKCd0b1N0cmluZ1RhZycpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCB0YWcsIHN0YXQpIHtcbiAgICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlcbiAgICAgIGRlZihpdCwgVEFHLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHRhZ1xuICAgICAgfSk7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiZDRcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyICRPYmplY3QgPSBPYmplY3Q7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGNyZWF0ZTogJE9iamVjdC5jcmVhdGUsXG4gICAgZ2V0UHJvdG86ICRPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gICAgaXNFbnVtOiB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICBnZXREZXNjOiAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBzZXREZXNjOiAkT2JqZWN0LmRlZmluZVByb3BlcnR5LFxuICAgIHNldERlc2NzOiAkT2JqZWN0LmRlZmluZVByb3BlcnRpZXMsXG4gICAgZ2V0S2V5czogJE9iamVjdC5rZXlzLFxuICAgIGdldE5hbWVzOiAkT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMsXG4gICAgZ2V0U3ltYm9sczogJE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgZWFjaDogW10uZm9yRWFjaFxuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcImQwXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gISFleGVjKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9O1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEzOFwiLCBbXCJkMFwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9ICEkX19yZXF1aXJlKCdkMCcpKGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywge2dldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiA3O1xuICAgICAgfX0pLmEgIT0gNztcbiAgfSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTNhXCIsIFtcImNmXCIsIFwiZDRcIiwgXCIxMzhcIiwgXCIxMjNcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBjb3JlID0gJF9fcmVxdWlyZSgnY2YnKSxcbiAgICAgICQgPSAkX19yZXF1aXJlKCdkNCcpLFxuICAgICAgREVTQ1JJUFRPUlMgPSAkX19yZXF1aXJlKCcxMzgnKSxcbiAgICAgIFNQRUNJRVMgPSAkX19yZXF1aXJlKCcxMjMnKSgnc3BlY2llcycpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKEtFWSkge1xuICAgIHZhciBDID0gY29yZVtLRVldO1xuICAgIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKVxuICAgICAgJC5zZXREZXNjKEMsIFNQRUNJRVMsIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxM2JcIiwgW1wiMTJhXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBnbG9iYWwgPSAkX19yZXF1aXJlKCcxMmEnKSxcbiAgICAgIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nLFxuICAgICAgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB7fSk7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTNjXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBpZCA9IDAsXG4gICAgICBweCA9IE1hdGgucmFuZG9tKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxMmFcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpXG4gICAgX19nID0gZ2xvYmFsO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjEyM1wiLCBbXCIxM2JcIiwgXCIxM2NcIiwgXCIxMmFcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIHN0b3JlID0gJF9fcmVxdWlyZSgnMTNiJykoJ3drcycpLFxuICAgICAgdWlkID0gJF9fcmVxdWlyZSgnMTNjJyksXG4gICAgICBTeW1ib2wgPSAkX19yZXF1aXJlKCcxMmEnKS5TeW1ib2w7XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPSBTeW1ib2wgJiYgU3ltYm9sW25hbWVdIHx8IChTeW1ib2wgfHwgdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTE0XCIsIFtcIjEyM1wiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICB2YXIgSVRFUkFUT1IgPSAkX19yZXF1aXJlKCcxMjMnKSgnaXRlcmF0b3InKSxcbiAgICAgIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbigpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfTtcbiAgICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbigpIHtcbiAgICAgIHRocm93IDI7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHt9XG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgdmFyIGFyciA9IFs3XSxcbiAgICAgICAgICBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgICAgaXRlci5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHNhZmUgPSB0cnVlO1xuICAgICAgfTtcbiAgICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXI7XG4gICAgICB9O1xuICAgICAgZXhlYyhhcnIpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIHNhZmU7XG4gIH07XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTNkXCIsIFtdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIHZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcbiAgdmFyIHF1ZXVlID0gW107XG4gIHZhciBkcmFpbmluZyA9IGZhbHNlO1xuICB2YXIgY3VycmVudFF1ZXVlO1xuICB2YXIgcXVldWVJbmRleCA9IC0xO1xuICBmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZSAobGVuKSB7XG4gICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgIHF1ZXVlID0gW107XG4gICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgfVxuICBwcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24oZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgIHNldFRpbWVvdXQoZHJhaW5RdWV1ZSwgMCk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG4gIH1cbiAgSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG4gIH07XG4gIHByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG4gIHByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG4gIHByb2Nlc3MuZW52ID0ge307XG4gIHByb2Nlc3MuYXJndiA9IFtdO1xuICBwcm9jZXNzLnZlcnNpb24gPSAnJztcbiAgcHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuICBmdW5jdGlvbiBub29wKCkge31cbiAgcHJvY2Vzcy5vbiA9IG5vb3A7XG4gIHByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xuICBwcm9jZXNzLm9uY2UgPSBub29wO1xuICBwcm9jZXNzLm9mZiA9IG5vb3A7XG4gIHByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xuICBwcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG4gIHByb2Nlc3MuZW1pdCA9IG5vb3A7XG4gIHByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gIH07XG4gIHByb2Nlc3MuY3dkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICcvJztcbiAgfTtcbiAgcHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gIH07XG4gIHByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gMDtcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxM2VcIiwgW1wiMTNkXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnMTNkJyk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTNmXCIsIFtcIjEzZVwiXSwgdHJ1ZSwgZnVuY3Rpb24oJF9fcmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7XG4gIDtcbiAgdmFyIGRlZmluZSxcbiAgICAgIGdsb2JhbCA9IHRoaXMsXG4gICAgICBHTE9CQUwgPSB0aGlzO1xuICBtb2R1bGUuZXhwb3J0cyA9ICRfX1N5c3RlbS5fbm9kZVJlcXVpcmUgPyBwcm9jZXNzIDogJF9fcmVxdWlyZSgnMTNlJyk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTZcIiwgW1wiMTNmXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnMTNmJyk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiMTQwXCIsIFtcImQ0XCIsIFwiMTI0XCIsIFwiMTJhXCIsIFwiMTBmXCIsIFwiMTJkXCIsIFwiY2VcIiwgXCIxMmZcIiwgXCIxMmNcIiwgXCIxMzJcIiwgXCIxMmJcIiwgXCIxMmVcIiwgXCJkOVwiLCBcIjEzMFwiLCBcIjEyM1wiLCBcIjEzMVwiLCBcIjEzN1wiLCBcIjEzOFwiLCBcIjEzOVwiLCBcIjEyMVwiLCBcIjEzYVwiLCBcImNmXCIsIFwiMTE0XCIsIFwiMTZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgdmFyICQgPSAkX19yZXF1aXJlKCdkNCcpLFxuICAgICAgICBMSUJSQVJZID0gJF9fcmVxdWlyZSgnMTI0JyksXG4gICAgICAgIGdsb2JhbCA9ICRfX3JlcXVpcmUoJzEyYScpLFxuICAgICAgICBjdHggPSAkX19yZXF1aXJlKCcxMGYnKSxcbiAgICAgICAgY2xhc3NvZiA9ICRfX3JlcXVpcmUoJzEyZCcpLFxuICAgICAgICAkZXhwb3J0ID0gJF9fcmVxdWlyZSgnY2UnKSxcbiAgICAgICAgaXNPYmplY3QgPSAkX19yZXF1aXJlKCcxMmYnKSxcbiAgICAgICAgYW5PYmplY3QgPSAkX19yZXF1aXJlKCcxMmMnKSxcbiAgICAgICAgYUZ1bmN0aW9uID0gJF9fcmVxdWlyZSgnMTMyJyksXG4gICAgICAgIHN0cmljdE5ldyA9ICRfX3JlcXVpcmUoJzEyYicpLFxuICAgICAgICBmb3JPZiA9ICRfX3JlcXVpcmUoJzEyZScpLFxuICAgICAgICBzZXRQcm90byA9ICRfX3JlcXVpcmUoJ2Q5Jykuc2V0LFxuICAgICAgICBzYW1lID0gJF9fcmVxdWlyZSgnMTMwJyksXG4gICAgICAgIFNQRUNJRVMgPSAkX19yZXF1aXJlKCcxMjMnKSgnc3BlY2llcycpLFxuICAgICAgICBzcGVjaWVzQ29uc3RydWN0b3IgPSAkX19yZXF1aXJlKCcxMzEnKSxcbiAgICAgICAgYXNhcCA9ICRfX3JlcXVpcmUoJzEzNycpLFxuICAgICAgICBQUk9NSVNFID0gJ1Byb21pc2UnLFxuICAgICAgICBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3MsXG4gICAgICAgIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnLFxuICAgICAgICBQID0gZ2xvYmFsW1BST01JU0VdLFxuICAgICAgICBXcmFwcGVyO1xuICAgIHZhciB0ZXN0UmVzb2x2ZSA9IGZ1bmN0aW9uKHN1Yikge1xuICAgICAgdmFyIHRlc3QgPSBuZXcgUChmdW5jdGlvbigpIHt9KTtcbiAgICAgIGlmIChzdWIpXG4gICAgICAgIHRlc3QuY29uc3RydWN0b3IgPSBPYmplY3Q7XG4gICAgICByZXR1cm4gUC5yZXNvbHZlKHRlc3QpID09PSB0ZXN0O1xuICAgIH07XG4gICAgdmFyIFVTRV9OQVRJVkUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB3b3JrcyA9IGZhbHNlO1xuICAgICAgZnVuY3Rpb24gUDIoeCkge1xuICAgICAgICB2YXIgc2VsZiA9IG5ldyBQKHgpO1xuICAgICAgICBzZXRQcm90byhzZWxmLCBQMi5wcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIHdvcmtzID0gUCAmJiBQLnJlc29sdmUgJiYgdGVzdFJlc29sdmUoKTtcbiAgICAgICAgc2V0UHJvdG8oUDIsIFApO1xuICAgICAgICBQMi5wcm90b3R5cGUgPSAkLmNyZWF0ZShQLnByb3RvdHlwZSwge2NvbnN0cnVjdG9yOiB7dmFsdWU6IFAyfX0pO1xuICAgICAgICBpZiAoIShQMi5yZXNvbHZlKDUpLnRoZW4oZnVuY3Rpb24oKSB7fSkgaW5zdGFuY2VvZiBQMikpIHtcbiAgICAgICAgICB3b3JrcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3b3JrcyAmJiAkX19yZXF1aXJlKCcxMzgnKSkge1xuICAgICAgICAgIHZhciB0aGVuYWJsZVRoZW5Hb3R0ZW4gPSBmYWxzZTtcbiAgICAgICAgICBQLnJlc29sdmUoJC5zZXREZXNjKHt9LCAndGhlbicsIHtnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICB0aGVuYWJsZVRoZW5Hb3R0ZW4gPSB0cnVlO1xuICAgICAgICAgICAgfX0pKTtcbiAgICAgICAgICB3b3JrcyA9IHRoZW5hYmxlVGhlbkdvdHRlbjtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB3b3JrcyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdvcmtzO1xuICAgIH0oKTtcbiAgICB2YXIgc2FtZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgaWYgKExJQlJBUlkgJiYgYSA9PT0gUCAmJiBiID09PSBXcmFwcGVyKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIHJldHVybiBzYW1lKGEsIGIpO1xuICAgIH07XG4gICAgdmFyIGdldENvbnN0cnVjdG9yID0gZnVuY3Rpb24oQykge1xuICAgICAgdmFyIFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXTtcbiAgICAgIHJldHVybiBTICE9IHVuZGVmaW5lZCA/IFMgOiBDO1xuICAgIH07XG4gICAgdmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbihpdCkge1xuICAgICAgdmFyIHRoZW47XG4gICAgICByZXR1cm4gaXNPYmplY3QoaXQpICYmIHR5cGVvZih0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbiAgICB9O1xuICAgIHZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpIHtcbiAgICAgIHZhciByZXNvbHZlLFxuICAgICAgICAgIHJlamVjdDtcbiAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICAgICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XG4gICAgICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSksIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG4gICAgfTtcbiAgICB2YXIgcGVyZm9ybSA9IGZ1bmN0aW9uKGV4ZWMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGV4ZWMoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIHtlcnJvcjogZX07XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgbm90aWZ5ID0gZnVuY3Rpb24ocmVjb3JkLCBpc1JlamVjdCkge1xuICAgICAgaWYgKHJlY29yZC5uKVxuICAgICAgICByZXR1cm47XG4gICAgICByZWNvcmQubiA9IHRydWU7XG4gICAgICB2YXIgY2hhaW4gPSByZWNvcmQuYztcbiAgICAgIGFzYXAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlY29yZC52LFxuICAgICAgICAgICAgb2sgPSByZWNvcmQucyA9PSAxLFxuICAgICAgICAgICAgaSA9IDA7XG4gICAgICAgIHZhciBydW4gPSBmdW5jdGlvbihyZWFjdGlvbikge1xuICAgICAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWwsXG4gICAgICAgICAgICAgIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlLFxuICAgICAgICAgICAgICByZWplY3QgPSByZWFjdGlvbi5yZWplY3QsXG4gICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgdGhlbjtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgaWYgKCFvaylcbiAgICAgICAgICAgICAgICByZWNvcmQuaCA9IHRydWU7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIgPT09IHRydWUgPyB2YWx1ZSA6IGhhbmRsZXIodmFsdWUpO1xuICAgICAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIHJlamVjdCh2YWx1ZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpXG4gICAgICAgICAgcnVuKGNoYWluW2krK10pO1xuICAgICAgICBjaGFpbi5sZW5ndGggPSAwO1xuICAgICAgICByZWNvcmQubiA9IGZhbHNlO1xuICAgICAgICBpZiAoaXNSZWplY3QpXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBwcm9taXNlID0gcmVjb3JkLnAsXG4gICAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgICBjb25zb2xlO1xuICAgICAgICAgICAgaWYgKGlzVW5oYW5kbGVkKHByb21pc2UpKSB7XG4gICAgICAgICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlcih7XG4gICAgICAgICAgICAgICAgICBwcm9taXNlOiBwcm9taXNlLFxuICAgICAgICAgICAgICAgICAgcmVhc29uOiB2YWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlY29yZC5hID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH0sIDEpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICB2YXIgcmVjb3JkID0gcHJvbWlzZS5fZCxcbiAgICAgICAgICBjaGFpbiA9IHJlY29yZC5hIHx8IHJlY29yZC5jLFxuICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgIHJlYWN0aW9uO1xuICAgICAgaWYgKHJlY29yZC5oKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkge1xuICAgICAgICByZWFjdGlvbiA9IGNoYWluW2krK107XG4gICAgICAgIGlmIChyZWFjdGlvbi5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdGlvbi5wcm9taXNlKSlcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHZhciAkcmVqZWN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0aGlzO1xuICAgICAgaWYgKHJlY29yZC5kKVxuICAgICAgICByZXR1cm47XG4gICAgICByZWNvcmQuZCA9IHRydWU7XG4gICAgICByZWNvcmQgPSByZWNvcmQuciB8fCByZWNvcmQ7XG4gICAgICByZWNvcmQudiA9IHZhbHVlO1xuICAgICAgcmVjb3JkLnMgPSAyO1xuICAgICAgcmVjb3JkLmEgPSByZWNvcmQuYy5zbGljZSgpO1xuICAgICAgbm90aWZ5KHJlY29yZCwgdHJ1ZSk7XG4gICAgfTtcbiAgICB2YXIgJHJlc29sdmUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIHJlY29yZCA9IHRoaXMsXG4gICAgICAgICAgdGhlbjtcbiAgICAgIGlmIChyZWNvcmQuZClcbiAgICAgICAgcmV0dXJuO1xuICAgICAgcmVjb3JkLmQgPSB0cnVlO1xuICAgICAgcmVjb3JkID0gcmVjb3JkLnIgfHwgcmVjb3JkO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKHJlY29yZC5wID09PSB2YWx1ZSlcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICAgICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xuICAgICAgICAgIGFzYXAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9IHtcbiAgICAgICAgICAgICAgcjogcmVjb3JkLFxuICAgICAgICAgICAgICBkOiBmYWxzZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlY29yZC52ID0gdmFsdWU7XG4gICAgICAgICAgcmVjb3JkLnMgPSAxO1xuICAgICAgICAgIG5vdGlmeShyZWNvcmQsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAkcmVqZWN0LmNhbGwoe1xuICAgICAgICAgIHI6IHJlY29yZCxcbiAgICAgICAgICBkOiBmYWxzZVxuICAgICAgICB9LCBlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmICghVVNFX05BVElWRSkge1xuICAgICAgUCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICAgICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcbiAgICAgICAgdmFyIHJlY29yZCA9IHRoaXMuX2QgPSB7XG4gICAgICAgICAgcDogc3RyaWN0TmV3KHRoaXMsIFAsIFBST01JU0UpLFxuICAgICAgICAgIGM6IFtdLFxuICAgICAgICAgIGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICBzOiAwLFxuICAgICAgICAgIGQ6IGZhbHNlLFxuICAgICAgICAgIHY6IHVuZGVmaW5lZCxcbiAgICAgICAgICBoOiBmYWxzZSxcbiAgICAgICAgICBuOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgcmVjb3JkLCAxKSwgY3R4KCRyZWplY3QsIHJlY29yZCwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwocmVjb3JkLCBlcnIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgJF9fcmVxdWlyZSgnMTM5JykoUC5wcm90b3R5cGUsIHtcbiAgICAgICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgICAgIHZhciByZWFjdGlvbiA9IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUCkpLFxuICAgICAgICAgICAgICBwcm9taXNlID0gcmVhY3Rpb24ucHJvbWlzZSxcbiAgICAgICAgICAgICAgcmVjb3JkID0gdGhpcy5fZDtcbiAgICAgICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICAgICAgcmVjb3JkLmMucHVzaChyZWFjdGlvbik7XG4gICAgICAgICAgaWYgKHJlY29yZC5hKVxuICAgICAgICAgICAgcmVjb3JkLmEucHVzaChyZWFjdGlvbik7XG4gICAgICAgICAgaWYgKHJlY29yZC5zKVxuICAgICAgICAgICAgbm90aWZ5KHJlY29yZCwgZmFsc2UpO1xuICAgICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgICB9LFxuICAgICAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwge1Byb21pc2U6IFB9KTtcbiAgICAkX19yZXF1aXJlKCcxMjEnKShQLCBQUk9NSVNFKTtcbiAgICAkX19yZXF1aXJlKCcxM2EnKShQUk9NSVNFKTtcbiAgICBXcmFwcGVyID0gJF9fcmVxdWlyZSgnY2YnKVtQUk9NSVNFXTtcbiAgICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7cmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgICAgICB2YXIgY2FwYWJpbGl0eSA9IG5ldyBQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKSxcbiAgICAgICAgICAgICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgICAgICQkcmVqZWN0KHIpO1xuICAgICAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgfX0pO1xuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8IHRlc3RSZXNvbHZlKHRydWUpKSwgUFJPTUlTRSwge3Jlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgICAgICBpZiAoeCBpbnN0YW5jZW9mIFAgJiYgc2FtZUNvbnN0cnVjdG9yKHguY29uc3RydWN0b3IsIHRoaXMpKVxuICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB2YXIgY2FwYWJpbGl0eSA9IG5ldyBQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKSxcbiAgICAgICAgICAgICQkcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICAgICAgJCRyZXNvbHZlKHgpO1xuICAgICAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgICAgfX0pO1xuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmICRfX3JlcXVpcmUoJzExNCcpKGZ1bmN0aW9uKGl0ZXIpIHtcbiAgICAgIFAuYWxsKGl0ZXIpWydjYXRjaCddKGZ1bmN0aW9uKCkge30pO1xuICAgIH0pKSwgUFJPTUlTRSwge1xuICAgICAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICAgICAgdmFyIEMgPSBnZXRDb25zdHJ1Y3Rvcih0aGlzKSxcbiAgICAgICAgICAgIGNhcGFiaWxpdHkgPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyksXG4gICAgICAgICAgICByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlLFxuICAgICAgICAgICAgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3QsXG4gICAgICAgICAgICB2YWx1ZXMgPSBbXTtcbiAgICAgICAgdmFyIGFicnVwdCA9IHBlcmZvcm0oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCB2YWx1ZXMucHVzaCwgdmFsdWVzKTtcbiAgICAgICAgICB2YXIgcmVtYWluaW5nID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICAgICAgcmVzdWx0cyA9IEFycmF5KHJlbWFpbmluZyk7XG4gICAgICAgICAgaWYgKHJlbWFpbmluZylcbiAgICAgICAgICAgICQuZWFjaC5jYWxsKHZhbHVlcywgZnVuY3Rpb24ocHJvbWlzZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZClcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUocmVzdWx0cyk7XG4gICAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFicnVwdClcbiAgICAgICAgICByZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICAgICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgIH0sXG4gICAgICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgICAgIHZhciBDID0gZ2V0Q29uc3RydWN0b3IodGhpcyksXG4gICAgICAgICAgICBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpLFxuICAgICAgICAgICAgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgICAgIHZhciBhYnJ1cHQgPSBwZXJmb3JtKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGFicnVwdClcbiAgICAgICAgICByZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICAgICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSkoJF9fcmVxdWlyZSgnMTYnKSk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXJEeW5hbWljKFwiY2ZcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgdmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHt2ZXJzaW9uOiAnMS4yLjYnfTtcbiAgaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpXG4gICAgX19lID0gY29yZTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxNDFcIiwgW1wiMTE4XCIsIFwiMTE2XCIsIFwiMTI5XCIsIFwiMTQwXCIsIFwiY2ZcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgJF9fcmVxdWlyZSgnMTE4Jyk7XG4gICRfX3JlcXVpcmUoJzExNicpO1xuICAkX19yZXF1aXJlKCcxMjknKTtcbiAgJF9fcmVxdWlyZSgnMTQwJyk7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnY2YnKS5Qcm9taXNlO1xuICByZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59KTtcblxuJF9fU3lzdGVtLnJlZ2lzdGVyRHluYW1pYyhcIjE0MlwiLCBbXCIxNDFcIl0sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgXCJkZWZhdWx0XCI6ICRfX3JlcXVpcmUoJzE0MScpLFxuICAgIF9fZXNNb2R1bGU6IHRydWVcbiAgfTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxNDNcIiwgW10sIHRydWUsIGZ1bmN0aW9uKCRfX3JlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkge1xuICA7XG4gIHZhciBkZWZpbmUsXG4gICAgICBnbG9iYWwgPSB0aGlzLFxuICAgICAgR0xPQkFMID0gdGhpcztcbiAgXCJmb3JtYXQgY2pzXCI7XG4gICFmdW5jdGlvbihlLCB0KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgXCJmdW5jdGlvblwiID09IHR5cGVvZiBkZWZpbmUgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShcImFqYXhcIiwgdCkgOiBcIm9iamVjdFwiID09IHR5cGVvZiBleHBvcnRzID8gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gdCgpIDogZS5hamF4ID0gdCgpO1xuICB9KHRoaXMsIGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIGZ1bmN0aW9uIGUoZSkge1xuICAgICAgdmFyIHIgPSBbXCJnZXRcIiwgXCJwb3N0XCIsIFwicHV0XCIsIFwiZGVsZXRlXCJdO1xuICAgICAgcmV0dXJuIGUgPSBlIHx8IHt9LCBlLmJhc2VVcmwgPSBlLmJhc2VVcmwgfHwgXCJcIiwgZS5tZXRob2QgJiYgZS51cmwgPyBuKGUubWV0aG9kLCBlLmJhc2VVcmwgKyBlLnVybCwgdChlLmRhdGEpLCBlKSA6IHIucmVkdWNlKGZ1bmN0aW9uKHIsIHUpIHtcbiAgICAgICAgcmV0dXJuIHJbdV0gPSBmdW5jdGlvbihyLCBvKSB7XG4gICAgICAgICAgcmV0dXJuIG4odSwgZS5iYXNlVXJsICsgciwgdChvKSwgZSk7XG4gICAgICAgIH0sIHI7XG4gICAgICB9LCB7fSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHQoZSkge1xuICAgICAgcmV0dXJuIGUgfHwgbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gbihlLCB0LCBuLCB1KSB7XG4gICAgICB2YXIgYyA9IFtcInRoZW5cIiwgXCJjYXRjaFwiLCBcImFsd2F5c1wiXSxcbiAgICAgICAgICBzID0gYy5yZWR1Y2UoZnVuY3Rpb24oZSwgdCkge1xuICAgICAgICAgICAgcmV0dXJuIGVbdF0gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlW3RdID0gbiwgZTtcbiAgICAgICAgICAgIH0sIGU7XG4gICAgICAgICAgfSwge30pLFxuICAgICAgICAgIGkgPSBuZXcgWE1MSHR0cFJlcXVlc3Q7XG4gICAgICByZXR1cm4gaS5vcGVuKGUsIHQsICEwKSwgcihpLCB1LmhlYWRlcnMpLCBpLmFkZEV2ZW50TGlzdGVuZXIoXCJyZWFkeXN0YXRlY2hhbmdlXCIsIG8ocywgaSksICExKSwgaS5zZW5kKGEobikpLCBzO1xuICAgIH1cbiAgICBmdW5jdGlvbiByKGUsIHQpIHtcbiAgICAgIHQgPSB0IHx8IHt9LCB1KHQpIHx8ICh0W1wiQ29udGVudC1UeXBlXCJdID0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiksIE9iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24obikge1xuICAgICAgICB0W25dICYmIGUuc2V0UmVxdWVzdEhlYWRlcihuLCB0W25dKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiB1KGUpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyhlKS5zb21lKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIFwiY29udGVudC10eXBlXCIgPT09IGUudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvKGUsIHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBuKCkge1xuICAgICAgICB0LnJlYWR5U3RhdGUgPT09IHQuRE9ORSAmJiAodC5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLCBuLCAhMSksIGUuYWx3YXlzLmFwcGx5KGUsIGModCkpLCB0LnN0YXR1cyA+PSAyMDAgJiYgdC5zdGF0dXMgPCAzMDAgPyBlLnRoZW4uYXBwbHkoZSwgYyh0KSkgOiBlW1wiY2F0Y2hcIl0uYXBwbHkoZSwgYyh0KSkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYyhlKSB7XG4gICAgICB2YXIgdDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHQgPSBKU09OLnBhcnNlKGUucmVzcG9uc2VUZXh0KTtcbiAgICAgIH0gY2F0Y2ggKG4pIHtcbiAgICAgICAgdCA9IGUucmVzcG9uc2VUZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIFt0LCBlXTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYShlKSB7XG4gICAgICByZXR1cm4gcyhlKSA/IGkoZSkgOiBlO1xuICAgIH1cbiAgICBmdW5jdGlvbiBzKGUpIHtcbiAgICAgIHJldHVybiBcIltvYmplY3QgT2JqZWN0XVwiID09PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGkoZSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKGUpLnJlZHVjZShmdW5jdGlvbih0LCBuKSB7XG4gICAgICAgIHZhciByID0gdCA/IHQgKyBcIiZcIiA6IFwiXCI7XG4gICAgICAgIHJldHVybiByICsgZihuKSArIFwiPVwiICsgZihlW25dKTtcbiAgICAgIH0sIFwiXCIpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmKGUpIHtcbiAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoZSk7XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9KTtcbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufSk7XG5cbiRfX1N5c3RlbS5yZWdpc3RlckR5bmFtaWMoXCIxNDRcIiwgW1wiMTQzXCJdLCB0cnVlLCBmdW5jdGlvbigkX19yZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHtcbiAgO1xuICB2YXIgZGVmaW5lLFxuICAgICAgZ2xvYmFsID0gdGhpcyxcbiAgICAgIEdMT0JBTCA9IHRoaXM7XG4gIG1vZHVsZS5leHBvcnRzID0gJF9fcmVxdWlyZSgnMTQzJyk7XG4gIHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn0pO1xuXG4kX19TeXN0ZW0ucmVnaXN0ZXIoJzInLCBbJzE0MicsICcxNDQnLCAnYTEnXSwgZnVuY3Rpb24gKF9leHBvcnQpIHtcbiAgdmFyIF9Qcm9taXNlLCBhamF4LCBGRVRDSF9FVkVOVFMsIEVWRU5UU19TVUNDRVNTLCBFVkVOVFNfRkFJTEVELCBmZXRjaEV2ZW50cztcblxuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoXykge1xuICAgICAgX1Byb21pc2UgPSBfWydkZWZhdWx0J107XG4gICAgfSwgZnVuY3Rpb24gKF8yKSB7XG4gICAgICBhamF4ID0gXzJbJ2RlZmF1bHQnXTtcbiAgICB9LCBmdW5jdGlvbiAoX2ExKSB7XG4gICAgICBGRVRDSF9FVkVOVFMgPSBfYTEuRkVUQ0hfRVZFTlRTO1xuICAgICAgRVZFTlRTX1NVQ0NFU1MgPSBfYTEuRVZFTlRTX1NVQ0NFU1M7XG4gICAgICBFVkVOVFNfRkFJTEVEID0gX2ExLkVWRU5UU19GQUlMRUQ7XG4gICAgfV0sXG4gICAgZXhlY3V0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgICBmZXRjaEV2ZW50cyA9IGZ1bmN0aW9uIGZldGNoRXZlbnRzKCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoLCBnZXRTdGF0ZSkge1xuICAgICAgICAgIHZhciBpc0ZldGNoaW5nID0gZ2V0U3RhdGUoKS5ldmVudHMuaXNGZXRjaGluZztcblxuICAgICAgICAgIGlmIChpc0ZldGNoaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gX1Byb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IEZFVENIX0VWRU5UUyB9KTtcbiAgICAgICAgICBhamF4KCkuZ2V0KCdkYXRhL2V2ZW50cy5qc29uJykudGhlbihmdW5jdGlvbiAoZXZlbnRzKSB7XG4gICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6IEVWRU5UU19TVUNDRVNTLFxuICAgICAgICAgICAgICBwYXlsb2FkOiBldmVudHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiBFVkVOVFNfRkFJTEVEIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgX2V4cG9ydCgnZmV0Y2hFdmVudHMnLCBmZXRjaEV2ZW50cyk7XG4gICAgfVxuICB9O1xufSk7XG4kX19TeXN0ZW0ucmVnaXN0ZXIoJ2ExJywgWycyJ10sIGZ1bmN0aW9uIChfZXhwb3J0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgRkVUQ0hfRVZFTlRTLCBFVkVOVFNfU1VDQ0VTUywgRVZFTlRTX0ZBSUxFRDtcbiAgcmV0dXJuIHtcbiAgICBzZXR0ZXJzOiBbZnVuY3Rpb24gKF8pIHtcbiAgICAgIHZhciBfZXhwb3J0T2JqID0ge307XG4gICAgICBfZXhwb3J0T2JqWydmZXRjaEV2ZW50cyddID0gXy5mZXRjaEV2ZW50cztcblxuICAgICAgX2V4cG9ydChfZXhwb3J0T2JqKTtcbiAgICB9XSxcbiAgICBleGVjdXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBGRVRDSF9FVkVOVFMgPSAnRkVUQ0hfRVZFTlRTJztcblxuICAgICAgX2V4cG9ydCgnRkVUQ0hfRVZFTlRTJywgRkVUQ0hfRVZFTlRTKTtcblxuICAgICAgRVZFTlRTX1NVQ0NFU1MgPSAnRVZFTlRTX1NVQ0NFU1MnO1xuXG4gICAgICBfZXhwb3J0KCdFVkVOVFNfU1VDQ0VTUycsIEVWRU5UU19TVUNDRVNTKTtcblxuICAgICAgRVZFTlRTX0ZBSUxFRCA9ICdFVkVOVFNfRkFJTEVEJztcblxuICAgICAgX2V4cG9ydCgnRVZFTlRTX0ZBSUxFRCcsIEVWRU5UU19GQUlMRUQpO1xuICAgIH1cbiAgfTtcbn0pO1xuJF9fU3lzdGVtLnJlZ2lzdGVyKCcxNDUnLCBbJzEwNicsICdlMScsICdhMSddLCBmdW5jdGlvbiAoX2V4cG9ydCkge1xuICB2YXIgX3RvQ29uc3VtYWJsZUFycmF5LCBfZXh0ZW5kcywgRkVUQ0hfRVZFTlRTLCBFVkVOVFNfU1VDQ0VTUywgRVZFTlRTX0ZBSUxFRCwgaW5pdGlhbFN0YXRlLCBldmVudHM7XG5cbiAgcmV0dXJuIHtcbiAgICBzZXR0ZXJzOiBbZnVuY3Rpb24gKF8pIHtcbiAgICAgIF90b0NvbnN1bWFibGVBcnJheSA9IF9bJ2RlZmF1bHQnXTtcbiAgICB9LCBmdW5jdGlvbiAoX2UxKSB7XG4gICAgICBfZXh0ZW5kcyA9IF9lMVsnZGVmYXVsdCddO1xuICAgIH0sIGZ1bmN0aW9uIChfYTEpIHtcbiAgICAgIEZFVENIX0VWRU5UUyA9IF9hMS5GRVRDSF9FVkVOVFM7XG4gICAgICBFVkVOVFNfU1VDQ0VTUyA9IF9hMS5FVkVOVFNfU1VDQ0VTUztcbiAgICAgIEVWRU5UU19GQUlMRUQgPSBfYTEuRVZFTlRTX0ZBSUxFRDtcbiAgICB9XSxcbiAgICBleGVjdXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAndXNlIHN0cmljdCc7XG5cbiAgICAgIGluaXRpYWxTdGF0ZSA9IHtcbiAgICAgICAgZXZlbnRzOiBbe1xuICAgICAgICAgIHRpdGxlOiAnLi4uJyxcbiAgICAgICAgICBkYXRlOiB7IGRheTogMCwgbW9udGg6ICcnLCB5ZWFyOiAwIH0sXG4gICAgICAgICAgaW1hZ2U6ICcnXG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0aXRsZTogJy4uLicsXG4gICAgICAgICAgZGF0ZTogeyBkYXk6IDAsIG1vbnRoOiAnJywgeWVhcjogMCB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0aXRsZTogJy4uLicsXG4gICAgICAgICAgZGF0ZTogeyBkYXk6IDAsIG1vbnRoOiAnJywgeWVhcjogMCB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0aXRsZTogJy4uLicsXG4gICAgICAgICAgZGF0ZTogeyBkYXk6IDAsIG1vbnRoOiAnJywgeWVhcjogMCB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICB0aXRsZTogJy4uLicsXG4gICAgICAgICAgZGF0ZTogeyBkYXk6IDAsIG1vbnRoOiAnJywgeWVhcjogMCB9XG4gICAgICAgIH1dLFxuICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZVxuICAgICAgfTtcblxuICAgICAgZXZlbnRzID0gZnVuY3Rpb24gZXZlbnRzKHN0YXRlLCBhY3Rpb24pIHtcbiAgICAgICAgaWYgKHN0YXRlID09PSB1bmRlZmluZWQpIHN0YXRlID0gaW5pdGlhbFN0YXRlO1xuXG4gICAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgICBjYXNlIEZFVENIX0VWRU5UUzpcbiAgICAgICAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RhdGUsIHtcbiAgICAgICAgICAgICAgaXNGZXRjaGluZzogdHJ1ZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICBjYXNlIEVWRU5UU19TVUNDRVNTOlxuICAgICAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICBldmVudHM6IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYWN0aW9uLnBheWxvYWQpKSxcbiAgICAgICAgICAgICAgaXNGZXRjaGluZzogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgY2FzZSBFVkVOVFNfRkFJTEVEOlxuICAgICAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfTtcblxuICAgICAgX2V4cG9ydCgnZGVmYXVsdCcsIGV2ZW50cyk7XG4gICAgfVxuICB9O1xufSk7XG4kX19TeXN0ZW0ucmVnaXN0ZXIoJzE0NicsIFsnMTQ1J10sIGZ1bmN0aW9uIChfZXhwb3J0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgZXZlbnRzO1xuICByZXR1cm4ge1xuICAgIHNldHRlcnM6IFtmdW5jdGlvbiAoXykge1xuICAgICAgZXZlbnRzID0gX1snZGVmYXVsdCddO1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIF9leHBvcnQoJ2RlZmF1bHQnLCB7IGV2ZW50czogZXZlbnRzIH0pO1xuICAgIH1cbiAgfTtcbn0pO1xuJF9fU3lzdGVtLnJlZ2lzdGVyKCcxJywgWycxMDUnLCAnMTQ2JywgJzljJywgJzlhJywgJ2EyJywgJ2Y1J10sIGZ1bmN0aW9uIChfZXhwb3J0KSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICB2YXIgY29uZmlndXJlU3RvcmUsIHJlZHVjZXJzLCBSZWFjdCwgcmVuZGVyLCBQcm92aWRlciwgQXBwLCBzdG9yZTtcbiAgcmV0dXJuIHtcbiAgICBzZXR0ZXJzOiBbZnVuY3Rpb24gKF8pIHtcbiAgICAgIGNvbmZpZ3VyZVN0b3JlID0gX1snZGVmYXVsdCddO1xuICAgIH0sIGZ1bmN0aW9uIChfMikge1xuICAgICAgcmVkdWNlcnMgPSBfMlsnZGVmYXVsdCddO1xuICAgIH0sIGZ1bmN0aW9uIChfYykge1xuICAgICAgUmVhY3QgPSBfY1snZGVmYXVsdCddO1xuICAgIH0sIGZ1bmN0aW9uIChfYSkge1xuICAgICAgcmVuZGVyID0gX2EucmVuZGVyO1xuICAgIH0sIGZ1bmN0aW9uIChfYTIpIHtcbiAgICAgIFByb3ZpZGVyID0gX2EyLlByb3ZpZGVyO1xuICAgIH0sIGZ1bmN0aW9uIChfZjUpIHtcbiAgICAgIEFwcCA9IF9mNVsnZGVmYXVsdCddO1xuICAgIH1dLFxuICAgIGV4ZWN1dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHN0b3JlID0gY29uZmlndXJlU3RvcmUoeyByZWR1Y2VyczogcmVkdWNlcnMgfSk7XG5cbiAgICAgIHJlbmRlcihSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBQcm92aWRlcixcbiAgICAgICAgeyBzdG9yZTogc3RvcmUgfSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChBcHAsIG51bGwpXG4gICAgICApLCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1qcz1cImFwcFwiXScpKTtcbiAgICB9XG4gIH07XG59KTtcbn0pXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICBmYWN0b3J5KCk7XG59KTsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIGdldFRleHRDb250ZW50QWNjZXNzb3IgPSByZXF1aXJlKCcuL2dldFRleHRDb250ZW50QWNjZXNzb3InKTtcbmZ1bmN0aW9uIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZShyb290KSB7XG4gIHRoaXMuX3Jvb3QgPSByb290O1xuICB0aGlzLl9zdGFydFRleHQgPSB0aGlzLmdldFRleHQoKTtcbiAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gbnVsbDtcbn1cbl9hc3NpZ24oRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlLnByb3RvdHlwZSwge1xuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9yb290ID0gbnVsbDtcbiAgICB0aGlzLl9zdGFydFRleHQgPSBudWxsO1xuICAgIHRoaXMuX2ZhbGxiYWNrVGV4dCA9IG51bGw7XG4gIH0sXG4gIGdldFRleHQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICgndmFsdWUnIGluIHRoaXMuX3Jvb3QpIHtcbiAgICAgIHJldHVybiB0aGlzLl9yb290LnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fcm9vdFtnZXRUZXh0Q29udGVudEFjY2Vzc29yKCldO1xuICB9LFxuICBnZXREYXRhOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fZmFsbGJhY2tUZXh0KSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmFsbGJhY2tUZXh0O1xuICAgIH1cbiAgICB2YXIgc3RhcnQ7XG4gICAgdmFyIHN0YXJ0VmFsdWUgPSB0aGlzLl9zdGFydFRleHQ7XG4gICAgdmFyIHN0YXJ0TGVuZ3RoID0gc3RhcnRWYWx1ZS5sZW5ndGg7XG4gICAgdmFyIGVuZDtcbiAgICB2YXIgZW5kVmFsdWUgPSB0aGlzLmdldFRleHQoKTtcbiAgICB2YXIgZW5kTGVuZ3RoID0gZW5kVmFsdWUubGVuZ3RoO1xuICAgIGZvciAoc3RhcnQgPSAwOyBzdGFydCA8IHN0YXJ0TGVuZ3RoOyBzdGFydCsrKSB7XG4gICAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydF0gIT09IGVuZFZhbHVlW3N0YXJ0XSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1pbkVuZCA9IHN0YXJ0TGVuZ3RoIC0gc3RhcnQ7XG4gICAgZm9yIChlbmQgPSAxOyBlbmQgPD0gbWluRW5kOyBlbmQrKykge1xuICAgICAgaWYgKHN0YXJ0VmFsdWVbc3RhcnRMZW5ndGggLSBlbmRdICE9PSBlbmRWYWx1ZVtlbmRMZW5ndGggLSBlbmRdKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgc2xpY2VUYWlsID0gZW5kID4gMSA/IDEgLSBlbmQgOiB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZmFsbGJhY2tUZXh0ID0gZW5kVmFsdWUuc2xpY2Uoc3RhcnQsIHNsaWNlVGFpbCk7XG4gICAgcmV0dXJuIHRoaXMuX2ZhbGxiYWNrVGV4dDtcbiAgfVxufSk7XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlKTtcbm1vZHVsZS5leHBvcnRzID0gRmFsbGJhY2tDb21wb3NpdGlvblN0YXRlO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG52YXIgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSA9IHtkYXRhOiBudWxsfTtcbmZ1bmN0aW9uIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQsIENvbXBvc2l0aW9uRXZlbnRJbnRlcmZhY2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG52YXIgSW5wdXRFdmVudEludGVyZmFjZSA9IHtkYXRhOiBudWxsfTtcbmZ1bmN0aW9uIFN5bnRoZXRpY0lucHV0RXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0lucHV0RXZlbnQsIElucHV0RXZlbnRJbnRlcmZhY2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNJbnB1dEV2ZW50O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCcuL0V2ZW50Q29uc3RhbnRzJyk7XG52YXIgRXZlbnRQcm9wYWdhdG9ycyA9IHJlcXVpcmUoJy4vRXZlbnRQcm9wYWdhdG9ycycpO1xudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBGYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUgPSByZXF1aXJlKCcuL0ZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZScpO1xudmFyIFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQnKTtcbnZhciBTeW50aGV0aWNJbnB1dEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNJbnB1dEV2ZW50Jyk7XG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xudmFyIEVORF9LRVlDT0RFUyA9IFs5LCAxMywgMjcsIDMyXTtcbnZhciBTVEFSVF9LRVlDT0RFID0gMjI5O1xudmFyIGNhblVzZUNvbXBvc2l0aW9uRXZlbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ0NvbXBvc2l0aW9uRXZlbnQnIGluIHdpbmRvdztcbnZhciBkb2N1bWVudE1vZGUgPSBudWxsO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkge1xuICBkb2N1bWVudE1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG59XG52YXIgY2FuVXNlVGV4dElucHV0RXZlbnQgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgJ1RleHRFdmVudCcgaW4gd2luZG93ICYmICFkb2N1bWVudE1vZGUgJiYgIWlzUHJlc3RvKCk7XG52YXIgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8IGRvY3VtZW50TW9kZSAmJiBkb2N1bWVudE1vZGUgPiA4ICYmIGRvY3VtZW50TW9kZSA8PSAxMSk7XG5mdW5jdGlvbiBpc1ByZXN0bygpIHtcbiAgdmFyIG9wZXJhID0gd2luZG93Lm9wZXJhO1xuICByZXR1cm4gdHlwZW9mIG9wZXJhID09PSAnb2JqZWN0JyAmJiB0eXBlb2Ygb3BlcmEudmVyc2lvbiA9PT0gJ2Z1bmN0aW9uJyAmJiBwYXJzZUludChvcGVyYS52ZXJzaW9uKCksIDEwKSA8PSAxMjtcbn1cbnZhciBTUEFDRUJBUl9DT0RFID0gMzI7XG52YXIgU1BBQ0VCQVJfQ0hBUiA9IFN0cmluZy5mcm9tQ2hhckNvZGUoU1BBQ0VCQVJfQ09ERSk7XG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG52YXIgZXZlbnRUeXBlcyA9IHtcbiAgYmVmb3JlSW5wdXQ6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDoga2V5T2Yoe29uQmVmb3JlSW5wdXQ6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25CZWZvcmVJbnB1dENhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCwgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcywgdG9wTGV2ZWxUeXBlcy50b3BUZXh0SW5wdXQsIHRvcExldmVsVHlwZXMudG9wUGFzdGVdXG4gIH0sXG4gIGNvbXBvc2l0aW9uRW5kOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uRW5kOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25FbmRDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcExldmVsVHlwZXMudG9wQmx1ciwgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZCwgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLCB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLCB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bl1cbiAgfSxcbiAgY29tcG9zaXRpb25TdGFydDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25Db21wb3NpdGlvblN0YXJ0OiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25TdGFydENhcHR1cmU6IG51bGx9KVxuICAgIH0sXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BCbHVyLCB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQsIHRvcExldmVsVHlwZXMudG9wS2V5RG93biwgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzcywgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd25dXG4gIH0sXG4gIGNvbXBvc2l0aW9uVXBkYXRlOiB7XG4gICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbXBvc2l0aW9uVXBkYXRlOiBudWxsfSksXG4gICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcExldmVsVHlwZXMudG9wQmx1ciwgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblVwZGF0ZSwgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLCB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzLCB0b3BMZXZlbFR5cGVzLnRvcEtleVVwLCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bl1cbiAgfVxufTtcbnZhciBoYXNTcGFjZUtleXByZXNzID0gZmFsc2U7XG5mdW5jdGlvbiBpc0tleXByZXNzQ29tbWFuZChuYXRpdmVFdmVudCkge1xuICByZXR1cm4gKG5hdGl2ZUV2ZW50LmN0cmxLZXkgfHwgbmF0aXZlRXZlbnQuYWx0S2V5IHx8IG5hdGl2ZUV2ZW50Lm1ldGFLZXkpICYmICEobmF0aXZlRXZlbnQuY3RybEtleSAmJiBuYXRpdmVFdmVudC5hbHRLZXkpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUodG9wTGV2ZWxUeXBlKSB7XG4gIHN3aXRjaCAodG9wTGV2ZWxUeXBlKSB7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uU3RhcnQ6XG4gICAgICByZXR1cm4gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvblVwZGF0ZTpcbiAgICAgIHJldHVybiBldmVudFR5cGVzLmNvbXBvc2l0aW9uVXBkYXRlO1xuICB9XG59XG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93biAmJiBuYXRpdmVFdmVudC5rZXlDb2RlID09PSBTVEFSVF9LRVlDT0RFO1xufVxuZnVuY3Rpb24gaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5VXA6XG4gICAgICByZXR1cm4gRU5EX0tFWUNPREVTLmluZGV4T2YobmF0aXZlRXZlbnQua2V5Q29kZSkgIT09IC0xO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duOlxuICAgICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmtleUNvZGUgIT09IFNUQVJUX0tFWUNPREU7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleVByZXNzOlxuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG4gIGlmICh0eXBlb2YgZGV0YWlsID09PSAnb2JqZWN0JyAmJiAnZGF0YScgaW4gZGV0YWlsKSB7XG4gICAgcmV0dXJuIGRldGFpbC5kYXRhO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxudmFyIGN1cnJlbnRDb21wb3NpdGlvbiA9IG51bGw7XG5mdW5jdGlvbiBleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICB2YXIgZXZlbnRUeXBlO1xuICB2YXIgZmFsbGJhY2tEYXRhO1xuICBpZiAoY2FuVXNlQ29tcG9zaXRpb25FdmVudCkge1xuICAgIGV2ZW50VHlwZSA9IGdldENvbXBvc2l0aW9uRXZlbnRUeXBlKHRvcExldmVsVHlwZSk7XG4gIH0gZWxzZSBpZiAoIWN1cnJlbnRDb21wb3NpdGlvbikge1xuICAgIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgZXZlbnRUeXBlID0gZXZlbnRUeXBlcy5jb21wb3NpdGlvblN0YXJ0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkpIHtcbiAgICBldmVudFR5cGUgPSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kO1xuICB9XG4gIGlmICghZXZlbnRUeXBlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhKSB7XG4gICAgaWYgKCFjdXJyZW50Q29tcG9zaXRpb24gJiYgZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uU3RhcnQpIHtcbiAgICAgIGN1cnJlbnRDb21wb3NpdGlvbiA9IEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5nZXRQb29sZWQobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlID09PSBldmVudFR5cGVzLmNvbXBvc2l0aW9uRW5kKSB7XG4gICAgICBpZiAoY3VycmVudENvbXBvc2l0aW9uKSB7XG4gICAgICAgIGZhbGxiYWNrRGF0YSA9IGN1cnJlbnRDb21wb3NpdGlvbi5nZXREYXRhKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgaWYgKGZhbGxiYWNrRGF0YSkge1xuICAgIGV2ZW50LmRhdGEgPSBmYWxsYmFja0RhdGE7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1c3RvbURhdGEgPSBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBpZiAoY3VzdG9tRGF0YSAhPT0gbnVsbCkge1xuICAgICAgZXZlbnQuZGF0YSA9IGN1c3RvbURhdGE7XG4gICAgfVxuICB9XG4gIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gIHJldHVybiBldmVudDtcbn1cbmZ1bmN0aW9uIGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5UHJlc3M6XG4gICAgICB2YXIgd2hpY2ggPSBuYXRpdmVFdmVudC53aGljaDtcbiAgICAgIGlmICh3aGljaCAhPT0gU1BBQ0VCQVJfQ09ERSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGhhc1NwYWNlS2V5cHJlc3MgPSB0cnVlO1xuICAgICAgcmV0dXJuIFNQQUNFQkFSX0NIQVI7XG4gICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRleHRJbnB1dDpcbiAgICAgIHZhciBjaGFycyA9IG5hdGl2ZUV2ZW50LmRhdGE7XG4gICAgICBpZiAoY2hhcnMgPT09IFNQQUNFQkFSX0NIQVIgJiYgaGFzU3BhY2VLZXlwcmVzcykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjaGFycztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChjdXJyZW50Q29tcG9zaXRpb24pIHtcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENvbXBvc2l0aW9uRW5kIHx8IGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZCh0b3BMZXZlbFR5cGUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgdmFyIGNoYXJzID0gY3VycmVudENvbXBvc2l0aW9uLmdldERhdGEoKTtcbiAgICAgIEZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5yZWxlYXNlKGN1cnJlbnRDb21wb3NpdGlvbik7XG4gICAgICBjdXJyZW50Q29tcG9zaXRpb24gPSBudWxsO1xuICAgICAgcmV0dXJuIGNoYXJzO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXN0ZTpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgIGlmIChuYXRpdmVFdmVudC53aGljaCAmJiAhaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG5hdGl2ZUV2ZW50LndoaWNoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BDb21wb3NpdGlvbkVuZDpcbiAgICAgIHJldHVybiB1c2VGYWxsYmFja0NvbXBvc2l0aW9uRGF0YSA/IG51bGwgOiBuYXRpdmVFdmVudC5kYXRhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gZXh0cmFjdEJlZm9yZUlucHV0RXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgdmFyIGNoYXJzO1xuICBpZiAoY2FuVXNlVGV4dElucHV0RXZlbnQpIHtcbiAgICBjaGFycyA9IGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gIH0gZWxzZSB7XG4gICAgY2hhcnMgPSBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnModG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gIH1cbiAgaWYgKCFjaGFycykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBldmVudCA9IFN5bnRoZXRpY0lucHV0RXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuYmVmb3JlSW5wdXQsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIGV2ZW50LmRhdGEgPSBjaGFycztcbiAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgcmV0dXJuIGV2ZW50O1xufVxudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSB7XG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgcmV0dXJuIFtleHRyYWN0Q29tcG9zaXRpb25FdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCksIGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KV07XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IEJlZm9yZUlucHV0RXZlbnRQbHVnaW47XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIEV2ZW50Q29uc3RhbnRzID0gcmVxdWlyZSgnLi9FdmVudENvbnN0YW50cycpO1xuICB2YXIgRXZlbnRQbHVnaW5IdWIgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luSHViJyk7XG4gIHZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG4gIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xuICB2YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcbiAgdmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuICB2YXIgZ2V0RXZlbnRUYXJnZXQgPSByZXF1aXJlKCcuL2dldEV2ZW50VGFyZ2V0Jyk7XG4gIHZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50U3VwcG9ydGVkJyk7XG4gIHZhciBpc1RleHRJbnB1dEVsZW1lbnQgPSByZXF1aXJlKCcuL2lzVGV4dElucHV0RWxlbWVudCcpO1xuICB2YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xuICB2YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG4gIHZhciBldmVudFR5cGVzID0ge2NoYW5nZToge1xuICAgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ2hhbmdlOiBudWxsfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25DaGFuZ2VDYXB0dXJlOiBudWxsfSlcbiAgICAgIH0sXG4gICAgICBkZXBlbmRlbmNpZXM6IFt0b3BMZXZlbFR5cGVzLnRvcEJsdXIsIHRvcExldmVsVHlwZXMudG9wQ2hhbmdlLCB0b3BMZXZlbFR5cGVzLnRvcENsaWNrLCB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzLCB0b3BMZXZlbFR5cGVzLnRvcElucHV0LCB0b3BMZXZlbFR5cGVzLnRvcEtleURvd24sIHRvcExldmVsVHlwZXMudG9wS2V5VXAsIHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlXVxuICAgIH19O1xuICB2YXIgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gIHZhciBhY3RpdmVFbGVtZW50SW5zdCA9IG51bGw7XG4gIHZhciBhY3RpdmVFbGVtZW50VmFsdWUgPSBudWxsO1xuICB2YXIgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG4gIGZ1bmN0aW9uIHNob3VsZFVzZUNoYW5nZUV2ZW50KGVsZW0pIHtcbiAgICB2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gbm9kZU5hbWUgPT09ICdzZWxlY3QnIHx8IG5vZGVOYW1lID09PSAnaW5wdXQnICYmIGVsZW0udHlwZSA9PT0gJ2ZpbGUnO1xuICB9XG4gIHZhciBkb2VzQ2hhbmdlRXZlbnRCdWJibGUgPSBmYWxzZTtcbiAgaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICAgIGRvZXNDaGFuZ2VFdmVudEJ1YmJsZSA9IGlzRXZlbnRTdXBwb3J0ZWQoJ2NoYW5nZScpICYmICghKCdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA4KTtcbiAgfVxuICBmdW5jdGlvbiBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIGV2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKGV2ZW50VHlwZXMuY2hhbmdlLCBhY3RpdmVFbGVtZW50SW5zdCwgbmF0aXZlRXZlbnQsIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSk7XG4gICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMocnVuRXZlbnRJbkJhdGNoLCBldmVudCk7XG4gIH1cbiAgZnVuY3Rpb24gcnVuRXZlbnRJbkJhdGNoKGV2ZW50KSB7XG4gICAgRXZlbnRQbHVnaW5IdWIuZW5xdWV1ZUV2ZW50cyhldmVudCk7XG4gICAgRXZlbnRQbHVnaW5IdWIucHJvY2Vzc0V2ZW50UXVldWUoZmFsc2UpO1xuICB9XG4gIGZ1bmN0aW9uIHN0YXJ0V2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCh0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0O1xuICAgIGFjdGl2ZUVsZW1lbnRJbnN0ID0gdGFyZ2V0SW5zdDtcbiAgICBhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xuICB9XG4gIGZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCkge1xuICAgIGlmICghYWN0aXZlRWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbmNoYW5nZScsIG1hbnVhbERpc3BhdGNoQ2hhbmdlRXZlbnQpO1xuICAgIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xuICAgIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0KSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BDaGFuZ2UpIHtcbiAgICAgIHJldHVybiB0YXJnZXRJbnN0O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JDaGFuZ2VFdmVudElFOCh0b3BMZXZlbFR5cGUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMpIHtcbiAgICAgIHN0b3BXYXRjaGluZ0ZvckNoYW5nZUV2ZW50SUU4KCk7XG4gICAgICBzdGFydFdhdGNoaW5nRm9yQ2hhbmdlRXZlbnRJRTgodGFyZ2V0LCB0YXJnZXRJbnN0KTtcbiAgICB9IGVsc2UgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BCbHVyKSB7XG4gICAgICBzdG9wV2F0Y2hpbmdGb3JDaGFuZ2VFdmVudElFOCgpO1xuICAgIH1cbiAgfVxuICB2YXIgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gZmFsc2U7XG4gIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICBpc0lucHV0RXZlbnRTdXBwb3J0ZWQgPSBpc0V2ZW50U3VwcG9ydGVkKCdpbnB1dCcpICYmICghKCdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50KSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiAxMSk7XG4gIH1cbiAgdmFyIG5ld1ZhbHVlUHJvcCA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AuZ2V0LmNhbGwodGhpcyk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgYWN0aXZlRWxlbWVudFZhbHVlID0gJycgKyB2YWw7XG4gICAgICBhY3RpdmVFbGVtZW50VmFsdWVQcm9wLnNldC5jYWxsKHRoaXMsIHZhbCk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodGFyZ2V0LCB0YXJnZXRJbnN0KSB7XG4gICAgYWN0aXZlRWxlbWVudCA9IHRhcmdldDtcbiAgICBhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3Q7XG4gICAgYWN0aXZlRWxlbWVudFZhbHVlID0gdGFyZ2V0LnZhbHVlO1xuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZVByb3AgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsICd2YWx1ZScpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhY3RpdmVFbGVtZW50LCAndmFsdWUnLCBuZXdWYWx1ZVByb3ApO1xuICAgIGlmIChhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KSB7XG4gICAgICBhY3RpdmVFbGVtZW50LmF0dGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UsIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UoKSB7XG4gICAgaWYgKCFhY3RpdmVFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlbGV0ZSBhY3RpdmVFbGVtZW50LnZhbHVlO1xuICAgIGlmIChhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KSB7XG4gICAgICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Byb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UsIGZhbHNlKTtcbiAgICB9XG4gICAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xuICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IG51bGw7XG4gICAgYWN0aXZlRWxlbWVudFZhbHVlUHJvcCA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlUHJvcGVydHlDaGFuZ2UobmF0aXZlRXZlbnQpIHtcbiAgICBpZiAobmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICE9PSAndmFsdWUnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB2YWx1ZSA9IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQudmFsdWU7XG4gICAgaWYgKHZhbHVlID09PSBhY3RpdmVFbGVtZW50VmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWN0aXZlRWxlbWVudFZhbHVlID0gdmFsdWU7XG4gICAgbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnQodG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0KSB7XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BJbnB1dCkge1xuICAgICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRJRSh0b3BMZXZlbFR5cGUsIHRhcmdldCwgdGFyZ2V0SW5zdCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wRm9jdXMpIHtcbiAgICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gICAgICBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodGFyZ2V0LCB0YXJnZXRJbnN0KTtcbiAgICB9IGVsc2UgaWYgKHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BCbHVyKSB7XG4gICAgICBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9ySW5wdXRFdmVudElFKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wU2VsZWN0aW9uQ2hhbmdlIHx8IHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BLZXlVcCB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wS2V5RG93bikge1xuICAgICAgaWYgKGFjdGl2ZUVsZW1lbnQgJiYgYWN0aXZlRWxlbWVudC52YWx1ZSAhPT0gYWN0aXZlRWxlbWVudFZhbHVlKSB7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnRWYWx1ZSA9IGFjdGl2ZUVsZW1lbnQudmFsdWU7XG4gICAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50SW5zdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2hvdWxkVXNlQ2xpY2tFdmVudChlbGVtKSB7XG4gICAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmIChlbGVtLnR5cGUgPT09ICdjaGVja2JveCcgfHwgZWxlbS50eXBlID09PSAncmFkaW8nKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRUYXJnZXRJbnN0Rm9yQ2xpY2tFdmVudCh0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QpIHtcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0SW5zdDtcbiAgICB9XG4gIH1cbiAgdmFyIENoYW5nZUV2ZW50UGx1Z2luID0ge1xuICAgIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG4gICAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICAgIHZhciB0YXJnZXROb2RlID0gdGFyZ2V0SW5zdCA/IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuICAgICAgdmFyIGdldFRhcmdldEluc3RGdW5jLFxuICAgICAgICAgIGhhbmRsZUV2ZW50RnVuYztcbiAgICAgIGlmIChzaG91bGRVc2VDaGFuZ2VFdmVudCh0YXJnZXROb2RlKSkge1xuICAgICAgICBpZiAoZG9lc0NoYW5nZUV2ZW50QnViYmxlKSB7XG4gICAgICAgICAgZ2V0VGFyZ2V0SW5zdEZ1bmMgPSBnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFuZGxlRXZlbnRGdW5jID0gaGFuZGxlRXZlbnRzRm9yQ2hhbmdlRXZlbnRJRTg7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRhcmdldE5vZGUpKSB7XG4gICAgICAgIGlmIChpc0lucHV0RXZlbnRTdXBwb3J0ZWQpIHtcbiAgICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRJRTtcbiAgICAgICAgICBoYW5kbGVFdmVudEZ1bmMgPSBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50SUU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2hvdWxkVXNlQ2xpY2tFdmVudCh0YXJnZXROb2RlKSkge1xuICAgICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDbGlja0V2ZW50O1xuICAgICAgfVxuICAgICAgaWYgKGdldFRhcmdldEluc3RGdW5jKSB7XG4gICAgICAgIHZhciBpbnN0ID0gZ2V0VGFyZ2V0SW5zdEZ1bmModG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0KTtcbiAgICAgICAgaWYgKGluc3QpIHtcbiAgICAgICAgICB2YXIgZXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5jaGFuZ2UsIGluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICAgICAgZXZlbnQudHlwZSA9ICdjaGFuZ2UnO1xuICAgICAgICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudCk7XG4gICAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaGFuZGxlRXZlbnRGdW5jKSB7XG4gICAgICAgIGhhbmRsZUV2ZW50RnVuYyh0b3BMZXZlbFR5cGUsIHRhcmdldE5vZGUsIHRhcmdldEluc3QpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBDaGFuZ2VFdmVudFBsdWdpbjtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlPZiA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU9mJyk7XG5cbi8qKlxuICogTW9kdWxlIHRoYXQgaXMgaW5qZWN0YWJsZSBpbnRvIGBFdmVudFBsdWdpbkh1YmAsIHRoYXQgc3BlY2lmaWVzIGFcbiAqIGRldGVybWluaXN0aWMgb3JkZXJpbmcgb2YgYEV2ZW50UGx1Z2luYHMuIEEgY29udmVuaWVudCB3YXkgdG8gcmVhc29uIGFib3V0XG4gKiBwbHVnaW5zLCB3aXRob3V0IGhhdmluZyB0byBwYWNrYWdlIGV2ZXJ5IG9uZSBvZiB0aGVtLiBUaGlzIGlzIGJldHRlciB0aGFuXG4gKiBoYXZpbmcgcGx1Z2lucyBiZSBvcmRlcmVkIGluIHRoZSBzYW1lIG9yZGVyIHRoYXQgdGhleSBhcmUgaW5qZWN0ZWQgYmVjYXVzZVxuICogdGhhdCBvcmRlcmluZyB3b3VsZCBiZSBpbmZsdWVuY2VkIGJ5IHRoZSBwYWNrYWdpbmcgb3JkZXIuXG4gKiBgUmVzcG9uZGVyRXZlbnRQbHVnaW5gIG11c3Qgb2NjdXIgYmVmb3JlIGBTaW1wbGVFdmVudFBsdWdpbmAgc28gdGhhdFxuICogcHJldmVudGluZyBkZWZhdWx0IG9uIGV2ZW50cyBpcyBjb252ZW5pZW50IGluIGBTaW1wbGVFdmVudFBsdWdpbmAgaGFuZGxlcnMuXG4gKi9cbnZhciBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlciA9IFtrZXlPZih7IFJlc3BvbmRlckV2ZW50UGx1Z2luOiBudWxsIH0pLCBrZXlPZih7IFNpbXBsZUV2ZW50UGx1Z2luOiBudWxsIH0pLCBrZXlPZih7IFRhcEV2ZW50UGx1Z2luOiBudWxsIH0pLCBrZXlPZih7IEVudGVyTGVhdmVFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBDaGFuZ2VFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBTZWxlY3RFdmVudFBsdWdpbjogbnVsbCB9KSwga2V5T2YoeyBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOiBudWxsIH0pXTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlcjsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBTeW50aGV0aWNNb3VzZUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNNb3VzZUV2ZW50Jyk7XG52YXIga2V5T2YgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlPZicpO1xudmFyIHRvcExldmVsVHlwZXMgPSBFdmVudENvbnN0YW50cy50b3BMZXZlbFR5cGVzO1xudmFyIGV2ZW50VHlwZXMgPSB7XG4gIG1vdXNlRW50ZXI6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25Nb3VzZUVudGVyOiBudWxsfSksXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJdXG4gIH0sXG4gIG1vdXNlTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiBrZXlPZih7b25Nb3VzZUxlYXZlOiBudWxsfSksXG4gICAgZGVwZW5kZW5jaWVzOiBbdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dCwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU92ZXJdXG4gIH1cbn07XG52YXIgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luID0ge1xuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIGlmICh0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdmVyICYmIChuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LmZyb21FbGVtZW50KSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0b3BMZXZlbFR5cGUgIT09IHRvcExldmVsVHlwZXMudG9wTW91c2VPdXQgJiYgdG9wTGV2ZWxUeXBlICE9PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3Zlcikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHZhciB3aW47XG4gICAgaWYgKG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICAgIHdpbiA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZG9jID0gbmF0aXZlRXZlbnRUYXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgIGlmIChkb2MpIHtcbiAgICAgICAgd2luID0gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW4gPSB3aW5kb3c7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBmcm9tO1xuICAgIHZhciB0bztcbiAgICBpZiAodG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3V0KSB7XG4gICAgICBmcm9tID0gdGFyZ2V0SW5zdDtcbiAgICAgIHZhciByZWxhdGVkID0gbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC50b0VsZW1lbnQ7XG4gICAgICB0byA9IHJlbGF0ZWQgPyBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVsYXRlZCkgOiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcm9tID0gbnVsbDtcbiAgICAgIHRvID0gdGFyZ2V0SW5zdDtcbiAgICB9XG4gICAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdmFyIGZyb21Ob2RlID0gZnJvbSA9PSBudWxsID8gd2luIDogUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoZnJvbSk7XG4gICAgdmFyIHRvTm9kZSA9IHRvID09IG51bGwgPyB3aW4gOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0byk7XG4gICAgdmFyIGxlYXZlID0gU3ludGhldGljTW91c2VFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5tb3VzZUxlYXZlLCBmcm9tLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGxlYXZlLnR5cGUgPSAnbW91c2VsZWF2ZSc7XG4gICAgbGVhdmUudGFyZ2V0ID0gZnJvbU5vZGU7XG4gICAgbGVhdmUucmVsYXRlZFRhcmdldCA9IHRvTm9kZTtcbiAgICB2YXIgZW50ZXIgPSBTeW50aGV0aWNNb3VzZUV2ZW50LmdldFBvb2xlZChldmVudFR5cGVzLm1vdXNlRW50ZXIsIHRvLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGVudGVyLnR5cGUgPSAnbW91c2VlbnRlcic7XG4gICAgZW50ZXIudGFyZ2V0ID0gdG9Ob2RlO1xuICAgIGVudGVyLnJlbGF0ZWRUYXJnZXQgPSBmcm9tTm9kZTtcbiAgICBFdmVudFByb3BhZ2F0b3JzLmFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyhsZWF2ZSwgZW50ZXIsIGZyb20sIHRvKTtcbiAgICByZXR1cm4gW2xlYXZlLCBlbnRlcl07XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IEVudGVyTGVhdmVFdmVudFBsdWdpbjtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIERPTVByb3BlcnR5ID0gcmVxdWlyZSgnLi9ET01Qcm9wZXJ0eScpO1xudmFyIE1VU1RfVVNFX1BST1BFUlRZID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZO1xudmFyIEhBU19CT09MRUFOX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19CT09MRUFOX1ZBTFVFO1xudmFyIEhBU19TSURFX0VGRkVDVFMgPSBET01Qcm9wZXJ0eS5pbmplY3Rpb24uSEFTX1NJREVfRUZGRUNUUztcbnZhciBIQVNfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSA9IERPTVByb3BlcnR5LmluamVjdGlvbi5IQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRTtcbnZhciBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFID0gRE9NUHJvcGVydHkuaW5qZWN0aW9uLkhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU7XG52YXIgSFRNTERPTVByb3BlcnR5Q29uZmlnID0ge1xuICBpc0N1c3RvbUF0dHJpYnV0ZTogUmVnRXhwLnByb3RvdHlwZS50ZXN0LmJpbmQobmV3IFJlZ0V4cCgnXihkYXRhfGFyaWEpLVsnICsgRE9NUHJvcGVydHkuQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKSksXG4gIFByb3BlcnRpZXM6IHtcbiAgICBhY2NlcHQ6IDAsXG4gICAgYWNjZXB0Q2hhcnNldDogMCxcbiAgICBhY2Nlc3NLZXk6IDAsXG4gICAgYWN0aW9uOiAwLFxuICAgIGFsbG93RnVsbFNjcmVlbjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgYWxsb3dUcmFuc3BhcmVuY3k6IDAsXG4gICAgYWx0OiAwLFxuICAgIGFzeW5jOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBhdXRvQ29tcGxldGU6IDAsXG4gICAgYXV0b1BsYXk6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNhcHR1cmU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGNlbGxQYWRkaW5nOiAwLFxuICAgIGNlbGxTcGFjaW5nOiAwLFxuICAgIGNoYXJTZXQ6IDAsXG4gICAgY2hhbGxlbmdlOiAwLFxuICAgIGNoZWNrZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgY2l0ZTogMCxcbiAgICBjbGFzc0lEOiAwLFxuICAgIGNsYXNzTmFtZTogMCxcbiAgICBjb2xzOiBIQVNfUE9TSVRJVkVfTlVNRVJJQ19WQUxVRSxcbiAgICBjb2xTcGFuOiAwLFxuICAgIGNvbnRlbnQ6IDAsXG4gICAgY29udGVudEVkaXRhYmxlOiAwLFxuICAgIGNvbnRleHRNZW51OiAwLFxuICAgIGNvbnRyb2xzOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBjb29yZHM6IDAsXG4gICAgY3Jvc3NPcmlnaW46IDAsXG4gICAgZGF0YTogMCxcbiAgICBkYXRlVGltZTogMCxcbiAgICAnZGVmYXVsdCc6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRlZmVyOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBkaXI6IDAsXG4gICAgZGlzYWJsZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIGRvd25sb2FkOiBIQVNfT1ZFUkxPQURFRF9CT09MRUFOX1ZBTFVFLFxuICAgIGRyYWdnYWJsZTogMCxcbiAgICBlbmNUeXBlOiAwLFxuICAgIGZvcm06IDAsXG4gICAgZm9ybUFjdGlvbjogMCxcbiAgICBmb3JtRW5jVHlwZTogMCxcbiAgICBmb3JtTWV0aG9kOiAwLFxuICAgIGZvcm1Ob1ZhbGlkYXRlOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBmb3JtVGFyZ2V0OiAwLFxuICAgIGZyYW1lQm9yZGVyOiAwLFxuICAgIGhlYWRlcnM6IDAsXG4gICAgaGVpZ2h0OiAwLFxuICAgIGhpZGRlbjogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgaGlnaDogMCxcbiAgICBocmVmOiAwLFxuICAgIGhyZWZMYW5nOiAwLFxuICAgIGh0bWxGb3I6IDAsXG4gICAgaHR0cEVxdWl2OiAwLFxuICAgIGljb246IDAsXG4gICAgaWQ6IDAsXG4gICAgaW5wdXRNb2RlOiAwLFxuICAgIGludGVncml0eTogMCxcbiAgICBpczogMCxcbiAgICBrZXlQYXJhbXM6IDAsXG4gICAga2V5VHlwZTogMCxcbiAgICBraW5kOiAwLFxuICAgIGxhYmVsOiAwLFxuICAgIGxhbmc6IDAsXG4gICAgbGlzdDogMCxcbiAgICBsb29wOiBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBsb3c6IDAsXG4gICAgbWFuaWZlc3Q6IDAsXG4gICAgbWFyZ2luSGVpZ2h0OiAwLFxuICAgIG1hcmdpbldpZHRoOiAwLFxuICAgIG1heDogMCxcbiAgICBtYXhMZW5ndGg6IDAsXG4gICAgbWVkaWE6IDAsXG4gICAgbWVkaWFHcm91cDogMCxcbiAgICBtZXRob2Q6IDAsXG4gICAgbWluOiAwLFxuICAgIG1pbkxlbmd0aDogMCxcbiAgICBtdWx0aXBsZTogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBtdXRlZDogTVVTVF9VU0VfUFJPUEVSVFkgfCBIQVNfQk9PTEVBTl9WQUxVRSxcbiAgICBuYW1lOiAwLFxuICAgIG5vbmNlOiAwLFxuICAgIG5vVmFsaWRhdGU6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG9wZW46IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIG9wdGltdW06IDAsXG4gICAgcGF0dGVybjogMCxcbiAgICBwbGFjZWhvbGRlcjogMCxcbiAgICBwb3N0ZXI6IDAsXG4gICAgcHJlbG9hZDogMCxcbiAgICBwcm9maWxlOiAwLFxuICAgIHJhZGlvR3JvdXA6IDAsXG4gICAgcmVhZE9ubHk6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJlbDogMCxcbiAgICByZXF1aXJlZDogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgcmV2ZXJzZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHJvbGU6IDAsXG4gICAgcm93czogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgcm93U3BhbjogSEFTX05VTUVSSUNfVkFMVUUsXG4gICAgc2FuZGJveDogMCxcbiAgICBzY29wZTogMCxcbiAgICBzY29wZWQ6IEhBU19CT09MRUFOX1ZBTFVFLFxuICAgIHNjcm9sbGluZzogMCxcbiAgICBzZWFtbGVzczogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgc2VsZWN0ZWQ6IE1VU1RfVVNFX1BST1BFUlRZIHwgSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgc2hhcGU6IDAsXG4gICAgc2l6ZTogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgc2l6ZXM6IDAsXG4gICAgc3BhbjogSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUsXG4gICAgc3BlbGxDaGVjazogMCxcbiAgICBzcmM6IDAsXG4gICAgc3JjRG9jOiAwLFxuICAgIHNyY0xhbmc6IDAsXG4gICAgc3JjU2V0OiAwLFxuICAgIHN0YXJ0OiBIQVNfTlVNRVJJQ19WQUxVRSxcbiAgICBzdGVwOiAwLFxuICAgIHN0eWxlOiAwLFxuICAgIHN1bW1hcnk6IDAsXG4gICAgdGFiSW5kZXg6IDAsXG4gICAgdGFyZ2V0OiAwLFxuICAgIHRpdGxlOiAwLFxuICAgIHR5cGU6IDAsXG4gICAgdXNlTWFwOiAwLFxuICAgIHZhbHVlOiBNVVNUX1VTRV9QUk9QRVJUWSB8IEhBU19TSURFX0VGRkVDVFMsXG4gICAgd2lkdGg6IDAsXG4gICAgd21vZGU6IDAsXG4gICAgd3JhcDogMCxcbiAgICBhYm91dDogMCxcbiAgICBkYXRhdHlwZTogMCxcbiAgICBpbmxpc3Q6IDAsXG4gICAgcHJlZml4OiAwLFxuICAgIHByb3BlcnR5OiAwLFxuICAgIHJlc291cmNlOiAwLFxuICAgICd0eXBlb2YnOiAwLFxuICAgIHZvY2FiOiAwLFxuICAgIGF1dG9DYXBpdGFsaXplOiAwLFxuICAgIGF1dG9Db3JyZWN0OiAwLFxuICAgIGF1dG9TYXZlOiAwLFxuICAgIGNvbG9yOiAwLFxuICAgIGl0ZW1Qcm9wOiAwLFxuICAgIGl0ZW1TY29wZTogSEFTX0JPT0xFQU5fVkFMVUUsXG4gICAgaXRlbVR5cGU6IDAsXG4gICAgaXRlbUlEOiAwLFxuICAgIGl0ZW1SZWY6IDAsXG4gICAgcmVzdWx0czogMCxcbiAgICBzZWN1cml0eTogMCxcbiAgICB1bnNlbGVjdGFibGU6IDBcbiAgfSxcbiAgRE9NQXR0cmlidXRlTmFtZXM6IHtcbiAgICBhY2NlcHRDaGFyc2V0OiAnYWNjZXB0LWNoYXJzZXQnLFxuICAgIGNsYXNzTmFtZTogJ2NsYXNzJyxcbiAgICBodG1sRm9yOiAnZm9yJyxcbiAgICBodHRwRXF1aXY6ICdodHRwLWVxdWl2J1xuICB9LFxuICBET01Qcm9wZXJ0eU5hbWVzOiB7fVxufTtcbm1vZHVsZS5leHBvcnRzID0gSFRNTERPTVByb3BlcnR5Q29uZmlnO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBmb2N1c05vZGUgPSByZXF1aXJlKCdmYmpzL2xpYi9mb2N1c05vZGUnKTtcbnZhciBBdXRvRm9jdXNVdGlscyA9IHtmb2N1c0RPTUNvbXBvbmVudDogZnVuY3Rpb24oKSB7XG4gICAgZm9jdXNOb2RlKFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpKTtcbiAgfX07XG5tb2R1bGUuZXhwb3J0cyA9IEF1dG9Gb2N1c1V0aWxzO1xuIiwiLyogKi8gXG5cInVzZSBzdHJpY3RcIjtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxudmFyIF9oeXBoZW5QYXR0ZXJuID0gLy0oLikvZztcblxuLyoqXG4gKiBDYW1lbGNhc2VzIGEgaHlwaGVuYXRlZCBzdHJpbmcsIGZvciBleGFtcGxlOlxuICpcbiAqICAgPiBjYW1lbGl6ZSgnYmFja2dyb3VuZC1jb2xvcicpXG4gKiAgIDwgXCJiYWNrZ3JvdW5kQ29sb3JcIlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gY2FtZWxpemUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcucmVwbGFjZShfaHlwaGVuUGF0dGVybiwgZnVuY3Rpb24gKF8sIGNoYXJhY3Rlcikge1xuICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FtZWxpemU7IiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgY2FtZWxpemUgPSByZXF1aXJlKCcuL2NhbWVsaXplJyk7XG52YXIgbXNQYXR0ZXJuID0gL14tbXMtLztcbmZ1bmN0aW9uIGNhbWVsaXplU3R5bGVOYW1lKHN0cmluZykge1xuICByZXR1cm4gY2FtZWxpemUoc3RyaW5nLnJlcGxhY2UobXNQYXR0ZXJuLCAnbXMtJykpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbGl6ZVN0eWxlTmFtZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBDU1NQcm9wZXJ0eVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDU1MgcHJvcGVydGllcyB3aGljaCBhY2NlcHQgbnVtYmVycyBidXQgYXJlIG5vdCBpbiB1bml0cyBvZiBcInB4XCIuXG4gKi9cblxudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuICBib3JkZXJJbWFnZU91dHNldDogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VTbGljZTogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogdHJ1ZSxcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBib3hPcmRpbmFsR3JvdXA6IHRydWUsXG4gIGNvbHVtbkNvdW50OiB0cnVlLFxuICBmbGV4OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICBmbGV4U2hyaW5rOiB0cnVlLFxuICBmbGV4TmVnYXRpdmU6IHRydWUsXG4gIGZsZXhPcmRlcjogdHJ1ZSxcbiAgZ3JpZFJvdzogdHJ1ZSxcbiAgZ3JpZENvbHVtbjogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgdGFiU2l6ZTogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG5cbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgZmxvb2RPcGFjaXR5OiB0cnVlLFxuICBzdG9wT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaGFycmF5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VNaXRlcmxpbWl0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJlZml4IHZlbmRvci1zcGVjaWZpYyBwcmVmaXgsIGVnOiBXZWJraXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgc3R5bGUgbmFtZSwgZWc6IHRyYW5zaXRpb25EdXJhdGlvblxuICogQHJldHVybiB7c3RyaW5nfSBzdHlsZSBuYW1lIHByZWZpeGVkIHdpdGggYHByZWZpeGAsIHByb3Blcmx5IGNhbWVsQ2FzZWQsIGVnOlxuICogV2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHN0eWxlIG5hbWVzIHRoYXQgbWF5IGNvbWUgcGFzc2VkIGluIHByZWZpeGVkIGJ5IGFkZGluZyBwZXJtdXRhdGlvbnNcbiAqIG9mIHZlbmRvciBwcmVmaXhlcy5cbiAqL1xudmFyIHByZWZpeGVzID0gWydXZWJraXQnLCAnbXMnLCAnTW96JywgJ08nXTtcblxuLy8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuLy8gaW5maW5pdGUgbG9vcCwgYmVjYXVzZSBpdCBpdGVyYXRlcyBvdmVyIHRoZSBuZXdseSBhZGRlZCBwcm9wcyB0b28uXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gIHByZWZpeGVzLmZvckVhY2goZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGlzVW5pdGxlc3NOdW1iZXJbcHJlZml4S2V5KHByZWZpeCwgcHJvcCldID0gaXNVbml0bGVzc051bWJlcltwcm9wXTtcbiAgfSk7XG59KTtcblxuLyoqXG4gKiBNb3N0IHN0eWxlIHByb3BlcnRpZXMgY2FuIGJlIHVuc2V0IGJ5IGRvaW5nIC5zdHlsZVtwcm9wXSA9ICcnIGJ1dCBJRThcbiAqIGRvZXNuJ3QgbGlrZSBkb2luZyB0aGF0IHdpdGggc2hvcnRoYW5kIHByb3BlcnRpZXMgc28gZm9yIHRoZSBwcm9wZXJ0aWVzIHRoYXRcbiAqIElFOCBicmVha3Mgb24sIHdoaWNoIGFyZSBsaXN0ZWQgaGVyZSwgd2UgaW5zdGVhZCB1bnNldCBlYWNoIG9mIHRoZVxuICogaW5kaXZpZHVhbCBwcm9wZXJ0aWVzLiBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzODUuXG4gKiBUaGUgNC12YWx1ZSAnY2xvY2snIHByb3BlcnRpZXMgbGlrZSBtYXJnaW4sIHBhZGRpbmcsIGJvcmRlci13aWR0aCBzZWVtIHRvXG4gKiBiZWhhdmUgd2l0aG91dCBhbnkgcHJvYmxlbXMuIEN1cmlvdXNseSwgbGlzdC1zdHlsZSB3b3JrcyB0b28gd2l0aG91dCBhbnlcbiAqIHNwZWNpYWwgcHJvZGRpbmcuXG4gKi9cbnZhciBzaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnMgPSB7XG4gIGJhY2tncm91bmQ6IHtcbiAgICBiYWNrZ3JvdW5kQXR0YWNobWVudDogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHRydWUsXG4gICAgYmFja2dyb3VuZEltYWdlOiB0cnVlLFxuICAgIGJhY2tncm91bmRQb3NpdGlvblg6IHRydWUsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWTogdHJ1ZSxcbiAgICBiYWNrZ3JvdW5kUmVwZWF0OiB0cnVlXG4gIH0sXG4gIGJhY2tncm91bmRQb3NpdGlvbjoge1xuICAgIGJhY2tncm91bmRQb3NpdGlvblg6IHRydWUsXG4gICAgYmFja2dyb3VuZFBvc2l0aW9uWTogdHJ1ZVxuICB9LFxuICBib3JkZXI6IHtcbiAgICBib3JkZXJXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJCb3R0b206IHtcbiAgICBib3JkZXJCb3R0b21XaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21TdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJCb3R0b21Db2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJMZWZ0OiB7XG4gICAgYm9yZGVyTGVmdFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlckxlZnRTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJMZWZ0Q29sb3I6IHRydWVcbiAgfSxcbiAgYm9yZGVyUmlnaHQ6IHtcbiAgICBib3JkZXJSaWdodFdpZHRoOiB0cnVlLFxuICAgIGJvcmRlclJpZ2h0U3R5bGU6IHRydWUsXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogdHJ1ZVxuICB9LFxuICBib3JkZXJUb3A6IHtcbiAgICBib3JkZXJUb3BXaWR0aDogdHJ1ZSxcbiAgICBib3JkZXJUb3BTdHlsZTogdHJ1ZSxcbiAgICBib3JkZXJUb3BDb2xvcjogdHJ1ZVxuICB9LFxuICBmb250OiB7XG4gICAgZm9udFN0eWxlOiB0cnVlLFxuICAgIGZvbnRWYXJpYW50OiB0cnVlLFxuICAgIGZvbnRXZWlnaHQ6IHRydWUsXG4gICAgZm9udFNpemU6IHRydWUsXG4gICAgbGluZUhlaWdodDogdHJ1ZSxcbiAgICBmb250RmFtaWx5OiB0cnVlXG4gIH0sXG4gIG91dGxpbmU6IHtcbiAgICBvdXRsaW5lV2lkdGg6IHRydWUsXG4gICAgb3V0bGluZVN0eWxlOiB0cnVlLFxuICAgIG91dGxpbmVDb2xvcjogdHJ1ZVxuICB9XG59O1xuXG52YXIgQ1NTUHJvcGVydHkgPSB7XG4gIGlzVW5pdGxlc3NOdW1iZXI6IGlzVW5pdGxlc3NOdW1iZXIsXG4gIHNob3J0aGFuZFByb3BlcnR5RXhwYW5zaW9uczogc2hvcnRoYW5kUHJvcGVydHlFeHBhbnNpb25zXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5OyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgQ1NTUHJvcGVydHkgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5Jyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgaXNVbml0bGVzc051bWJlciA9IENTU1Byb3BlcnR5LmlzVW5pdGxlc3NOdW1iZXI7XG4gIHZhciBzdHlsZVdhcm5pbmdzID0ge307XG4gIGZ1bmN0aW9uIGRhbmdlcm91c1N0eWxlVmFsdWUobmFtZSwgdmFsdWUsIGNvbXBvbmVudCkge1xuICAgIHZhciBpc0VtcHR5ID0gdmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyB8fCB2YWx1ZSA9PT0gJyc7XG4gICAgaWYgKGlzRW1wdHkpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIGlzTm9uTnVtZXJpYyA9IGlzTmFOKHZhbHVlKTtcbiAgICBpZiAoaXNOb25OdW1lcmljIHx8IHZhbHVlID09PSAwIHx8IGlzVW5pdGxlc3NOdW1iZXIuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgaXNVbml0bGVzc051bWJlcltuYW1lXSkge1xuICAgICAgcmV0dXJuICcnICsgdmFsdWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAgICAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgICAgdmFyIG93bmVyTmFtZSA9IG93bmVyID8gb3duZXIuZ2V0TmFtZSgpIDogbnVsbDtcbiAgICAgICAgICBpZiAob3duZXJOYW1lICYmICFzdHlsZVdhcm5pbmdzW293bmVyTmFtZV0pIHtcbiAgICAgICAgICAgIHN0eWxlV2FybmluZ3Nbb3duZXJOYW1lXSA9IHt9O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgd2FybmVkID0gZmFsc2U7XG4gICAgICAgICAgaWYgKG93bmVyTmFtZSkge1xuICAgICAgICAgICAgdmFyIHdhcm5pbmdzID0gc3R5bGVXYXJuaW5nc1tvd25lck5hbWVdO1xuICAgICAgICAgICAgd2FybmVkID0gd2FybmluZ3NbbmFtZV07XG4gICAgICAgICAgICBpZiAoIXdhcm5lZCkge1xuICAgICAgICAgICAgICB3YXJuaW5nc1tuYW1lXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghd2FybmVkKSB7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2EgYCVzYCB0YWcgKG93bmVyOiBgJXNgKSB3YXMgcGFzc2VkIGEgbnVtZXJpYyBzdHJpbmcgdmFsdWUgJyArICdmb3IgQ1NTIHByb3BlcnR5IGAlc2AgKHZhbHVlOiBgJXNgKSB3aGljaCB3aWxsIGJlIHRyZWF0ZWQgJyArICdhcyBhIHVuaXRsZXNzIG51bWJlciBpbiBhIGZ1dHVyZSB2ZXJzaW9uIG9mIFJlYWN0LicsIGNvbXBvbmVudC5fY3VycmVudEVsZW1lbnQudHlwZSwgb3duZXJOYW1lIHx8ICd1bmtub3duJywgbmFtZSwgdmFsdWUpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZSArICdweCc7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBkYW5nZXJvdXNTdHlsZVZhbHVlO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG52YXIgX3VwcGVyY2FzZVBhdHRlcm4gPSAvKFtBLVpdKS9nO1xuXG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIHN0cmluZywgZm9yIGV4YW1wbGU6XG4gKlxuICogICA+IGh5cGhlbmF0ZSgnYmFja2dyb3VuZENvbG9yJylcbiAqICAgPCBcImJhY2tncm91bmQtY29sb3JcIlxuICpcbiAqIEZvciBDU1Mgc3R5bGUgbmFtZXMsIHVzZSBgaHlwaGVuYXRlU3R5bGVOYW1lYCBpbnN0ZWFkIHdoaWNoIHdvcmtzIHByb3Blcmx5XG4gKiB3aXRoIGFsbCB2ZW5kb3IgcHJlZml4ZXMsIGluY2x1ZGluZyBgbXNgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gaHlwaGVuYXRlKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoX3VwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGh5cGhlbmF0ZTsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBoeXBoZW5hdGUgPSByZXF1aXJlKCcuL2h5cGhlbmF0ZScpO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShzdHJpbmcpIHtcbiAgcmV0dXJuIGh5cGhlbmF0ZShzdHJpbmcpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBoeXBoZW5hdGVTdHlsZU5hbWU7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHR5cGVjaGVja3Mgc3RhdGljLW9ubHlcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogTWVtb2l6ZXMgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBvbmUgc3RyaW5nIGFyZ3VtZW50LlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJuIHtmdW5jdGlvbn1cbiAqL1xuXG5mdW5jdGlvbiBtZW1vaXplU3RyaW5nT25seShjYWxsYmFjaykge1xuICB2YXIgY2FjaGUgPSB7fTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICBpZiAoIWNhY2hlLmhhc093blByb3BlcnR5KHN0cmluZykpIHtcbiAgICAgIGNhY2hlW3N0cmluZ10gPSBjYWxsYmFjay5jYWxsKHRoaXMsIHN0cmluZyk7XG4gICAgfVxuICAgIHJldHVybiBjYWNoZVtzdHJpbmddO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVTdHJpbmdPbmx5OyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgQ1NTUHJvcGVydHkgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5Jyk7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG4gIHZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcbiAgdmFyIGNhbWVsaXplU3R5bGVOYW1lID0gcmVxdWlyZSgnZmJqcy9saWIvY2FtZWxpemVTdHlsZU5hbWUnKTtcbiAgdmFyIGRhbmdlcm91c1N0eWxlVmFsdWUgPSByZXF1aXJlKCcuL2Rhbmdlcm91c1N0eWxlVmFsdWUnKTtcbiAgdmFyIGh5cGhlbmF0ZVN0eWxlTmFtZSA9IHJlcXVpcmUoJ2ZianMvbGliL2h5cGhlbmF0ZVN0eWxlTmFtZScpO1xuICB2YXIgbWVtb2l6ZVN0cmluZ09ubHkgPSByZXF1aXJlKCdmYmpzL2xpYi9tZW1vaXplU3RyaW5nT25seScpO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgdmFyIHByb2Nlc3NTdHlsZU5hbWUgPSBtZW1vaXplU3RyaW5nT25seShmdW5jdGlvbihzdHlsZU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlU3R5bGVOYW1lKHN0eWxlTmFtZSk7XG4gIH0pO1xuICB2YXIgaGFzU2hvcnRoYW5kUHJvcGVydHlCdWcgPSBmYWxzZTtcbiAgdmFyIHN0eWxlRmxvYXRBY2Nlc3NvciA9ICdjc3NGbG9hdCc7XG4gIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICB2YXIgdGVtcFN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gICAgdHJ5IHtcbiAgICAgIHRlbXBTdHlsZS5mb250ID0gJyc7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFzU2hvcnRoYW5kUHJvcGVydHlCdWcgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmNzc0Zsb2F0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0eWxlRmxvYXRBY2Nlc3NvciA9ICdzdHlsZUZsb2F0JztcbiAgICB9XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuID0gL14oPzp3ZWJraXR8bW96fG8pW0EtWl0vO1xuICAgIHZhciBiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4gPSAvO1xccyokLztcbiAgICB2YXIgd2FybmVkU3R5bGVOYW1lcyA9IHt9O1xuICAgIHZhciB3YXJuZWRTdHlsZVZhbHVlcyA9IHt9O1xuICAgIHZhciB3YXJuZWRGb3JOYU5WYWx1ZSA9IGZhbHNlO1xuICAgIHZhciB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUsIG93bmVyKSB7XG4gICAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCBzdHlsZSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPyVzJywgbmFtZSwgY2FtZWxpemVTdHlsZU5hbWUobmFtZSksIGNoZWNrUmVuZGVyTWVzc2FnZShvd25lcikpIDogdm9pZCAwO1xuICAgIH07XG4gICAgdmFyIHdhcm5CYWRWZW5kb3JlZFN0eWxlTmFtZSA9IGZ1bmN0aW9uKG5hbWUsIG93bmVyKSB7XG4gICAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdVbnN1cHBvcnRlZCB2ZW5kb3ItcHJlZml4ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8lcycsIG5hbWUsIG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpKSA6IHZvaWQgMDtcbiAgICB9O1xuICAgIHZhciB3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24gPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgb3duZXIpIHtcbiAgICAgIGlmICh3YXJuZWRTdHlsZVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgJiYgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdhcm5lZFN0eWxlVmFsdWVzW3ZhbHVlXSA9IHRydWU7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1N0eWxlIHByb3BlcnR5IHZhbHVlcyBzaG91bGRuXFwndCBjb250YWluIGEgc2VtaWNvbG9uLiVzICcgKyAnVHJ5IFwiJXM6ICVzXCIgaW5zdGVhZC4nLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpLCBuYW1lLCB2YWx1ZS5yZXBsYWNlKGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiwgJycpKSA6IHZvaWQgMDtcbiAgICB9O1xuICAgIHZhciB3YXJuU3R5bGVWYWx1ZUlzTmFOID0gZnVuY3Rpb24obmFtZSwgdmFsdWUsIG93bmVyKSB7XG4gICAgICBpZiAod2FybmVkRm9yTmFOVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2FybmVkRm9yTmFOVmFsdWUgPSB0cnVlO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgTmFOYCBpcyBhbiBpbnZhbGlkIHZhbHVlIGZvciB0aGUgYCVzYCBjc3Mgc3R5bGUgcHJvcGVydHkuJXMnLCBuYW1lLCBjaGVja1JlbmRlck1lc3NhZ2Uob3duZXIpKSA6IHZvaWQgMDtcbiAgICB9O1xuICAgIHZhciBjaGVja1JlbmRlck1lc3NhZ2UgPSBmdW5jdGlvbihvd25lcikge1xuICAgICAgaWYgKG93bmVyKSB7XG4gICAgICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9O1xuICAgIHZhciB3YXJuVmFsaWRTdHlsZSA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBjb21wb25lbnQpIHtcbiAgICAgIHZhciBvd25lcjtcbiAgICAgIGlmIChjb21wb25lbnQpIHtcbiAgICAgICAgb3duZXIgPSBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICAgIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lKG5hbWUsIG93bmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuLnRlc3QobmFtZSkpIHtcbiAgICAgICAgd2FybkJhZFZlbmRvcmVkU3R5bGVOYW1lKG5hbWUsIG93bmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbihuYW1lLCB2YWx1ZSwgb3duZXIpO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsdWUpKSB7XG4gICAgICAgIHdhcm5TdHlsZVZhbHVlSXNOYU4obmFtZSwgdmFsdWUsIG93bmVyKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSB7XG4gICAgY3JlYXRlTWFya3VwRm9yU3R5bGVzOiBmdW5jdGlvbihzdHlsZXMsIGNvbXBvbmVudCkge1xuICAgICAgdmFyIHNlcmlhbGl6ZWQgPSAnJztcbiAgICAgIGZvciAodmFyIHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgd2FyblZhbGlkU3R5bGUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlLCBjb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdHlsZVZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICBzZXJpYWxpemVkICs9IHByb2Nlc3NTdHlsZU5hbWUoc3R5bGVOYW1lKSArICc6JztcbiAgICAgICAgICBzZXJpYWxpemVkICs9IGRhbmdlcm91c1N0eWxlVmFsdWUoc3R5bGVOYW1lLCBzdHlsZVZhbHVlLCBjb21wb25lbnQpICsgJzsnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VyaWFsaXplZCB8fCBudWxsO1xuICAgIH0sXG4gICAgc2V0VmFsdWVGb3JTdHlsZXM6IGZ1bmN0aW9uKG5vZGUsIHN0eWxlcywgY29tcG9uZW50KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25OYXRpdmVPcGVyYXRpb24oY29tcG9uZW50Ll9kZWJ1Z0lELCAndXBkYXRlIHN0eWxlcycsIHN0eWxlcyk7XG4gICAgICB9XG4gICAgICB2YXIgc3R5bGUgPSBub2RlLnN0eWxlO1xuICAgICAgZm9yICh2YXIgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgICAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdLCBjb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzdHlsZVZhbHVlID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdLCBjb21wb25lbnQpO1xuICAgICAgICBpZiAoc3R5bGVOYW1lID09PSAnZmxvYXQnIHx8IHN0eWxlTmFtZSA9PT0gJ2Nzc0Zsb2F0Jykge1xuICAgICAgICAgIHN0eWxlTmFtZSA9IHN0eWxlRmxvYXRBY2Nlc3NvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGVWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZVZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBleHBhbnNpb24gPSBoYXNTaG9ydGhhbmRQcm9wZXJ0eUJ1ZyAmJiBDU1NQcm9wZXJ0eS5zaG9ydGhhbmRQcm9wZXJ0eUV4cGFuc2lvbnNbc3R5bGVOYW1lXTtcbiAgICAgICAgICBpZiAoZXhwYW5zaW9uKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpbmRpdmlkdWFsU3R5bGVOYW1lIGluIGV4cGFuc2lvbikge1xuICAgICAgICAgICAgICBzdHlsZVtpbmRpdmlkdWFsU3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdHlsZVtzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IENTU1Byb3BlcnR5T3BlcmF0aW9ucztcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zJyk7XG4gIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xuICB2YXIgUmVhY3RET01JRE9wZXJhdGlvbnMgPSB7ZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzOiBmdW5jdGlvbihwYXJlbnRJbnN0LCB1cGRhdGVzKSB7XG4gICAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHBhcmVudEluc3QpO1xuICAgICAgRE9NQ2hpbGRyZW5PcGVyYXRpb25zLnByb2Nlc3NVcGRhdGVzKG5vZGUsIHVwZGF0ZXMpO1xuICAgIH19O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSURPcGVyYXRpb25zO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0gcmVxdWlyZSgnLi9ET01DaGlsZHJlbk9wZXJhdGlvbnMnKTtcbiAgdmFyIFJlYWN0RE9NSURPcGVyYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdERPTUlET3BlcmF0aW9ucycpO1xuICB2YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPSB7XG4gICAgcHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogUmVhY3RET01JRE9wZXJhdGlvbnMuZGFuZ2Vyb3VzbHlQcm9jZXNzQ2hpbGRyZW5VcGRhdGVzLFxuICAgIHJlcGxhY2VOb2RlV2l0aE1hcmt1cDogRE9NQ2hpbGRyZW5PcGVyYXRpb25zLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwLFxuICAgIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogZnVuY3Rpb24ocm9vdE5vZGVJRCkge31cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBEaXNhYmxlZElucHV0VXRpbHMgPSByZXF1aXJlKCcuL0Rpc2FibGVkSW5wdXRVdGlscycpO1xudmFyIFJlYWN0RE9NQnV0dG9uID0ge2dldE5hdGl2ZVByb3BzOiBEaXNhYmxlZElucHV0VXRpbHMuZ2V0TmF0aXZlUHJvcHN9O1xubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUJ1dHRvbjtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbiAgdmFyIERpc2FibGVkSW5wdXRVdGlscyA9IHJlcXVpcmUoJy4vRGlzYWJsZWRJbnB1dFV0aWxzJyk7XG4gIHZhciBET01Qcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5T3BlcmF0aW9ucycpO1xuICB2YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoJy4vTGlua2VkVmFsdWVVdGlscycpO1xuICB2YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbiAgdmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIHZhciBkaWRXYXJuVmFsdWVMaW5rID0gZmFsc2U7XG4gIHZhciBkaWRXYXJuQ2hlY2tlZExpbmsgPSBmYWxzZTtcbiAgdmFyIGRpZFdhcm5WYWx1ZU51bGwgPSBmYWxzZTtcbiAgdmFyIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IGZhbHNlO1xuICB2YXIgZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCA9IGZhbHNlO1xuICB2YXIgZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCA9IGZhbHNlO1xuICB2YXIgZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBmb3JjZVVwZGF0ZUlmTW91bnRlZCgpIHtcbiAgICBpZiAodGhpcy5fcm9vdE5vZGVJRCkge1xuICAgICAgUmVhY3RET01JbnB1dC51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB3YXJuSWZWYWx1ZUlzTnVsbChwcm9wcykge1xuICAgIGlmIChwcm9wcyAhPSBudWxsICYmIHByb3BzLnZhbHVlID09PSBudWxsICYmICFkaWRXYXJuVmFsdWVOdWxsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2B2YWx1ZWAgcHJvcCBvbiBgaW5wdXRgIHNob3VsZCBub3QgYmUgbnVsbC4gJyArICdDb25zaWRlciB1c2luZyB0aGUgZW1wdHkgc3RyaW5nIHRvIGNsZWFyIHRoZSBjb21wb25lbnQgb3IgYHVuZGVmaW5lZGAgJyArICdmb3IgdW5jb250cm9sbGVkIGNvbXBvbmVudHMuJykgOiB2b2lkIDA7XG4gICAgICBkaWRXYXJuVmFsdWVOdWxsID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgdmFyIFJlYWN0RE9NSW5wdXQgPSB7XG4gICAgZ2V0TmF0aXZlUHJvcHM6IGZ1bmN0aW9uKGluc3QsIHByb3BzKSB7XG4gICAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICAgIHZhciBjaGVja2VkID0gTGlua2VkVmFsdWVVdGlscy5nZXRDaGVja2VkKHByb3BzKTtcbiAgICAgIHZhciBuYXRpdmVQcm9wcyA9IF9hc3NpZ24oe3R5cGU6IHVuZGVmaW5lZH0sIERpc2FibGVkSW5wdXRVdGlscy5nZXROYXRpdmVQcm9wcyhpbnN0LCBwcm9wcyksIHtcbiAgICAgICAgZGVmYXVsdENoZWNrZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlLFxuICAgICAgICBjaGVja2VkOiBjaGVja2VkICE9IG51bGwgPyBjaGVja2VkIDogaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkLFxuICAgICAgICBvbkNoYW5nZTogaW5zdC5fd3JhcHBlclN0YXRlLm9uQ2hhbmdlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBuYXRpdmVQcm9wcztcbiAgICB9LFxuICAgIG1vdW50V3JhcHBlcjogZnVuY3Rpb24oaW5zdCwgcHJvcHMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIExpbmtlZFZhbHVlVXRpbHMuY2hlY2tQcm9wVHlwZXMoJ2lucHV0JywgcHJvcHMsIGluc3QuX2N1cnJlbnRFbGVtZW50Ll9vd25lcik7XG4gICAgICAgIHZhciBvd25lciA9IGluc3QuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgaWYgKHByb3BzLnZhbHVlTGluayAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVMaW5rKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgdmFsdWVMaW5rYCBwcm9wIG9uIGBpbnB1dGAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuVmFsdWVMaW5rID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMuY2hlY2tlZExpbmsgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FybkNoZWNrZWRMaW5rKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgY2hlY2tlZExpbmtgIHByb3Agb24gYGlucHV0YCBpcyBkZXByZWNhdGVkOyBzZXQgYHZhbHVlYCBhbmQgYG9uQ2hhbmdlYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgICAgICAgIGRpZFdhcm5DaGVja2VkTGluayA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzLmNoZWNrZWQgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0Q2hlY2tlZCAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyBjb250YWlucyBhbiBpbnB1dCBvZiB0eXBlICVzIHdpdGggYm90aCBjaGVja2VkIGFuZCBkZWZhdWx0Q2hlY2tlZCBwcm9wcy4gJyArICdJbnB1dCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgY2hlY2tlZCBwcm9wLCBvciB0aGUgZGVmYXVsdENoZWNrZWQgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpIDogdm9pZCAwO1xuICAgICAgICAgIGRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzIGNvbnRhaW5zIGFuIGlucHV0IG9mIHR5cGUgJXMgd2l0aCBib3RoIHZhbHVlIGFuZCBkZWZhdWx0VmFsdWUgcHJvcHMuICcgKyAnSW5wdXQgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJywgb3duZXIgJiYgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpIDogdm9pZCAwO1xuICAgICAgICAgIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgd2FybklmVmFsdWVJc051bGwocHJvcHMpO1xuICAgICAgfVxuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICAgICAgaW5pdGlhbENoZWNrZWQ6IHByb3BzLmRlZmF1bHRDaGVja2VkIHx8IGZhbHNlLFxuICAgICAgICBpbml0aWFsVmFsdWU6IGRlZmF1bHRWYWx1ZSAhPSBudWxsID8gZGVmYXVsdFZhbHVlIDogbnVsbCxcbiAgICAgICAgbGlzdGVuZXJzOiBudWxsLFxuICAgICAgICBvbkNoYW5nZTogX2hhbmRsZUNoYW5nZS5iaW5kKGluc3QpXG4gICAgICB9O1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmNvbnRyb2xsZWQgPSBwcm9wcy5jaGVja2VkICE9PSB1bmRlZmluZWQgfHwgcHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVwZGF0ZVdyYXBwZXI6IGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgIHZhciBwcm9wcyA9IGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybklmVmFsdWVJc051bGwocHJvcHMpO1xuICAgICAgICB2YXIgaW5pdGlhbFZhbHVlID0gaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkIHx8IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7XG4gICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBwcm9wcy5kZWZhdWx0Q2hlY2tlZCB8fCBwcm9wcy5kZWZhdWx0VmFsdWU7XG4gICAgICAgIHZhciBjb250cm9sbGVkID0gcHJvcHMuY2hlY2tlZCAhPT0gdW5kZWZpbmVkIHx8IHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBvd25lciA9IGluc3QuX2N1cnJlbnRFbGVtZW50Ll9vd25lcjtcbiAgICAgICAgaWYgKChpbml0aWFsVmFsdWUgfHwgIWluc3QuX3dyYXBwZXJTdGF0ZS5jb250cm9sbGVkKSAmJiBjb250cm9sbGVkICYmICFkaWRXYXJuVW5jb250cm9sbGVkVG9Db250cm9sbGVkKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyBpcyBjaGFuZ2luZyBhbiB1bmNvbnRyb2xsZWQgaW5wdXQgb2YgdHlwZSAlcyB0byBiZSBjb250cm9sbGVkLiAnICsgJ0lucHV0IGVsZW1lbnRzIHNob3VsZCBub3Qgc3dpdGNoIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiAnICsgJ0RlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4gTW9yZSBpbmZvOiBodHRwczovL2ZiLm1lL3JlYWN0LWNvbnRyb2xsZWQtY29tcG9uZW50cycsIG93bmVyICYmIG93bmVyLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnLCBwcm9wcy50eXBlKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuVW5jb250cm9sbGVkVG9Db250cm9sbGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5zdC5fd3JhcHBlclN0YXRlLmNvbnRyb2xsZWQgJiYgKGRlZmF1bHRWYWx1ZSB8fCAhY29udHJvbGxlZCkgJiYgIWRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzIGlzIGNoYW5naW5nIGEgY29udHJvbGxlZCBpbnB1dCBvZiB0eXBlICVzIHRvIGJlIHVuY29udHJvbGxlZC4gJyArICdJbnB1dCBlbGVtZW50cyBzaG91bGQgbm90IHN3aXRjaCBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gJyArICdEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0ICcgKyAnZWxlbWVudCBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBjb21wb25lbnQuIE1vcmUgaW5mbzogaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnLCBvd25lciAmJiBvd25lci5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JywgcHJvcHMudHlwZSkgOiB2b2lkIDA7XG4gICAgICAgICAgZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjaGVja2VkID0gcHJvcHMuY2hlY2tlZDtcbiAgICAgIGlmIChjaGVja2VkICE9IG51bGwpIHtcbiAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkoUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCksICdjaGVja2VkJywgY2hlY2tlZCB8fCBmYWxzZSk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpLCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcbiAgICB2YXIgbmFtZSA9IHByb3BzLm5hbWU7XG4gICAgaWYgKHByb3BzLnR5cGUgPT09ICdyYWRpbycgJiYgbmFtZSAhPSBudWxsKSB7XG4gICAgICB2YXIgcm9vdE5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0aGlzKTtcbiAgICAgIHZhciBxdWVyeVJvb3QgPSByb290Tm9kZTtcbiAgICAgIHdoaWxlIChxdWVyeVJvb3QucGFyZW50Tm9kZSkge1xuICAgICAgICBxdWVyeVJvb3QgPSBxdWVyeVJvb3QucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIHZhciBncm91cCA9IHF1ZXJ5Um9vdC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPScgKyBKU09OLnN0cmluZ2lmeSgnJyArIG5hbWUpICsgJ11bdHlwZT1cInJhZGlvXCJdJyk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBvdGhlck5vZGUgPSBncm91cFtpXTtcbiAgICAgICAgaWYgKG90aGVyTm9kZSA9PT0gcm9vdE5vZGUgfHwgb3RoZXJOb2RlLmZvcm0gIT09IHJvb3ROb2RlLmZvcm0pIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3RoZXJJbnN0YW5jZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKG90aGVyTm9kZSk7XG4gICAgICAgICFvdGhlckluc3RhbmNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0RE9NSW5wdXQ6IE1peGluZyBSZWFjdCBhbmQgbm9uLVJlYWN0IHJhZGlvIGlucHV0cyB3aXRoIHRoZSAnICsgJ3NhbWUgYG5hbWVgIGlzIG5vdCBzdXBwb3J0ZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBSZWFjdFVwZGF0ZXMuYXNhcChmb3JjZVVwZGF0ZUlmTW91bnRlZCwgb3RoZXJJbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NSW5wdXQ7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuICB2YXIgUmVhY3RDaGlsZHJlbiA9IHJlcXVpcmUoJy4vUmVhY3RDaGlsZHJlbicpO1xuICB2YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbiAgdmFyIFJlYWN0RE9NU2VsZWN0ID0gcmVxdWlyZSgnLi9SZWFjdERPTVNlbGVjdCcpO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgdmFyIFJlYWN0RE9NT3B0aW9uID0ge1xuICAgIG1vdW50V3JhcHBlcjogZnVuY3Rpb24oaW5zdCwgcHJvcHMsIG5hdGl2ZVBhcmVudCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHJvcHMuc2VsZWN0ZWQgPT0gbnVsbCwgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBvbiA8c2VsZWN0PiBpbnN0ZWFkIG9mICcgKyAnc2V0dGluZyBgc2VsZWN0ZWRgIG9uIDxvcHRpb24+LicpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgdmFyIHNlbGVjdFZhbHVlID0gbnVsbDtcbiAgICAgIGlmIChuYXRpdmVQYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICB2YXIgc2VsZWN0UGFyZW50ID0gbmF0aXZlUGFyZW50O1xuICAgICAgICBpZiAoc2VsZWN0UGFyZW50Ll90YWcgPT09ICdvcHRncm91cCcpIHtcbiAgICAgICAgICBzZWxlY3RQYXJlbnQgPSBzZWxlY3RQYXJlbnQuX25hdGl2ZVBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VsZWN0UGFyZW50ICE9IG51bGwgJiYgc2VsZWN0UGFyZW50Ll90YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgICAgc2VsZWN0VmFsdWUgPSBSZWFjdERPTVNlbGVjdC5nZXRTZWxlY3RWYWx1ZUNvbnRleHQoc2VsZWN0UGFyZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHNlbGVjdGVkID0gbnVsbDtcbiAgICAgIGlmIChzZWxlY3RWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdFZhbHVlKSkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0VmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICgnJyArIHNlbGVjdFZhbHVlW2ldID09PSAnJyArIHByb3BzLnZhbHVlKSB7XG4gICAgICAgICAgICAgIHNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGVjdGVkID0gJycgKyBzZWxlY3RWYWx1ZSA9PT0gJycgKyBwcm9wcy52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge3NlbGVjdGVkOiBzZWxlY3RlZH07XG4gICAgfSxcbiAgICBwb3N0TW91bnRXcmFwcGVyOiBmdW5jdGlvbihpbnN0KSB7XG4gICAgICB2YXIgcHJvcHMgPSBpbnN0Ll9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgIGlmIChwcm9wcy52YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBub2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCk7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHByb3BzLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbihpbnN0LCBwcm9wcykge1xuICAgICAgdmFyIG5hdGl2ZVByb3BzID0gX2Fzc2lnbih7XG4gICAgICAgIHNlbGVjdGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGNoaWxkcmVuOiB1bmRlZmluZWRcbiAgICAgIH0sIHByb3BzKTtcbiAgICAgIGlmIChpbnN0Ll93cmFwcGVyU3RhdGUuc2VsZWN0ZWQgIT0gbnVsbCkge1xuICAgICAgICBuYXRpdmVQcm9wcy5zZWxlY3RlZCA9IGluc3QuX3dyYXBwZXJTdGF0ZS5zZWxlY3RlZDtcbiAgICAgIH1cbiAgICAgIHZhciBjb250ZW50ID0gJyc7XG4gICAgICBSZWFjdENoaWxkcmVuLmZvckVhY2gocHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZCA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBjb250ZW50ICs9IGNoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnT25seSBzdHJpbmdzIGFuZCBudW1iZXJzIGFyZSBzdXBwb3J0ZWQgYXMgPG9wdGlvbj4gY2hpbGRyZW4uJykgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGNvbnRlbnQpIHtcbiAgICAgICAgbmF0aXZlUHJvcHMuY2hpbGRyZW4gPSBjb250ZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVByb3BzO1xuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTU9wdGlvbjtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG4gIHZhciBEaXNhYmxlZElucHV0VXRpbHMgPSByZXF1aXJlKCcuL0Rpc2FibGVkSW5wdXRVdGlscycpO1xuICB2YXIgTGlua2VkVmFsdWVVdGlscyA9IHJlcXVpcmUoJy4vTGlua2VkVmFsdWVVdGlscycpO1xuICB2YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbiAgdmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgZGlkV2FyblZhbHVlTGluayA9IGZhbHNlO1xuICB2YXIgZGlkV2FyblZhbHVlTnVsbCA9IGZhbHNlO1xuICB2YXIgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlID0gZmFsc2U7XG4gIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkKCkge1xuICAgIGlmICh0aGlzLl9yb290Tm9kZUlEICYmIHRoaXMuX3dyYXBwZXJTdGF0ZS5wZW5kaW5nVXBkYXRlKSB7XG4gICAgICB0aGlzLl93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHVwZGF0ZU9wdGlvbnModGhpcywgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSB7XG4gICAgaWYgKG93bmVyKSB7XG4gICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuICBmdW5jdGlvbiB3YXJuSWZWYWx1ZUlzTnVsbChwcm9wcykge1xuICAgIGlmIChwcm9wcyAhPSBudWxsICYmIHByb3BzLnZhbHVlID09PSBudWxsICYmICFkaWRXYXJuVmFsdWVOdWxsKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2B2YWx1ZWAgcHJvcCBvbiBgc2VsZWN0YCBzaG91bGQgbm90IGJlIG51bGwuICcgKyAnQ29uc2lkZXIgdXNpbmcgdGhlIGVtcHR5IHN0cmluZyB0byBjbGVhciB0aGUgY29tcG9uZW50IG9yIGB1bmRlZmluZWRgICcgKyAnZm9yIHVuY29udHJvbGxlZCBjb21wb25lbnRzLicpIDogdm9pZCAwO1xuICAgICAgZGlkV2FyblZhbHVlTnVsbCA9IHRydWU7XG4gICAgfVxuICB9XG4gIHZhciB2YWx1ZVByb3BOYW1lcyA9IFsndmFsdWUnLCAnZGVmYXVsdFZhbHVlJ107XG4gIGZ1bmN0aW9uIGNoZWNrU2VsZWN0UHJvcFR5cGVzKGluc3QsIHByb3BzKSB7XG4gICAgdmFyIG93bmVyID0gaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgIExpbmtlZFZhbHVlVXRpbHMuY2hlY2tQcm9wVHlwZXMoJ3NlbGVjdCcsIHByb3BzLCBvd25lcik7XG4gICAgaWYgKHByb3BzLnZhbHVlTGluayAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVMaW5rKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2B2YWx1ZUxpbmtgIHByb3Agb24gYHNlbGVjdGAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgIGRpZFdhcm5WYWx1ZUxpbmsgPSB0cnVlO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlUHJvcE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcHJvcE5hbWUgPSB2YWx1ZVByb3BOYW1lc1tpXTtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhBcnJheS5pc0FycmF5KHByb3BzW3Byb3BOYW1lXSksICdUaGUgYCVzYCBwcm9wIHN1cHBsaWVkIHRvIDxzZWxlY3Q+IG11c3QgYmUgYW4gYXJyYXkgaWYgJyArICdgbXVsdGlwbGVgIGlzIHRydWUuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSkgOiB2b2lkIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghQXJyYXkuaXNBcnJheShwcm9wc1twcm9wTmFtZV0pLCAnVGhlIGAlc2AgcHJvcCBzdXBwbGllZCB0byA8c2VsZWN0PiBtdXN0IGJlIGEgc2NhbGFyICcgKyAndmFsdWUgaWYgYG11bHRpcGxlYCBpcyBmYWxzZS4lcycsIHByb3BOYW1lLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlT3B0aW9ucyhpbnN0LCBtdWx0aXBsZSwgcHJvcFZhbHVlKSB7XG4gICAgdmFyIHNlbGVjdGVkVmFsdWUsXG4gICAgICAgIGk7XG4gICAgdmFyIG9wdGlvbnMgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KS5vcHRpb25zO1xuICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWRWYWx1ZSA9IHt9O1xuICAgICAgZm9yIChpID0gMDsgaSA8IHByb3BWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBzZWxlY3RlZFZhbHVlWycnICsgcHJvcFZhbHVlW2ldXSA9IHRydWU7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc2VsZWN0ZWQgPSBzZWxlY3RlZFZhbHVlLmhhc093blByb3BlcnR5KG9wdGlvbnNbaV0udmFsdWUpO1xuICAgICAgICBpZiAob3B0aW9uc1tpXS5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRWYWx1ZSA9ICcnICsgcHJvcFZhbHVlO1xuICAgICAgZm9yIChpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKG9wdGlvbnNbaV0udmFsdWUgPT09IHNlbGVjdGVkVmFsdWUpIHtcbiAgICAgICAgICBvcHRpb25zW2ldLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmxlbmd0aCkge1xuICAgICAgICBvcHRpb25zWzBdLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdmFyIFJlYWN0RE9NU2VsZWN0ID0ge1xuICAgIGdldE5hdGl2ZVByb3BzOiBmdW5jdGlvbihpbnN0LCBwcm9wcykge1xuICAgICAgcmV0dXJuIF9hc3NpZ24oe30sIERpc2FibGVkSW5wdXRVdGlscy5nZXROYXRpdmVQcm9wcyhpbnN0LCBwcm9wcyksIHtcbiAgICAgICAgb25DaGFuZ2U6IGluc3QuX3dyYXBwZXJTdGF0ZS5vbkNoYW5nZSxcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBtb3VudFdyYXBwZXI6IGZ1bmN0aW9uKGluc3QsIHByb3BzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjaGVja1NlbGVjdFByb3BUeXBlcyhpbnN0LCBwcm9wcyk7XG4gICAgICAgIHdhcm5JZlZhbHVlSXNOdWxsKHByb3BzKTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IExpbmtlZFZhbHVlVXRpbHMuZ2V0VmFsdWUocHJvcHMpO1xuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgICBwZW5kaW5nVXBkYXRlOiBmYWxzZSxcbiAgICAgICAgaW5pdGlhbFZhbHVlOiB2YWx1ZSAhPSBudWxsID8gdmFsdWUgOiBwcm9wcy5kZWZhdWx0VmFsdWUsXG4gICAgICAgIGxpc3RlbmVyczogbnVsbCxcbiAgICAgICAgb25DaGFuZ2U6IF9oYW5kbGVDaGFuZ2UuYmluZChpbnN0KSxcbiAgICAgICAgd2FzTXVsdGlwbGU6IEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpXG4gICAgICB9O1xuICAgICAgaWYgKHByb3BzLnZhbHVlICE9PSB1bmRlZmluZWQgJiYgcHJvcHMuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1NlbGVjdCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgc2VsZWN0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJykgOiB2b2lkIDA7XG4gICAgICAgIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRTZWxlY3RWYWx1ZUNvbnRleHQ6IGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgIHJldHVybiBpbnN0Ll93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO1xuICAgIH0sXG4gICAgcG9zdFVwZGF0ZVdyYXBwZXI6IGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgIHZhciBwcm9wcyA9IGluc3QuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybklmVmFsdWVJc051bGwocHJvcHMpO1xuICAgICAgfVxuICAgICAgaW5zdC5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHZhciB3YXNNdWx0aXBsZSA9IGluc3QuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtcbiAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSA9IEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpO1xuICAgICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSA9IGZhbHNlO1xuICAgICAgICB1cGRhdGVPcHRpb25zKGluc3QsIEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHdhc011bHRpcGxlICE9PSBCb29sZWFuKHByb3BzLm11bHRpcGxlKSkge1xuICAgICAgICBpZiAocHJvcHMuZGVmYXVsdFZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICB1cGRhdGVPcHRpb25zKGluc3QsIEJvb2xlYW4ocHJvcHMubXVsdGlwbGUpLCBwcm9wcy5kZWZhdWx0VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHVwZGF0ZU9wdGlvbnMoaW5zdCwgQm9vbGVhbihwcm9wcy5tdWx0aXBsZSksIHByb3BzLm11bHRpcGxlID8gW10gOiAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuICAgIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgICB0aGlzLl93cmFwcGVyU3RhdGUucGVuZGluZ1VwZGF0ZSA9IHRydWU7XG4gICAgfVxuICAgIFJlYWN0VXBkYXRlcy5hc2FwKHVwZGF0ZU9wdGlvbnNJZlBlbmRpbmdVcGRhdGVBbmRNb3VudGVkLCB0aGlzKTtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVNlbGVjdDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgRGlzYWJsZWRJbnB1dFV0aWxzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGlzYWJsZWFibGVNb3VzZUxpc3RlbmVyTmFtZXMgPSB7XG4gIG9uQ2xpY2s6IHRydWUsXG4gIG9uRG91YmxlQ2xpY2s6IHRydWUsXG4gIG9uTW91c2VEb3duOiB0cnVlLFxuICBvbk1vdXNlTW92ZTogdHJ1ZSxcbiAgb25Nb3VzZVVwOiB0cnVlLFxuXG4gIG9uQ2xpY2tDYXB0dXJlOiB0cnVlLFxuICBvbkRvdWJsZUNsaWNrQ2FwdHVyZTogdHJ1ZSxcbiAgb25Nb3VzZURvd25DYXB0dXJlOiB0cnVlLFxuICBvbk1vdXNlTW92ZUNhcHR1cmU6IHRydWUsXG4gIG9uTW91c2VVcENhcHR1cmU6IHRydWVcbn07XG5cbi8qKlxuICogSW1wbGVtZW50cyBhIG5hdGl2ZSBjb21wb25lbnQgdGhhdCBkb2VzIG5vdCByZWNlaXZlIG1vdXNlIGV2ZW50c1xuICogd2hlbiBgZGlzYWJsZWRgIGlzIHNldC5cbiAqL1xudmFyIERpc2FibGVkSW5wdXRVdGlscyA9IHtcbiAgZ2V0TmF0aXZlUHJvcHM6IGZ1bmN0aW9uIChpbnN0LCBwcm9wcykge1xuICAgIGlmICghcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9XG5cbiAgICAvLyBDb3B5IHRoZSBwcm9wcywgZXhjZXB0IHRoZSBtb3VzZSBsaXN0ZW5lcnNcbiAgICB2YXIgbmF0aXZlUHJvcHMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICAgIGlmICghZGlzYWJsZWFibGVNb3VzZUxpc3RlbmVyTmFtZXNba2V5XSAmJiBwcm9wcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIG5hdGl2ZVByb3BzW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBuYXRpdmVQcm9wcztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEaXNhYmxlZElucHV0VXRpbHM7IiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbiAgdmFyIEV2ZW50UGx1Z2luUmVnaXN0cnkgPSByZXF1aXJlKCcuL0V2ZW50UGx1Z2luUmVnaXN0cnknKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHJlYWN0UHJvcHMgPSB7XG4gICAgICBjaGlsZHJlbjogdHJ1ZSxcbiAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MOiB0cnVlLFxuICAgICAga2V5OiB0cnVlLFxuICAgICAgcmVmOiB0cnVlXG4gICAgfTtcbiAgICB2YXIgd2FybmVkUHJvcGVydGllcyA9IHt9O1xuICAgIHZhciB3YXJuVW5rbm93blByb3BlcnR5ID0gZnVuY3Rpb24obmFtZSkge1xuICAgICAgaWYgKERPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkobmFtZSkgfHwgRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHJlYWN0UHJvcHMuaGFzT3duUHJvcGVydHkobmFtZSkgJiYgcmVhY3RQcm9wc1tuYW1lXSB8fCB3YXJuZWRQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgd2FybmVkUHJvcGVydGllc1tuYW1lXSA9IHRydWU7XG4gICAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICB2YXIgc3RhbmRhcmROYW1lID0gRE9NUHJvcGVydHkuaXNDdXN0b21BdHRyaWJ1dGUobG93ZXJDYXNlZE5hbWUpID8gbG93ZXJDYXNlZE5hbWUgOiBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZS5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VkTmFtZSkgPyBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVtsb3dlckNhc2VkTmFtZV0gOiBudWxsO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoc3RhbmRhcmROYW1lID09IG51bGwsICdVbmtub3duIERPTSBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuICVzPycsIG5hbWUsIHN0YW5kYXJkTmFtZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lcy5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VkTmFtZSkgPyBFdmVudFBsdWdpblJlZ2lzdHJ5LnBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXNbbG93ZXJDYXNlZE5hbWVdIDogbnVsbDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHJlZ2lzdHJhdGlvbk5hbWUgPT0gbnVsbCwgJ1Vua25vd24gZXZlbnQgaGFuZGxlciBwcm9wZXJ0eSAlcy4gRGlkIHlvdSBtZWFuIGAlc2A/JywgbmFtZSwgcmVnaXN0cmF0aW9uTmFtZSkgOiB2b2lkIDA7XG4gICAgfTtcbiAgfVxuICB2YXIgUmVhY3RET01Vbmtub3duUHJvcGVydHlEZXZ0b29sID0ge1xuICAgIG9uQ3JlYXRlTWFya3VwRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICB3YXJuVW5rbm93blByb3BlcnR5KG5hbWUpO1xuICAgIH0sXG4gICAgb25TZXRWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbihub2RlLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9LFxuICAgIG9uRGVsZXRlVmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICAgICAgd2FyblVua25vd25Qcm9wZXJ0eShuYW1lKTtcbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Vbmtub3duUHJvcGVydHlEZXZ0b29sO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgUmVhY3RET01Vbmtub3duUHJvcGVydHlEZXZ0b29sID0gcmVxdWlyZSgnLi9SZWFjdERPTVVua25vd25Qcm9wZXJ0eURldnRvb2wnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIHZhciBldmVudEhhbmRsZXJzID0gW107XG4gIHZhciBoYW5kbGVyRG9lc1Rocm93Rm9yRXZlbnQgPSB7fTtcbiAgZnVuY3Rpb24gZW1pdEV2ZW50KGhhbmRsZXJGdW5jdGlvbk5hbWUsIGFyZzEsIGFyZzIsIGFyZzMsIGFyZzQsIGFyZzUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZXZlbnRIYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoaGFuZGxlcltoYW5kbGVyRnVuY3Rpb25OYW1lXSkge1xuICAgICAgICAgICAgaGFuZGxlcltoYW5kbGVyRnVuY3Rpb25OYW1lXShhcmcxLCBhcmcyLCBhcmczLCBhcmc0LCBhcmc1KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaGFuZGxlckRvZXNUaHJvd0ZvckV2ZW50W2hhbmRsZXJGdW5jdGlvbk5hbWVdLCAnZXhjZXB0aW9uIHRocm93biBieSBkZXZ0b29sIHdoaWxlIGhhbmRsaW5nICVzOiAlcycsIGhhbmRsZXJGdW5jdGlvbk5hbWUsIGUubWVzc2FnZSkgOiB2b2lkIDA7XG4gICAgICAgICAgaGFuZGxlckRvZXNUaHJvd0ZvckV2ZW50W2hhbmRsZXJGdW5jdGlvbk5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHZhciBSZWFjdERPTURlYnVnVG9vbCA9IHtcbiAgICBhZGREZXZ0b29sOiBmdW5jdGlvbihkZXZ0b29sKSB7XG4gICAgICBldmVudEhhbmRsZXJzLnB1c2goZGV2dG9vbCk7XG4gICAgfSxcbiAgICByZW1vdmVEZXZ0b29sOiBmdW5jdGlvbihkZXZ0b29sKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50SGFuZGxlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGV2ZW50SGFuZGxlcnNbaV0gPT09IGRldnRvb2wpIHtcbiAgICAgICAgICBldmVudEhhbmRsZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG9uQ3JlYXRlTWFya3VwRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICBlbWl0RXZlbnQoJ29uQ3JlYXRlTWFya3VwRm9yUHJvcGVydHknLCBuYW1lLCB2YWx1ZSk7XG4gICAgfSxcbiAgICBvblNldFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgICBlbWl0RXZlbnQoJ29uU2V0VmFsdWVGb3JQcm9wZXJ0eScsIG5vZGUsIG5hbWUsIHZhbHVlKTtcbiAgICB9LFxuICAgIG9uRGVsZXRlVmFsdWVGb3JQcm9wZXJ0eTogZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICAgICAgZW1pdEV2ZW50KCdvbkRlbGV0ZVZhbHVlRm9yUHJvcGVydHknLCBub2RlLCBuYW1lKTtcbiAgICB9XG4gIH07XG4gIFJlYWN0RE9NRGVidWdUb29sLmFkZERldnRvb2woUmVhY3RET01Vbmtub3duUHJvcGVydHlEZXZ0b29sKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTURlYnVnVG9vbDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBSZWFjdERPTURlYnVnVG9vbCA9IHJlcXVpcmUoJy4vUmVhY3RET01EZWJ1Z1Rvb2wnKTtcbm1vZHVsZS5leHBvcnRzID0ge2RlYnVnVG9vbDogUmVhY3RET01EZWJ1Z1Rvb2x9O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyID0gcmVxdWlyZSgnLi9lc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXInKTtcbmZ1bmN0aW9uIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKSB7XG4gIHJldHVybiAnXCInICsgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHZhbHVlKSArICdcIic7XG59XG5tb2R1bGUuZXhwb3J0cyA9IHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbiAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG4gIHZhciBSZWFjdERPTUluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RET01JbnN0cnVtZW50YXRpb24nKTtcbiAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xuICB2YXIgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIgPSByZXF1aXJlKCcuL3F1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyJyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVggPSBuZXcgUmVnRXhwKCdeWycgKyBET01Qcm9wZXJ0eS5BVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSICsgJ11bJyArIERPTVByb3BlcnR5LkFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG4gIHZhciBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlID0ge307XG4gIHZhciB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUgPSB7fTtcbiAgZnVuY3Rpb24gaXNBdHRyaWJ1dGVOYW1lU2FmZShhdHRyaWJ1dGVOYW1lKSB7XG4gICAgaWYgKHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZS5oYXNPd25Qcm9wZXJ0eShhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlLmhhc093blByb3BlcnR5KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWC50ZXN0KGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICB2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGVbYXR0cmlidXRlTmFtZV0gPSB0cnVlO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnSW52YWxpZCBhdHRyaWJ1dGUgbmFtZTogYCVzYCcsIGF0dHJpYnV0ZU5hbWUpIDogdm9pZCAwO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBzaG91bGRJZ25vcmVWYWx1ZShwcm9wZXJ0eUluZm8sIHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgfHwgcHJvcGVydHlJbmZvLmhhc0Jvb2xlYW5WYWx1ZSAmJiAhdmFsdWUgfHwgcHJvcGVydHlJbmZvLmhhc051bWVyaWNWYWx1ZSAmJiBpc05hTih2YWx1ZSkgfHwgcHJvcGVydHlJbmZvLmhhc1Bvc2l0aXZlTnVtZXJpY1ZhbHVlICYmIHZhbHVlIDwgMSB8fCBwcm9wZXJ0eUluZm8uaGFzT3ZlcmxvYWRlZEJvb2xlYW5WYWx1ZSAmJiB2YWx1ZSA9PT0gZmFsc2U7XG4gIH1cbiAgdmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHtcbiAgICBjcmVhdGVNYXJrdXBGb3JJRDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiBET01Qcm9wZXJ0eS5JRF9BVFRSSUJVVEVfTkFNRSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKGlkKTtcbiAgICB9LFxuICAgIHNldEF0dHJpYnV0ZUZvcklEOiBmdW5jdGlvbihub2RlLCBpZCkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUUsIGlkKTtcbiAgICB9LFxuICAgIGNyZWF0ZU1hcmt1cEZvclJvb3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERPTVByb3BlcnR5LlJPT1RfQVRUUklCVVRFX05BTUUgKyAnPVwiXCInO1xuICAgIH0sXG4gICAgc2V0QXR0cmlidXRlRm9yUm9vdDogZnVuY3Rpb24obm9kZSkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoRE9NUHJvcGVydHkuUk9PVF9BVFRSSUJVVEVfTkFNRSwgJycpO1xuICAgIH0sXG4gICAgY3JlYXRlTWFya3VwRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdERPTUluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25DcmVhdGVNYXJrdXBGb3JQcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgICAgaWYgKHByb3BlcnR5SW5mbykge1xuICAgICAgICBpZiAoc2hvdWxkSWdub3JlVmFsdWUocHJvcGVydHlJbmZvLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZTtcbiAgICAgICAgaWYgKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUgfHwgcHJvcGVydHlJbmZvLmhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWUgJiYgdmFsdWUgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gYXR0cmlidXRlTmFtZSArICc9XCJcIic7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF0dHJpYnV0ZU5hbWUgKyAnPScgKyBxdW90ZUF0dHJpYnV0ZVZhbHVlRm9yQnJvd3Nlcih2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKERPTVByb3BlcnR5LmlzQ3VzdG9tQXR0cmlidXRlKG5hbWUpKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lICsgJz0nICsgcXVvdGVBdHRyaWJ1dGVWYWx1ZUZvckJyb3dzZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBjcmVhdGVNYXJrdXBGb3JDdXN0b21BdHRyaWJ1dGU6IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gICAgICBpZiAoIWlzQXR0cmlidXRlTmFtZVNhZmUobmFtZSkgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmFtZSArICc9JyArIHF1b3RlQXR0cmlidXRlVmFsdWVGb3JCcm93c2VyKHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFZhbHVlRm9yUHJvcGVydHk6IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIHZhbHVlKSB7XG4gICAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgICAgaWYgKHByb3BlcnR5SW5mbykge1xuICAgICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBwcm9wZXJ0eUluZm8ubXV0YXRpb25NZXRob2Q7XG4gICAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICAgIG11dGF0aW9uTWV0aG9kKG5vZGUsIHZhbHVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaG91bGRJZ25vcmVWYWx1ZShwcm9wZXJ0eUluZm8sIHZhbHVlKSkge1xuICAgICAgICAgIHRoaXMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLm11c3RVc2VQcm9wZXJ0eSkge1xuICAgICAgICAgIHZhciBwcm9wTmFtZSA9IHByb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWU7XG4gICAgICAgICAgaWYgKCFwcm9wZXJ0eUluZm8uaGFzU2lkZUVmZmVjdHMgfHwgJycgKyBub2RlW3Byb3BOYW1lXSAhPT0gJycgKyB2YWx1ZSkge1xuICAgICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZTtcbiAgICAgICAgICB2YXIgbmFtZXNwYWNlID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWVzcGFjZTtcbiAgICAgICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKG5hbWVzcGFjZSwgYXR0cmlidXRlTmFtZSwgJycgKyB2YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlIHx8IHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlICYmIHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCAnJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsICcnICsgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0VmFsdWVGb3JBdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdERPTUluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgdmFyIHBheWxvYWQgPSB7fTtcbiAgICAgICAgcGF5bG9hZFtuYW1lXSA9IHZhbHVlO1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25OYXRpdmVPcGVyYXRpb24oUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkuX2RlYnVnSUQsICd1cGRhdGUgYXR0cmlidXRlJywgcGF5bG9hZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRWYWx1ZUZvckF0dHJpYnV0ZTogZnVuY3Rpb24obm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgIGlmICghaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKG5hbWUsICcnICsgdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIHBheWxvYWQgPSB7fTtcbiAgICAgICAgcGF5bG9hZFtuYW1lXSA9IHZhbHVlO1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25OYXRpdmVPcGVyYXRpb24oUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkuX2RlYnVnSUQsICd1cGRhdGUgYXR0cmlidXRlJywgcGF5bG9hZCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZWxldGVWYWx1ZUZvclByb3BlcnR5OiBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gICAgICB2YXIgcHJvcGVydHlJbmZvID0gRE9NUHJvcGVydHkucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IERPTVByb3BlcnR5LnByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xuICAgICAgaWYgKHByb3BlcnR5SW5mbykge1xuICAgICAgICB2YXIgbXV0YXRpb25NZXRob2QgPSBwcm9wZXJ0eUluZm8ubXV0YXRpb25NZXRob2Q7XG4gICAgICAgIGlmIChtdXRhdGlvbk1ldGhvZCkge1xuICAgICAgICAgIG11dGF0aW9uTWV0aG9kKG5vZGUsIHVuZGVmaW5lZCk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcGVydHlJbmZvLm11c3RVc2VQcm9wZXJ0eSkge1xuICAgICAgICAgIHZhciBwcm9wTmFtZSA9IHByb3BlcnR5SW5mby5wcm9wZXJ0eU5hbWU7XG4gICAgICAgICAgaWYgKHByb3BlcnR5SW5mby5oYXNCb29sZWFuVmFsdWUpIHtcbiAgICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghcHJvcGVydHlJbmZvLmhhc1NpZGVFZmZlY3RzIHx8ICcnICsgbm9kZVtwcm9wTmFtZV0gIT09ICcnKSB7XG4gICAgICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFJlYWN0RE9NSW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkRlbGV0ZVZhbHVlRm9yUHJvcGVydHkobm9kZSwgbmFtZSk7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk5hdGl2ZU9wZXJhdGlvbihSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKS5fZGVidWdJRCwgJ3JlbW92ZSBhdHRyaWJ1dGUnLCBuYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gRE9NUHJvcGVydHlPcGVyYXRpb25zO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVzJyk7XG4gIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIHZhciBoYXNSZWFkT25seVZhbHVlID0ge1xuICAgICdidXR0b24nOiB0cnVlLFxuICAgICdjaGVja2JveCc6IHRydWUsXG4gICAgJ2ltYWdlJzogdHJ1ZSxcbiAgICAnaGlkZGVuJzogdHJ1ZSxcbiAgICAncmFkaW8nOiB0cnVlLFxuICAgICdyZXNldCc6IHRydWUsXG4gICAgJ3N1Ym1pdCc6IHRydWVcbiAgfTtcbiAgZnVuY3Rpb24gX2Fzc2VydFNpbmdsZUxpbmsoaW5wdXRQcm9wcykge1xuICAgICEoaW5wdXRQcm9wcy5jaGVja2VkTGluayA9PSBudWxsIHx8IGlucHV0UHJvcHMudmFsdWVMaW5rID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgY2hlY2tlZExpbmsgYW5kIGEgdmFsdWVMaW5rLiBJZiB5b3Ugd2FudCB0byB1c2UgJyArICdjaGVja2VkTGluaywgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byB1c2UgdmFsdWVMaW5rIGFuZCB2aWNlIHZlcnNhLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuICBmdW5jdGlvbiBfYXNzZXJ0VmFsdWVMaW5rKGlucHV0UHJvcHMpIHtcbiAgICBfYXNzZXJ0U2luZ2xlTGluayhpbnB1dFByb3BzKTtcbiAgICAhKGlucHV0UHJvcHMudmFsdWUgPT0gbnVsbCAmJiBpbnB1dFByb3BzLm9uQ2hhbmdlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0Nhbm5vdCBwcm92aWRlIGEgdmFsdWVMaW5rIGFuZCBhIHZhbHVlIG9yIG9uQ2hhbmdlIGV2ZW50LiBJZiB5b3Ugd2FudCAnICsgJ3RvIHVzZSB2YWx1ZSBvciBvbkNoYW5nZSwgeW91IHByb2JhYmx5IGRvblxcJ3Qgd2FudCB0byB1c2UgdmFsdWVMaW5rLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuICBmdW5jdGlvbiBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXRQcm9wcykge1xuICAgIF9hc3NlcnRTaW5nbGVMaW5rKGlucHV0UHJvcHMpO1xuICAgICEoaW5wdXRQcm9wcy5jaGVja2VkID09IG51bGwgJiYgaW5wdXRQcm9wcy5vbkNoYW5nZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW5ub3QgcHJvdmlkZSBhIGNoZWNrZWRMaW5rIGFuZCBhIGNoZWNrZWQgcHJvcGVydHkgb3Igb25DaGFuZ2UgZXZlbnQuICcgKyAnSWYgeW91IHdhbnQgdG8gdXNlIGNoZWNrZWQgb3Igb25DaGFuZ2UsIHlvdSBwcm9iYWJseSBkb25cXCd0IHdhbnQgdG8gJyArICd1c2UgY2hlY2tlZExpbmsnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cbiAgdmFyIHByb3BUeXBlcyA9IHtcbiAgICB2YWx1ZTogZnVuY3Rpb24ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lKSB7XG4gICAgICBpZiAoIXByb3BzW3Byb3BOYW1lXSB8fCBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBFcnJvcignWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgKyAnYG9uQ2hhbmdlYCBoYW5kbGVyLiBUaGlzIHdpbGwgcmVuZGVyIGEgcmVhZC1vbmx5IGZpZWxkLiBJZiAnICsgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRWYWx1ZWAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgICB9LFxuICAgIGNoZWNrZWQ6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgaWYgKCFwcm9wc1twcm9wTmFtZV0gfHwgcHJvcHMub25DaGFuZ2UgfHwgcHJvcHMucmVhZE9ubHkgfHwgcHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdZb3UgcHJvdmlkZWQgYSBgY2hlY2tlZGAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICsgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0Q2hlY2tlZGAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgICB9LFxuICAgIG9uQ2hhbmdlOiBSZWFjdFByb3BUeXBlcy5mdW5jXG4gIH07XG4gIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKSB7XG4gICAgaWYgKG93bmVyKSB7XG4gICAgICB2YXIgbmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuICB2YXIgTGlua2VkVmFsdWVVdGlscyA9IHtcbiAgICBjaGVja1Byb3BUeXBlczogZnVuY3Rpb24odGFnTmFtZSwgcHJvcHMsIG93bmVyKSB7XG4gICAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBwcm9wVHlwZXMpIHtcbiAgICAgICAgaWYgKHByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgdGFnTmFtZSwgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkge1xuICAgICAgICAgIGxvZ2dlZFR5cGVGYWlsdXJlc1tlcnJvci5tZXNzYWdlXSA9IHRydWU7XG4gICAgICAgICAgdmFyIGFkZGVuZHVtID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKG93bmVyKTtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBmb3JtIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRWYWx1ZTogZnVuY3Rpb24oaW5wdXRQcm9wcykge1xuICAgICAgaWYgKGlucHV0UHJvcHMudmFsdWVMaW5rKSB7XG4gICAgICAgIF9hc3NlcnRWYWx1ZUxpbmsoaW5wdXRQcm9wcyk7XG4gICAgICAgIHJldHVybiBpbnB1dFByb3BzLnZhbHVlTGluay52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnB1dFByb3BzLnZhbHVlO1xuICAgIH0sXG4gICAgZ2V0Q2hlY2tlZDogZnVuY3Rpb24oaW5wdXRQcm9wcykge1xuICAgICAgaWYgKGlucHV0UHJvcHMuY2hlY2tlZExpbmspIHtcbiAgICAgICAgX2Fzc2VydENoZWNrZWRMaW5rKGlucHV0UHJvcHMpO1xuICAgICAgICByZXR1cm4gaW5wdXRQcm9wcy5jaGVja2VkTGluay52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpbnB1dFByb3BzLmNoZWNrZWQ7XG4gICAgfSxcbiAgICBleGVjdXRlT25DaGFuZ2U6IGZ1bmN0aW9uKGlucHV0UHJvcHMsIGV2ZW50KSB7XG4gICAgICBpZiAoaW5wdXRQcm9wcy52YWx1ZUxpbmspIHtcbiAgICAgICAgX2Fzc2VydFZhbHVlTGluayhpbnB1dFByb3BzKTtcbiAgICAgICAgcmV0dXJuIGlucHV0UHJvcHMudmFsdWVMaW5rLnJlcXVlc3RDaGFuZ2UoZXZlbnQudGFyZ2V0LnZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5wdXRQcm9wcy5jaGVja2VkTGluaykge1xuICAgICAgICBfYXNzZXJ0Q2hlY2tlZExpbmsoaW5wdXRQcm9wcyk7XG4gICAgICAgIHJldHVybiBpbnB1dFByb3BzLmNoZWNrZWRMaW5rLnJlcXVlc3RDaGFuZ2UoZXZlbnQudGFyZ2V0LmNoZWNrZWQpO1xuICAgICAgfSBlbHNlIGlmIChpbnB1dFByb3BzLm9uQ2hhbmdlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dFByb3BzLm9uQ2hhbmdlLmNhbGwodW5kZWZpbmVkLCBldmVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IExpbmtlZFZhbHVlVXRpbHM7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuICB2YXIgRGlzYWJsZWRJbnB1dFV0aWxzID0gcmVxdWlyZSgnLi9EaXNhYmxlZElucHV0VXRpbHMnKTtcbiAgdmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHlPcGVyYXRpb25zJyk7XG4gIHZhciBMaW5rZWRWYWx1ZVV0aWxzID0gcmVxdWlyZSgnLi9MaW5rZWRWYWx1ZVV0aWxzJyk7XG4gIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xuICB2YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgdmFyIGRpZFdhcm5WYWx1ZUxpbmsgPSBmYWxzZTtcbiAgdmFyIGRpZFdhcm5WYWx1ZU51bGwgPSBmYWxzZTtcbiAgdmFyIGRpZFdhcm5WYWxEZWZhdWx0VmFsID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGZvcmNlVXBkYXRlSWZNb3VudGVkKCkge1xuICAgIGlmICh0aGlzLl9yb290Tm9kZUlEKSB7XG4gICAgICBSZWFjdERPTVRleHRhcmVhLnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHdhcm5JZlZhbHVlSXNOdWxsKHByb3BzKSB7XG4gICAgaWYgKHByb3BzICE9IG51bGwgJiYgcHJvcHMudmFsdWUgPT09IG51bGwgJiYgIWRpZFdhcm5WYWx1ZU51bGwpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnYHZhbHVlYCBwcm9wIG9uIGB0ZXh0YXJlYWAgc2hvdWxkIG5vdCBiZSBudWxsLiAnICsgJ0NvbnNpZGVyIHVzaW5nIHRoZSBlbXB0eSBzdHJpbmcgdG8gY2xlYXIgdGhlIGNvbXBvbmVudCBvciBgdW5kZWZpbmVkYCAnICsgJ2ZvciB1bmNvbnRyb2xsZWQgY29tcG9uZW50cy4nKSA6IHZvaWQgMDtcbiAgICAgIGRpZFdhcm5WYWx1ZU51bGwgPSB0cnVlO1xuICAgIH1cbiAgfVxuICB2YXIgUmVhY3RET01UZXh0YXJlYSA9IHtcbiAgICBnZXROYXRpdmVQcm9wczogZnVuY3Rpb24oaW5zdCwgcHJvcHMpIHtcbiAgICAgICEocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBkb2VzIG5vdCBtYWtlIHNlbnNlIG9uIDx0ZXh0YXJlYT4uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIG5hdGl2ZVByb3BzID0gX2Fzc2lnbih7fSwgRGlzYWJsZWRJbnB1dFV0aWxzLmdldE5hdGl2ZVByb3BzKGluc3QsIHByb3BzKSwge1xuICAgICAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICAgICAgY2hpbGRyZW46IGluc3QuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUsXG4gICAgICAgIG9uQ2hhbmdlOiBpbnN0Ll93cmFwcGVyU3RhdGUub25DaGFuZ2VcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG5hdGl2ZVByb3BzO1xuICAgIH0sXG4gICAgbW91bnRXcmFwcGVyOiBmdW5jdGlvbihpbnN0LCBwcm9wcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgTGlua2VkVmFsdWVVdGlscy5jaGVja1Byb3BUeXBlcygndGV4dGFyZWEnLCBwcm9wcywgaW5zdC5fY3VycmVudEVsZW1lbnQuX293bmVyKTtcbiAgICAgICAgaWYgKHByb3BzLnZhbHVlTGluayAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVMaW5rKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgdmFsdWVMaW5rYCBwcm9wIG9uIGB0ZXh0YXJlYWAgaXMgZGVwcmVjYXRlZDsgc2V0IGB2YWx1ZWAgYW5kIGBvbkNoYW5nZWAgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuVmFsdWVMaW5rID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbERlZmF1bHRWYWwpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1RleHRhcmVhIGVsZW1lbnRzIG11c3QgYmUgZWl0aGVyIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkICcgKyAnKHNwZWNpZnkgZWl0aGVyIHRoZSB2YWx1ZSBwcm9wLCBvciB0aGUgZGVmYXVsdFZhbHVlIHByb3AsIGJ1dCBub3QgJyArICdib3RoKS4gRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCB0ZXh0YXJlYSAnICsgJ2FuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1jb250cm9sbGVkLWNvbXBvbmVudHMnKSA6IHZvaWQgMDtcbiAgICAgICAgICBkaWRXYXJuVmFsRGVmYXVsdFZhbCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgd2FybklmVmFsdWVJc051bGwocHJvcHMpO1xuICAgICAgfVxuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuO1xuICAgICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBpbnN0ZWFkIG9mIHNldHRpbmcgJyArICdjaGlsZHJlbiBvbiA8dGV4dGFyZWE+LicpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgICEoZGVmYXVsdFZhbHVlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0lmIHlvdSBzdXBwbHkgYGRlZmF1bHRWYWx1ZWAgb24gYSA8dGV4dGFyZWE+LCBkbyBub3QgcGFzcyBjaGlsZHJlbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICAgICEoY2hpbGRyZW4ubGVuZ3RoIDw9IDEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJzx0ZXh0YXJlYT4gY2FuIG9ubHkgaGF2ZSBhdCBtb3N0IG9uZSBjaGlsZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlblswXTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0VmFsdWUgPSAnJyArIGNoaWxkcmVuO1xuICAgICAgfVxuICAgICAgaWYgKGRlZmF1bHRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnO1xuICAgICAgfVxuICAgICAgdmFyIHZhbHVlID0gTGlua2VkVmFsdWVVdGlscy5nZXRWYWx1ZShwcm9wcyk7XG4gICAgICBpbnN0Ll93cmFwcGVyU3RhdGUgPSB7XG4gICAgICAgIGluaXRpYWxWYWx1ZTogJycgKyAodmFsdWUgIT0gbnVsbCA/IHZhbHVlIDogZGVmYXVsdFZhbHVlKSxcbiAgICAgICAgbGlzdGVuZXJzOiBudWxsLFxuICAgICAgICBvbkNoYW5nZTogX2hhbmRsZUNoYW5nZS5iaW5kKGluc3QpXG4gICAgICB9O1xuICAgIH0sXG4gICAgdXBkYXRlV3JhcHBlcjogZnVuY3Rpb24oaW5zdCkge1xuICAgICAgdmFyIHByb3BzID0gaW5zdC5fY3VycmVudEVsZW1lbnQucHJvcHM7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuSWZWYWx1ZUlzTnVsbChwcm9wcyk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmdldFZhbHVlKHByb3BzKTtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5zZXRWYWx1ZUZvclByb3BlcnR5KFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpLCAndmFsdWUnLCAnJyArIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGZ1bmN0aW9uIF9oYW5kbGVDaGFuZ2UoZXZlbnQpIHtcbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICB2YXIgcmV0dXJuVmFsdWUgPSBMaW5rZWRWYWx1ZVV0aWxzLmV4ZWN1dGVPbkNoYW5nZShwcm9wcywgZXZlbnQpO1xuICAgIFJlYWN0VXBkYXRlcy5hc2FwKGZvcmNlVXBkYXRlSWZNb3VudGVkLCB0aGlzKTtcbiAgICByZXR1cm4gcmV0dXJuVmFsdWU7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTVRleHRhcmVhO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbiAgdmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbiAgdmFyIEtleUVzY2FwZVV0aWxzID0gcmVxdWlyZSgnLi9LZXlFc2NhcGVVdGlscycpO1xuICB2YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50Jyk7XG4gIHZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICBmdW5jdGlvbiBpbnN0YW50aWF0ZUNoaWxkKGNoaWxkSW5zdGFuY2VzLCBjaGlsZCwgbmFtZSkge1xuICAgIHZhciBrZXlVbmlxdWUgPSBjaGlsZEluc3RhbmNlc1tuYW1lXSA9PT0gdW5kZWZpbmVkO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhrZXlVbmlxdWUsICdmbGF0dGVuQ2hpbGRyZW4oLi4uKTogRW5jb3VudGVyZWQgdHdvIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUga2V5LCAnICsgJ2Alc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5ICcgKyAndGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4nLCBLZXlFc2NhcGVVdGlscy51bmVzY2FwZShuYW1lKSkgOiB2b2lkIDA7XG4gICAgfVxuICAgIGlmIChjaGlsZCAhPSBudWxsICYmIGtleVVuaXF1ZSkge1xuICAgICAgY2hpbGRJbnN0YW5jZXNbbmFtZV0gPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KGNoaWxkKTtcbiAgICB9XG4gIH1cbiAgdmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0ge1xuICAgIGluc3RhbnRpYXRlQ2hpbGRyZW46IGZ1bmN0aW9uKG5lc3RlZENoaWxkTm9kZXMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICBpZiAobmVzdGVkQ2hpbGROb2RlcyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgdmFyIGNoaWxkSW5zdGFuY2VzID0ge307XG4gICAgICB0cmF2ZXJzZUFsbENoaWxkcmVuKG5lc3RlZENoaWxkTm9kZXMsIGluc3RhbnRpYXRlQ2hpbGQsIGNoaWxkSW5zdGFuY2VzKTtcbiAgICAgIHJldHVybiBjaGlsZEluc3RhbmNlcztcbiAgICB9LFxuICAgIHVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgcmVtb3ZlZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmFtZTtcbiAgICAgIHZhciBwcmV2Q2hpbGQ7XG4gICAgICBmb3IgKG5hbWUgaW4gbmV4dENoaWxkcmVuKSB7XG4gICAgICAgIGlmICghbmV4dENoaWxkcmVuLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuICYmIHByZXZDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldkNoaWxkICYmIHByZXZDaGlsZC5fY3VycmVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBuZXh0RWxlbWVudCA9IG5leHRDaGlsZHJlbltuYW1lXTtcbiAgICAgICAgaWYgKHByZXZDaGlsZCAhPSBudWxsICYmIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50KHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCkpIHtcbiAgICAgICAgICBSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudChwcmV2Q2hpbGQsIG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgICAgbmV4dENoaWxkcmVuW25hbWVdID0gcHJldkNoaWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChwcmV2Q2hpbGQpIHtcbiAgICAgICAgICAgIHJlbW92ZWROb2Rlc1tuYW1lXSA9IFJlYWN0UmVjb25jaWxlci5nZXROYXRpdmVOb2RlKHByZXZDaGlsZCk7XG4gICAgICAgICAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChwcmV2Q2hpbGQsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIG5leHRDaGlsZEluc3RhbmNlID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudChuZXh0RWxlbWVudCk7XG4gICAgICAgICAgbmV4dENoaWxkcmVuW25hbWVdID0gbmV4dENoaWxkSW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobmFtZSBpbiBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiAhKG5leHRDaGlsZHJlbiAmJiBuZXh0Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpKSB7XG4gICAgICAgICAgcHJldkNoaWxkID0gcHJldkNoaWxkcmVuW25hbWVdO1xuICAgICAgICAgIHJlbW92ZWROb2Rlc1tuYW1lXSA9IFJlYWN0UmVjb25jaWxlci5nZXROYXRpdmVOb2RlKHByZXZDaGlsZCk7XG4gICAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocHJldkNoaWxkLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHVubW91bnRDaGlsZHJlbjogZnVuY3Rpb24ocmVuZGVyZWRDaGlsZHJlbiwgc2FmZWx5KSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHJlbmRlcmVkQ2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKHJlbmRlcmVkQ2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHJlbmRlcmVkQ2hpbGRyZW5bbmFtZV07XG4gICAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnVubW91bnRDb21wb25lbnQocmVuZGVyZWRDaGlsZCwgc2FmZWx5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENoaWxkUmVjb25jaWxlcjtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIEtleUVzY2FwZVV0aWxzID0gcmVxdWlyZSgnLi9LZXlFc2NhcGVVdGlscycpO1xuICB2YXIgdHJhdmVyc2VBbGxDaGlsZHJlbiA9IHJlcXVpcmUoJy4vdHJhdmVyc2VBbGxDaGlsZHJlbicpO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgZnVuY3Rpb24gZmxhdHRlblNpbmdsZUNoaWxkSW50b0NvbnRleHQodHJhdmVyc2VDb250ZXh0LCBjaGlsZCwgbmFtZSkge1xuICAgIHZhciByZXN1bHQgPSB0cmF2ZXJzZUNvbnRleHQ7XG4gICAgdmFyIGtleVVuaXF1ZSA9IHJlc3VsdFtuYW1lXSA9PT0gdW5kZWZpbmVkO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhrZXlVbmlxdWUsICdmbGF0dGVuQ2hpbGRyZW4oLi4uKTogRW5jb3VudGVyZWQgdHdvIGNoaWxkcmVuIHdpdGggdGhlIHNhbWUga2V5LCAnICsgJ2Alc2AuIENoaWxkIGtleXMgbXVzdCBiZSB1bmlxdWU7IHdoZW4gdHdvIGNoaWxkcmVuIHNoYXJlIGEga2V5LCBvbmx5ICcgKyAndGhlIGZpcnN0IGNoaWxkIHdpbGwgYmUgdXNlZC4nLCBLZXlFc2NhcGVVdGlscy51bmVzY2FwZShuYW1lKSkgOiB2b2lkIDA7XG4gICAgfVxuICAgIGlmIChrZXlVbmlxdWUgJiYgY2hpbGQgIT0gbnVsbCkge1xuICAgICAgcmVzdWx0W25hbWVdID0gY2hpbGQ7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGZsYXR0ZW5DaGlsZHJlbihjaGlsZHJlbikge1xuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gY2hpbGRyZW47XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmbGF0dGVuU2luZ2xlQ2hpbGRJbnRvQ29udGV4dCwgcmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkNoaWxkcmVuO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCcpO1xuICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG4gIHZhciBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyA9IHJlcXVpcmUoJy4vUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMnKTtcbiAgdmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xuICB2YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbiAgdmFyIFJlYWN0Q2hpbGRSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdENoaWxkUmVjb25jaWxlcicpO1xuICB2YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbiAgdmFyIGZsYXR0ZW5DaGlsZHJlbiA9IHJlcXVpcmUoJy4vZmxhdHRlbkNoaWxkcmVuJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgZnVuY3Rpb24gbWFrZUluc2VydE1hcmt1cChtYXJrdXAsIGFmdGVyTm9kZSwgdG9JbmRleCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5JTlNFUlRfTUFSS1VQLFxuICAgICAgY29udGVudDogbWFya3VwLFxuICAgICAgZnJvbUluZGV4OiBudWxsLFxuICAgICAgZnJvbU5vZGU6IG51bGwsXG4gICAgICB0b0luZGV4OiB0b0luZGV4LFxuICAgICAgYWZ0ZXJOb2RlOiBhZnRlck5vZGVcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VNb3ZlKGNoaWxkLCBhZnRlck5vZGUsIHRvSW5kZXgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuTU9WRV9FWElTVElORyxcbiAgICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgICBmcm9tSW5kZXg6IGNoaWxkLl9tb3VudEluZGV4LFxuICAgICAgZnJvbU5vZGU6IFJlYWN0UmVjb25jaWxlci5nZXROYXRpdmVOb2RlKGNoaWxkKSxcbiAgICAgIHRvSW5kZXg6IHRvSW5kZXgsXG4gICAgICBhZnRlck5vZGU6IGFmdGVyTm9kZVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gbWFrZVJlbW92ZShjaGlsZCwgbm9kZSkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5SRU1PVkVfTk9ERSxcbiAgICAgIGNvbnRlbnQ6IG51bGwsXG4gICAgICBmcm9tSW5kZXg6IGNoaWxkLl9tb3VudEluZGV4LFxuICAgICAgZnJvbU5vZGU6IG5vZGUsXG4gICAgICB0b0luZGV4OiBudWxsLFxuICAgICAgYWZ0ZXJOb2RlOiBudWxsXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlU2V0TWFya3VwKG1hcmt1cCkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5TRVRfTUFSS1VQLFxuICAgICAgY29udGVudDogbWFya3VwLFxuICAgICAgZnJvbUluZGV4OiBudWxsLFxuICAgICAgZnJvbU5vZGU6IG51bGwsXG4gICAgICB0b0luZGV4OiBudWxsLFxuICAgICAgYWZ0ZXJOb2RlOiBudWxsXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlVGV4dENvbnRlbnQodGV4dENvbnRlbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuVEVYVF9DT05URU5ULFxuICAgICAgY29udGVudDogdGV4dENvbnRlbnQsXG4gICAgICBmcm9tSW5kZXg6IG51bGwsXG4gICAgICBmcm9tTm9kZTogbnVsbCxcbiAgICAgIHRvSW5kZXg6IG51bGwsXG4gICAgICBhZnRlck5vZGU6IG51bGxcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGVucXVldWUocXVldWUsIHVwZGF0ZSkge1xuICAgIGlmICh1cGRhdGUpIHtcbiAgICAgIHF1ZXVlID0gcXVldWUgfHwgW107XG4gICAgICBxdWV1ZS5wdXNoKHVwZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBxdWV1ZTtcbiAgfVxuICBmdW5jdGlvbiBwcm9jZXNzUXVldWUoaW5zdCwgdXBkYXRlUXVldWUpIHtcbiAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnByb2Nlc3NDaGlsZHJlblVwZGF0ZXMoaW5zdCwgdXBkYXRlUXVldWUpO1xuICB9XG4gIHZhciBzZXRDaGlsZHJlbkZvckluc3RydW1lbnRhdGlvbiA9IGVtcHR5RnVuY3Rpb247XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgc2V0Q2hpbGRyZW5Gb3JJbnN0cnVtZW50YXRpb24gPSBmdW5jdGlvbihjaGlsZHJlbikge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0Q2hpbGRyZW4odGhpcy5fZGVidWdJRCwgY2hpbGRyZW4gPyBPYmplY3Qua2V5cyhjaGlsZHJlbikubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICByZXR1cm4gY2hpbGRyZW5ba2V5XS5fZGVidWdJRDtcbiAgICAgIH0pIDogW10pO1xuICAgIH07XG4gIH1cbiAgdmFyIFJlYWN0TXVsdGlDaGlsZCA9IHtNaXhpbjoge1xuICAgICAgX3JlY29uY2lsZXJJbnN0YW50aWF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXN0ZWRDaGlsZHJlbiwgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBpZiAodGhpcy5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgICAgICAgIHJldHVybiBSZWFjdENoaWxkUmVjb25jaWxlci5pbnN0YW50aWF0ZUNoaWxkcmVuKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLmluc3RhbnRpYXRlQ2hpbGRyZW4obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIH0sXG4gICAgICBfcmVjb25jaWxlclVwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbihwcmV2Q2hpbGRyZW4sIG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCByZW1vdmVkTm9kZXMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBuZXh0Q2hpbGRyZW47XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQuX293bmVyO1xuICAgICAgICAgICAgICBuZXh0Q2hpbGRyZW4gPSBmbGF0dGVuQ2hpbGRyZW4obmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMpO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgcmVtb3ZlZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gbmV4dENoaWxkcmVuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXh0Q2hpbGRyZW4gPSBmbGF0dGVuQ2hpbGRyZW4obmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMpO1xuICAgICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51cGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHRDaGlsZHJlbiwgcmVtb3ZlZE5vZGVzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIHJldHVybiBuZXh0Q2hpbGRyZW47XG4gICAgICB9LFxuICAgICAgbW91bnRDaGlsZHJlbjogZnVuY3Rpb24obmVzdGVkQ2hpbGRyZW4sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuX3JlY29uY2lsZXJJbnN0YW50aWF0ZUNoaWxkcmVuKG5lc3RlZENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgICAgdmFyIG1vdW50SW1hZ2VzID0gW107XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gY2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoY2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW25hbWVdO1xuICAgICAgICAgICAgdmFyIG1vdW50SW1hZ2UgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQoY2hpbGQsIHRyYW5zYWN0aW9uLCB0aGlzLCB0aGlzLl9uYXRpdmVDb250YWluZXJJbmZvLCBjb250ZXh0KTtcbiAgICAgICAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gaW5kZXgrKztcbiAgICAgICAgICAgIG1vdW50SW1hZ2VzLnB1c2gobW91bnRJbWFnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgc2V0Q2hpbGRyZW5Gb3JJbnN0cnVtZW50YXRpb24uY2FsbCh0aGlzLCBjaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vdW50SW1hZ2VzO1xuICAgICAgfSxcbiAgICAgIHVwZGF0ZVRleHRDb250ZW50OiBmdW5jdGlvbihuZXh0Q29udGVudCkge1xuICAgICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5fcmVuZGVyZWRDaGlsZHJlbjtcbiAgICAgICAgUmVhY3RDaGlsZFJlY29uY2lsZXIudW5tb3VudENoaWxkcmVuKHByZXZDaGlsZHJlbiwgZmFsc2UpO1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHByZXZDaGlsZHJlbikge1xuICAgICAgICAgIGlmIChwcmV2Q2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1cGRhdGVUZXh0Q29udGVudCBjYWxsZWQgb24gbm9uLWVtcHR5IGNvbXBvbmVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciB1cGRhdGVzID0gW21ha2VUZXh0Q29udGVudChuZXh0Q29udGVudCldO1xuICAgICAgICBwcm9jZXNzUXVldWUodGhpcywgdXBkYXRlcyk7XG4gICAgICB9LFxuICAgICAgdXBkYXRlTWFya3VwOiBmdW5jdGlvbihuZXh0TWFya3VwKSB7XG4gICAgICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLl9yZW5kZXJlZENoaWxkcmVuO1xuICAgICAgICBSZWFjdENoaWxkUmVjb25jaWxlci51bm1vdW50Q2hpbGRyZW4ocHJldkNoaWxkcmVuLCBmYWxzZSk7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcHJldkNoaWxkcmVuKSB7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3VwZGF0ZVRleHRDb250ZW50IGNhbGxlZCBvbiBub24tZW1wdHkgY29tcG9uZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHVwZGF0ZXMgPSBbbWFrZVNldE1hcmt1cChuZXh0TWFya3VwKV07XG4gICAgICAgIHByb2Nlc3NRdWV1ZSh0aGlzLCB1cGRhdGVzKTtcbiAgICAgIH0sXG4gICAgICB1cGRhdGVDaGlsZHJlbjogZnVuY3Rpb24obmV4dE5lc3RlZENoaWxkcmVuRWxlbWVudHMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuKG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICB9LFxuICAgICAgX3VwZGF0ZUNoaWxkcmVuOiBmdW5jdGlvbihuZXh0TmVzdGVkQ2hpbGRyZW5FbGVtZW50cywgdHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIHByZXZDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAgIHZhciByZW1vdmVkTm9kZXMgPSB7fTtcbiAgICAgICAgdmFyIG5leHRDaGlsZHJlbiA9IHRoaXMuX3JlY29uY2lsZXJVcGRhdGVDaGlsZHJlbihwcmV2Q2hpbGRyZW4sIG5leHROZXN0ZWRDaGlsZHJlbkVsZW1lbnRzLCByZW1vdmVkTm9kZXMsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKCFuZXh0Q2hpbGRyZW4gJiYgIXByZXZDaGlsZHJlbikge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXBkYXRlcyA9IG51bGw7XG4gICAgICAgIHZhciBuYW1lO1xuICAgICAgICB2YXIgbGFzdEluZGV4ID0gMDtcbiAgICAgICAgdmFyIG5leHRJbmRleCA9IDA7XG4gICAgICAgIHZhciBsYXN0UGxhY2VkTm9kZSA9IG51bGw7XG4gICAgICAgIGZvciAobmFtZSBpbiBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoIW5leHRDaGlsZHJlbi5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRyZW4gJiYgcHJldkNoaWxkcmVuW25hbWVdO1xuICAgICAgICAgIHZhciBuZXh0Q2hpbGQgPSBuZXh0Q2hpbGRyZW5bbmFtZV07XG4gICAgICAgICAgaWYgKHByZXZDaGlsZCA9PT0gbmV4dENoaWxkKSB7XG4gICAgICAgICAgICB1cGRhdGVzID0gZW5xdWV1ZSh1cGRhdGVzLCB0aGlzLm1vdmVDaGlsZChwcmV2Q2hpbGQsIGxhc3RQbGFjZWROb2RlLCBuZXh0SW5kZXgsIGxhc3RJbmRleCkpO1xuICAgICAgICAgICAgbGFzdEluZGV4ID0gTWF0aC5tYXgocHJldkNoaWxkLl9tb3VudEluZGV4LCBsYXN0SW5kZXgpO1xuICAgICAgICAgICAgcHJldkNoaWxkLl9tb3VudEluZGV4ID0gbmV4dEluZGV4O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJldkNoaWxkKSB7XG4gICAgICAgICAgICAgIGxhc3RJbmRleCA9IE1hdGgubWF4KHByZXZDaGlsZC5fbW91bnRJbmRleCwgbGFzdEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVwZGF0ZXMgPSBlbnF1ZXVlKHVwZGF0ZXMsIHRoaXMuX21vdW50Q2hpbGRBdEluZGV4KG5leHRDaGlsZCwgbGFzdFBsYWNlZE5vZGUsIG5leHRJbmRleCwgdHJhbnNhY3Rpb24sIGNvbnRleHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbmV4dEluZGV4Kys7XG4gICAgICAgICAgbGFzdFBsYWNlZE5vZGUgPSBSZWFjdFJlY29uY2lsZXIuZ2V0TmF0aXZlTm9kZShuZXh0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAobmFtZSBpbiByZW1vdmVkTm9kZXMpIHtcbiAgICAgICAgICBpZiAocmVtb3ZlZE5vZGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgICAgICB1cGRhdGVzID0gZW5xdWV1ZSh1cGRhdGVzLCB0aGlzLl91bm1vdW50Q2hpbGQocHJldkNoaWxkcmVuW25hbWVdLCByZW1vdmVkTm9kZXNbbmFtZV0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwZGF0ZXMpIHtcbiAgICAgICAgICBwcm9jZXNzUXVldWUodGhpcywgdXBkYXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVuZGVyZWRDaGlsZHJlbiA9IG5leHRDaGlsZHJlbjtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBzZXRDaGlsZHJlbkZvckluc3RydW1lbnRhdGlvbi5jYWxsKHRoaXMsIG5leHRDaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB1bm1vdW50Q2hpbGRyZW46IGZ1bmN0aW9uKHNhZmVseSkge1xuICAgICAgICB2YXIgcmVuZGVyZWRDaGlsZHJlbiA9IHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW47XG4gICAgICAgIFJlYWN0Q2hpbGRSZWNvbmNpbGVyLnVubW91bnRDaGlsZHJlbihyZW5kZXJlZENoaWxkcmVuLCBzYWZlbHkpO1xuICAgICAgICB0aGlzLl9yZW5kZXJlZENoaWxkcmVuID0gbnVsbDtcbiAgICAgIH0sXG4gICAgICBtb3ZlQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkLCBhZnRlck5vZGUsIHRvSW5kZXgsIGxhc3RJbmRleCkge1xuICAgICAgICBpZiAoY2hpbGQuX21vdW50SW5kZXggPCBsYXN0SW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gbWFrZU1vdmUoY2hpbGQsIGFmdGVyTm9kZSwgdG9JbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBjcmVhdGVDaGlsZDogZnVuY3Rpb24oY2hpbGQsIGFmdGVyTm9kZSwgbW91bnRJbWFnZSkge1xuICAgICAgICByZXR1cm4gbWFrZUluc2VydE1hcmt1cChtb3VudEltYWdlLCBhZnRlck5vZGUsIGNoaWxkLl9tb3VudEluZGV4KTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVDaGlsZDogZnVuY3Rpb24oY2hpbGQsIG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VSZW1vdmUoY2hpbGQsIG5vZGUpO1xuICAgICAgfSxcbiAgICAgIF9tb3VudENoaWxkQXRJbmRleDogZnVuY3Rpb24oY2hpbGQsIGFmdGVyTm9kZSwgaW5kZXgsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBtb3VudEltYWdlID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KGNoaWxkLCB0cmFuc2FjdGlvbiwgdGhpcywgdGhpcy5fbmF0aXZlQ29udGFpbmVySW5mbywgY29udGV4dCk7XG4gICAgICAgIGNoaWxkLl9tb3VudEluZGV4ID0gaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNoaWxkKGNoaWxkLCBhZnRlck5vZGUsIG1vdW50SW1hZ2UpO1xuICAgICAgfSxcbiAgICAgIF91bm1vdW50Q2hpbGQ6IGZ1bmN0aW9uKGNoaWxkLCBub2RlKSB7XG4gICAgICAgIHZhciB1cGRhdGUgPSB0aGlzLnJlbW92ZUNoaWxkKGNoaWxkLCBub2RlKTtcbiAgICAgICAgY2hpbGQuX21vdW50SW5kZXggPSBudWxsO1xuICAgICAgICByZXR1cm4gdXBkYXRlO1xuICAgICAgfVxuICAgIH19O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0TXVsdGlDaGlsZDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFRyYW5zYWN0aW9uID0gcmVxdWlyZSgnLi9UcmFuc2FjdGlvbicpO1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW107XG52YXIgbm9vcENhbGxiYWNrUXVldWUgPSB7ZW5xdWV1ZTogZnVuY3Rpb24oKSB7fX07XG5mdW5jdGlvbiBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKHJlbmRlclRvU3RhdGljTWFya3VwKSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgdGhpcy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IHJlbmRlclRvU3RhdGljTWFya3VwO1xuICB0aGlzLnVzZUNyZWF0ZUVsZW1lbnQgPSBmYWxzZTtcbn1cbnZhciBNaXhpbiA9IHtcbiAgZ2V0VHJhbnNhY3Rpb25XcmFwcGVyczogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFRSQU5TQUNUSU9OX1dSQVBQRVJTO1xuICB9LFxuICBnZXRSZWFjdE1vdW50UmVhZHk6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBub29wQ2FsbGJhY2tRdWV1ZTtcbiAgfSxcbiAgZGVzdHJ1Y3RvcjogZnVuY3Rpb24oKSB7fSxcbiAgY2hlY2twb2ludDogZnVuY3Rpb24oKSB7fSxcbiAgcm9sbGJhY2s6IGZ1bmN0aW9uKCkge31cbn07XG5fYXNzaWduKFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwgTWl4aW4pO1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24pO1xubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuICB2YXIgQXV0b0ZvY3VzVXRpbHMgPSByZXF1aXJlKCcuL0F1dG9Gb2N1c1V0aWxzJyk7XG4gIHZhciBDU1NQcm9wZXJ0eU9wZXJhdGlvbnMgPSByZXF1aXJlKCcuL0NTU1Byb3BlcnR5T3BlcmF0aW9ucycpO1xuICB2YXIgRE9NTGF6eVRyZWUgPSByZXF1aXJlKCcuL0RPTUxhenlUcmVlJyk7XG4gIHZhciBET01OYW1lc3BhY2VzID0gcmVxdWlyZSgnLi9ET01OYW1lc3BhY2VzJyk7XG4gIHZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbiAgdmFyIERPTVByb3BlcnR5T3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHlPcGVyYXRpb25zJyk7XG4gIHZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbiAgdmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xuICB2YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5SZWdpc3RyeScpO1xuICB2YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbiAgdmFyIFJlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEJyb3dzZXJFbnZpcm9ubWVudCcpO1xuICB2YXIgUmVhY3RET01CdXR0b24gPSByZXF1aXJlKCcuL1JlYWN0RE9NQnV0dG9uJyk7XG4gIHZhciBSZWFjdERPTUNvbXBvbmVudEZsYWdzID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudEZsYWdzJyk7XG4gIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xuICB2YXIgUmVhY3RET01JbnB1dCA9IHJlcXVpcmUoJy4vUmVhY3RET01JbnB1dCcpO1xuICB2YXIgUmVhY3RET01PcHRpb24gPSByZXF1aXJlKCcuL1JlYWN0RE9NT3B0aW9uJyk7XG4gIHZhciBSZWFjdERPTVNlbGVjdCA9IHJlcXVpcmUoJy4vUmVhY3RET01TZWxlY3QnKTtcbiAgdmFyIFJlYWN0RE9NVGV4dGFyZWEgPSByZXF1aXJlKCcuL1JlYWN0RE9NVGV4dGFyZWEnKTtcbiAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xuICB2YXIgUmVhY3RNdWx0aUNoaWxkID0gcmVxdWlyZSgnLi9SZWFjdE11bHRpQ2hpbGQnKTtcbiAgdmFyIFJlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0U2VydmVyUmVuZGVyaW5nVHJhbnNhY3Rpb24nKTtcbiAgdmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG4gIHZhciBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIgPSByZXF1aXJlKCcuL2VzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlcicpO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIHZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50U3VwcG9ydGVkJyk7XG4gIHZhciBrZXlPZiA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU9mJyk7XG4gIHZhciBzaGFsbG93RXF1YWwgPSByZXF1aXJlKCdmYmpzL2xpYi9zaGFsbG93RXF1YWwnKTtcbiAgdmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IHJlcXVpcmUoJy4vdmFsaWRhdGVET01OZXN0aW5nJyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgRmxhZ3MgPSBSZWFjdERPTUNvbXBvbmVudEZsYWdzO1xuICB2YXIgZGVsZXRlTGlzdGVuZXIgPSBFdmVudFBsdWdpbkh1Yi5kZWxldGVMaXN0ZW5lcjtcbiAgdmFyIGdldE5vZGUgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZTtcbiAgdmFyIGxpc3RlblRvID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmxpc3RlblRvO1xuICB2YXIgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzO1xuICB2YXIgQ09OVEVOVF9UWVBFUyA9IHtcbiAgICAnc3RyaW5nJzogdHJ1ZSxcbiAgICAnbnVtYmVyJzogdHJ1ZVxuICB9O1xuICB2YXIgU1RZTEUgPSBrZXlPZih7c3R5bGU6IG51bGx9KTtcbiAgdmFyIEhUTUwgPSBrZXlPZih7X19odG1sOiBudWxsfSk7XG4gIHZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAgICBjaGlsZHJlbjogbnVsbCxcbiAgICBkYW5nZXJvdXNseVNldElubmVySFRNTDogbnVsbCxcbiAgICBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmc6IG51bGxcbiAgfTtcbiAgdmFyIERPQ19GUkFHTUVOVF9UWVBFID0gMTE7XG4gIGZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgaWYgKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgIHZhciBvd25lciA9IGludGVybmFsSW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lciB8fCBudWxsO1xuICAgICAgaWYgKG93bmVyKSB7XG4gICAgICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgIHJldHVybiAnIFRoaXMgRE9NIG5vZGUgd2FzIHJlbmRlcmVkIGJ5IGAnICsgbmFtZSArICdgLic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGZ1bmN0aW9uIGZyaWVuZGx5U3RyaW5naWZ5KG9iaikge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xuICAgICAgICByZXR1cm4gJ1snICsgb2JqLm1hcChmcmllbmRseVN0cmluZ2lmeSkuam9pbignLCAnKSArICddJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwYWlycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIHZhciBrZXlFc2NhcGVkID0gL15bYS16JF9dW1xcdyRfXSokL2kudGVzdChrZXkpID8ga2V5IDogSlNPTi5zdHJpbmdpZnkoa2V5KTtcbiAgICAgICAgICAgIHBhaXJzLnB1c2goa2V5RXNjYXBlZCArICc6ICcgKyBmcmllbmRseVN0cmluZ2lmeShvYmpba2V5XSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ3snICsgcGFpcnMuam9pbignLCAnKSArICd9JztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiAnW2Z1bmN0aW9uIG9iamVjdF0nO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKG9iaik7XG4gIH1cbiAgdmFyIHN0eWxlTXV0YXRpb25XYXJuaW5nID0ge307XG4gIGZ1bmN0aW9uIGNoZWNrQW5kV2FybkZvck11dGF0ZWRTdHlsZShzdHlsZTEsIHN0eWxlMiwgY29tcG9uZW50KSB7XG4gICAgaWYgKHN0eWxlMSA9PSBudWxsIHx8IHN0eWxlMiA9PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzaGFsbG93RXF1YWwoc3R5bGUxLCBzdHlsZTIpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBjb21wb25lbnROYW1lID0gY29tcG9uZW50Ll90YWc7XG4gICAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgdmFyIG93bmVyTmFtZTtcbiAgICBpZiAob3duZXIpIHtcbiAgICAgIG93bmVyTmFtZSA9IG93bmVyLmdldE5hbWUoKTtcbiAgICB9XG4gICAgdmFyIGhhc2ggPSBvd25lck5hbWUgKyAnfCcgKyBjb21wb25lbnROYW1lO1xuICAgIGlmIChzdHlsZU11dGF0aW9uV2FybmluZy5oYXNPd25Qcm9wZXJ0eShoYXNoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdHlsZU11dGF0aW9uV2FybmluZ1toYXNoXSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdgJXNgIHdhcyBwYXNzZWQgYSBzdHlsZSBvYmplY3QgdGhhdCBoYXMgcHJldmlvdXNseSBiZWVuIG11dGF0ZWQuICcgKyAnTXV0YXRpbmcgYHN0eWxlYCBpcyBkZXByZWNhdGVkLiBDb25zaWRlciBjbG9uaW5nIGl0IGJlZm9yZWhhbmQuIENoZWNrICcgKyAndGhlIGByZW5kZXJgICVzLiBQcmV2aW91cyBzdHlsZTogJXMuIE11dGF0ZWQgc3R5bGU6ICVzLicsIGNvbXBvbmVudE5hbWUsIG93bmVyID8gJ29mIGAnICsgb3duZXJOYW1lICsgJ2AnIDogJ3VzaW5nIDwnICsgY29tcG9uZW50TmFtZSArICc+JywgZnJpZW5kbHlTdHJpbmdpZnkoc3R5bGUxKSwgZnJpZW5kbHlTdHJpbmdpZnkoc3R5bGUyKSkgOiB2b2lkIDA7XG4gIH1cbiAgZnVuY3Rpb24gYXNzZXJ0VmFsaWRQcm9wcyhjb21wb25lbnQsIHByb3BzKSB7XG4gICAgaWYgKCFwcm9wcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodm9pZEVsZW1lbnRUYWdzW2NvbXBvbmVudC5fdGFnXSkge1xuICAgICAgIShwcm9wcy5jaGlsZHJlbiA9PSBudWxsICYmIHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzIGlzIGEgdm9pZCBlbGVtZW50IHRhZyBhbmQgbXVzdCBub3QgaGF2ZSBgY2hpbGRyZW5gIG9yICcgKyAndXNlIGBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTGAuJXMnLCBjb21wb25lbnQuX3RhZywgY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIgPyAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICcgKyBjb21wb25lbnQuX2N1cnJlbnRFbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLicgOiAnJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cbiAgICBpZiAocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT0gbnVsbCkge1xuICAgICAgIShwcm9wcy5jaGlsZHJlbiA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdDYW4gb25seSBzZXQgb25lIG9mIGBjaGlsZHJlbmAgb3IgYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAhKHR5cGVvZiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PT0gJ29iamVjdCcgJiYgSFRNTCBpbiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIGluIHRoZSBmb3JtIGB7X19odG1sOiAuLi59YC4gJyArICdQbGVhc2UgdmlzaXQgaHR0cHM6Ly9mYi5tZS9yZWFjdC1pbnZhcmlhbnQtZGFuZ2Vyb3VzbHktc2V0LWlubmVyLWh0bWwgJyArICdmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5pbm5lckhUTUwgPT0gbnVsbCwgJ0RpcmVjdGx5IHNldHRpbmcgcHJvcGVydHkgYGlubmVySFRNTGAgaXMgbm90IHBlcm1pdHRlZC4gJyArICdGb3IgbW9yZSBpbmZvcm1hdGlvbiwgbG9va3VwIGRvY3VtZW50YXRpb24gb24gYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKSA6IHZvaWQgMDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHByb3BzLnN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyB8fCAhcHJvcHMuY29udGVudEVkaXRhYmxlIHx8IHByb3BzLmNoaWxkcmVuID09IG51bGwsICdBIGNvbXBvbmVudCBpcyBgY29udGVudEVkaXRhYmxlYCBhbmQgY29udGFpbnMgYGNoaWxkcmVuYCBtYW5hZ2VkIGJ5ICcgKyAnUmVhY3QuIEl0IGlzIG5vdyB5b3VyIHJlc3BvbnNpYmlsaXR5IHRvIGd1YXJhbnRlZSB0aGF0IG5vbmUgb2YgJyArICd0aG9zZSBub2RlcyBhcmUgdW5leHBlY3RlZGx5IG1vZGlmaWVkIG9yIGR1cGxpY2F0ZWQuIFRoaXMgaXMgJyArICdwcm9iYWJseSBub3QgaW50ZW50aW9uYWwuJykgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhwcm9wcy5vbkZvY3VzSW4gPT0gbnVsbCAmJiBwcm9wcy5vbkZvY3VzT3V0ID09IG51bGwsICdSZWFjdCB1c2VzIG9uRm9jdXMgYW5kIG9uQmx1ciBpbnN0ZWFkIG9mIG9uRm9jdXNJbiBhbmQgb25Gb2N1c091dC4gJyArICdBbGwgUmVhY3QgZXZlbnRzIGFyZSBub3JtYWxpemVkIHRvIGJ1YmJsZSwgc28gb25Gb2N1c0luIGFuZCBvbkZvY3VzT3V0ICcgKyAnYXJlIG5vdCBuZWVkZWQvc3VwcG9ydGVkIGJ5IFJlYWN0LicpIDogdm9pZCAwO1xuICAgIH1cbiAgICAhKHByb3BzLnN0eWxlID09IG51bGwgfHwgdHlwZW9mIHByb3BzLnN0eWxlID09PSAnb2JqZWN0JykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVGhlIGBzdHlsZWAgcHJvcCBleHBlY3RzIGEgbWFwcGluZyBmcm9tIHN0eWxlIHByb3BlcnRpZXMgdG8gdmFsdWVzLCAnICsgJ25vdCBhIHN0cmluZy4gRm9yIGV4YW1wbGUsIHN0eWxlPXt7bWFyZ2luUmlnaHQ6IHNwYWNpbmcgKyBcXCdlbVxcJ319IHdoZW4gJyArICd1c2luZyBKU1guJXMnLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG4gIGZ1bmN0aW9uIGVucXVldWVQdXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lciwgdHJhbnNhY3Rpb24pIHtcbiAgICBpZiAodHJhbnNhY3Rpb24gaW5zdGFuY2VvZiBSZWFjdFNlcnZlclJlbmRlcmluZ1RyYW5zYWN0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhyZWdpc3RyYXRpb25OYW1lICE9PSAnb25TY3JvbGwnIHx8IGlzRXZlbnRTdXBwb3J0ZWQoJ3Njcm9sbCcsIHRydWUpLCAnVGhpcyBicm93c2VyIGRvZXNuXFwndCBzdXBwb3J0IHRoZSBgb25TY3JvbGxgIGV2ZW50JykgOiB2b2lkIDA7XG4gICAgfVxuICAgIHZhciBjb250YWluZXJJbmZvID0gaW5zdC5fbmF0aXZlQ29udGFpbmVySW5mbztcbiAgICB2YXIgaXNEb2N1bWVudEZyYWdtZW50ID0gY29udGFpbmVySW5mby5fbm9kZSAmJiBjb250YWluZXJJbmZvLl9ub2RlLm5vZGVUeXBlID09PSBET0NfRlJBR01FTlRfVFlQRTtcbiAgICB2YXIgZG9jID0gaXNEb2N1bWVudEZyYWdtZW50ID8gY29udGFpbmVySW5mby5fbm9kZSA6IGNvbnRhaW5lckluZm8uX293bmVyRG9jdW1lbnQ7XG4gICAgbGlzdGVuVG8ocmVnaXN0cmF0aW9uTmFtZSwgZG9jKTtcbiAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHB1dExpc3RlbmVyLCB7XG4gICAgICBpbnN0OiBpbnN0LFxuICAgICAgcmVnaXN0cmF0aW9uTmFtZTogcmVnaXN0cmF0aW9uTmFtZSxcbiAgICAgIGxpc3RlbmVyOiBsaXN0ZW5lclxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHB1dExpc3RlbmVyKCkge1xuICAgIHZhciBsaXN0ZW5lclRvUHV0ID0gdGhpcztcbiAgICBFdmVudFBsdWdpbkh1Yi5wdXRMaXN0ZW5lcihsaXN0ZW5lclRvUHV0Lmluc3QsIGxpc3RlbmVyVG9QdXQucmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXJUb1B1dC5saXN0ZW5lcik7XG4gIH1cbiAgZnVuY3Rpb24gb3B0aW9uUG9zdE1vdW50KCkge1xuICAgIHZhciBpbnN0ID0gdGhpcztcbiAgICBSZWFjdERPTU9wdGlvbi5wb3N0TW91bnRXcmFwcGVyKGluc3QpO1xuICB9XG4gIHZhciBzZXRDb250ZW50Q2hpbGRGb3JJbnN0cnVtZW50YXRpb24gPSBlbXB0eUZ1bmN0aW9uO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHNldENvbnRlbnRDaGlsZEZvckluc3RydW1lbnRhdGlvbiA9IGZ1bmN0aW9uKGNvbnRlbnRUb1VzZSkge1xuICAgICAgdmFyIGRlYnVnSUQgPSB0aGlzLl9kZWJ1Z0lEO1xuICAgICAgdmFyIGNvbnRlbnREZWJ1Z0lEID0gZGVidWdJRCArICcjdGV4dCc7XG4gICAgICB0aGlzLl9jb250ZW50RGVidWdJRCA9IGNvbnRlbnREZWJ1Z0lEO1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0RGlzcGxheU5hbWUoY29udGVudERlYnVnSUQsICcjdGV4dCcpO1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0VGV4dChjb250ZW50RGVidWdJRCwgJycgKyBjb250ZW50VG9Vc2UpO1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTW91bnRDb21wb25lbnQoY29udGVudERlYnVnSUQpO1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0Q2hpbGRyZW4oZGVidWdJRCwgW2NvbnRlbnREZWJ1Z0lEXSk7XG4gICAgfTtcbiAgfVxuICB2YXIgbWVkaWFFdmVudHMgPSB7XG4gICAgdG9wQWJvcnQ6ICdhYm9ydCcsXG4gICAgdG9wQ2FuUGxheTogJ2NhbnBsYXknLFxuICAgIHRvcENhblBsYXlUaHJvdWdoOiAnY2FucGxheXRocm91Z2gnLFxuICAgIHRvcER1cmF0aW9uQ2hhbmdlOiAnZHVyYXRpb25jaGFuZ2UnLFxuICAgIHRvcEVtcHRpZWQ6ICdlbXB0aWVkJyxcbiAgICB0b3BFbmNyeXB0ZWQ6ICdlbmNyeXB0ZWQnLFxuICAgIHRvcEVuZGVkOiAnZW5kZWQnLFxuICAgIHRvcEVycm9yOiAnZXJyb3InLFxuICAgIHRvcExvYWRlZERhdGE6ICdsb2FkZWRkYXRhJyxcbiAgICB0b3BMb2FkZWRNZXRhZGF0YTogJ2xvYWRlZG1ldGFkYXRhJyxcbiAgICB0b3BMb2FkU3RhcnQ6ICdsb2Fkc3RhcnQnLFxuICAgIHRvcFBhdXNlOiAncGF1c2UnLFxuICAgIHRvcFBsYXk6ICdwbGF5JyxcbiAgICB0b3BQbGF5aW5nOiAncGxheWluZycsXG4gICAgdG9wUHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gICAgdG9wUmF0ZUNoYW5nZTogJ3JhdGVjaGFuZ2UnLFxuICAgIHRvcFNlZWtlZDogJ3NlZWtlZCcsXG4gICAgdG9wU2Vla2luZzogJ3NlZWtpbmcnLFxuICAgIHRvcFN0YWxsZWQ6ICdzdGFsbGVkJyxcbiAgICB0b3BTdXNwZW5kOiAnc3VzcGVuZCcsXG4gICAgdG9wVGltZVVwZGF0ZTogJ3RpbWV1cGRhdGUnLFxuICAgIHRvcFZvbHVtZUNoYW5nZTogJ3ZvbHVtZWNoYW5nZScsXG4gICAgdG9wV2FpdGluZzogJ3dhaXRpbmcnXG4gIH07XG4gIGZ1bmN0aW9uIHRyYXBCdWJibGVkRXZlbnRzTG9jYWwoKSB7XG4gICAgdmFyIGluc3QgPSB0aGlzO1xuICAgICFpbnN0Ll9yb290Tm9kZUlEID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ011c3QgYmUgbW91bnRlZCB0byB0cmFwIGV2ZW50cycpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgbm9kZSA9IGdldE5vZGUoaW5zdCk7XG4gICAgIW5vZGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAndHJhcEJ1YmJsZWRFdmVudCguLi4pOiBSZXF1aXJlcyBub2RlIHRvIGJlIHJlbmRlcmVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBzd2l0Y2ggKGluc3QuX3RhZykge1xuICAgICAgY2FzZSAnaWZyYW1lJzpcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BMb2FkLCAnbG9hZCcsIG5vZGUpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd2aWRlbyc6XG4gICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgZXZlbnQgaW4gbWVkaWFFdmVudHMpIHtcbiAgICAgICAgICBpZiAobWVkaWFFdmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XG4gICAgICAgICAgICBpbnN0Ll93cmFwcGVyU3RhdGUubGlzdGVuZXJzLnB1c2goUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlc1tldmVudF0sIG1lZGlhRXZlbnRzW2V2ZW50XSwgbm9kZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2ltZyc6XG4gICAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BFcnJvciwgJ2Vycm9yJywgbm9kZSksIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wTG9hZCwgJ2xvYWQnLCBub2RlKV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZm9ybSc6XG4gICAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BSZXNldCwgJ3Jlc2V0Jywgbm9kZSksIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci50cmFwQnViYmxlZEV2ZW50KEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXMudG9wU3VibWl0LCAnc3VibWl0Jywgbm9kZSldO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIGluc3QuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnMgPSBbUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLnRyYXBCdWJibGVkRXZlbnQoRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcy50b3BJbnZhbGlkLCAnaW52YWxpZCcsIG5vZGUpXTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHBvc3RVcGRhdGVTZWxlY3RXcmFwcGVyKCkge1xuICAgIFJlYWN0RE9NU2VsZWN0LnBvc3RVcGRhdGVXcmFwcGVyKHRoaXMpO1xuICB9XG4gIHZhciBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuICAgICdhcmVhJzogdHJ1ZSxcbiAgICAnYmFzZSc6IHRydWUsXG4gICAgJ2JyJzogdHJ1ZSxcbiAgICAnY29sJzogdHJ1ZSxcbiAgICAnZW1iZWQnOiB0cnVlLFxuICAgICdocic6IHRydWUsXG4gICAgJ2ltZyc6IHRydWUsXG4gICAgJ2lucHV0JzogdHJ1ZSxcbiAgICAna2V5Z2VuJzogdHJ1ZSxcbiAgICAnbGluayc6IHRydWUsXG4gICAgJ21ldGEnOiB0cnVlLFxuICAgICdwYXJhbSc6IHRydWUsXG4gICAgJ3NvdXJjZSc6IHRydWUsXG4gICAgJ3RyYWNrJzogdHJ1ZSxcbiAgICAnd2JyJzogdHJ1ZVxuICB9O1xuICB2YXIgbmV3bGluZUVhdGluZ1RhZ3MgPSB7XG4gICAgJ2xpc3RpbmcnOiB0cnVlLFxuICAgICdwcmUnOiB0cnVlLFxuICAgICd0ZXh0YXJlYSc6IHRydWVcbiAgfTtcbiAgdmFyIHZvaWRFbGVtZW50VGFncyA9IF9hc3NpZ24oeydtZW51aXRlbSc6IHRydWV9LCBvbWl0dGVkQ2xvc2VUYWdzKTtcbiAgdmFyIFZBTElEX1RBR19SRUdFWCA9IC9eW2EtekEtWl1bYS16QS1aOl9cXC5cXC1cXGRdKiQvO1xuICB2YXIgdmFsaWRhdGVkVGFnQ2FjaGUgPSB7fTtcbiAgdmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlRGFuZ2Vyb3VzVGFnKHRhZykge1xuICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbCh2YWxpZGF0ZWRUYWdDYWNoZSwgdGFnKSkge1xuICAgICAgIVZBTElEX1RBR19SRUdFWC50ZXN0KHRhZykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnSW52YWxpZCB0YWc6ICVzJywgdGFnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YWxpZGF0ZWRUYWdDYWNoZVt0YWddID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaXNDdXN0b21Db21wb25lbnQodGFnTmFtZSwgcHJvcHMpIHtcbiAgICByZXR1cm4gdGFnTmFtZS5pbmRleE9mKCctJykgPj0gMCB8fCBwcm9wcy5pcyAhPSBudWxsO1xuICB9XG4gIHZhciBnbG9iYWxJZENvdW50ZXIgPSAxO1xuICBmdW5jdGlvbiBSZWFjdERPTUNvbXBvbmVudChlbGVtZW50KSB7XG4gICAgdmFyIHRhZyA9IGVsZW1lbnQudHlwZTtcbiAgICB2YWxpZGF0ZURhbmdlcm91c1RhZyh0YWcpO1xuICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLl90YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgICB0aGlzLl9uYW1lc3BhY2VVUkkgPSBudWxsO1xuICAgIHRoaXMuX3JlbmRlcmVkQ2hpbGRyZW4gPSBudWxsO1xuICAgIHRoaXMuX3ByZXZpb3VzU3R5bGUgPSBudWxsO1xuICAgIHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gbnVsbDtcbiAgICB0aGlzLl9uYXRpdmVOb2RlID0gbnVsbDtcbiAgICB0aGlzLl9uYXRpdmVQYXJlbnQgPSBudWxsO1xuICAgIHRoaXMuX3Jvb3ROb2RlSUQgPSBudWxsO1xuICAgIHRoaXMuX2RvbUlEID0gbnVsbDtcbiAgICB0aGlzLl9uYXRpdmVDb250YWluZXJJbmZvID0gbnVsbDtcbiAgICB0aGlzLl93cmFwcGVyU3RhdGUgPSBudWxsO1xuICAgIHRoaXMuX3RvcExldmVsV3JhcHBlciA9IG51bGw7XG4gICAgdGhpcy5fZmxhZ3MgPSAwO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB0aGlzLl9hbmNlc3RvckluZm8gPSBudWxsO1xuICAgICAgdGhpcy5fY29udGVudERlYnVnSUQgPSBudWxsO1xuICAgIH1cbiAgfVxuICBSZWFjdERPTUNvbXBvbmVudC5kaXNwbGF5TmFtZSA9ICdSZWFjdERPTUNvbXBvbmVudCc7XG4gIFJlYWN0RE9NQ29tcG9uZW50Lk1peGluID0ge1xuICAgIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbih0cmFuc2FjdGlvbiwgbmF0aXZlUGFyZW50LCBuYXRpdmVDb250YWluZXJJbmZvLCBjb250ZXh0KSB7XG4gICAgICB0aGlzLl9yb290Tm9kZUlEID0gZ2xvYmFsSWRDb3VudGVyKys7XG4gICAgICB0aGlzLl9kb21JRCA9IG5hdGl2ZUNvbnRhaW5lckluZm8uX2lkQ291bnRlcisrO1xuICAgICAgdGhpcy5fbmF0aXZlUGFyZW50ID0gbmF0aXZlUGFyZW50O1xuICAgICAgdGhpcy5fbmF0aXZlQ29udGFpbmVySW5mbyA9IG5hdGl2ZUNvbnRhaW5lckluZm87XG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLl9jdXJyZW50RWxlbWVudC5wcm9wcztcbiAgICAgIHN3aXRjaCAodGhpcy5fdGFnKSB7XG4gICAgICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIGNhc2UgJ2ltZyc6XG4gICAgICAgIGNhc2UgJ2Zvcm0nOlxuICAgICAgICBjYXNlICd2aWRlbyc6XG4gICAgICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgICAgICB0aGlzLl93cmFwcGVyU3RhdGUgPSB7bGlzdGVuZXJzOiBudWxsfTtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYXBCdWJibGVkRXZlbnRzTG9jYWwsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICAgIHByb3BzID0gUmVhY3RET01CdXR0b24uZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMsIG5hdGl2ZVBhcmVudCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICBSZWFjdERPTUlucHV0Lm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgbmF0aXZlUGFyZW50KTtcbiAgICAgICAgICBwcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMpO1xuICAgICAgICAgIHRyYW5zYWN0aW9uLmdldFJlYWN0TW91bnRSZWFkeSgpLmVucXVldWUodHJhcEJ1YmJsZWRFdmVudHNMb2NhbCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgICAgUmVhY3RET01PcHRpb24ubW91bnRXcmFwcGVyKHRoaXMsIHByb3BzLCBuYXRpdmVQYXJlbnQpO1xuICAgICAgICAgIHByb3BzID0gUmVhY3RET01PcHRpb24uZ2V0TmF0aXZlUHJvcHModGhpcywgcHJvcHMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICAgIFJlYWN0RE9NU2VsZWN0Lm1vdW50V3JhcHBlcih0aGlzLCBwcm9wcywgbmF0aXZlUGFyZW50KTtcbiAgICAgICAgICBwcm9wcyA9IFJlYWN0RE9NU2VsZWN0LmdldE5hdGl2ZVByb3BzKHRoaXMsIHByb3BzKTtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYXBCdWJibGVkRXZlbnRzTG9jYWwsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgICAgUmVhY3RET01UZXh0YXJlYS5tb3VudFdyYXBwZXIodGhpcywgcHJvcHMsIG5hdGl2ZVBhcmVudCk7XG4gICAgICAgICAgcHJvcHMgPSBSZWFjdERPTVRleHRhcmVhLmdldE5hdGl2ZVByb3BzKHRoaXMsIHByb3BzKTtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKHRyYXBCdWJibGVkRXZlbnRzTG9jYWwsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYXNzZXJ0VmFsaWRQcm9wcyh0aGlzLCBwcm9wcyk7XG4gICAgICB2YXIgbmFtZXNwYWNlVVJJO1xuICAgICAgdmFyIHBhcmVudFRhZztcbiAgICAgIGlmIChuYXRpdmVQYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICBuYW1lc3BhY2VVUkkgPSBuYXRpdmVQYXJlbnQuX25hbWVzcGFjZVVSSTtcbiAgICAgICAgcGFyZW50VGFnID0gbmF0aXZlUGFyZW50Ll90YWc7XG4gICAgICB9IGVsc2UgaWYgKG5hdGl2ZUNvbnRhaW5lckluZm8uX3RhZykge1xuICAgICAgICBuYW1lc3BhY2VVUkkgPSBuYXRpdmVDb250YWluZXJJbmZvLl9uYW1lc3BhY2VVUkk7XG4gICAgICAgIHBhcmVudFRhZyA9IG5hdGl2ZUNvbnRhaW5lckluZm8uX3RhZztcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lc3BhY2VVUkkgPT0gbnVsbCB8fCBuYW1lc3BhY2VVUkkgPT09IERPTU5hbWVzcGFjZXMuc3ZnICYmIHBhcmVudFRhZyA9PT0gJ2ZvcmVpZ25vYmplY3QnKSB7XG4gICAgICAgIG5hbWVzcGFjZVVSSSA9IERPTU5hbWVzcGFjZXMuaHRtbDtcbiAgICAgIH1cbiAgICAgIGlmIChuYW1lc3BhY2VVUkkgPT09IERPTU5hbWVzcGFjZXMuaHRtbCkge1xuICAgICAgICBpZiAodGhpcy5fdGFnID09PSAnc3ZnJykge1xuICAgICAgICAgIG5hbWVzcGFjZVVSSSA9IERPTU5hbWVzcGFjZXMuc3ZnO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3RhZyA9PT0gJ21hdGgnKSB7XG4gICAgICAgICAgbmFtZXNwYWNlVVJJID0gRE9NTmFtZXNwYWNlcy5tYXRobWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX25hbWVzcGFjZVVSSSA9IG5hbWVzcGFjZVVSSTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBwYXJlbnRJbmZvO1xuICAgICAgICBpZiAobmF0aXZlUGFyZW50ICE9IG51bGwpIHtcbiAgICAgICAgICBwYXJlbnRJbmZvID0gbmF0aXZlUGFyZW50Ll9hbmNlc3RvckluZm87XG4gICAgICAgIH0gZWxzZSBpZiAobmF0aXZlQ29udGFpbmVySW5mby5fdGFnKSB7XG4gICAgICAgICAgcGFyZW50SW5mbyA9IG5hdGl2ZUNvbnRhaW5lckluZm8uX2FuY2VzdG9ySW5mbztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyZW50SW5mbykge1xuICAgICAgICAgIHZhbGlkYXRlRE9NTmVzdGluZyh0aGlzLl90YWcsIHRoaXMsIHBhcmVudEluZm8pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FuY2VzdG9ySW5mbyA9IHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvKHBhcmVudEluZm8sIHRoaXMuX3RhZywgdGhpcyk7XG4gICAgICB9XG4gICAgICB2YXIgbW91bnRJbWFnZTtcbiAgICAgIGlmICh0cmFuc2FjdGlvbi51c2VDcmVhdGVFbGVtZW50KSB7XG4gICAgICAgIHZhciBvd25lckRvY3VtZW50ID0gbmF0aXZlQ29udGFpbmVySW5mby5fb3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIGVsO1xuICAgICAgICBpZiAobmFtZXNwYWNlVVJJID09PSBET01OYW1lc3BhY2VzLmh0bWwpIHtcbiAgICAgICAgICBpZiAodGhpcy5fdGFnID09PSAnc2NyaXB0Jykge1xuICAgICAgICAgICAgdmFyIGRpdiA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICAgICAgICBkaXYuaW5uZXJIVE1MID0gJzwnICsgdHlwZSArICc+PC8nICsgdHlwZSArICc+JztcbiAgICAgICAgICAgIGVsID0gZGl2LnJlbW92ZUNoaWxkKGRpdi5maXJzdENoaWxkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwgPSBvd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGhpcy5fY3VycmVudEVsZW1lbnQudHlwZSwgcHJvcHMuaXMgfHwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUucHJlY2FjaGVOb2RlKHRoaXMsIGVsKTtcbiAgICAgICAgdGhpcy5fZmxhZ3MgfD0gRmxhZ3MuaGFzQ2FjaGVkQ2hpbGROb2RlcztcbiAgICAgICAgaWYgKCF0aGlzLl9uYXRpdmVQYXJlbnQpIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuc2V0QXR0cmlidXRlRm9yUm9vdChlbCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlRE9NUHJvcGVydGllcyhudWxsLCBwcm9wcywgdHJhbnNhY3Rpb24pO1xuICAgICAgICB2YXIgbGF6eVRyZWUgPSBET01MYXp5VHJlZShlbCk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUluaXRpYWxDaGlsZHJlbih0cmFuc2FjdGlvbiwgcHJvcHMsIGNvbnRleHQsIGxhenlUcmVlKTtcbiAgICAgICAgbW91bnRJbWFnZSA9IGxhenlUcmVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZ09wZW4gPSB0aGlzLl9jcmVhdGVPcGVuVGFnTWFya3VwQW5kUHV0TGlzdGVuZXJzKHRyYW5zYWN0aW9uLCBwcm9wcyk7XG4gICAgICAgIHZhciB0YWdDb250ZW50ID0gdGhpcy5fY3JlYXRlQ29udGVudE1hcmt1cCh0cmFuc2FjdGlvbiwgcHJvcHMsIGNvbnRleHQpO1xuICAgICAgICBpZiAoIXRhZ0NvbnRlbnQgJiYgb21pdHRlZENsb3NlVGFnc1t0aGlzLl90YWddKSB7XG4gICAgICAgICAgbW91bnRJbWFnZSA9IHRhZ09wZW4gKyAnLz4nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vdW50SW1hZ2UgPSB0YWdPcGVuICsgJz4nICsgdGFnQ29udGVudCArICc8LycgKyB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlICsgJz4nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgICBjYXNlICdidXR0b24nOlxuICAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgICAgICBpZiAocHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKEF1dG9Gb2N1c1V0aWxzLmZvY3VzRE9NQ29tcG9uZW50LCB0aGlzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShvcHRpb25Qb3N0TW91bnQsIHRoaXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1vdW50SW1hZ2U7XG4gICAgfSxcbiAgICBfY3JlYXRlT3BlblRhZ01hcmt1cEFuZFB1dExpc3RlbmVyczogZnVuY3Rpb24odHJhbnNhY3Rpb24sIHByb3BzKSB7XG4gICAgICB2YXIgcmV0ID0gJzwnICsgdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgIGZvciAodmFyIHByb3BLZXkgaW4gcHJvcHMpIHtcbiAgICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wS2V5XTtcbiAgICAgICAgaWYgKHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgICAgaWYgKHByb3BWYWx1ZSkge1xuICAgICAgICAgICAgZW5xdWV1ZVB1dExpc3RlbmVyKHRoaXMsIHByb3BLZXksIHByb3BWYWx1ZSwgdHJhbnNhY3Rpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgICAgIGlmIChwcm9wVmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlID0gcHJvcFZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHByb3BWYWx1ZSA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gX2Fzc2lnbih7fSwgcHJvcHMuc3R5bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcHJvcFZhbHVlID0gQ1NTUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvclN0eWxlcyhwcm9wVmFsdWUsIHRoaXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgbWFya3VwID0gbnVsbDtcbiAgICAgICAgICBpZiAodGhpcy5fdGFnICE9IG51bGwgJiYgaXNDdXN0b21Db21wb25lbnQodGhpcy5fdGFnLCBwcm9wcykpIHtcbiAgICAgICAgICAgIGlmICghUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICAgICAgbWFya3VwID0gRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvckN1c3RvbUF0dHJpYnV0ZShwcm9wS2V5LCBwcm9wVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXJrdXAgPSBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuY3JlYXRlTWFya3VwRm9yUHJvcGVydHkocHJvcEtleSwgcHJvcFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG1hcmt1cCkge1xuICAgICAgICAgICAgcmV0ICs9ICcgJyArIG1hcmt1cDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2FjdGlvbi5yZW5kZXJUb1N0YXRpY01hcmt1cCkge1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLl9uYXRpdmVQYXJlbnQpIHtcbiAgICAgICAgcmV0ICs9ICcgJyArIERPTVByb3BlcnR5T3BlcmF0aW9ucy5jcmVhdGVNYXJrdXBGb3JSb290KCk7XG4gICAgICB9XG4gICAgICByZXQgKz0gJyAnICsgRE9NUHJvcGVydHlPcGVyYXRpb25zLmNyZWF0ZU1hcmt1cEZvcklEKHRoaXMuX2RvbUlEKTtcbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcbiAgICBfY3JlYXRlQ29udGVudE1hcmt1cDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcmV0ID0gJyc7XG4gICAgICB2YXIgaW5uZXJIVE1MID0gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw7XG4gICAgICBpZiAoaW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlubmVySFRNTC5fX2h0bWwgIT0gbnVsbCkge1xuICAgICAgICAgIHJldCA9IGlubmVySFRNTC5fX2h0bWw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjb250ZW50VG9Vc2UgPSBDT05URU5UX1RZUEVTW3R5cGVvZiBwcm9wcy5jaGlsZHJlbl0gPyBwcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgICAgIHZhciBjaGlsZHJlblRvVXNlID0gY29udGVudFRvVXNlICE9IG51bGwgPyBudWxsIDogcHJvcHMuY2hpbGRyZW47XG4gICAgICAgIGlmIChjb250ZW50VG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICAgIHJldCA9IGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3Nlcihjb250ZW50VG9Vc2UpO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBzZXRDb250ZW50Q2hpbGRGb3JJbnN0cnVtZW50YXRpb24uY2FsbCh0aGlzLCBjb250ZW50VG9Vc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChjaGlsZHJlblRvVXNlICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgbW91bnRJbWFnZXMgPSB0aGlzLm1vdW50Q2hpbGRyZW4oY2hpbGRyZW5Ub1VzZSwgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgICAgIHJldCA9IG1vdW50SW1hZ2VzLmpvaW4oJycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobmV3bGluZUVhdGluZ1RhZ3NbdGhpcy5fdGFnXSAmJiByZXQuY2hhckF0KDApID09PSAnXFxuJykge1xuICAgICAgICByZXR1cm4gJ1xcbicgKyByZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfVxuICAgIH0sXG4gICAgX2NyZWF0ZUluaXRpYWxDaGlsZHJlbjogZnVuY3Rpb24odHJhbnNhY3Rpb24sIHByb3BzLCBjb250ZXh0LCBsYXp5VHJlZSkge1xuICAgICAgdmFyIGlubmVySFRNTCA9IHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MO1xuICAgICAgaWYgKGlubmVySFRNTCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpbm5lckhUTUwuX19odG1sICE9IG51bGwpIHtcbiAgICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUhUTUwobGF6eVRyZWUsIGlubmVySFRNTC5fX2h0bWwpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY29udGVudFRvVXNlID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgcHJvcHMuY2hpbGRyZW5dID8gcHJvcHMuY2hpbGRyZW4gOiBudWxsO1xuICAgICAgICB2YXIgY2hpbGRyZW5Ub1VzZSA9IGNvbnRlbnRUb1VzZSAhPSBudWxsID8gbnVsbCA6IHByb3BzLmNoaWxkcmVuO1xuICAgICAgICBpZiAoY29udGVudFRvVXNlICE9IG51bGwpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgc2V0Q29udGVudENoaWxkRm9ySW5zdHJ1bWVudGF0aW9uLmNhbGwodGhpcywgY29udGVudFRvVXNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgRE9NTGF6eVRyZWUucXVldWVUZXh0KGxhenlUcmVlLCBjb250ZW50VG9Vc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkcmVuVG9Vc2UgIT0gbnVsbCkge1xuICAgICAgICAgIHZhciBtb3VudEltYWdlcyA9IHRoaXMubW91bnRDaGlsZHJlbihjaGlsZHJlblRvVXNlLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb3VudEltYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgRE9NTGF6eVRyZWUucXVldWVDaGlsZChsYXp5VHJlZSwgbW91bnRJbWFnZXNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24obmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB2YXIgcHJldkVsZW1lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudDtcbiAgICAgIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbmV4dEVsZW1lbnQ7XG4gICAgICB0aGlzLnVwZGF0ZUNvbXBvbmVudCh0cmFuc2FjdGlvbiwgcHJldkVsZW1lbnQsIG5leHRFbGVtZW50LCBjb250ZXh0KTtcbiAgICB9LFxuICAgIHVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCwgY29udGV4dCkge1xuICAgICAgdmFyIGxhc3RQcm9wcyA9IHByZXZFbGVtZW50LnByb3BzO1xuICAgICAgdmFyIG5leHRQcm9wcyA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgICAgc3dpdGNoICh0aGlzLl90YWcpIHtcbiAgICAgICAgY2FzZSAnYnV0dG9uJzpcbiAgICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTUJ1dHRvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NQnV0dG9uLmdldE5hdGl2ZVByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICBSZWFjdERPTUlucHV0LnVwZGF0ZVdyYXBwZXIodGhpcyk7XG4gICAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01JbnB1dC5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NSW5wdXQuZ2V0TmF0aXZlUHJvcHModGhpcywgbmV4dFByb3BzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgICBsYXN0UHJvcHMgPSBSZWFjdERPTU9wdGlvbi5nZXROYXRpdmVQcm9wcyh0aGlzLCBsYXN0UHJvcHMpO1xuICAgICAgICAgIG5leHRQcm9wcyA9IFJlYWN0RE9NT3B0aW9uLmdldE5hdGl2ZVByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgICAgbGFzdFByb3BzID0gUmVhY3RET01TZWxlY3QuZ2V0TmF0aXZlUHJvcHModGhpcywgbGFzdFByb3BzKTtcbiAgICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTVNlbGVjdC5nZXROYXRpdmVQcm9wcyh0aGlzLCBuZXh0UHJvcHMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgICAgUmVhY3RET01UZXh0YXJlYS51cGRhdGVXcmFwcGVyKHRoaXMpO1xuICAgICAgICAgIGxhc3RQcm9wcyA9IFJlYWN0RE9NVGV4dGFyZWEuZ2V0TmF0aXZlUHJvcHModGhpcywgbGFzdFByb3BzKTtcbiAgICAgICAgICBuZXh0UHJvcHMgPSBSZWFjdERPTVRleHRhcmVhLmdldE5hdGl2ZVByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBhc3NlcnRWYWxpZFByb3BzKHRoaXMsIG5leHRQcm9wcyk7XG4gICAgICB0aGlzLl91cGRhdGVET01Qcm9wZXJ0aWVzKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbik7XG4gICAgICB0aGlzLl91cGRhdGVET01DaGlsZHJlbihsYXN0UHJvcHMsIG5leHRQcm9wcywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgaWYgKHRoaXMuX3RhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShwb3N0VXBkYXRlU2VsZWN0V3JhcHBlciwgdGhpcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfdXBkYXRlRE9NUHJvcGVydGllczogZnVuY3Rpb24obGFzdFByb3BzLCBuZXh0UHJvcHMsIHRyYW5zYWN0aW9uKSB7XG4gICAgICB2YXIgcHJvcEtleTtcbiAgICAgIHZhciBzdHlsZU5hbWU7XG4gICAgICB2YXIgc3R5bGVVcGRhdGVzO1xuICAgICAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgICAgICBpZiAobmV4dFByb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpIHx8ICFsYXN0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgbGFzdFByb3BzW3Byb3BLZXldID09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgICB2YXIgbGFzdFN0eWxlID0gdGhpcy5fcHJldmlvdXNTdHlsZUNvcHk7XG4gICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFN0eWxlKSB7XG4gICAgICAgICAgICBpZiAobGFzdFN0eWxlLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gc3R5bGVVcGRhdGVzIHx8IHt9O1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAocmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgICAgICBpZiAobGFzdFByb3BzW3Byb3BLZXldKSB7XG4gICAgICAgICAgICBkZWxldGVMaXN0ZW5lcih0aGlzLCBwcm9wS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wS2V5XSB8fCBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICAgIERPTVByb3BlcnR5T3BlcmF0aW9ucy5kZWxldGVWYWx1ZUZvclByb3BlcnR5KGdldE5vZGUodGhpcyksIHByb3BLZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKHByb3BLZXkgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgIHZhciBuZXh0UHJvcCA9IG5leHRQcm9wc1twcm9wS2V5XTtcbiAgICAgICAgdmFyIGxhc3RQcm9wID0gcHJvcEtleSA9PT0gU1RZTEUgPyB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA6IGxhc3RQcm9wcyAhPSBudWxsID8gbGFzdFByb3BzW3Byb3BLZXldIDogdW5kZWZpbmVkO1xuICAgICAgICBpZiAoIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCBuZXh0UHJvcCA9PT0gbGFzdFByb3AgfHwgbmV4dFByb3AgPT0gbnVsbCAmJiBsYXN0UHJvcCA9PSBudWxsKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICAgICAgaWYgKG5leHRQcm9wKSB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBjaGVja0FuZFdhcm5Gb3JNdXRhdGVkU3R5bGUodGhpcy5fcHJldmlvdXNTdHlsZUNvcHksIHRoaXMuX3ByZXZpb3VzU3R5bGUsIHRoaXMpO1xuICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlID0gbmV4dFByb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0UHJvcCA9IHRoaXMuX3ByZXZpb3VzU3R5bGVDb3B5ID0gX2Fzc2lnbih7fSwgbmV4dFByb3ApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wcmV2aW91c1N0eWxlQ29weSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChsYXN0UHJvcCkge1xuICAgICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbGFzdFByb3ApIHtcbiAgICAgICAgICAgICAgaWYgKGxhc3RQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiYgKCFuZXh0UHJvcCB8fCAhbmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkpIHtcbiAgICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSBzdHlsZVVwZGF0ZXMgfHwge307XG4gICAgICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSAnJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcbiAgICAgICAgICAgICAgaWYgKG5leHRQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiYgbGFzdFByb3Bbc3R5bGVOYW1lXSAhPT0gbmV4dFByb3Bbc3R5bGVOYW1lXSkge1xuICAgICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHN0eWxlVXBkYXRlcyB8fCB7fTtcbiAgICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9IG5leHRQcm9wW3N0eWxlTmFtZV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3R5bGVVcGRhdGVzID0gbmV4dFByb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICAgICAgaWYgKG5leHRQcm9wKSB7XG4gICAgICAgICAgICBlbnF1ZXVlUHV0TGlzdGVuZXIodGhpcywgcHJvcEtleSwgbmV4dFByb3AsIHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RQcm9wKSB7XG4gICAgICAgICAgICBkZWxldGVMaXN0ZW5lcih0aGlzLCBwcm9wS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNDdXN0b21Db21wb25lbnQodGhpcy5fdGFnLCBuZXh0UHJvcHMpKSB7XG4gICAgICAgICAgaWYgKCFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yQXR0cmlidXRlKGdldE5vZGUodGhpcyksIHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoRE9NUHJvcGVydHkucHJvcGVydGllc1twcm9wS2V5XSB8fCBET01Qcm9wZXJ0eS5pc0N1c3RvbUF0dHJpYnV0ZShwcm9wS2V5KSkge1xuICAgICAgICAgIHZhciBub2RlID0gZ2V0Tm9kZSh0aGlzKTtcbiAgICAgICAgICBpZiAobmV4dFByb3AgIT0gbnVsbCkge1xuICAgICAgICAgICAgRE9NUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yUHJvcGVydHkobm9kZSwgcHJvcEtleSwgbmV4dFByb3ApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBET01Qcm9wZXJ0eU9wZXJhdGlvbnMuZGVsZXRlVmFsdWVGb3JQcm9wZXJ0eShub2RlLCBwcm9wS2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzdHlsZVVwZGF0ZXMpIHtcbiAgICAgICAgQ1NTUHJvcGVydHlPcGVyYXRpb25zLnNldFZhbHVlRm9yU3R5bGVzKGdldE5vZGUodGhpcyksIHN0eWxlVXBkYXRlcywgdGhpcyk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfdXBkYXRlRE9NQ2hpbGRyZW46IGZ1bmN0aW9uKGxhc3RQcm9wcywgbmV4dFByb3BzLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIGxhc3RDb250ZW50ID0gQ09OVEVOVF9UWVBFU1t0eXBlb2YgbGFzdFByb3BzLmNoaWxkcmVuXSA/IGxhc3RQcm9wcy5jaGlsZHJlbiA6IG51bGw7XG4gICAgICB2YXIgbmV4dENvbnRlbnQgPSBDT05URU5UX1RZUEVTW3R5cGVvZiBuZXh0UHJvcHMuY2hpbGRyZW5dID8gbmV4dFByb3BzLmNoaWxkcmVuIDogbnVsbDtcbiAgICAgIHZhciBsYXN0SHRtbCA9IGxhc3RQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJiBsYXN0UHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sO1xuICAgICAgdmFyIG5leHRIdG1sID0gbmV4dFByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICYmIG5leHRQcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWw7XG4gICAgICB2YXIgbGFzdENoaWxkcmVuID0gbGFzdENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBsYXN0UHJvcHMuY2hpbGRyZW47XG4gICAgICB2YXIgbmV4dENoaWxkcmVuID0gbmV4dENvbnRlbnQgIT0gbnVsbCA/IG51bGwgOiBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgICB2YXIgbGFzdEhhc0NvbnRlbnRPckh0bWwgPSBsYXN0Q29udGVudCAhPSBudWxsIHx8IGxhc3RIdG1sICE9IG51bGw7XG4gICAgICB2YXIgbmV4dEhhc0NvbnRlbnRPckh0bWwgPSBuZXh0Q29udGVudCAhPSBudWxsIHx8IG5leHRIdG1sICE9IG51bGw7XG4gICAgICBpZiAobGFzdENoaWxkcmVuICE9IG51bGwgJiYgbmV4dENoaWxkcmVuID09IG51bGwpIHtcbiAgICAgICAgdGhpcy51cGRhdGVDaGlsZHJlbihudWxsLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICB9IGVsc2UgaWYgKGxhc3RIYXNDb250ZW50T3JIdG1sICYmICFuZXh0SGFzQ29udGVudE9ySHRtbCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbih0aGlzLl9kZWJ1Z0lELCBbXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChuZXh0Q29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChsYXN0Q29udGVudCAhPT0gbmV4dENvbnRlbnQpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVRleHRDb250ZW50KCcnICsgbmV4dENvbnRlbnQpO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50RGVidWdJRCA9IHRoaXMuX2RlYnVnSUQgKyAnI3RleHQnO1xuICAgICAgICAgICAgc2V0Q29udGVudENoaWxkRm9ySW5zdHJ1bWVudGF0aW9uLmNhbGwodGhpcywgbmV4dENvbnRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChsYXN0SHRtbCAhPT0gbmV4dEh0bWwpIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZU1hcmt1cCgnJyArIG5leHRIdG1sKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKHRoaXMuX2RlYnVnSUQsIFtdKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXh0Q2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9jb250ZW50RGVidWdJRCkge1xuICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uVW5tb3VudENvbXBvbmVudCh0aGlzLl9jb250ZW50RGVidWdJRCk7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50RGVidWdJRCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlQ2hpbGRyZW4obmV4dENoaWxkcmVuLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXROYXRpdmVOb2RlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXROb2RlKHRoaXMpO1xuICAgIH0sXG4gICAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oc2FmZWx5KSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX3RhZykge1xuICAgICAgICBjYXNlICdpZnJhbWUnOlxuICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBjYXNlICdpbWcnOlxuICAgICAgICBjYXNlICdmb3JtJzpcbiAgICAgICAgY2FzZSAndmlkZW8nOlxuICAgICAgICBjYXNlICdhdWRpbyc6XG4gICAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX3dyYXBwZXJTdGF0ZS5saXN0ZW5lcnM7XG4gICAgICAgICAgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzW2ldLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgIGNhc2UgJ2hlYWQnOlxuICAgICAgICBjYXNlICdib2R5JzpcbiAgICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnPCVzPiB0cmllZCB0byB1bm1vdW50LiBCZWNhdXNlIG9mIGNyb3NzLWJyb3dzZXIgcXVpcmtzIGl0IGlzICcgKyAnaW1wb3NzaWJsZSB0byB1bm1vdW50IHNvbWUgdG9wLWxldmVsIGNvbXBvbmVudHMgKGVnIDxodG1sPiwgJyArICc8aGVhZD4sIGFuZCA8Ym9keT4pIHJlbGlhYmx5IGFuZCBlZmZpY2llbnRseS4gVG8gZml4IHRoaXMsIGhhdmUgYSAnICsgJ3NpbmdsZSB0b3AtbGV2ZWwgY29tcG9uZW50IHRoYXQgbmV2ZXIgdW5tb3VudHMgcmVuZGVyIHRoZXNlICcgKyAnZWxlbWVudHMuJywgdGhpcy5fdGFnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICB0aGlzLnVubW91bnRDaGlsZHJlbihzYWZlbHkpO1xuICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnVuY2FjaGVOb2RlKHRoaXMpO1xuICAgICAgRXZlbnRQbHVnaW5IdWIuZGVsZXRlQWxsTGlzdGVuZXJzKHRoaXMpO1xuICAgICAgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50KHRoaXMuX3Jvb3ROb2RlSUQpO1xuICAgICAgdGhpcy5fcm9vdE5vZGVJRCA9IG51bGw7XG4gICAgICB0aGlzLl9kb21JRCA9IG51bGw7XG4gICAgICB0aGlzLl93cmFwcGVyU3RhdGUgPSBudWxsO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRlbnREZWJ1Z0lEKSB7XG4gICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uVW5tb3VudENvbXBvbmVudCh0aGlzLl9jb250ZW50RGVidWdJRCk7XG4gICAgICAgICAgdGhpcy5fY29udGVudERlYnVnSUQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRQdWJsaWNJbnN0YW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Tm9kZSh0aGlzKTtcbiAgICB9XG4gIH07XG4gIF9hc3NpZ24oUmVhY3RET01Db21wb25lbnQucHJvdG90eXBlLCBSZWFjdERPTUNvbXBvbmVudC5NaXhpbiwgUmVhY3RNdWx0aUNoaWxkLk1peGluKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUNvbXBvbmVudDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xudmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RET01FbXB0eUNvbXBvbmVudCA9IGZ1bmN0aW9uKGluc3RhbnRpYXRlKSB7XG4gIHRoaXMuX2N1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgdGhpcy5fbmF0aXZlTm9kZSA9IG51bGw7XG4gIHRoaXMuX25hdGl2ZVBhcmVudCA9IG51bGw7XG4gIHRoaXMuX25hdGl2ZUNvbnRhaW5lckluZm8gPSBudWxsO1xuICB0aGlzLl9kb21JRCA9IG51bGw7XG59O1xuX2Fzc2lnbihSZWFjdERPTUVtcHR5Q29tcG9uZW50LnByb3RvdHlwZSwge1xuICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIG5hdGl2ZVBhcmVudCwgbmF0aXZlQ29udGFpbmVySW5mbywgY29udGV4dCkge1xuICAgIHZhciBkb21JRCA9IG5hdGl2ZUNvbnRhaW5lckluZm8uX2lkQ291bnRlcisrO1xuICAgIHRoaXMuX2RvbUlEID0gZG9tSUQ7XG4gICAgdGhpcy5fbmF0aXZlUGFyZW50ID0gbmF0aXZlUGFyZW50O1xuICAgIHRoaXMuX25hdGl2ZUNvbnRhaW5lckluZm8gPSBuYXRpdmVDb250YWluZXJJbmZvO1xuICAgIHZhciBub2RlVmFsdWUgPSAnIHJlYWN0LWVtcHR5OiAnICsgdGhpcy5fZG9tSUQgKyAnICc7XG4gICAgaWYgKHRyYW5zYWN0aW9uLnVzZUNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBvd25lckRvY3VtZW50ID0gbmF0aXZlQ29udGFpbmVySW5mby5fb3duZXJEb2N1bWVudDtcbiAgICAgIHZhciBub2RlID0gb3duZXJEb2N1bWVudC5jcmVhdGVDb21tZW50KG5vZGVWYWx1ZSk7XG4gICAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUucHJlY2FjaGVOb2RlKHRoaXMsIG5vZGUpO1xuICAgICAgcmV0dXJuIERPTUxhenlUcmVlKG5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHJhbnNhY3Rpb24ucmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgICAgcmV0dXJuICc8IS0tJyArIG5vZGVWYWx1ZSArICctLT4nO1xuICAgIH1cbiAgfSxcbiAgcmVjZWl2ZUNvbXBvbmVudDogZnVuY3Rpb24oKSB7fSxcbiAgZ2V0TmF0aXZlTm9kZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKHRoaXMpO1xuICB9LFxuICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbigpIHtcbiAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUudW5jYWNoZU5vZGUodGhpcyk7XG4gIH1cbn0pO1xubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUVtcHR5Q29tcG9uZW50O1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgZnVuY3Rpb24gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoaW5zdEEsIGluc3RCKSB7XG4gICAgISgnX25hdGl2ZU5vZGUnIGluIGluc3RBKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXROb2RlRnJvbUluc3RhbmNlOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKCdfbmF0aXZlTm9kZScgaW4gaW5zdEIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2dldE5vZGVGcm9tSW5zdGFuY2U6IEludmFsaWQgYXJndW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBkZXB0aEEgPSAwO1xuICAgIGZvciAodmFyIHRlbXBBID0gaW5zdEE7IHRlbXBBOyB0ZW1wQSA9IHRlbXBBLl9uYXRpdmVQYXJlbnQpIHtcbiAgICAgIGRlcHRoQSsrO1xuICAgIH1cbiAgICB2YXIgZGVwdGhCID0gMDtcbiAgICBmb3IgKHZhciB0ZW1wQiA9IGluc3RCOyB0ZW1wQjsgdGVtcEIgPSB0ZW1wQi5fbmF0aXZlUGFyZW50KSB7XG4gICAgICBkZXB0aEIrKztcbiAgICB9XG4gICAgd2hpbGUgKGRlcHRoQSAtIGRlcHRoQiA+IDApIHtcbiAgICAgIGluc3RBID0gaW5zdEEuX25hdGl2ZVBhcmVudDtcbiAgICAgIGRlcHRoQS0tO1xuICAgIH1cbiAgICB3aGlsZSAoZGVwdGhCIC0gZGVwdGhBID4gMCkge1xuICAgICAgaW5zdEIgPSBpbnN0Qi5fbmF0aXZlUGFyZW50O1xuICAgICAgZGVwdGhCLS07XG4gICAgfVxuICAgIHZhciBkZXB0aCA9IGRlcHRoQTtcbiAgICB3aGlsZSAoZGVwdGgtLSkge1xuICAgICAgaWYgKGluc3RBID09PSBpbnN0Qikge1xuICAgICAgICByZXR1cm4gaW5zdEE7XG4gICAgICB9XG4gICAgICBpbnN0QSA9IGluc3RBLl9uYXRpdmVQYXJlbnQ7XG4gICAgICBpbnN0QiA9IGluc3RCLl9uYXRpdmVQYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIGlzQW5jZXN0b3IoaW5zdEEsIGluc3RCKSB7XG4gICAgISgnX25hdGl2ZU5vZGUnIGluIGluc3RBKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdpc0FuY2VzdG9yOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKCdfbmF0aXZlTm9kZScgaW4gaW5zdEIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2lzQW5jZXN0b3I6IEludmFsaWQgYXJndW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHdoaWxlIChpbnN0Qikge1xuICAgICAgaWYgKGluc3RCID09PSBpbnN0QSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGluc3RCID0gaW5zdEIuX25hdGl2ZVBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIGdldFBhcmVudEluc3RhbmNlKGluc3QpIHtcbiAgICAhKCdfbmF0aXZlTm9kZScgaW4gaW5zdCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZ2V0UGFyZW50SW5zdGFuY2U6IEludmFsaWQgYXJndW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBpbnN0Ll9uYXRpdmVQYXJlbnQ7XG4gIH1cbiAgZnVuY3Rpb24gdHJhdmVyc2VUd29QaGFzZShpbnN0LCBmbiwgYXJnKSB7XG4gICAgdmFyIHBhdGggPSBbXTtcbiAgICB3aGlsZSAoaW5zdCkge1xuICAgICAgcGF0aC5wdXNoKGluc3QpO1xuICAgICAgaW5zdCA9IGluc3QuX25hdGl2ZVBhcmVudDtcbiAgICB9XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gcGF0aC5sZW5ndGg7IGktLSA+IDA7ICkge1xuICAgICAgZm4ocGF0aFtpXSwgZmFsc2UsIGFyZyk7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmbihwYXRoW2ldLCB0cnVlLCBhcmcpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB0cmF2ZXJzZUVudGVyTGVhdmUoZnJvbSwgdG8sIGZuLCBhcmdGcm9tLCBhcmdUbykge1xuICAgIHZhciBjb21tb24gPSBmcm9tICYmIHRvID8gZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IoZnJvbSwgdG8pIDogbnVsbDtcbiAgICB2YXIgcGF0aEZyb20gPSBbXTtcbiAgICB3aGlsZSAoZnJvbSAmJiBmcm9tICE9PSBjb21tb24pIHtcbiAgICAgIHBhdGhGcm9tLnB1c2goZnJvbSk7XG4gICAgICBmcm9tID0gZnJvbS5fbmF0aXZlUGFyZW50O1xuICAgIH1cbiAgICB2YXIgcGF0aFRvID0gW107XG4gICAgd2hpbGUgKHRvICYmIHRvICE9PSBjb21tb24pIHtcbiAgICAgIHBhdGhUby5wdXNoKHRvKTtcbiAgICAgIHRvID0gdG8uX25hdGl2ZVBhcmVudDtcbiAgICB9XG4gICAgdmFyIGk7XG4gICAgZm9yIChpID0gMDsgaSA8IHBhdGhGcm9tLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmbihwYXRoRnJvbVtpXSwgdHJ1ZSwgYXJnRnJvbSk7XG4gICAgfVxuICAgIGZvciAoaSA9IHBhdGhUby5sZW5ndGg7IGktLSA+IDA7ICkge1xuICAgICAgZm4ocGF0aFRvW2ldLCBmYWxzZSwgYXJnVG8pO1xuICAgIH1cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpc0FuY2VzdG9yOiBpc0FuY2VzdG9yLFxuICAgIGdldExvd2VzdENvbW1vbkFuY2VzdG9yOiBnZXRMb3dlc3RDb21tb25BbmNlc3RvcixcbiAgICBnZXRQYXJlbnRJbnN0YW5jZTogZ2V0UGFyZW50SW5zdGFuY2UsXG4gICAgdHJhdmVyc2VUd29QaGFzZTogdHJhdmVyc2VUd29QaGFzZSxcbiAgICB0cmF2ZXJzZUVudGVyTGVhdmU6IHRyYXZlcnNlRW50ZXJMZWF2ZVxuICB9O1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnLi9pbnZhcmlhbnQnKTtcbiAgZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgICB2YXIgbGVuZ3RoID0gb2JqLmxlbmd0aDtcbiAgICAhKCFBcnJheS5pc0FycmF5KG9iaikgJiYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnIHx8IHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBBcnJheS1saWtlIG9iamVjdCBleHBlY3RlZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd0b0FycmF5OiBPYmplY3QgbmVlZHMgYSBsZW5ndGggcHJvcGVydHknKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgIShsZW5ndGggPT09IDAgfHwgbGVuZ3RoIC0gMSBpbiBvYmopID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RvQXJyYXk6IE9iamVjdCBzaG91bGQgaGF2ZSBrZXlzIGZvciBpbmRpY2VzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEodHlwZW9mIG9iai5jYWxsZWUgIT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3RvQXJyYXk6IE9iamVjdCBjYW5cXCd0IGJlIGBhcmd1bWVudHNgLiBVc2UgcmVzdCBwYXJhbXMgJyArICcoZnVuY3Rpb24oLi4uYXJncykge30pIG9yIEFycmF5LmZyb20oKSBpbnN0ZWFkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuICAgIHZhciByZXQgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBsZW5ndGg7IGlpKyspIHtcbiAgICAgIHJldFtpaV0gPSBvYmpbaWldO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9XG4gIGZ1bmN0aW9uIGhhc0FycmF5TmF0dXJlKG9iaikge1xuICAgIHJldHVybiAoISFvYmogJiYgKHR5cGVvZiBvYmogPT0gJ29iamVjdCcgfHwgdHlwZW9mIG9iaiA9PSAnZnVuY3Rpb24nKSAmJiAnbGVuZ3RoJyBpbiBvYmogJiYgISgnc2V0SW50ZXJ2YWwnIGluIG9iaikgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPSAnbnVtYmVyJyAmJiAoQXJyYXkuaXNBcnJheShvYmopIHx8ICdjYWxsZWUnIGluIG9iaiB8fCAnaXRlbScgaW4gb2JqKSk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTWl4ZWQob2JqKSB7XG4gICAgaWYgKCFoYXNBcnJheU5hdHVyZShvYmopKSB7XG4gICAgICByZXR1cm4gW29ial07XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgIHJldHVybiBvYmouc2xpY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRvQXJyYXkob2JqKTtcbiAgICB9XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVBcnJheUZyb21NaXhlZDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xuICB2YXIgY3JlYXRlQXJyYXlGcm9tTWl4ZWQgPSByZXF1aXJlKCcuL2NyZWF0ZUFycmF5RnJvbU1peGVkJyk7XG4gIHZhciBnZXRNYXJrdXBXcmFwID0gcmVxdWlyZSgnLi9nZXRNYXJrdXBXcmFwJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuICB2YXIgZHVtbXlOb2RlID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuICB2YXIgbm9kZU5hbWVQYXR0ZXJuID0gL15cXHMqPChcXHcrKS87XG4gIGZ1bmN0aW9uIGdldE5vZGVOYW1lKG1hcmt1cCkge1xuICAgIHZhciBub2RlTmFtZU1hdGNoID0gbWFya3VwLm1hdGNoKG5vZGVOYW1lUGF0dGVybik7XG4gICAgcmV0dXJuIG5vZGVOYW1lTWF0Y2ggJiYgbm9kZU5hbWVNYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXAsIGhhbmRsZVNjcmlwdCkge1xuICAgIHZhciBub2RlID0gZHVtbXlOb2RlO1xuICAgICEhIWR1bW15Tm9kZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVOb2Rlc0Zyb21NYXJrdXAgZHVtbXkgbm90IGluaXRpYWxpemVkJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBub2RlTmFtZSA9IGdldE5vZGVOYW1lKG1hcmt1cCk7XG4gICAgdmFyIHdyYXAgPSBub2RlTmFtZSAmJiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKTtcbiAgICBpZiAod3JhcCkge1xuICAgICAgbm9kZS5pbm5lckhUTUwgPSB3cmFwWzFdICsgbWFya3VwICsgd3JhcFsyXTtcbiAgICAgIHZhciB3cmFwRGVwdGggPSB3cmFwWzBdO1xuICAgICAgd2hpbGUgKHdyYXBEZXB0aC0tKSB7XG4gICAgICAgIG5vZGUgPSBub2RlLmxhc3RDaGlsZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5pbm5lckhUTUwgPSBtYXJrdXA7XG4gICAgfVxuICAgIHZhciBzY3JpcHRzID0gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgaWYgKHNjcmlwdHMubGVuZ3RoKSB7XG4gICAgICAhaGFuZGxlU2NyaXB0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCguLi4pOiBVbmV4cGVjdGVkIDxzY3JpcHQ+IGVsZW1lbnQgcmVuZGVyZWQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgY3JlYXRlQXJyYXlGcm9tTWl4ZWQoc2NyaXB0cykuZm9yRWFjaChoYW5kbGVTY3JpcHQpO1xuICAgIH1cbiAgICB2YXIgbm9kZXMgPSBBcnJheS5mcm9tKG5vZGUuY2hpbGROb2Rlcyk7XG4gICAgd2hpbGUgKG5vZGUubGFzdENoaWxkKSB7XG4gICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUubGFzdENoaWxkKTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gY3JlYXRlTm9kZXNGcm9tTWFya3VwO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCcuL2ludmFyaWFudCcpO1xuICB2YXIgZHVtbXlOb2RlID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JykgOiBudWxsO1xuICB2YXIgc2hvdWxkV3JhcCA9IHt9O1xuICB2YXIgc2VsZWN0V3JhcCA9IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cInRydWVcIj4nLCAnPC9zZWxlY3Q+J107XG4gIHZhciB0YWJsZVdyYXAgPSBbMSwgJzx0YWJsZT4nLCAnPC90YWJsZT4nXTtcbiAgdmFyIHRyV3JhcCA9IFszLCAnPHRhYmxlPjx0Ym9keT48dHI+JywgJzwvdHI+PC90Ym9keT48L3RhYmxlPiddO1xuICB2YXIgc3ZnV3JhcCA9IFsxLCAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+JywgJzwvc3ZnPiddO1xuICB2YXIgbWFya3VwV3JhcCA9IHtcbiAgICAnKic6IFsxLCAnPzxkaXY+JywgJzwvZGl2PiddLFxuICAgICdhcmVhJzogWzEsICc8bWFwPicsICc8L21hcD4nXSxcbiAgICAnY29sJzogWzIsICc8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sXG4gICAgJ2xlZ2VuZCc6IFsxLCAnPGZpZWxkc2V0PicsICc8L2ZpZWxkc2V0PiddLFxuICAgICdwYXJhbSc6IFsxLCAnPG9iamVjdD4nLCAnPC9vYmplY3Q+J10sXG4gICAgJ3RyJzogWzIsICc8dGFibGU+PHRib2R5PicsICc8L3Rib2R5PjwvdGFibGU+J10sXG4gICAgJ29wdGdyb3VwJzogc2VsZWN0V3JhcCxcbiAgICAnb3B0aW9uJzogc2VsZWN0V3JhcCxcbiAgICAnY2FwdGlvbic6IHRhYmxlV3JhcCxcbiAgICAnY29sZ3JvdXAnOiB0YWJsZVdyYXAsXG4gICAgJ3Rib2R5JzogdGFibGVXcmFwLFxuICAgICd0Zm9vdCc6IHRhYmxlV3JhcCxcbiAgICAndGhlYWQnOiB0YWJsZVdyYXAsXG4gICAgJ3RkJzogdHJXcmFwLFxuICAgICd0aCc6IHRyV3JhcFxuICB9O1xuICB2YXIgc3ZnRWxlbWVudHMgPSBbJ2NpcmNsZScsICdjbGlwUGF0aCcsICdkZWZzJywgJ2VsbGlwc2UnLCAnZycsICdpbWFnZScsICdsaW5lJywgJ2xpbmVhckdyYWRpZW50JywgJ21hc2snLCAncGF0aCcsICdwYXR0ZXJuJywgJ3BvbHlnb24nLCAncG9seWxpbmUnLCAncmFkaWFsR3JhZGllbnQnLCAncmVjdCcsICdzdG9wJywgJ3RleHQnLCAndHNwYW4nXTtcbiAgc3ZnRWxlbWVudHMuZm9yRWFjaChmdW5jdGlvbihub2RlTmFtZSkge1xuICAgIG1hcmt1cFdyYXBbbm9kZU5hbWVdID0gc3ZnV3JhcDtcbiAgICBzaG91bGRXcmFwW25vZGVOYW1lXSA9IHRydWU7XG4gIH0pO1xuICBmdW5jdGlvbiBnZXRNYXJrdXBXcmFwKG5vZGVOYW1lKSB7XG4gICAgISEhZHVtbXlOb2RlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01hcmt1cCB3cmFwcGluZyBub2RlIG5vdCBpbml0aWFsaXplZCcpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoIW1hcmt1cFdyYXAuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG4gICAgICBub2RlTmFtZSA9ICcqJztcbiAgICB9XG4gICAgaWYgKCFzaG91bGRXcmFwLmhhc093blByb3BlcnR5KG5vZGVOYW1lKSkge1xuICAgICAgaWYgKG5vZGVOYW1lID09PSAnKicpIHtcbiAgICAgICAgZHVtbXlOb2RlLmlubmVySFRNTCA9ICc8bGluayAvPic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkdW1teU5vZGUuaW5uZXJIVE1MID0gJzwnICsgbm9kZU5hbWUgKyAnPjwvJyArIG5vZGVOYW1lICsgJz4nO1xuICAgICAgfVxuICAgICAgc2hvdWxkV3JhcFtub2RlTmFtZV0gPSAhZHVtbXlOb2RlLmZpcnN0Q2hpbGQ7XG4gICAgfVxuICAgIHJldHVybiBzaG91bGRXcmFwW25vZGVOYW1lXSA/IG1hcmt1cFdyYXBbbm9kZU5hbWVdIDogbnVsbDtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGdldE1hcmt1cFdyYXA7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBET01MYXp5VHJlZSA9IHJlcXVpcmUoJy4vRE9NTGF6eVRyZWUnKTtcbiAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbiAgdmFyIGNyZWF0ZU5vZGVzRnJvbU1hcmt1cCA9IHJlcXVpcmUoJ2ZianMvbGliL2NyZWF0ZU5vZGVzRnJvbU1hcmt1cCcpO1xuICB2YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbiAgdmFyIGdldE1hcmt1cFdyYXAgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRNYXJrdXBXcmFwJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIE9QRU5fVEFHX05BTUVfRVhQID0gL14oPFteIFxcLz5dKykvO1xuICB2YXIgUkVTVUxUX0lOREVYX0FUVFIgPSAnZGF0YS1kYW5nZXItaW5kZXgnO1xuICBmdW5jdGlvbiBnZXROb2RlTmFtZShtYXJrdXApIHtcbiAgICByZXR1cm4gbWFya3VwLnN1YnN0cmluZygxLCBtYXJrdXAuaW5kZXhPZignICcpKTtcbiAgfVxuICB2YXIgRGFuZ2VyID0ge1xuICAgIGRhbmdlcm91c2x5UmVuZGVyTWFya3VwOiBmdW5jdGlvbihtYXJrdXBMaXN0KSB7XG4gICAgICAhRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVuZGVyTWFya3VwKC4uLik6IENhbm5vdCByZW5kZXIgbWFya3VwIGluIGEgd29ya2VyICcgKyAndGhyZWFkLiBNYWtlIHN1cmUgYHdpbmRvd2AgYW5kIGBkb2N1bWVudGAgYXJlIGF2YWlsYWJsZSBnbG9iYWxseSAnICsgJ2JlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlICcgKyAnUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcgZm9yIHNlcnZlciByZW5kZXJpbmcuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIG5vZGVOYW1lO1xuICAgICAgdmFyIG1hcmt1cEJ5Tm9kZU5hbWUgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWFya3VwTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAhbWFya3VwTGlzdFtpXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdkYW5nZXJvdXNseVJlbmRlck1hcmt1cCguLi4pOiBNaXNzaW5nIG1hcmt1cC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIG5vZGVOYW1lID0gZ2V0Tm9kZU5hbWUobWFya3VwTGlzdFtpXSk7XG4gICAgICAgIG5vZGVOYW1lID0gZ2V0TWFya3VwV3JhcChub2RlTmFtZSkgPyBub2RlTmFtZSA6ICcqJztcbiAgICAgICAgbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV0gPSBtYXJrdXBCeU5vZGVOYW1lW25vZGVOYW1lXSB8fCBbXTtcbiAgICAgICAgbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV1baV0gPSBtYXJrdXBMaXN0W2ldO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdExpc3QgPSBbXTtcbiAgICAgIHZhciByZXN1bHRMaXN0QXNzaWdubWVudENvdW50ID0gMDtcbiAgICAgIGZvciAobm9kZU5hbWUgaW4gbWFya3VwQnlOb2RlTmFtZSkge1xuICAgICAgICBpZiAoIW1hcmt1cEJ5Tm9kZU5hbWUuaGFzT3duUHJvcGVydHkobm9kZU5hbWUpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1hcmt1cExpc3RCeU5vZGVOYW1lID0gbWFya3VwQnlOb2RlTmFtZVtub2RlTmFtZV07XG4gICAgICAgIHZhciByZXN1bHRJbmRleDtcbiAgICAgICAgZm9yIChyZXN1bHRJbmRleCBpbiBtYXJrdXBMaXN0QnlOb2RlTmFtZSkge1xuICAgICAgICAgIGlmIChtYXJrdXBMaXN0QnlOb2RlTmFtZS5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCkpIHtcbiAgICAgICAgICAgIHZhciBtYXJrdXAgPSBtYXJrdXBMaXN0QnlOb2RlTmFtZVtyZXN1bHRJbmRleF07XG4gICAgICAgICAgICBtYXJrdXBMaXN0QnlOb2RlTmFtZVtyZXN1bHRJbmRleF0gPSBtYXJrdXAucmVwbGFjZShPUEVOX1RBR19OQU1FX0VYUCwgJyQxICcgKyBSRVNVTFRfSU5ERVhfQVRUUiArICc9XCInICsgcmVzdWx0SW5kZXggKyAnXCIgJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciByZW5kZXJOb2RlcyA9IGNyZWF0ZU5vZGVzRnJvbU1hcmt1cChtYXJrdXBMaXN0QnlOb2RlTmFtZS5qb2luKCcnKSwgZW1wdHlGdW5jdGlvbik7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmVuZGVyTm9kZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICB2YXIgcmVuZGVyTm9kZSA9IHJlbmRlck5vZGVzW2pdO1xuICAgICAgICAgIGlmIChyZW5kZXJOb2RlLmhhc0F0dHJpYnV0ZSAmJiByZW5kZXJOb2RlLmhhc0F0dHJpYnV0ZShSRVNVTFRfSU5ERVhfQVRUUikpIHtcbiAgICAgICAgICAgIHJlc3VsdEluZGV4ID0gK3JlbmRlck5vZGUuZ2V0QXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKTtcbiAgICAgICAgICAgIHJlbmRlck5vZGUucmVtb3ZlQXR0cmlidXRlKFJFU1VMVF9JTkRFWF9BVFRSKTtcbiAgICAgICAgICAgICEhcmVzdWx0TGlzdC5oYXNPd25Qcm9wZXJ0eShyZXN1bHRJbmRleCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRGFuZ2VyOiBBc3NpZ25pbmcgdG8gYW4gYWxyZWFkeS1vY2N1cGllZCByZXN1bHQgaW5kZXguJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgcmVzdWx0TGlzdFtyZXN1bHRJbmRleF0gPSByZW5kZXJOb2RlO1xuICAgICAgICAgICAgcmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCArPSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRGFuZ2VyOiBEaXNjYXJkaW5nIHVuZXhwZWN0ZWQgbm9kZTonLCByZW5kZXJOb2RlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICEocmVzdWx0TGlzdEFzc2lnbm1lbnRDb3VudCA9PT0gcmVzdWx0TGlzdC5sZW5ndGgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RhbmdlcjogRGlkIG5vdCBhc3NpZ24gdG8gZXZlcnkgaW5kZXggb2YgcmVzdWx0TGlzdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAhKHJlc3VsdExpc3QubGVuZ3RoID09PSBtYXJrdXBMaXN0Lmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRGFuZ2VyOiBFeHBlY3RlZCBtYXJrdXAgdG8gcmVuZGVyICVzIG5vZGVzLCBidXQgcmVuZGVyZWQgJXMuJywgbWFya3VwTGlzdC5sZW5ndGgsIHJlc3VsdExpc3QubGVuZ3RoKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gcmVzdWx0TGlzdDtcbiAgICB9LFxuICAgIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwOiBmdW5jdGlvbihvbGRDaGlsZCwgbWFya3VwKSB7XG4gICAgICAhRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IENhbm5vdCByZW5kZXIgbWFya3VwIGluIGEgJyArICd3b3JrZXIgdGhyZWFkLiBNYWtlIHN1cmUgYHdpbmRvd2AgYW5kIGBkb2N1bWVudGAgYXJlIGF2YWlsYWJsZSAnICsgJ2dsb2JhbGx5IGJlZm9yZSByZXF1aXJpbmcgUmVhY3Qgd2hlbiB1bml0IHRlc3Rpbmcgb3IgdXNlICcgKyAnUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcoKSBmb3Igc2VydmVyIHJlbmRlcmluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAhbWFya3VwID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2Rhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwKC4uLik6IE1pc3NpbmcgbWFya3VwLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICEob2xkQ2hpbGQubm9kZU5hbWUgIT09ICdIVE1MJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAoLi4uKTogQ2Fubm90IHJlcGxhY2UgbWFya3VwIG9mIHRoZSAnICsgJzxodG1sPiBub2RlLiBUaGlzIGlzIGJlY2F1c2UgYnJvd3NlciBxdWlya3MgbWFrZSB0aGlzIHVucmVsaWFibGUgJyArICdhbmQvb3Igc2xvdy4gSWYgeW91IHdhbnQgdG8gcmVuZGVyIHRvIHRoZSByb290IHlvdSBtdXN0IHVzZSAnICsgJ3NlcnZlciByZW5kZXJpbmcuIFNlZSBSZWFjdERPTVNlcnZlci5yZW5kZXJUb1N0cmluZygpLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGlmICh0eXBlb2YgbWFya3VwID09PSAnc3RyaW5nJykge1xuICAgICAgICB2YXIgbmV3Q2hpbGQgPSBjcmVhdGVOb2Rlc0Zyb21NYXJrdXAobWFya3VwLCBlbXB0eUZ1bmN0aW9uKVswXTtcbiAgICAgICAgb2xkQ2hpbGQucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3Q2hpbGQsIG9sZENoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIERPTUxhenlUcmVlLnJlcGxhY2VDaGlsZFdpdGhUcmVlKG9sZENoaWxkLCBtYXJrdXApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBEYW5nZXI7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5TWlycm9yID0gcmVxdWlyZSgnZmJqcy9saWIva2V5TWlycm9yJyk7XG5cbi8qKlxuICogV2hlbiBhIGNvbXBvbmVudCdzIGNoaWxkcmVuIGFyZSB1cGRhdGVkLCBhIHNlcmllcyBvZiB1cGRhdGUgY29uZmlndXJhdGlvblxuICogb2JqZWN0cyBhcmUgY3JlYXRlZCBpbiBvcmRlciB0byBiYXRjaCBhbmQgc2VyaWFsaXplIHRoZSByZXF1aXJlZCBjaGFuZ2VzLlxuICpcbiAqIEVudW1lcmF0ZXMgYWxsIHRoZSBwb3NzaWJsZSB0eXBlcyBvZiB1cGRhdGUgY29uZmlndXJhdGlvbnMuXG4gKlxuICogQGludGVybmFsXG4gKi9cbnZhciBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcyA9IGtleU1pcnJvcih7XG4gIElOU0VSVF9NQVJLVVA6IG51bGwsXG4gIE1PVkVfRVhJU1RJTkc6IG51bGwsXG4gIFJFTU9WRV9OT0RFOiBudWxsLFxuICBTRVRfTUFSS1VQOiBudWxsLFxuICBURVhUX0NPTlRFTlQ6IG51bGxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgRE9NTGF6eVRyZWUgPSByZXF1aXJlKCcuL0RPTUxhenlUcmVlJyk7XG4gIHZhciBEYW5nZXIgPSByZXF1aXJlKCcuL0RhbmdlcicpO1xuICB2YXIgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMgPSByZXF1aXJlKCcuL1JlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzJyk7XG4gIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xuICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG4gIHZhciBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uID0gcmVxdWlyZSgnLi9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uJyk7XG4gIHZhciBzZXRJbm5lckhUTUwgPSByZXF1aXJlKCcuL3NldElubmVySFRNTCcpO1xuICB2YXIgc2V0VGV4dENvbnRlbnQgPSByZXF1aXJlKCcuL3NldFRleHRDb250ZW50Jyk7XG4gIGZ1bmN0aW9uIGdldE5vZGVBZnRlcihwYXJlbnROb2RlLCBub2RlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICAgIG5vZGUgPSBub2RlWzFdO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZSA/IG5vZGUubmV4dFNpYmxpbmcgOiBwYXJlbnROb2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgdmFyIGluc2VydENoaWxkQXQgPSBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKHBhcmVudE5vZGUsIGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZSwgcmVmZXJlbmNlTm9kZSk7XG4gIH0pO1xuICBmdW5jdGlvbiBpbnNlcnRMYXp5VHJlZUNoaWxkQXQocGFyZW50Tm9kZSwgY2hpbGRUcmVlLCByZWZlcmVuY2VOb2RlKSB7XG4gICAgRE9NTGF6eVRyZWUuaW5zZXJ0VHJlZUJlZm9yZShwYXJlbnROb2RlLCBjaGlsZFRyZWUsIHJlZmVyZW5jZU5vZGUpO1xuICB9XG4gIGZ1bmN0aW9uIG1vdmVDaGlsZChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZE5vZGUpKSB7XG4gICAgICBtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBjaGlsZE5vZGVbMF0sIGNoaWxkTm9kZVsxXSwgcmVmZXJlbmNlTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluc2VydENoaWxkQXQocGFyZW50Tm9kZSwgY2hpbGROb2RlLCByZWZlcmVuY2VOb2RlKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlQ2hpbGQocGFyZW50Tm9kZSwgY2hpbGROb2RlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGROb2RlKSkge1xuICAgICAgdmFyIGNsb3NpbmdDb21tZW50ID0gY2hpbGROb2RlWzFdO1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlWzBdO1xuICAgICAgcmVtb3ZlRGVsaW1pdGVkVGV4dChwYXJlbnROb2RlLCBjaGlsZE5vZGUsIGNsb3NpbmdDb21tZW50KTtcbiAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2xvc2luZ0NvbW1lbnQpO1xuICAgIH1cbiAgICBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZSk7XG4gIH1cbiAgZnVuY3Rpb24gbW92ZURlbGltaXRlZFRleHQocGFyZW50Tm9kZSwgb3BlbmluZ0NvbW1lbnQsIGNsb3NpbmdDb21tZW50LCByZWZlcmVuY2VOb2RlKSB7XG4gICAgdmFyIG5vZGUgPSBvcGVuaW5nQ29tbWVudDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgIGluc2VydENoaWxkQXQocGFyZW50Tm9kZSwgbm9kZSwgcmVmZXJlbmNlTm9kZSk7XG4gICAgICBpZiAobm9kZSA9PT0gY2xvc2luZ0NvbW1lbnQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBub2RlID0gbmV4dE5vZGU7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZURlbGltaXRlZFRleHQocGFyZW50Tm9kZSwgc3RhcnROb2RlLCBjbG9zaW5nQ29tbWVudCkge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICB2YXIgbm9kZSA9IHN0YXJ0Tm9kZS5uZXh0U2libGluZztcbiAgICAgIGlmIChub2RlID09PSBjbG9zaW5nQ29tbWVudCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlcGxhY2VEZWxpbWl0ZWRUZXh0KG9wZW5pbmdDb21tZW50LCBjbG9zaW5nQ29tbWVudCwgc3RyaW5nVGV4dCkge1xuICAgIHZhciBwYXJlbnROb2RlID0gb3BlbmluZ0NvbW1lbnQucGFyZW50Tm9kZTtcbiAgICB2YXIgbm9kZUFmdGVyQ29tbWVudCA9IG9wZW5pbmdDb21tZW50Lm5leHRTaWJsaW5nO1xuICAgIGlmIChub2RlQWZ0ZXJDb21tZW50ID09PSBjbG9zaW5nQ29tbWVudCkge1xuICAgICAgaWYgKHN0cmluZ1RleHQpIHtcbiAgICAgICAgaW5zZXJ0Q2hpbGRBdChwYXJlbnROb2RlLCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHJpbmdUZXh0KSwgbm9kZUFmdGVyQ29tbWVudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdHJpbmdUZXh0KSB7XG4gICAgICAgIHNldFRleHRDb250ZW50KG5vZGVBZnRlckNvbW1lbnQsIHN0cmluZ1RleHQpO1xuICAgICAgICByZW1vdmVEZWxpbWl0ZWRUZXh0KHBhcmVudE5vZGUsIG5vZGVBZnRlckNvbW1lbnQsIGNsb3NpbmdDb21tZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbW92ZURlbGltaXRlZFRleHQocGFyZW50Tm9kZSwgb3BlbmluZ0NvbW1lbnQsIGNsb3NpbmdDb21tZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk5hdGl2ZU9wZXJhdGlvbihSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShvcGVuaW5nQ29tbWVudCkuX2RlYnVnSUQsICdyZXBsYWNlIHRleHQnLCBzdHJpbmdUZXh0KTtcbiAgICB9XG4gIH1cbiAgdmFyIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwID0gRGFuZ2VyLmRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwID0gZnVuY3Rpb24ob2xkQ2hpbGQsIG1hcmt1cCwgcHJldkluc3RhbmNlKSB7XG4gICAgICBEYW5nZXIuZGFuZ2Vyb3VzbHlSZXBsYWNlTm9kZVdpdGhNYXJrdXAob2xkQ2hpbGQsIG1hcmt1cCk7XG4gICAgICBpZiAocHJldkluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk5hdGl2ZU9wZXJhdGlvbihwcmV2SW5zdGFuY2UuX2RlYnVnSUQsICdyZXBsYWNlIHdpdGgnLCBtYXJrdXAudG9TdHJpbmcoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbmV4dEluc3RhbmNlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobWFya3VwLm5vZGUpO1xuICAgICAgICBpZiAobmV4dEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKG5leHRJbnN0YW5jZS5fZGVidWdJRCwgJ21vdW50JywgbWFya3VwLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB2YXIgRE9NQ2hpbGRyZW5PcGVyYXRpb25zID0ge1xuICAgIGRhbmdlcm91c2x5UmVwbGFjZU5vZGVXaXRoTWFya3VwOiBkYW5nZXJvdXNseVJlcGxhY2VOb2RlV2l0aE1hcmt1cCxcbiAgICByZXBsYWNlRGVsaW1pdGVkVGV4dDogcmVwbGFjZURlbGltaXRlZFRleHQsXG4gICAgcHJvY2Vzc1VwZGF0ZXM6IGZ1bmN0aW9uKHBhcmVudE5vZGUsIHVwZGF0ZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlRGVidWdJRCA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXRJbnN0YW5jZUZyb21Ob2RlKHBhcmVudE5vZGUpLl9kZWJ1Z0lEO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB1cGRhdGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciB1cGRhdGUgPSB1cGRhdGVzW2tdO1xuICAgICAgICBzd2l0Y2ggKHVwZGF0ZS50eXBlKSB7XG4gICAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5JTlNFUlRfTUFSS1VQOlxuICAgICAgICAgICAgaW5zZXJ0TGF6eVRyZWVDaGlsZEF0KHBhcmVudE5vZGUsIHVwZGF0ZS5jb250ZW50LCBnZXROb2RlQWZ0ZXIocGFyZW50Tm9kZSwgdXBkYXRlLmFmdGVyTm9kZSkpO1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKHBhcmVudE5vZGVEZWJ1Z0lELCAnaW5zZXJ0IGNoaWxkJywge1xuICAgICAgICAgICAgICAgIHRvSW5kZXg6IHVwZGF0ZS50b0luZGV4LFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHVwZGF0ZS5jb250ZW50LnRvU3RyaW5nKClcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLk1PVkVfRVhJU1RJTkc6XG4gICAgICAgICAgICBtb3ZlQ2hpbGQocGFyZW50Tm9kZSwgdXBkYXRlLmZyb21Ob2RlLCBnZXROb2RlQWZ0ZXIocGFyZW50Tm9kZSwgdXBkYXRlLmFmdGVyTm9kZSkpO1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKHBhcmVudE5vZGVEZWJ1Z0lELCAnbW92ZSBjaGlsZCcsIHtcbiAgICAgICAgICAgICAgICBmcm9tSW5kZXg6IHVwZGF0ZS5mcm9tSW5kZXgsXG4gICAgICAgICAgICAgICAgdG9JbmRleDogdXBkYXRlLnRvSW5kZXhcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFJlYWN0TXVsdGlDaGlsZFVwZGF0ZVR5cGVzLlNFVF9NQVJLVVA6XG4gICAgICAgICAgICBzZXRJbm5lckhUTUwocGFyZW50Tm9kZSwgdXBkYXRlLmNvbnRlbnQpO1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKHBhcmVudE5vZGVEZWJ1Z0lELCAncmVwbGFjZSBjaGlsZHJlbicsIHVwZGF0ZS5jb250ZW50LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBSZWFjdE11bHRpQ2hpbGRVcGRhdGVUeXBlcy5URVhUX0NPTlRFTlQ6XG4gICAgICAgICAgICBzZXRUZXh0Q29udGVudChwYXJlbnROb2RlLCB1cGRhdGUuY29udGVudCk7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25OYXRpdmVPcGVyYXRpb24ocGFyZW50Tm9kZURlYnVnSUQsICdyZXBsYWNlIHRleHQnLCB1cGRhdGUuY29udGVudC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgUmVhY3RNdWx0aUNoaWxkVXBkYXRlVHlwZXMuUkVNT1ZFX05PREU6XG4gICAgICAgICAgICByZW1vdmVDaGlsZChwYXJlbnROb2RlLCB1cGRhdGUuZnJvbU5vZGUpO1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uTmF0aXZlT3BlcmF0aW9uKHBhcmVudE5vZGVEZWJ1Z0lELCAncmVtb3ZlIGNoaWxkJywge2Zyb21JbmRleDogdXBkYXRlLmZyb21JbmRleH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gRE9NQ2hpbGRyZW5PcGVyYXRpb25zO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbiAgdmFyIERPTUNoaWxkcmVuT3BlcmF0aW9ucyA9IHJlcXVpcmUoJy4vRE9NQ2hpbGRyZW5PcGVyYXRpb25zJyk7XG4gIHZhciBET01MYXp5VHJlZSA9IHJlcXVpcmUoJy4vRE9NTGF6eVRyZWUnKTtcbiAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG4gIHZhciBSZWFjdEluc3RydW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0cnVtZW50YXRpb24nKTtcbiAgdmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoJy4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIHZhbGlkYXRlRE9NTmVzdGluZyA9IHJlcXVpcmUoJy4vdmFsaWRhdGVET01OZXN0aW5nJyk7XG4gIHZhciBSZWFjdERPTVRleHRDb21wb25lbnQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSB0ZXh0O1xuICAgIHRoaXMuX3N0cmluZ1RleHQgPSAnJyArIHRleHQ7XG4gICAgdGhpcy5fbmF0aXZlTm9kZSA9IG51bGw7XG4gICAgdGhpcy5fbmF0aXZlUGFyZW50ID0gbnVsbDtcbiAgICB0aGlzLl9kb21JRCA9IG51bGw7XG4gICAgdGhpcy5fbW91bnRJbmRleCA9IDA7XG4gICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX2NvbW1lbnROb2RlcyA9IG51bGw7XG4gIH07XG4gIF9hc3NpZ24oUmVhY3RET01UZXh0Q29tcG9uZW50LnByb3RvdHlwZSwge1xuICAgIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbih0cmFuc2FjdGlvbiwgbmF0aXZlUGFyZW50LCBuYXRpdmVDb250YWluZXJJbmZvLCBjb250ZXh0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRUZXh0KHRoaXMuX2RlYnVnSUQsIHRoaXMuX3N0cmluZ1RleHQpO1xuICAgICAgICB2YXIgcGFyZW50SW5mbztcbiAgICAgICAgaWYgKG5hdGl2ZVBhcmVudCAhPSBudWxsKSB7XG4gICAgICAgICAgcGFyZW50SW5mbyA9IG5hdGl2ZVBhcmVudC5fYW5jZXN0b3JJbmZvO1xuICAgICAgICB9IGVsc2UgaWYgKG5hdGl2ZUNvbnRhaW5lckluZm8gIT0gbnVsbCkge1xuICAgICAgICAgIHBhcmVudEluZm8gPSBuYXRpdmVDb250YWluZXJJbmZvLl9hbmNlc3RvckluZm87XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudEluZm8pIHtcbiAgICAgICAgICB2YWxpZGF0ZURPTU5lc3RpbmcoJyN0ZXh0JywgdGhpcywgcGFyZW50SW5mbyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBkb21JRCA9IG5hdGl2ZUNvbnRhaW5lckluZm8uX2lkQ291bnRlcisrO1xuICAgICAgdmFyIG9wZW5pbmdWYWx1ZSA9ICcgcmVhY3QtdGV4dDogJyArIGRvbUlEICsgJyAnO1xuICAgICAgdmFyIGNsb3NpbmdWYWx1ZSA9ICcgL3JlYWN0LXRleHQgJztcbiAgICAgIHRoaXMuX2RvbUlEID0gZG9tSUQ7XG4gICAgICB0aGlzLl9uYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG4gICAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5hdGl2ZUNvbnRhaW5lckluZm8uX293bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBvcGVuaW5nQ29tbWVudCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlQ29tbWVudChvcGVuaW5nVmFsdWUpO1xuICAgICAgICB2YXIgY2xvc2luZ0NvbW1lbnQgPSBvd25lckRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoY2xvc2luZ1ZhbHVlKTtcbiAgICAgICAgdmFyIGxhenlUcmVlID0gRE9NTGF6eVRyZWUob3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpO1xuICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBET01MYXp5VHJlZShvcGVuaW5nQ29tbWVudCkpO1xuICAgICAgICBpZiAodGhpcy5fc3RyaW5nVGV4dCkge1xuICAgICAgICAgIERPTUxhenlUcmVlLnF1ZXVlQ2hpbGQobGF6eVRyZWUsIERPTUxhenlUcmVlKG93bmVyRG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5fc3RyaW5nVGV4dCkpKTtcbiAgICAgICAgfVxuICAgICAgICBET01MYXp5VHJlZS5xdWV1ZUNoaWxkKGxhenlUcmVlLCBET01MYXp5VHJlZShjbG9zaW5nQ29tbWVudCkpO1xuICAgICAgICBSZWFjdERPTUNvbXBvbmVudFRyZWUucHJlY2FjaGVOb2RlKHRoaXMsIG9wZW5pbmdDb21tZW50KTtcbiAgICAgICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBjbG9zaW5nQ29tbWVudDtcbiAgICAgICAgcmV0dXJuIGxhenlUcmVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGVzY2FwZWRUZXh0ID0gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRoaXMuX3N0cmluZ1RleHQpO1xuICAgICAgICBpZiAodHJhbnNhY3Rpb24ucmVuZGVyVG9TdGF0aWNNYXJrdXApIHtcbiAgICAgICAgICByZXR1cm4gZXNjYXBlZFRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICc8IS0tJyArIG9wZW5pbmdWYWx1ZSArICctLT4nICsgZXNjYXBlZFRleHQgKyAnPCEtLScgKyBjbG9zaW5nVmFsdWUgKyAnLS0+JztcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRUZXh0LCB0cmFuc2FjdGlvbikge1xuICAgICAgaWYgKG5leHRUZXh0ICE9PSB0aGlzLl9jdXJyZW50RWxlbWVudCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRUZXh0O1xuICAgICAgICB2YXIgbmV4dFN0cmluZ1RleHQgPSAnJyArIG5leHRUZXh0O1xuICAgICAgICBpZiAobmV4dFN0cmluZ1RleHQgIT09IHRoaXMuX3N0cmluZ1RleHQpIHtcbiAgICAgICAgICB0aGlzLl9zdHJpbmdUZXh0ID0gbmV4dFN0cmluZ1RleHQ7XG4gICAgICAgICAgdmFyIGNvbW1lbnROb2RlcyA9IHRoaXMuZ2V0TmF0aXZlTm9kZSgpO1xuICAgICAgICAgIERPTUNoaWxkcmVuT3BlcmF0aW9ucy5yZXBsYWNlRGVsaW1pdGVkVGV4dChjb21tZW50Tm9kZXNbMF0sIGNvbW1lbnROb2Rlc1sxXSwgbmV4dFN0cmluZ1RleHQpO1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRUZXh0KHRoaXMuX2RlYnVnSUQsIG5leHRTdHJpbmdUZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGdldE5hdGl2ZU5vZGU6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5hdGl2ZU5vZGUgPSB0aGlzLl9jb21tZW50Tm9kZXM7XG4gICAgICBpZiAobmF0aXZlTm9kZSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlTm9kZTtcbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5fY2xvc2luZ0NvbW1lbnQpIHtcbiAgICAgICAgdmFyIG9wZW5pbmdDb21tZW50ID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldE5vZGVGcm9tSW5zdGFuY2UodGhpcyk7XG4gICAgICAgIHZhciBub2RlID0gb3BlbmluZ0NvbW1lbnQubmV4dFNpYmxpbmc7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgIShub2RlICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ01pc3NpbmcgY2xvc2luZyBjb21tZW50IGZvciB0ZXh0IGNvbXBvbmVudCAlcycsIHRoaXMuX2RvbUlEKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDggJiYgbm9kZS5ub2RlVmFsdWUgPT09ICcgL3JlYWN0LXRleHQgJykge1xuICAgICAgICAgICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBub2RlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuYXRpdmVOb2RlID0gW3RoaXMuX25hdGl2ZU5vZGUsIHRoaXMuX2Nsb3NpbmdDb21tZW50XTtcbiAgICAgIHRoaXMuX2NvbW1lbnROb2RlcyA9IG5hdGl2ZU5vZGU7XG4gICAgICByZXR1cm4gbmF0aXZlTm9kZTtcbiAgICB9LFxuICAgIHVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fY2xvc2luZ0NvbW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fY29tbWVudE5vZGVzID0gbnVsbDtcbiAgICAgIFJlYWN0RE9NQ29tcG9uZW50VHJlZS51bmNhY2hlTm9kZSh0aGlzKTtcbiAgICB9XG4gIH0pO1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NVGV4dENvbXBvbmVudDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xudmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1RyYW5zYWN0aW9uJyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciBSRVNFVF9CQVRDSEVEX1VQREFURVMgPSB7XG4gIGluaXRpYWxpemU6IGVtcHR5RnVuY3Rpb24sXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzID0gZmFsc2U7XG4gIH1cbn07XG52YXIgRkxVU0hfQkFUQ0hFRF9VUERBVEVTID0ge1xuICBpbml0aWFsaXplOiBlbXB0eUZ1bmN0aW9uLFxuICBjbG9zZTogUmVhY3RVcGRhdGVzLmZsdXNoQmF0Y2hlZFVwZGF0ZXMuYmluZChSZWFjdFVwZGF0ZXMpXG59O1xudmFyIFRSQU5TQUNUSU9OX1dSQVBQRVJTID0gW0ZMVVNIX0JBVENIRURfVVBEQVRFUywgUkVTRVRfQkFUQ0hFRF9VUERBVEVTXTtcbmZ1bmN0aW9uIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbigpIHtcbiAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xufVxuX2Fzc2lnbihSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5VHJhbnNhY3Rpb24ucHJvdG90eXBlLCBUcmFuc2FjdGlvbi5NaXhpbiwge2dldFRyYW5zYWN0aW9uV3JhcHBlcnM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgfX0pO1xudmFyIHRyYW5zYWN0aW9uID0gbmV3IFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3lUcmFuc2FjdGlvbigpO1xudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSB7XG4gIGlzQmF0Y2hpbmdVcGRhdGVzOiBmYWxzZSxcbiAgYmF0Y2hlZFVwZGF0ZXM6IGZ1bmN0aW9uKGNhbGxiYWNrLCBhLCBiLCBjLCBkLCBlKSB7XG4gICAgdmFyIGFscmVhZHlCYXRjaGluZ1VwZGF0ZXMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5LmlzQmF0Y2hpbmdVcGRhdGVzO1xuICAgIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kuaXNCYXRjaGluZ1VwZGF0ZXMgPSB0cnVlO1xuICAgIGlmIChhbHJlYWR5QmF0Y2hpbmdVcGRhdGVzKSB7XG4gICAgICBjYWxsYmFjayhhLCBiLCBjLCBkLCBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNhY3Rpb24ucGVyZm9ybShjYWxsYmFjaywgbnVsbCwgYSwgYiwgYywgZCwgZSk7XG4gICAgfVxuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlZmF1bHRCYXRjaGluZ1N0cmF0ZWd5O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCBwb3NpdGlvbiBvZiB0aGUgc3VwcGxpZWQgZWxlbWVudCBvciB3aW5kb3cuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZXMgYXJlIHVuYm91bmRlZCwgdW5saWtlIGBnZXRTY3JvbGxQb3NpdGlvbmAuIFRoaXMgbWVhbnMgdGhleVxuICogbWF5IGJlIG5lZ2F0aXZlIG9yIGV4Y2VlZCB0aGUgZWxlbWVudCBib3VuZGFyaWVzICh3aGljaCBpcyBwb3NzaWJsZSB1c2luZ1xuICogaW5lcnRpYWwgc2Nyb2xsaW5nKS5cbiAqXG4gKiBAcGFyYW0ge0RPTVdpbmRvd3xET01FbGVtZW50fSBzY3JvbGxhYmxlXG4gKiBAcmV0dXJuIHtvYmplY3R9IE1hcCB3aXRoIGB4YCBhbmQgYHlgIGtleXMuXG4gKi9cblxuZnVuY3Rpb24gZ2V0VW5ib3VuZGVkU2Nyb2xsUG9zaXRpb24oc2Nyb2xsYWJsZSkge1xuICBpZiAoc2Nyb2xsYWJsZSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHg6IHNjcm9sbGFibGUuc2Nyb2xsTGVmdCxcbiAgICB5OiBzY3JvbGxhYmxlLnNjcm9sbFRvcFxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbiAgdmFyIEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCdmYmpzL2xpYi9FdmVudExpc3RlbmVyJyk7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG4gIHZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbiAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG4gIHZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xuICB2YXIgZ2V0RXZlbnRUYXJnZXQgPSByZXF1aXJlKCcuL2dldEV2ZW50VGFyZ2V0Jyk7XG4gIHZhciBnZXRVbmJvdW5kZWRTY3JvbGxQb3NpdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2dldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uJyk7XG4gIGZ1bmN0aW9uIGZpbmRQYXJlbnQoaW5zdCkge1xuICAgIHdoaWxlIChpbnN0Ll9uYXRpdmVQYXJlbnQpIHtcbiAgICAgIGluc3QgPSBpbnN0Ll9uYXRpdmVQYXJlbnQ7XG4gICAgfVxuICAgIHZhciByb290Tm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgIHZhciBjb250YWluZXIgPSByb290Tm9kZS5wYXJlbnROb2RlO1xuICAgIHJldHVybiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUoY29udGFpbmVyKTtcbiAgfVxuICBmdW5jdGlvbiBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCkge1xuICAgIHRoaXMudG9wTGV2ZWxUeXBlID0gdG9wTGV2ZWxUeXBlO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICB0aGlzLmFuY2VzdG9ycyA9IFtdO1xuICB9XG4gIF9hc3NpZ24oVG9wTGV2ZWxDYWxsYmFja0Jvb2tLZWVwaW5nLnByb3RvdHlwZSwge2Rlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50b3BMZXZlbFR5cGUgPSBudWxsO1xuICAgICAgdGhpcy5uYXRpdmVFdmVudCA9IG51bGw7XG4gICAgICB0aGlzLmFuY2VzdG9ycy5sZW5ndGggPSAwO1xuICAgIH19KTtcbiAgUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZywgUG9vbGVkQ2xhc3MudHdvQXJndW1lbnRQb29sZXIpO1xuICBmdW5jdGlvbiBoYW5kbGVUb3BMZXZlbEltcGwoYm9va0tlZXBpbmcpIHtcbiAgICB2YXIgbmF0aXZlRXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChib29rS2VlcGluZy5uYXRpdmVFdmVudCk7XG4gICAgdmFyIHRhcmdldEluc3QgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIHZhciBhbmNlc3RvciA9IHRhcmdldEluc3Q7XG4gICAgZG8ge1xuICAgICAgYm9va0tlZXBpbmcuYW5jZXN0b3JzLnB1c2goYW5jZXN0b3IpO1xuICAgICAgYW5jZXN0b3IgPSBhbmNlc3RvciAmJiBmaW5kUGFyZW50KGFuY2VzdG9yKTtcbiAgICB9IHdoaWxlIChhbmNlc3Rvcik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib29rS2VlcGluZy5hbmNlc3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRhcmdldEluc3QgPSBib29rS2VlcGluZy5hbmNlc3RvcnNbaV07XG4gICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsKGJvb2tLZWVwaW5nLnRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgYm9va0tlZXBpbmcubmF0aXZlRXZlbnQsIGdldEV2ZW50VGFyZ2V0KGJvb2tLZWVwaW5nLm5hdGl2ZUV2ZW50KSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNjcm9sbFZhbHVlTW9uaXRvcihjYikge1xuICAgIHZhciBzY3JvbGxQb3NpdGlvbiA9IGdldFVuYm91bmRlZFNjcm9sbFBvc2l0aW9uKHdpbmRvdyk7XG4gICAgY2Ioc2Nyb2xsUG9zaXRpb24pO1xuICB9XG4gIHZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSB7XG4gICAgX2VuYWJsZWQ6IHRydWUsXG4gICAgX2hhbmRsZVRvcExldmVsOiBudWxsLFxuICAgIFdJTkRPV19IQU5ETEU6IEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSA/IHdpbmRvdyA6IG51bGwsXG4gICAgc2V0SGFuZGxlVG9wTGV2ZWw6IGZ1bmN0aW9uKGhhbmRsZVRvcExldmVsKSB7XG4gICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2hhbmRsZVRvcExldmVsID0gaGFuZGxlVG9wTGV2ZWw7XG4gICAgfSxcbiAgICBzZXRFbmFibGVkOiBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgICBSZWFjdEV2ZW50TGlzdGVuZXIuX2VuYWJsZWQgPSAhIWVuYWJsZWQ7XG4gICAgfSxcbiAgICBpc0VuYWJsZWQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFJlYWN0RXZlbnRMaXN0ZW5lci5fZW5hYmxlZDtcbiAgICB9LFxuICAgIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gaGFuZGxlO1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIEV2ZW50TGlzdGVuZXIubGlzdGVuKGVsZW1lbnQsIGhhbmRsZXJCYXNlTmFtZSwgUmVhY3RFdmVudExpc3RlbmVyLmRpc3BhdGNoRXZlbnQuYmluZChudWxsLCB0b3BMZXZlbFR5cGUpKTtcbiAgICB9LFxuICAgIHRyYXBDYXB0dXJlZEV2ZW50OiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIGhhbmRsZXJCYXNlTmFtZSwgaGFuZGxlKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IGhhbmRsZTtcbiAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBFdmVudExpc3RlbmVyLmNhcHR1cmUoZWxlbWVudCwgaGFuZGxlckJhc2VOYW1lLCBSZWFjdEV2ZW50TGlzdGVuZXIuZGlzcGF0Y2hFdmVudC5iaW5kKG51bGwsIHRvcExldmVsVHlwZSkpO1xuICAgIH0sXG4gICAgbW9uaXRvclNjcm9sbFZhbHVlOiBmdW5jdGlvbihyZWZyZXNoKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBzY3JvbGxWYWx1ZU1vbml0b3IuYmluZChudWxsLCByZWZyZXNoKTtcbiAgICAgIEV2ZW50TGlzdGVuZXIubGlzdGVuKHdpbmRvdywgJ3Njcm9sbCcsIGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIGRpc3BhdGNoRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgbmF0aXZlRXZlbnQpIHtcbiAgICAgIGlmICghUmVhY3RFdmVudExpc3RlbmVyLl9lbmFibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBib29rS2VlcGluZyA9IFRvcExldmVsQ2FsbGJhY2tCb29rS2VlcGluZy5nZXRQb29sZWQodG9wTGV2ZWxUeXBlLCBuYXRpdmVFdmVudCk7XG4gICAgICB0cnkge1xuICAgICAgICBSZWFjdFVwZGF0ZXMuYmF0Y2hlZFVwZGF0ZXMoaGFuZGxlVG9wTGV2ZWxJbXBsLCBib29rS2VlcGluZyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBUb3BMZXZlbENhbGxiYWNrQm9va0tlZXBpbmcucmVsZWFzZShib29rS2VlcGluZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXZlbnRMaXN0ZW5lcjtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5IdWInKTtcbnZhciBFdmVudFBsdWdpblV0aWxzID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpblV0aWxzJyk7XG52YXIgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKCcuL1JlYWN0Q2xhc3MnKTtcbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVtcHR5Q29tcG9uZW50Jyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdE5hdGl2ZUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3ROYXRpdmVDb21wb25lbnQnKTtcbnZhciBSZWFjdFVwZGF0ZXMgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlcycpO1xudmFyIFJlYWN0SW5qZWN0aW9uID0ge1xuICBDb21wb25lbnQ6IFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQuaW5qZWN0aW9uLFxuICBDbGFzczogUmVhY3RDbGFzcy5pbmplY3Rpb24sXG4gIERPTVByb3BlcnR5OiBET01Qcm9wZXJ0eS5pbmplY3Rpb24sXG4gIEVtcHR5Q29tcG9uZW50OiBSZWFjdEVtcHR5Q29tcG9uZW50LmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5IdWI6IEV2ZW50UGx1Z2luSHViLmluamVjdGlvbixcbiAgRXZlbnRQbHVnaW5VdGlsczogRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24sXG4gIEV2ZW50RW1pdHRlcjogUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLmluamVjdGlvbixcbiAgTmF0aXZlQ29tcG9uZW50OiBSZWFjdE5hdGl2ZUNvbXBvbmVudC5pbmplY3Rpb24sXG4gIFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5pbmplY3Rpb25cbn07XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5qZWN0aW9uO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbnZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZSgnLi9DYWxsYmFja1F1ZXVlJyk7XG52YXIgUG9vbGVkQ2xhc3MgPSByZXF1aXJlKCcuL1Bvb2xlZENsYXNzJyk7XG52YXIgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnLi9SZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXInKTtcbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdElucHV0U2VsZWN0aW9uJyk7XG52YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1RyYW5zYWN0aW9uJyk7XG52YXIgU0VMRUNUSU9OX1JFU1RPUkFUSU9OID0ge1xuICBpbml0aWFsaXplOiBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbkluZm9ybWF0aW9uLFxuICBjbG9zZTogUmVhY3RJbnB1dFNlbGVjdGlvbi5yZXN0b3JlU2VsZWN0aW9uXG59O1xudmFyIEVWRU5UX1NVUFBSRVNTSU9OID0ge1xuICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY3VycmVudGx5RW5hYmxlZCA9IFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5pc0VuYWJsZWQoKTtcbiAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuc2V0RW5hYmxlZChmYWxzZSk7XG4gICAgcmV0dXJuIGN1cnJlbnRseUVuYWJsZWQ7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbihwcmV2aW91c2x5RW5hYmxlZCkge1xuICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5zZXRFbmFibGVkKHByZXZpb3VzbHlFbmFibGVkKTtcbiAgfVxufTtcbnZhciBPTl9ET01fUkVBRFlfUVVFVUVJTkcgPSB7XG4gIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5LnJlc2V0KCk7XG4gIH0sXG4gIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlYWN0TW91bnRSZWFkeS5ub3RpZnlBbGwoKTtcbiAgfVxufTtcbnZhciBUUkFOU0FDVElPTl9XUkFQUEVSUyA9IFtTRUxFQ1RJT05fUkVTVE9SQVRJT04sIEVWRU5UX1NVUFBSRVNTSU9OLCBPTl9ET01fUkVBRFlfUVVFVUVJTkddO1xuZnVuY3Rpb24gUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbih1c2VDcmVhdGVFbGVtZW50KSB7XG4gIHRoaXMucmVpbml0aWFsaXplVHJhbnNhY3Rpb24oKTtcbiAgdGhpcy5yZW5kZXJUb1N0YXRpY01hcmt1cCA9IGZhbHNlO1xuICB0aGlzLnJlYWN0TW91bnRSZWFkeSA9IENhbGxiYWNrUXVldWUuZ2V0UG9vbGVkKG51bGwpO1xuICB0aGlzLnVzZUNyZWF0ZUVsZW1lbnQgPSB1c2VDcmVhdGVFbGVtZW50O1xufVxudmFyIE1peGluID0ge1xuICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gVFJBTlNBQ1RJT05fV1JBUFBFUlM7XG4gIH0sXG4gIGdldFJlYWN0TW91bnRSZWFkeTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmVhY3RNb3VudFJlYWR5O1xuICB9LFxuICBjaGVja3BvaW50OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZWFjdE1vdW50UmVhZHkuY2hlY2twb2ludCgpO1xuICB9LFxuICByb2xsYmFjazogZnVuY3Rpb24oY2hlY2twb2ludCkge1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5LnJvbGxiYWNrKGNoZWNrcG9pbnQpO1xuICB9LFxuICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICBDYWxsYmFja1F1ZXVlLnJlbGVhc2UodGhpcy5yZWFjdE1vdW50UmVhZHkpO1xuICAgIHRoaXMucmVhY3RNb3VudFJlYWR5ID0gbnVsbDtcbiAgfVxufTtcbl9hc3NpZ24oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5wcm90b3R5cGUsIFRyYW5zYWN0aW9uLk1peGluLCBNaXhpbik7XG5Qb29sZWRDbGFzcy5hZGRQb29saW5nVG8oUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbik7XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb247XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgU1ZHRE9NUHJvcGVydHlDb25maWdcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBOUyA9IHtcbiAgeGxpbms6ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJyxcbiAgeG1sOiAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJ1xufTtcblxuLy8gV2UgdXNlIGF0dHJpYnV0ZXMgZm9yIGV2ZXJ5dGhpbmcgU1ZHIHNvIGxldCdzIGF2b2lkIHNvbWUgZHVwbGljYXRpb24gYW5kIHJ1blxuLy8gY29kZSBpbnN0ZWFkLlxuLy8gVGhlIGZvbGxvd2luZyBhcmUgYWxsIHNwZWNpZmllZCBpbiB0aGUgSFRNTCBjb25maWcgYWxyZWFkeSBzbyB3ZSBleGNsdWRlIGhlcmUuXG4vLyAtIGNsYXNzIChhcyBjbGFzc05hbWUpXG4vLyAtIGNvbG9yXG4vLyAtIGhlaWdodFxuLy8gLSBpZFxuLy8gLSBsYW5nXG4vLyAtIG1heFxuLy8gLSBtZWRpYVxuLy8gLSBtZXRob2Rcbi8vIC0gbWluXG4vLyAtIG5hbWVcbi8vIC0gc3R5bGVcbi8vIC0gdGFyZ2V0XG4vLyAtIHR5cGVcbi8vIC0gd2lkdGhcbnZhciBBVFRSUyA9IHtcbiAgYWNjZW50SGVpZ2h0OiAnYWNjZW50LWhlaWdodCcsXG4gIGFjY3VtdWxhdGU6IDAsXG4gIGFkZGl0aXZlOiAwLFxuICBhbGlnbm1lbnRCYXNlbGluZTogJ2FsaWdubWVudC1iYXNlbGluZScsXG4gIGFsbG93UmVvcmRlcjogJ2FsbG93UmVvcmRlcicsXG4gIGFscGhhYmV0aWM6IDAsXG4gIGFtcGxpdHVkZTogMCxcbiAgYXJhYmljRm9ybTogJ2FyYWJpYy1mb3JtJyxcbiAgYXNjZW50OiAwLFxuICBhdHRyaWJ1dGVOYW1lOiAnYXR0cmlidXRlTmFtZScsXG4gIGF0dHJpYnV0ZVR5cGU6ICdhdHRyaWJ1dGVUeXBlJyxcbiAgYXV0b1JldmVyc2U6ICdhdXRvUmV2ZXJzZScsXG4gIGF6aW11dGg6IDAsXG4gIGJhc2VGcmVxdWVuY3k6ICdiYXNlRnJlcXVlbmN5JyxcbiAgYmFzZVByb2ZpbGU6ICdiYXNlUHJvZmlsZScsXG4gIGJhc2VsaW5lU2hpZnQ6ICdiYXNlbGluZS1zaGlmdCcsXG4gIGJib3g6IDAsXG4gIGJlZ2luOiAwLFxuICBiaWFzOiAwLFxuICBieTogMCxcbiAgY2FsY01vZGU6ICdjYWxjTW9kZScsXG4gIGNhcEhlaWdodDogJ2NhcC1oZWlnaHQnLFxuICBjbGlwOiAwLFxuICBjbGlwUGF0aDogJ2NsaXAtcGF0aCcsXG4gIGNsaXBSdWxlOiAnY2xpcC1ydWxlJyxcbiAgY2xpcFBhdGhVbml0czogJ2NsaXBQYXRoVW5pdHMnLFxuICBjb2xvckludGVycG9sYXRpb246ICdjb2xvci1pbnRlcnBvbGF0aW9uJyxcbiAgY29sb3JJbnRlcnBvbGF0aW9uRmlsdGVyczogJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsXG4gIGNvbG9yUHJvZmlsZTogJ2NvbG9yLXByb2ZpbGUnLFxuICBjb2xvclJlbmRlcmluZzogJ2NvbG9yLXJlbmRlcmluZycsXG4gIGNvbnRlbnRTY3JpcHRUeXBlOiAnY29udGVudFNjcmlwdFR5cGUnLFxuICBjb250ZW50U3R5bGVUeXBlOiAnY29udGVudFN0eWxlVHlwZScsXG4gIGN1cnNvcjogMCxcbiAgY3g6IDAsXG4gIGN5OiAwLFxuICBkOiAwLFxuICBkZWNlbGVyYXRlOiAwLFxuICBkZXNjZW50OiAwLFxuICBkaWZmdXNlQ29uc3RhbnQ6ICdkaWZmdXNlQ29uc3RhbnQnLFxuICBkaXJlY3Rpb246IDAsXG4gIGRpc3BsYXk6IDAsXG4gIGRpdmlzb3I6IDAsXG4gIGRvbWluYW50QmFzZWxpbmU6ICdkb21pbmFudC1iYXNlbGluZScsXG4gIGR1cjogMCxcbiAgZHg6IDAsXG4gIGR5OiAwLFxuICBlZGdlTW9kZTogJ2VkZ2VNb2RlJyxcbiAgZWxldmF0aW9uOiAwLFxuICBlbmFibGVCYWNrZ3JvdW5kOiAnZW5hYmxlLWJhY2tncm91bmQnLFxuICBlbmQ6IDAsXG4gIGV4cG9uZW50OiAwLFxuICBleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkOiAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsXG4gIGZpbGw6IDAsXG4gIGZpbGxPcGFjaXR5OiAnZmlsbC1vcGFjaXR5JyxcbiAgZmlsbFJ1bGU6ICdmaWxsLXJ1bGUnLFxuICBmaWx0ZXI6IDAsXG4gIGZpbHRlclJlczogJ2ZpbHRlclJlcycsXG4gIGZpbHRlclVuaXRzOiAnZmlsdGVyVW5pdHMnLFxuICBmbG9vZENvbG9yOiAnZmxvb2QtY29sb3InLFxuICBmbG9vZE9wYWNpdHk6ICdmbG9vZC1vcGFjaXR5JyxcbiAgZm9jdXNhYmxlOiAwLFxuICBmb250RmFtaWx5OiAnZm9udC1mYW1pbHknLFxuICBmb250U2l6ZTogJ2ZvbnQtc2l6ZScsXG4gIGZvbnRTaXplQWRqdXN0OiAnZm9udC1zaXplLWFkanVzdCcsXG4gIGZvbnRTdHJldGNoOiAnZm9udC1zdHJldGNoJyxcbiAgZm9udFN0eWxlOiAnZm9udC1zdHlsZScsXG4gIGZvbnRWYXJpYW50OiAnZm9udC12YXJpYW50JyxcbiAgZm9udFdlaWdodDogJ2ZvbnQtd2VpZ2h0JyxcbiAgZm9ybWF0OiAwLFxuICBmcm9tOiAwLFxuICBmeDogMCxcbiAgZnk6IDAsXG4gIGcxOiAwLFxuICBnMjogMCxcbiAgZ2x5cGhOYW1lOiAnZ2x5cGgtbmFtZScsXG4gIGdseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsOiAnZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCcsXG4gIGdseXBoT3JpZW50YXRpb25WZXJ0aWNhbDogJ2dseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsJyxcbiAgZ2x5cGhSZWY6ICdnbHlwaFJlZicsXG4gIGdyYWRpZW50VHJhbnNmb3JtOiAnZ3JhZGllbnRUcmFuc2Zvcm0nLFxuICBncmFkaWVudFVuaXRzOiAnZ3JhZGllbnRVbml0cycsXG4gIGhhbmdpbmc6IDAsXG4gIGhvcml6QWR2WDogJ2hvcml6LWFkdi14JyxcbiAgaG9yaXpPcmlnaW5YOiAnaG9yaXotb3JpZ2luLXgnLFxuICBpZGVvZ3JhcGhpYzogMCxcbiAgaW1hZ2VSZW5kZXJpbmc6ICdpbWFnZS1yZW5kZXJpbmcnLFxuICAnaW4nOiAwLFxuICBpbjI6IDAsXG4gIGludGVyY2VwdDogMCxcbiAgazogMCxcbiAgazE6IDAsXG4gIGsyOiAwLFxuICBrMzogMCxcbiAgazQ6IDAsXG4gIGtlcm5lbE1hdHJpeDogJ2tlcm5lbE1hdHJpeCcsXG4gIGtlcm5lbFVuaXRMZW5ndGg6ICdrZXJuZWxVbml0TGVuZ3RoJyxcbiAga2VybmluZzogMCxcbiAga2V5UG9pbnRzOiAna2V5UG9pbnRzJyxcbiAga2V5U3BsaW5lczogJ2tleVNwbGluZXMnLFxuICBrZXlUaW1lczogJ2tleVRpbWVzJyxcbiAgbGVuZ3RoQWRqdXN0OiAnbGVuZ3RoQWRqdXN0JyxcbiAgbGV0dGVyU3BhY2luZzogJ2xldHRlci1zcGFjaW5nJyxcbiAgbGlnaHRpbmdDb2xvcjogJ2xpZ2h0aW5nLWNvbG9yJyxcbiAgbGltaXRpbmdDb25lQW5nbGU6ICdsaW1pdGluZ0NvbmVBbmdsZScsXG4gIGxvY2FsOiAwLFxuICBtYXJrZXJFbmQ6ICdtYXJrZXItZW5kJyxcbiAgbWFya2VyTWlkOiAnbWFya2VyLW1pZCcsXG4gIG1hcmtlclN0YXJ0OiAnbWFya2VyLXN0YXJ0JyxcbiAgbWFya2VySGVpZ2h0OiAnbWFya2VySGVpZ2h0JyxcbiAgbWFya2VyVW5pdHM6ICdtYXJrZXJVbml0cycsXG4gIG1hcmtlcldpZHRoOiAnbWFya2VyV2lkdGgnLFxuICBtYXNrOiAwLFxuICBtYXNrQ29udGVudFVuaXRzOiAnbWFza0NvbnRlbnRVbml0cycsXG4gIG1hc2tVbml0czogJ21hc2tVbml0cycsXG4gIG1hdGhlbWF0aWNhbDogMCxcbiAgbW9kZTogMCxcbiAgbnVtT2N0YXZlczogJ251bU9jdGF2ZXMnLFxuICBvZmZzZXQ6IDAsXG4gIG9wYWNpdHk6IDAsXG4gIG9wZXJhdG9yOiAwLFxuICBvcmRlcjogMCxcbiAgb3JpZW50OiAwLFxuICBvcmllbnRhdGlvbjogMCxcbiAgb3JpZ2luOiAwLFxuICBvdmVyZmxvdzogMCxcbiAgb3ZlcmxpbmVQb3NpdGlvbjogJ292ZXJsaW5lLXBvc2l0aW9uJyxcbiAgb3ZlcmxpbmVUaGlja25lc3M6ICdvdmVybGluZS10aGlja25lc3MnLFxuICBwYWludE9yZGVyOiAncGFpbnQtb3JkZXInLFxuICBwYW5vc2UxOiAncGFub3NlLTEnLFxuICBwYXRoTGVuZ3RoOiAncGF0aExlbmd0aCcsXG4gIHBhdHRlcm5Db250ZW50VW5pdHM6ICdwYXR0ZXJuQ29udGVudFVuaXRzJyxcbiAgcGF0dGVyblRyYW5zZm9ybTogJ3BhdHRlcm5UcmFuc2Zvcm0nLFxuICBwYXR0ZXJuVW5pdHM6ICdwYXR0ZXJuVW5pdHMnLFxuICBwb2ludGVyRXZlbnRzOiAncG9pbnRlci1ldmVudHMnLFxuICBwb2ludHM6IDAsXG4gIHBvaW50c0F0WDogJ3BvaW50c0F0WCcsXG4gIHBvaW50c0F0WTogJ3BvaW50c0F0WScsXG4gIHBvaW50c0F0WjogJ3BvaW50c0F0WicsXG4gIHByZXNlcnZlQWxwaGE6ICdwcmVzZXJ2ZUFscGhhJyxcbiAgcHJlc2VydmVBc3BlY3RSYXRpbzogJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLFxuICBwcmltaXRpdmVVbml0czogJ3ByaW1pdGl2ZVVuaXRzJyxcbiAgcjogMCxcbiAgcmFkaXVzOiAwLFxuICByZWZYOiAncmVmWCcsXG4gIHJlZlk6ICdyZWZZJyxcbiAgcmVuZGVyaW5nSW50ZW50OiAncmVuZGVyaW5nLWludGVudCcsXG4gIHJlcGVhdENvdW50OiAncmVwZWF0Q291bnQnLFxuICByZXBlYXREdXI6ICdyZXBlYXREdXInLFxuICByZXF1aXJlZEV4dGVuc2lvbnM6ICdyZXF1aXJlZEV4dGVuc2lvbnMnLFxuICByZXF1aXJlZEZlYXR1cmVzOiAncmVxdWlyZWRGZWF0dXJlcycsXG4gIHJlc3RhcnQ6IDAsXG4gIHJlc3VsdDogMCxcbiAgcm90YXRlOiAwLFxuICByeDogMCxcbiAgcnk6IDAsXG4gIHNjYWxlOiAwLFxuICBzZWVkOiAwLFxuICBzaGFwZVJlbmRlcmluZzogJ3NoYXBlLXJlbmRlcmluZycsXG4gIHNsb3BlOiAwLFxuICBzcGFjaW5nOiAwLFxuICBzcGVjdWxhckNvbnN0YW50OiAnc3BlY3VsYXJDb25zdGFudCcsXG4gIHNwZWN1bGFyRXhwb25lbnQ6ICdzcGVjdWxhckV4cG9uZW50JyxcbiAgc3BlZWQ6IDAsXG4gIHNwcmVhZE1ldGhvZDogJ3NwcmVhZE1ldGhvZCcsXG4gIHN0YXJ0T2Zmc2V0OiAnc3RhcnRPZmZzZXQnLFxuICBzdGREZXZpYXRpb246ICdzdGREZXZpYXRpb24nLFxuICBzdGVtaDogMCxcbiAgc3RlbXY6IDAsXG4gIHN0aXRjaFRpbGVzOiAnc3RpdGNoVGlsZXMnLFxuICBzdG9wQ29sb3I6ICdzdG9wLWNvbG9yJyxcbiAgc3RvcE9wYWNpdHk6ICdzdG9wLW9wYWNpdHknLFxuICBzdHJpa2V0aHJvdWdoUG9zaXRpb246ICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJyxcbiAgc3RyaWtldGhyb3VnaFRoaWNrbmVzczogJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJyxcbiAgc3RyaW5nOiAwLFxuICBzdHJva2U6IDAsXG4gIHN0cm9rZURhc2hhcnJheTogJ3N0cm9rZS1kYXNoYXJyYXknLFxuICBzdHJva2VEYXNob2Zmc2V0OiAnc3Ryb2tlLWRhc2hvZmZzZXQnLFxuICBzdHJva2VMaW5lY2FwOiAnc3Ryb2tlLWxpbmVjYXAnLFxuICBzdHJva2VMaW5lam9pbjogJ3N0cm9rZS1saW5lam9pbicsXG4gIHN0cm9rZU1pdGVybGltaXQ6ICdzdHJva2UtbWl0ZXJsaW1pdCcsXG4gIHN0cm9rZU9wYWNpdHk6ICdzdHJva2Utb3BhY2l0eScsXG4gIHN0cm9rZVdpZHRoOiAnc3Ryb2tlLXdpZHRoJyxcbiAgc3VyZmFjZVNjYWxlOiAnc3VyZmFjZVNjYWxlJyxcbiAgc3lzdGVtTGFuZ3VhZ2U6ICdzeXN0ZW1MYW5ndWFnZScsXG4gIHRhYmxlVmFsdWVzOiAndGFibGVWYWx1ZXMnLFxuICB0YXJnZXRYOiAndGFyZ2V0WCcsXG4gIHRhcmdldFk6ICd0YXJnZXRZJyxcbiAgdGV4dEFuY2hvcjogJ3RleHQtYW5jaG9yJyxcbiAgdGV4dERlY29yYXRpb246ICd0ZXh0LWRlY29yYXRpb24nLFxuICB0ZXh0UmVuZGVyaW5nOiAndGV4dC1yZW5kZXJpbmcnLFxuICB0ZXh0TGVuZ3RoOiAndGV4dExlbmd0aCcsXG4gIHRvOiAwLFxuICB0cmFuc2Zvcm06IDAsXG4gIHUxOiAwLFxuICB1MjogMCxcbiAgdW5kZXJsaW5lUG9zaXRpb246ICd1bmRlcmxpbmUtcG9zaXRpb24nLFxuICB1bmRlcmxpbmVUaGlja25lc3M6ICd1bmRlcmxpbmUtdGhpY2tuZXNzJyxcbiAgdW5pY29kZTogMCxcbiAgdW5pY29kZUJpZGk6ICd1bmljb2RlLWJpZGknLFxuICB1bmljb2RlUmFuZ2U6ICd1bmljb2RlLXJhbmdlJyxcbiAgdW5pdHNQZXJFbTogJ3VuaXRzLXBlci1lbScsXG4gIHZBbHBoYWJldGljOiAndi1hbHBoYWJldGljJyxcbiAgdkhhbmdpbmc6ICd2LWhhbmdpbmcnLFxuICB2SWRlb2dyYXBoaWM6ICd2LWlkZW9ncmFwaGljJyxcbiAgdk1hdGhlbWF0aWNhbDogJ3YtbWF0aGVtYXRpY2FsJyxcbiAgdmFsdWVzOiAwLFxuICB2ZWN0b3JFZmZlY3Q6ICd2ZWN0b3ItZWZmZWN0JyxcbiAgdmVyc2lvbjogMCxcbiAgdmVydEFkdlk6ICd2ZXJ0LWFkdi15JyxcbiAgdmVydE9yaWdpblg6ICd2ZXJ0LW9yaWdpbi14JyxcbiAgdmVydE9yaWdpblk6ICd2ZXJ0LW9yaWdpbi15JyxcbiAgdmlld0JveDogJ3ZpZXdCb3gnLFxuICB2aWV3VGFyZ2V0OiAndmlld1RhcmdldCcsXG4gIHZpc2liaWxpdHk6IDAsXG4gIHdpZHRoczogMCxcbiAgd29yZFNwYWNpbmc6ICd3b3JkLXNwYWNpbmcnLFxuICB3cml0aW5nTW9kZTogJ3dyaXRpbmctbW9kZScsXG4gIHg6IDAsXG4gIHhIZWlnaHQ6ICd4LWhlaWdodCcsXG4gIHgxOiAwLFxuICB4MjogMCxcbiAgeENoYW5uZWxTZWxlY3RvcjogJ3hDaGFubmVsU2VsZWN0b3InLFxuICB4bGlua0FjdHVhdGU6ICd4bGluazphY3R1YXRlJyxcbiAgeGxpbmtBcmNyb2xlOiAneGxpbms6YXJjcm9sZScsXG4gIHhsaW5rSHJlZjogJ3hsaW5rOmhyZWYnLFxuICB4bGlua1JvbGU6ICd4bGluazpyb2xlJyxcbiAgeGxpbmtTaG93OiAneGxpbms6c2hvdycsXG4gIHhsaW5rVGl0bGU6ICd4bGluazp0aXRsZScsXG4gIHhsaW5rVHlwZTogJ3hsaW5rOnR5cGUnLFxuICB4bWxCYXNlOiAneG1sOmJhc2UnLFxuICB4bWxMYW5nOiAneG1sOmxhbmcnLFxuICB4bWxTcGFjZTogJ3htbDpzcGFjZScsXG4gIHk6IDAsXG4gIHkxOiAwLFxuICB5MjogMCxcbiAgeUNoYW5uZWxTZWxlY3RvcjogJ3lDaGFubmVsU2VsZWN0b3InLFxuICB6OiAwLFxuICB6b29tQW5kUGFuOiAnem9vbUFuZFBhbidcbn07XG5cbnZhciBTVkdET01Qcm9wZXJ0eUNvbmZpZyA9IHtcbiAgUHJvcGVydGllczoge30sXG4gIERPTUF0dHJpYnV0ZU5hbWVzcGFjZXM6IHtcbiAgICB4bGlua0FjdHVhdGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rQXJjcm9sZTogTlMueGxpbmssXG4gICAgeGxpbmtIcmVmOiBOUy54bGluayxcbiAgICB4bGlua1JvbGU6IE5TLnhsaW5rLFxuICAgIHhsaW5rU2hvdzogTlMueGxpbmssXG4gICAgeGxpbmtUaXRsZTogTlMueGxpbmssXG4gICAgeGxpbmtUeXBlOiBOUy54bGluayxcbiAgICB4bWxCYXNlOiBOUy54bWwsXG4gICAgeG1sTGFuZzogTlMueG1sLFxuICAgIHhtbFNwYWNlOiBOUy54bWxcbiAgfSxcbiAgRE9NQXR0cmlidXRlTmFtZXM6IHt9XG59O1xuXG5PYmplY3Qua2V5cyhBVFRSUykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gIFNWR0RPTVByb3BlcnR5Q29uZmlnLlByb3BlcnRpZXNba2V5XSA9IDA7XG4gIGlmIChBVFRSU1trZXldKSB7XG4gICAgU1ZHRE9NUHJvcGVydHlDb25maWcuRE9NQXR0cmlidXRlTmFtZXNba2V5XSA9IEFUVFJTW2tleV07XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNWR0RPTVByb3BlcnR5Q29uZmlnOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdpdmVuIGFueSBub2RlIHJldHVybiB0aGUgZmlyc3QgbGVhZiBub2RlIHdpdGhvdXQgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5cbmZ1bmN0aW9uIGdldExlYWZOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUgJiYgbm9kZS5maXJzdENoaWxkKSB7XG4gICAgbm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgfVxuICByZXR1cm4gbm9kZTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG5leHQgc2libGluZyB3aXRoaW4gYSBjb250YWluZXIuIFRoaXMgd2lsbCB3YWxrIHVwIHRoZVxuICogRE9NIGlmIGEgbm9kZSdzIHNpYmxpbmdzIGhhdmUgYmVlbiBleGhhdXN0ZWQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuZnVuY3Rpb24gZ2V0U2libGluZ05vZGUobm9kZSkge1xuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxufVxuXG4vKipcbiAqIEdldCBvYmplY3QgZGVzY3JpYmluZyB0aGUgbm9kZXMgd2hpY2ggY29udGFpbiBjaGFyYWN0ZXJzIGF0IG9mZnNldC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IHJvb3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAqIEByZXR1cm4gez9vYmplY3R9XG4gKi9cbmZ1bmN0aW9uIGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQocm9vdCwgb2Zmc2V0KSB7XG4gIHZhciBub2RlID0gZ2V0TGVhZk5vZGUocm9vdCk7XG4gIHZhciBub2RlU3RhcnQgPSAwO1xuICB2YXIgbm9kZUVuZCA9IDA7XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgbm9kZUVuZCA9IG5vZGVTdGFydCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuXG4gICAgICBpZiAobm9kZVN0YXJ0IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSBub2RlU3RhcnRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgbm9kZVN0YXJ0ID0gbm9kZUVuZDtcbiAgICB9XG5cbiAgICBub2RlID0gZ2V0TGVhZk5vZGUoZ2V0U2libGluZ05vZGUobm9kZSkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcblxudmFyIGNvbnRlbnRLZXkgPSBudWxsO1xuXG4vKipcbiAqIEdldHMgdGhlIGtleSB1c2VkIHRvIGFjY2VzcyB0ZXh0IGNvbnRlbnQgb24gYSBET00gbm9kZS5cbiAqXG4gKiBAcmV0dXJuIHs/c3RyaW5nfSBLZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50LlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGdldFRleHRDb250ZW50QWNjZXNzb3IoKSB7XG4gIGlmICghY29udGVudEtleSAmJiBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICAvLyBQcmVmZXIgdGV4dENvbnRlbnQgdG8gaW5uZXJUZXh0IGJlY2F1c2UgbWFueSBicm93c2VycyBzdXBwb3J0IGJvdGggYnV0XG4gICAgLy8gU1ZHIDx0ZXh0PiBlbGVtZW50cyBkb24ndCBzdXBwb3J0IGlubmVyVGV4dCBldmVuIHdoZW4gPGRpdj4gZG9lcy5cbiAgICBjb250ZW50S2V5ID0gJ3RleHRDb250ZW50JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyAndGV4dENvbnRlbnQnIDogJ2lubmVyVGV4dCc7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnRLZXk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcjsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG52YXIgZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCA9IHJlcXVpcmUoJy4vZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldCcpO1xudmFyIGdldFRleHRDb250ZW50QWNjZXNzb3IgPSByZXF1aXJlKCcuL2dldFRleHRDb250ZW50QWNjZXNzb3InKTtcbmZ1bmN0aW9uIGlzQ29sbGFwc2VkKGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCkge1xuICByZXR1cm4gYW5jaG9yTm9kZSA9PT0gZm9jdXNOb2RlICYmIGFuY2hvck9mZnNldCA9PT0gZm9jdXNPZmZzZXQ7XG59XG5mdW5jdGlvbiBnZXRJRU9mZnNldHMobm9kZSkge1xuICB2YXIgc2VsZWN0aW9uID0gZG9jdW1lbnQuc2VsZWN0aW9uO1xuICB2YXIgc2VsZWN0ZWRSYW5nZSA9IHNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICB2YXIgc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZFJhbmdlLnRleHQubGVuZ3RoO1xuICB2YXIgZnJvbVN0YXJ0ID0gc2VsZWN0ZWRSYW5nZS5kdXBsaWNhdGUoKTtcbiAgZnJvbVN0YXJ0Lm1vdmVUb0VsZW1lbnRUZXh0KG5vZGUpO1xuICBmcm9tU3RhcnQuc2V0RW5kUG9pbnQoJ0VuZFRvU3RhcnQnLCBzZWxlY3RlZFJhbmdlKTtcbiAgdmFyIHN0YXJ0T2Zmc2V0ID0gZnJvbVN0YXJ0LnRleHQubGVuZ3RoO1xuICB2YXIgZW5kT2Zmc2V0ID0gc3RhcnRPZmZzZXQgKyBzZWxlY3RlZExlbmd0aDtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogc3RhcnRPZmZzZXQsXG4gICAgZW5kOiBlbmRPZmZzZXRcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldE1vZGVybk9mZnNldHMobm9kZSkge1xuICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbiAmJiB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gIGlmICghc2VsZWN0aW9uIHx8IHNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAwKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGFuY2hvck5vZGUgPSBzZWxlY3Rpb24uYW5jaG9yTm9kZTtcbiAgdmFyIGFuY2hvck9mZnNldCA9IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQ7XG4gIHZhciBmb2N1c05vZGUgPSBzZWxlY3Rpb24uZm9jdXNOb2RlO1xuICB2YXIgZm9jdXNPZmZzZXQgPSBzZWxlY3Rpb24uZm9jdXNPZmZzZXQ7XG4gIHZhciBjdXJyZW50UmFuZ2UgPSBzZWxlY3Rpb24uZ2V0UmFuZ2VBdCgwKTtcbiAgdHJ5IHtcbiAgICBjdXJyZW50UmFuZ2Uuc3RhcnRDb250YWluZXIubm9kZVR5cGU7XG4gICAgY3VycmVudFJhbmdlLmVuZENvbnRhaW5lci5ub2RlVHlwZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciBpc1NlbGVjdGlvbkNvbGxhcHNlZCA9IGlzQ29sbGFwc2VkKHNlbGVjdGlvbi5hbmNob3JOb2RlLCBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LCBzZWxlY3Rpb24uZm9jdXNOb2RlLCBzZWxlY3Rpb24uZm9jdXNPZmZzZXQpO1xuICB2YXIgcmFuZ2VMZW5ndGggPSBpc1NlbGVjdGlvbkNvbGxhcHNlZCA/IDAgOiBjdXJyZW50UmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG4gIHZhciB0ZW1wUmFuZ2UgPSBjdXJyZW50UmFuZ2UuY2xvbmVSYW5nZSgpO1xuICB0ZW1wUmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5vZGUpO1xuICB0ZW1wUmFuZ2Uuc2V0RW5kKGN1cnJlbnRSYW5nZS5zdGFydENvbnRhaW5lciwgY3VycmVudFJhbmdlLnN0YXJ0T2Zmc2V0KTtcbiAgdmFyIGlzVGVtcFJhbmdlQ29sbGFwc2VkID0gaXNDb2xsYXBzZWQodGVtcFJhbmdlLnN0YXJ0Q29udGFpbmVyLCB0ZW1wUmFuZ2Uuc3RhcnRPZmZzZXQsIHRlbXBSYW5nZS5lbmRDb250YWluZXIsIHRlbXBSYW5nZS5lbmRPZmZzZXQpO1xuICB2YXIgc3RhcnQgPSBpc1RlbXBSYW5nZUNvbGxhcHNlZCA/IDAgOiB0ZW1wUmFuZ2UudG9TdHJpbmcoKS5sZW5ndGg7XG4gIHZhciBlbmQgPSBzdGFydCArIHJhbmdlTGVuZ3RoO1xuICB2YXIgZGV0ZWN0aW9uUmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICBkZXRlY3Rpb25SYW5nZS5zZXRTdGFydChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQpO1xuICBkZXRlY3Rpb25SYW5nZS5zZXRFbmQoZm9jdXNOb2RlLCBmb2N1c09mZnNldCk7XG4gIHZhciBpc0JhY2t3YXJkID0gZGV0ZWN0aW9uUmFuZ2UuY29sbGFwc2VkO1xuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBpc0JhY2t3YXJkID8gZW5kIDogc3RhcnQsXG4gICAgZW5kOiBpc0JhY2t3YXJkID8gc3RhcnQgOiBlbmRcbiAgfTtcbn1cbmZ1bmN0aW9uIHNldElFT2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpLmR1cGxpY2F0ZSgpO1xuICB2YXIgc3RhcnQsXG4gICAgICBlbmQ7XG4gIGlmIChvZmZzZXRzLmVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICAgIGVuZCA9IHN0YXJ0O1xuICB9IGVsc2UgaWYgKG9mZnNldHMuc3RhcnQgPiBvZmZzZXRzLmVuZCkge1xuICAgIHN0YXJ0ID0gb2Zmc2V0cy5lbmQ7XG4gICAgZW5kID0gb2Zmc2V0cy5zdGFydDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgZW5kID0gb2Zmc2V0cy5lbmQ7XG4gIH1cbiAgcmFuZ2UubW92ZVRvRWxlbWVudFRleHQobm9kZSk7XG4gIHJhbmdlLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgc3RhcnQpO1xuICByYW5nZS5zZXRFbmRQb2ludCgnRW5kVG9TdGFydCcsIHJhbmdlKTtcbiAgcmFuZ2UubW92ZUVuZCgnY2hhcmFjdGVyJywgZW5kIC0gc3RhcnQpO1xuICByYW5nZS5zZWxlY3QoKTtcbn1cbmZ1bmN0aW9uIHNldE1vZGVybk9mZnNldHMobm9kZSwgb2Zmc2V0cykge1xuICBpZiAoIXdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgdmFyIGxlbmd0aCA9IG5vZGVbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXS5sZW5ndGg7XG4gIHZhciBzdGFydCA9IE1hdGgubWluKG9mZnNldHMuc3RhcnQsIGxlbmd0aCk7XG4gIHZhciBlbmQgPSBvZmZzZXRzLmVuZCA9PT0gdW5kZWZpbmVkID8gc3RhcnQgOiBNYXRoLm1pbihvZmZzZXRzLmVuZCwgbGVuZ3RoKTtcbiAgaWYgKCFzZWxlY3Rpb24uZXh0ZW5kICYmIHN0YXJ0ID4gZW5kKSB7XG4gICAgdmFyIHRlbXAgPSBlbmQ7XG4gICAgZW5kID0gc3RhcnQ7XG4gICAgc3RhcnQgPSB0ZW1wO1xuICB9XG4gIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgc3RhcnQpO1xuICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBlbmQpO1xuICBpZiAoc3RhcnRNYXJrZXIgJiYgZW5kTWFya2VyKSB7XG4gICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZXRTdGFydChzdGFydE1hcmtlci5ub2RlLCBzdGFydE1hcmtlci5vZmZzZXQpO1xuICAgIHNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTtcbiAgICBpZiAoc3RhcnQgPiBlbmQpIHtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgICBzZWxlY3Rpb24uZXh0ZW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2Uuc2V0RW5kKGVuZE1hcmtlci5ub2RlLCBlbmRNYXJrZXIub2Zmc2V0KTtcbiAgICAgIHNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7XG4gICAgfVxuICB9XG59XG52YXIgdXNlSUVPZmZzZXRzID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdzZWxlY3Rpb24nIGluIGRvY3VtZW50ICYmICEoJ2dldFNlbGVjdGlvbicgaW4gd2luZG93KTtcbnZhciBSZWFjdERPTVNlbGVjdGlvbiA9IHtcbiAgZ2V0T2Zmc2V0czogdXNlSUVPZmZzZXRzID8gZ2V0SUVPZmZzZXRzIDogZ2V0TW9kZXJuT2Zmc2V0cyxcbiAgc2V0T2Zmc2V0czogdXNlSUVPZmZzZXRzID8gc2V0SUVPZmZzZXRzIDogc2V0TW9kZXJuT2Zmc2V0c1xufTtcbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01TZWxlY3Rpb247XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0geyp9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBpcyBhIERPTSBub2RlLlxuICovXG5mdW5jdGlvbiBpc05vZGUob2JqZWN0KSB7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBOb2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlOyIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vaXNOb2RlJyk7XG5mdW5jdGlvbiBpc1RleHROb2RlKG9iamVjdCkge1xuICByZXR1cm4gaXNOb2RlKG9iamVjdCkgJiYgb2JqZWN0Lm5vZGVUeXBlID09IDM7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb250YWlucykge1xuICAgIHJldHVybiBvdXRlck5vZGUuY29udGFpbnMoaW5uZXJOb2RlKTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24pIHtcbiAgICByZXR1cm4gISEob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGlubmVyTm9kZSkgJiAxNik7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZSBpbnB1dC90ZXh0YXJlYSB0byBmb2N1c1xuICovXG5cbmZ1bmN0aW9uIGZvY3VzTm9kZShub2RlKSB7XG4gIC8vIElFOCBjYW4gdGhyb3cgXCJDYW4ndCBtb3ZlIGZvY3VzIHRvIHRoZSBjb250cm9sIGJlY2F1c2UgaXQgaXMgaW52aXNpYmxlLFxuICAvLyBub3QgZW5hYmxlZCwgb3Igb2YgYSB0eXBlIHRoYXQgZG9lcyBub3QgYWNjZXB0IHRoZSBmb2N1cy5cIiBmb3IgYWxsIGtpbmRzIG9mXG4gIC8vIHJlYXNvbnMgdGhhdCBhcmUgdG9vIGV4cGVuc2l2ZSBhbmQgZnJhZ2lsZSB0byB0ZXN0LlxuICB0cnkge1xuICAgIG5vZGUuZm9jdXMoKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmb2N1c05vZGU7IiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgUmVhY3RET01TZWxlY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0RE9NU2VsZWN0aW9uJyk7XG52YXIgY29udGFpbnNOb2RlID0gcmVxdWlyZSgnZmJqcy9saWIvY29udGFpbnNOb2RlJyk7XG52YXIgZm9jdXNOb2RlID0gcmVxdWlyZSgnZmJqcy9saWIvZm9jdXNOb2RlJyk7XG52YXIgZ2V0QWN0aXZlRWxlbWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL2dldEFjdGl2ZUVsZW1lbnQnKTtcbmZ1bmN0aW9uIGlzSW5Eb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBjb250YWluc05vZGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKTtcbn1cbnZhciBSZWFjdElucHV0U2VsZWN0aW9uID0ge1xuICBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXM6IGZ1bmN0aW9uKGVsZW0pIHtcbiAgICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBub2RlTmFtZSAmJiAobm9kZU5hbWUgPT09ICdpbnB1dCcgJiYgZWxlbS50eXBlID09PSAndGV4dCcgfHwgbm9kZU5hbWUgPT09ICd0ZXh0YXJlYScgfHwgZWxlbS5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJyk7XG4gIH0sXG4gIGdldFNlbGVjdGlvbkluZm9ybWF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcbiAgICAgIHNlbGVjdGlvblJhbmdlOiBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhmb2N1c2VkRWxlbSkgPyBSZWFjdElucHV0U2VsZWN0aW9uLmdldFNlbGVjdGlvbihmb2N1c2VkRWxlbSkgOiBudWxsXG4gICAgfTtcbiAgfSxcbiAgcmVzdG9yZVNlbGVjdGlvbjogZnVuY3Rpb24ocHJpb3JTZWxlY3Rpb25JbmZvcm1hdGlvbikge1xuICAgIHZhciBjdXJGb2N1c2VkRWxlbSA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICB2YXIgcHJpb3JGb2N1c2VkRWxlbSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uZm9jdXNlZEVsZW07XG4gICAgdmFyIHByaW9yU2VsZWN0aW9uUmFuZ2UgPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLnNlbGVjdGlvblJhbmdlO1xuICAgIGlmIChjdXJGb2N1c2VkRWxlbSAhPT0gcHJpb3JGb2N1c2VkRWxlbSAmJiBpc0luRG9jdW1lbnQocHJpb3JGb2N1c2VkRWxlbSkpIHtcbiAgICAgIGlmIChSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgICBSZWFjdElucHV0U2VsZWN0aW9uLnNldFNlbGVjdGlvbihwcmlvckZvY3VzZWRFbGVtLCBwcmlvclNlbGVjdGlvblJhbmdlKTtcbiAgICAgIH1cbiAgICAgIGZvY3VzTm9kZShwcmlvckZvY3VzZWRFbGVtKTtcbiAgICB9XG4gIH0sXG4gIGdldFNlbGVjdGlvbjogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICB2YXIgc2VsZWN0aW9uO1xuICAgIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgICBzZWxlY3Rpb24gPSB7XG4gICAgICAgIHN0YXJ0OiBpbnB1dC5zZWxlY3Rpb25TdGFydCxcbiAgICAgICAgZW5kOiBpbnB1dC5zZWxlY3Rpb25FbmRcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudC5zZWxlY3Rpb24gJiYgaW5wdXQubm9kZU5hbWUgJiYgaW5wdXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2lucHV0Jykge1xuICAgICAgdmFyIHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCk7XG4gICAgICBpZiAocmFuZ2UucGFyZW50RWxlbWVudCgpID09PSBpbnB1dCkge1xuICAgICAgICBzZWxlY3Rpb24gPSB7XG4gICAgICAgICAgc3RhcnQ6IC1yYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpLFxuICAgICAgICAgIGVuZDogLXJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIC1pbnB1dC52YWx1ZS5sZW5ndGgpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGlvbiA9IFJlYWN0RE9NU2VsZWN0aW9uLmdldE9mZnNldHMoaW5wdXQpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZWN0aW9uIHx8IHtcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgZW5kOiAwXG4gICAgfTtcbiAgfSxcbiAgc2V0U2VsZWN0aW9uOiBmdW5jdGlvbihpbnB1dCwgb2Zmc2V0cykge1xuICAgIHZhciBzdGFydCA9IG9mZnNldHMuc3RhcnQ7XG4gICAgdmFyIGVuZCA9IG9mZnNldHMuZW5kO1xuICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZW5kID0gc3RhcnQ7XG4gICAgfVxuICAgIGlmICgnc2VsZWN0aW9uU3RhcnQnIGluIGlucHV0KSB7XG4gICAgICBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0O1xuICAgICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oZW5kLCBpbnB1dC52YWx1ZS5sZW5ndGgpO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQuc2VsZWN0aW9uICYmIGlucHV0Lm5vZGVOYW1lICYmIGlucHV0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcpIHtcbiAgICAgIHZhciByYW5nZSA9IGlucHV0LmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XG4gICAgICByYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIHN0YXJ0KTtcbiAgICAgIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIGVuZCAtIHN0YXJ0KTtcbiAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWFjdERPTVNlbGVjdGlvbi5zZXRPZmZzZXRzKGlucHV0LCBvZmZzZXRzKTtcbiAgICB9XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW5wdXRTZWxlY3Rpb247XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgZmItd3d3L3R5cGVvZi11bmRlZmluZWQgKi9cblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KCkgLyo/RE9NRWxlbWVudCove1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QWN0aXZlRWxlbWVudDsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgaXNUZXh0SW5wdXRFbGVtZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBzZWUgaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvdGhlLWlucHV0LWVsZW1lbnQuaHRtbCNpbnB1dC10eXBlLWF0dHItc3VtbWFyeVxuICovXG5cbnZhciBzdXBwb3J0ZWRJbnB1dFR5cGVzID0ge1xuICAnY29sb3InOiB0cnVlLFxuICAnZGF0ZSc6IHRydWUsXG4gICdkYXRldGltZSc6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG4gICdlbWFpbCc6IHRydWUsXG4gICdtb250aCc6IHRydWUsXG4gICdudW1iZXInOiB0cnVlLFxuICAncGFzc3dvcmQnOiB0cnVlLFxuICAncmFuZ2UnOiB0cnVlLFxuICAnc2VhcmNoJzogdHJ1ZSxcbiAgJ3RlbCc6IHRydWUsXG4gICd0ZXh0JzogdHJ1ZSxcbiAgJ3RpbWUnOiB0cnVlLFxuICAndXJsJzogdHJ1ZSxcbiAgJ3dlZWsnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBpc1RleHRJbnB1dEVsZW1lbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtICYmIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gbm9kZU5hbWUgJiYgKG5vZGVOYW1lID09PSAnaW5wdXQnICYmIHN1cHBvcnRlZElucHV0VHlwZXNbZWxlbS50eXBlXSB8fCBub2RlTmFtZSA9PT0gJ3RleHRhcmVhJyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNUZXh0SW5wdXRFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICogXG4gKi9cblxuLyplc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgaWYgKHggPT09IHkpIHtcbiAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAvLyBTdGVwcyA2LmItNi5lOiArMCAhPSAtMFxuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbnZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG52YXIgUmVhY3RJbnB1dFNlbGVjdGlvbiA9IHJlcXVpcmUoJy4vUmVhY3RJbnB1dFNlbGVjdGlvbicpO1xudmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xudmFyIGdldEFjdGl2ZUVsZW1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50Jyk7XG52YXIgaXNUZXh0SW5wdXRFbGVtZW50ID0gcmVxdWlyZSgnLi9pc1RleHRJbnB1dEVsZW1lbnQnKTtcbnZhciBrZXlPZiA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU9mJyk7XG52YXIgc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnZmJqcy9saWIvc2hhbGxvd0VxdWFsJyk7XG52YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG52YXIgc2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50ID0gRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmICdkb2N1bWVudE1vZGUnIGluIGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSA8PSAxMTtcbnZhciBldmVudFR5cGVzID0ge3NlbGVjdDoge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBrZXlPZih7b25TZWxlY3Q6IG51bGx9KSxcbiAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TZWxlY3RDYXB0dXJlOiBudWxsfSlcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW3RvcExldmVsVHlwZXMudG9wQmx1ciwgdG9wTGV2ZWxUeXBlcy50b3BDb250ZXh0TWVudSwgdG9wTGV2ZWxUeXBlcy50b3BGb2N1cywgdG9wTGV2ZWxUeXBlcy50b3BLZXlEb3duLCB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93biwgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZVVwLCB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZV1cbiAgfX07XG52YXIgYWN0aXZlRWxlbWVudCA9IG51bGw7XG52YXIgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xudmFyIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xudmFyIG1vdXNlRG93biA9IGZhbHNlO1xudmFyIGhhc0xpc3RlbmVyID0gZmFsc2U7XG52YXIgT05fU0VMRUNUX0tFWSA9IGtleU9mKHtvblNlbGVjdDogbnVsbH0pO1xuZnVuY3Rpb24gZ2V0U2VsZWN0aW9uKG5vZGUpIHtcbiAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gbm9kZSAmJiBSZWFjdElucHV0U2VsZWN0aW9uLmhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhub2RlKSkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogbm9kZS5zZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogbm9kZS5zZWxlY3Rpb25FbmRcbiAgICB9O1xuICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICB2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpO1xuICAgIHJldHVybiB7XG4gICAgICBhbmNob3JOb2RlOiBzZWxlY3Rpb24uYW5jaG9yTm9kZSxcbiAgICAgIGFuY2hvck9mZnNldDogc2VsZWN0aW9uLmFuY2hvck9mZnNldCxcbiAgICAgIGZvY3VzTm9kZTogc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICAgIGZvY3VzT2Zmc2V0OiBzZWxlY3Rpb24uZm9jdXNPZmZzZXRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGRvY3VtZW50LnNlbGVjdGlvbikge1xuICAgIHZhciByYW5nZSA9IGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBwYXJlbnRFbGVtZW50OiByYW5nZS5wYXJlbnRFbGVtZW50KCksXG4gICAgICB0ZXh0OiByYW5nZS50ZXh0LFxuICAgICAgdG9wOiByYW5nZS5ib3VuZGluZ1RvcCxcbiAgICAgIGxlZnQ6IHJhbmdlLmJvdW5kaW5nTGVmdFxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICBpZiAobW91c2VEb3duIHx8IGFjdGl2ZUVsZW1lbnQgPT0gbnVsbCB8fCBhY3RpdmVFbGVtZW50ICE9PSBnZXRBY3RpdmVFbGVtZW50KCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICB2YXIgY3VycmVudFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbihhY3RpdmVFbGVtZW50KTtcbiAgaWYgKCFsYXN0U2VsZWN0aW9uIHx8ICFzaGFsbG93RXF1YWwobGFzdFNlbGVjdGlvbiwgY3VycmVudFNlbGVjdGlvbikpIHtcbiAgICBsYXN0U2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbjtcbiAgICB2YXIgc3ludGhldGljRXZlbnQgPSBTeW50aGV0aWNFdmVudC5nZXRQb29sZWQoZXZlbnRUeXBlcy5zZWxlY3QsIGFjdGl2ZUVsZW1lbnRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIHN5bnRoZXRpY0V2ZW50LnR5cGUgPSAnc2VsZWN0JztcbiAgICBzeW50aGV0aWNFdmVudC50YXJnZXQgPSBhY3RpdmVFbGVtZW50O1xuICAgIEV2ZW50UHJvcGFnYXRvcnMuYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhzeW50aGV0aWNFdmVudCk7XG4gICAgcmV0dXJuIHN5bnRoZXRpY0V2ZW50O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxudmFyIFNlbGVjdEV2ZW50UGx1Z2luID0ge1xuICBldmVudFR5cGVzOiBldmVudFR5cGVzLFxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIGlmICghaGFzTGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgdGFyZ2V0Tm9kZSA9IHRhcmdldEluc3QgPyBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZSh0YXJnZXRJbnN0KSA6IHdpbmRvdztcbiAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEZvY3VzOlxuICAgICAgICBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRhcmdldE5vZGUpIHx8IHRhcmdldE5vZGUuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpIHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50ID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50SW5zdCA9IHRhcmdldEluc3Q7XG4gICAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQmx1cjpcbiAgICAgICAgYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICAgIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcbiAgICAgICAgbGFzdFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlRG93bjpcbiAgICAgICAgbW91c2VEb3duID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29udGV4dE1lbnU6XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTW91c2VVcDpcbiAgICAgICAgbW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNlbGVjdGlvbkNoYW5nZTpcbiAgICAgICAgaWYgKHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wS2V5RG93bjpcbiAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBkaWRQdXRMaXN0ZW5lcjogZnVuY3Rpb24oaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gT05fU0VMRUNUX0tFWSkge1xuICAgICAgaGFzTGlzdGVuZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gU2VsZWN0RXZlbnRQbHVnaW47XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCcuL2VtcHR5RnVuY3Rpb24nKTtcbiAgdmFyIEV2ZW50TGlzdGVuZXIgPSB7XG4gICAgbGlzdGVuOiBmdW5jdGlvbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB7cmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgY2FsbGJhY2ssIGZhbHNlKTtcbiAgICAgICAgICB9fTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0LmF0dGFjaEV2ZW50KSB7XG4gICAgICAgIHRhcmdldC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB7cmVtb3ZlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRhcmdldC5kZXRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBjYWxsYmFjayk7XG4gICAgICAgICAgfX07XG4gICAgICB9XG4gICAgfSxcbiAgICBjYXB0dXJlOiBmdW5jdGlvbih0YXJnZXQsIGV2ZW50VHlwZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmICh0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHtyZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBjYWxsYmFjaywgdHJ1ZSk7XG4gICAgICAgICAgfX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F0dGVtcHRlZCB0byBsaXN0ZW4gdG8gZXZlbnRzIGR1cmluZyB0aGUgY2FwdHVyZSBwaGFzZSBvbiBhICcgKyAnYnJvd3NlciB0aGF0IGRvZXMgbm90IHN1cHBvcnQgdGhlIGNhcHR1cmUgcGhhc2UuIFlvdXIgYXBwbGljYXRpb24gJyArICd3aWxsIG5vdCByZWNlaXZlIHNvbWUgZXZlbnRzLicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7cmVtb3ZlOiBlbXB0eUZ1bmN0aW9ufTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlZ2lzdGVyRGVmYXVsdDogZnVuY3Rpb24oKSB7fVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50TGlzdGVuZXI7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbiAgdmFyIEV2ZW50UGx1Z2luSHViID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpbkh1YicpO1xuICB2YXIgRXZlbnRQbHVnaW5VdGlscyA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5VdGlscycpO1xuICB2YXIgYWNjdW11bGF0ZUludG8gPSByZXF1aXJlKCcuL2FjY3VtdWxhdGVJbnRvJyk7XG4gIHZhciBmb3JFYWNoQWNjdW11bGF0ZWQgPSByZXF1aXJlKCcuL2ZvckVhY2hBY2N1bXVsYXRlZCcpO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgdmFyIFByb3BhZ2F0aW9uUGhhc2VzID0gRXZlbnRDb25zdGFudHMuUHJvcGFnYXRpb25QaGFzZXM7XG4gIHZhciBnZXRMaXN0ZW5lciA9IEV2ZW50UGx1Z2luSHViLmdldExpc3RlbmVyO1xuICBmdW5jdGlvbiBsaXN0ZW5lckF0UGhhc2UoaW5zdCwgZXZlbnQsIHByb3BhZ2F0aW9uUGhhc2UpIHtcbiAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3Byb3BhZ2F0aW9uUGhhc2VdO1xuICAgIHJldHVybiBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKTtcbiAgfVxuICBmdW5jdGlvbiBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzKGluc3QsIHVwd2FyZHMsIGV2ZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGluc3QsICdEaXNwYXRjaGluZyBpbnN0IG11c3Qgbm90IGJlIG51bGwnKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgdmFyIHBoYXNlID0gdXB3YXJkcyA/IFByb3BhZ2F0aW9uUGhhc2VzLmJ1YmJsZWQgOiBQcm9wYWdhdGlvblBoYXNlcy5jYXB0dXJlZDtcbiAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lckF0UGhhc2UoaW5zdCwgZXZlbnQsIHBoYXNlKTtcbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IGFjY3VtdWxhdGVJbnRvKGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycywgbGlzdGVuZXIpO1xuICAgICAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzLCBpbnN0KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NpbmdsZShldmVudCkge1xuICAgIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgRXZlbnRQbHVnaW5VdGlscy50cmF2ZXJzZVR3b1BoYXNlKGV2ZW50Ll90YXJnZXRJbnN0LCBhY2N1bXVsYXRlRGlyZWN0aW9uYWxEaXNwYXRjaGVzLCBldmVudCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTaW5nbGVTa2lwVGFyZ2V0KGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50ICYmIGV2ZW50LmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICB2YXIgdGFyZ2V0SW5zdCA9IGV2ZW50Ll90YXJnZXRJbnN0O1xuICAgICAgdmFyIHBhcmVudEluc3QgPSB0YXJnZXRJbnN0ID8gRXZlbnRQbHVnaW5VdGlscy5nZXRQYXJlbnRJbnN0YW5jZSh0YXJnZXRJbnN0KSA6IG51bGw7XG4gICAgICBFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlVHdvUGhhc2UocGFyZW50SW5zdCwgYWNjdW11bGF0ZURpcmVjdGlvbmFsRGlzcGF0Y2hlcywgZXZlbnQpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBhY2N1bXVsYXRlRGlzcGF0Y2hlcyhpbnN0LCBpZ25vcmVkRGlyZWN0aW9uLCBldmVudCkge1xuICAgIGlmIChldmVudCAmJiBldmVudC5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50LmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBnZXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lKTtcbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBhY2N1bXVsYXRlSW50byhldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMsIGxpc3RlbmVyKTtcbiAgICAgICAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gYWNjdW11bGF0ZUludG8oZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzLCBpbnN0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQgJiYgZXZlbnQuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgICAgYWNjdW11bGF0ZURpc3BhdGNoZXMoZXZlbnQuX3RhcmdldEluc3QsIG51bGwsIGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhldmVudHMpIHtcbiAgICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlKTtcbiAgfVxuICBmdW5jdGlvbiBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldChldmVudHMpIHtcbiAgICBmb3JFYWNoQWNjdW11bGF0ZWQoZXZlbnRzLCBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2luZ2xlU2tpcFRhcmdldCk7XG4gIH1cbiAgZnVuY3Rpb24gYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbSwgdG8pIHtcbiAgICBFdmVudFBsdWdpblV0aWxzLnRyYXZlcnNlRW50ZXJMZWF2ZShmcm9tLCB0bywgYWNjdW11bGF0ZURpc3BhdGNoZXMsIGxlYXZlLCBlbnRlcik7XG4gIH1cbiAgZnVuY3Rpb24gYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXMoZXZlbnRzKSB7XG4gICAgZm9yRWFjaEFjY3VtdWxhdGVkKGV2ZW50cywgYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXNTaW5nbGUpO1xuICB9XG4gIHZhciBFdmVudFByb3BhZ2F0b3JzID0ge1xuICAgIGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMsXG4gICAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc1NraXBUYXJnZXQ6IGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0LFxuICAgIGFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzOiBhY2N1bXVsYXRlRGlyZWN0RGlzcGF0Y2hlcyxcbiAgICBhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6IGFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlc1xuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50UHJvcGFnYXRvcnM7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG52YXIgQW5pbWF0aW9uRXZlbnRJbnRlcmZhY2UgPSB7XG4gIGFuaW1hdGlvbk5hbWU6IG51bGwsXG4gIGVsYXBzZWRUaW1lOiBudWxsLFxuICBwc2V1ZG9FbGVtZW50OiBudWxsXG59O1xuZnVuY3Rpb24gU3ludGhldGljQW5pbWF0aW9uRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50LCBBbmltYXRpb25FdmVudEludGVyZmFjZSk7XG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG52YXIgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UgPSB7Y2xpcGJvYXJkRGF0YTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ2NsaXBib2FyZERhdGEnIGluIGV2ZW50ID8gZXZlbnQuY2xpcGJvYXJkRGF0YSA6IHdpbmRvdy5jbGlwYm9hcmREYXRhO1xuICB9fTtcbmZ1bmN0aW9uIFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNDbGlwYm9hcmRFdmVudCwgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudDtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcbnZhciBGb2N1c0V2ZW50SW50ZXJmYWNlID0ge3JlbGF0ZWRUYXJnZXQ6IG51bGx9O1xuZnVuY3Rpb24gU3ludGhldGljRm9jdXNFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0ZvY3VzRXZlbnQsIEZvY3VzRXZlbnRJbnRlcmZhY2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRDaGFyQ29kZScpO1xudmFyIG5vcm1hbGl6ZUtleSA9IHtcbiAgJ0VzYyc6ICdFc2NhcGUnLFxuICAnU3BhY2ViYXInOiAnICcsXG4gICdMZWZ0JzogJ0Fycm93TGVmdCcsXG4gICdVcCc6ICdBcnJvd1VwJyxcbiAgJ1JpZ2h0JzogJ0Fycm93UmlnaHQnLFxuICAnRG93bic6ICdBcnJvd0Rvd24nLFxuICAnRGVsJzogJ0RlbGV0ZScsXG4gICdXaW4nOiAnT1MnLFxuICAnTWVudSc6ICdDb250ZXh0TWVudScsXG4gICdBcHBzJzogJ0NvbnRleHRNZW51JyxcbiAgJ1Njcm9sbCc6ICdTY3JvbGxMb2NrJyxcbiAgJ01velByaW50YWJsZUtleSc6ICdVbmlkZW50aWZpZWQnXG59O1xudmFyIHRyYW5zbGF0ZVRvS2V5ID0ge1xuICA4OiAnQmFja3NwYWNlJyxcbiAgOTogJ1RhYicsXG4gIDEyOiAnQ2xlYXInLFxuICAxMzogJ0VudGVyJyxcbiAgMTY6ICdTaGlmdCcsXG4gIDE3OiAnQ29udHJvbCcsXG4gIDE4OiAnQWx0JyxcbiAgMTk6ICdQYXVzZScsXG4gIDIwOiAnQ2Fwc0xvY2snLFxuICAyNzogJ0VzY2FwZScsXG4gIDMyOiAnICcsXG4gIDMzOiAnUGFnZVVwJyxcbiAgMzQ6ICdQYWdlRG93bicsXG4gIDM1OiAnRW5kJyxcbiAgMzY6ICdIb21lJyxcbiAgMzc6ICdBcnJvd0xlZnQnLFxuICAzODogJ0Fycm93VXAnLFxuICAzOTogJ0Fycm93UmlnaHQnLFxuICA0MDogJ0Fycm93RG93bicsXG4gIDQ1OiAnSW5zZXJ0JyxcbiAgNDY6ICdEZWxldGUnLFxuICAxMTI6ICdGMScsXG4gIDExMzogJ0YyJyxcbiAgMTE0OiAnRjMnLFxuICAxMTU6ICdGNCcsXG4gIDExNjogJ0Y1JyxcbiAgMTE3OiAnRjYnLFxuICAxMTg6ICdGNycsXG4gIDExOTogJ0Y4JyxcbiAgMTIwOiAnRjknLFxuICAxMjE6ICdGMTAnLFxuICAxMjI6ICdGMTEnLFxuICAxMjM6ICdGMTInLFxuICAxNDQ6ICdOdW1Mb2NrJyxcbiAgMTQ1OiAnU2Nyb2xsTG9jaycsXG4gIDIyNDogJ01ldGEnXG59O1xuZnVuY3Rpb24gZ2V0RXZlbnRLZXkobmF0aXZlRXZlbnQpIHtcbiAgaWYgKG5hdGl2ZUV2ZW50LmtleSkge1xuICAgIHZhciBrZXkgPSBub3JtYWxpemVLZXlbbmF0aXZlRXZlbnQua2V5XSB8fCBuYXRpdmVFdmVudC5rZXk7XG4gICAgaWYgKGtleSAhPT0gJ1VuaWRlbnRpZmllZCcpIHtcbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICB9XG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgdmFyIGNoYXJDb2RlID0gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCk7XG4gICAgcmV0dXJuIGNoYXJDb2RlID09PSAxMyA/ICdFbnRlcicgOiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgfVxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICByZXR1cm4gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgJ1VuaWRlbnRpZmllZCc7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudEtleTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIFN5bnRoZXRpY1VJRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1VJRXZlbnQnKTtcbnZhciBnZXRFdmVudENoYXJDb2RlID0gcmVxdWlyZSgnLi9nZXRFdmVudENoYXJDb2RlJyk7XG52YXIgZ2V0RXZlbnRLZXkgPSByZXF1aXJlKCcuL2dldEV2ZW50S2V5Jyk7XG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZSgnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnKTtcbnZhciBLZXlib2FyZEV2ZW50SW50ZXJmYWNlID0ge1xuICBrZXk6IGdldEV2ZW50S2V5LFxuICBsb2NhdGlvbjogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgcmVwZWF0OiBudWxsLFxuICBsb2NhbGU6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgY2hhckNvZGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlwcmVzcycpIHtcbiAgICAgIHJldHVybiBnZXRFdmVudENoYXJDb2RlKGV2ZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIGtleUNvZGU6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbihldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9XG59O1xuZnVuY3Rpb24gU3ludGhldGljS2V5Ym9hcmRFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY0tleWJvYXJkRXZlbnQsIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xudmFyIERyYWdFdmVudEludGVyZmFjZSA9IHtkYXRhVHJhbnNmZXI6IG51bGx9O1xuZnVuY3Rpb24gU3ludGhldGljRHJhZ0V2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNNb3VzZUV2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuU3ludGhldGljTW91c2VFdmVudC5hdWdtZW50Q2xhc3MoU3ludGhldGljRHJhZ0V2ZW50LCBEcmFnRXZlbnRJbnRlcmZhY2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG52YXIgZ2V0RXZlbnRNb2RpZmllclN0YXRlID0gcmVxdWlyZSgnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnKTtcbnZhciBUb3VjaEV2ZW50SW50ZXJmYWNlID0ge1xuICB0b3VjaGVzOiBudWxsLFxuICB0YXJnZXRUb3VjaGVzOiBudWxsLFxuICBjaGFuZ2VkVG91Y2hlczogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlXG59O1xuZnVuY3Rpb24gU3ludGhldGljVG91Y2hFdmVudChkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICByZXR1cm4gU3ludGhldGljVUlFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblN5bnRoZXRpY1VJRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1RvdWNoRXZlbnQsIFRvdWNoRXZlbnRJbnRlcmZhY2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgU3ludGhldGljRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0V2ZW50Jyk7XG52YXIgVHJhbnNpdGlvbkV2ZW50SW50ZXJmYWNlID0ge1xuICBwcm9wZXJ0eU5hbWU6IG51bGwsXG4gIGVsYXBzZWRUaW1lOiBudWxsLFxuICBwc2V1ZG9FbGVtZW50OiBudWxsXG59O1xuZnVuY3Rpb24gU3ludGhldGljVHJhbnNpdGlvbkV2ZW50KGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGRpc3BhdGNoQ29uZmlnLCBkaXNwYXRjaE1hcmtlciwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbn1cblN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQsIFRyYW5zaXRpb25FdmVudEludGVyZmFjZSk7XG5tb2R1bGUuZXhwb3J0cyA9IFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudDtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbiAgdmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xuICB2YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIHZhciBkaWRXYXJuRm9yQWRkZWROZXdQcm9wZXJ0eSA9IGZhbHNlO1xuICB2YXIgaXNQcm94eVN1cHBvcnRlZCA9IHR5cGVvZiBQcm94eSA9PT0gJ2Z1bmN0aW9uJztcbiAgdmFyIHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzID0gWydkaXNwYXRjaENvbmZpZycsICdfdGFyZ2V0SW5zdCcsICduYXRpdmVFdmVudCcsICdpc0RlZmF1bHRQcmV2ZW50ZWQnLCAnaXNQcm9wYWdhdGlvblN0b3BwZWQnLCAnX2Rpc3BhdGNoTGlzdGVuZXJzJywgJ19kaXNwYXRjaEluc3RhbmNlcyddO1xuICB2YXIgRXZlbnRJbnRlcmZhY2UgPSB7XG4gICAgdHlwZTogbnVsbCxcbiAgICB0YXJnZXQ6IG51bGwsXG4gICAgY3VycmVudFRhcmdldDogZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc051bGwsXG4gICAgZXZlbnRQaGFzZTogbnVsbCxcbiAgICBidWJibGVzOiBudWxsLFxuICAgIGNhbmNlbGFibGU6IG51bGwsXG4gICAgdGltZVN0YW1wOiBmdW5jdGlvbihldmVudCkge1xuICAgICAgcmV0dXJuIGV2ZW50LnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuICAgIH0sXG4gICAgZGVmYXVsdFByZXZlbnRlZDogbnVsbCxcbiAgICBpc1RydXN0ZWQ6IG51bGxcbiAgfTtcbiAgZnVuY3Rpb24gU3ludGhldGljRXZlbnQoZGlzcGF0Y2hDb25maWcsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBkZWxldGUgdGhpcy5uYXRpdmVFdmVudDtcbiAgICAgIGRlbGV0ZSB0aGlzLnByZXZlbnREZWZhdWx0O1xuICAgICAgZGVsZXRlIHRoaXMuc3RvcFByb3BhZ2F0aW9uO1xuICAgIH1cbiAgICB0aGlzLmRpc3BhdGNoQ29uZmlnID0gZGlzcGF0Y2hDb25maWc7XG4gICAgdGhpcy5fdGFyZ2V0SW5zdCA9IHRhcmdldEluc3Q7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICBmb3IgKHZhciBwcm9wTmFtZSBpbiBJbnRlcmZhY2UpIHtcbiAgICAgIGlmICghSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICAgIHZhciBub3JtYWxpemUgPSBJbnRlcmZhY2VbcHJvcE5hbWVdO1xuICAgICAgaWYgKG5vcm1hbGl6ZSkge1xuICAgICAgICB0aGlzW3Byb3BOYW1lXSA9IG5vcm1hbGl6ZShuYXRpdmVFdmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvcE5hbWUgPT09ICd0YXJnZXQnKSB7XG4gICAgICAgICAgdGhpcy50YXJnZXQgPSBuYXRpdmVFdmVudFRhcmdldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzW3Byb3BOYW1lXSA9IG5hdGl2ZUV2ZW50W3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZGVmYXVsdFByZXZlbnRlZCA9IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgIT0gbnVsbCA/IG5hdGl2ZUV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgOiBuYXRpdmVFdmVudC5yZXR1cm5WYWx1ZSA9PT0gZmFsc2U7XG4gICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIF9hc3NpZ24oU3ludGhldGljRXZlbnQucHJvdG90eXBlLCB7XG4gICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gICAgfSxcbiAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICB9XG4gICAgICB0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gICAgfSxcbiAgICBwZXJzaXN0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuaXNQZXJzaXN0ZW50ID0gZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWU7XG4gICAgfSxcbiAgICBpc1BlcnNpc3RlbnQ6IGVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNGYWxzZSxcbiAgICBkZXN0cnVjdG9yOiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBJbnRlcmZhY2UgPSB0aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtcbiAgICAgIGZvciAodmFyIHByb3BOYW1lIGluIEludGVyZmFjZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wTmFtZSwgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbihwcm9wTmFtZSwgSW50ZXJmYWNlW3Byb3BOYW1lXSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXNbcHJvcE5hbWVdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaG91bGRCZVJlbGVhc2VkUHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzW3Nob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzW2ldXSA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgbm9vcCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICduYXRpdmVFdmVudCcsIGdldFBvb2xlZFdhcm5pbmdQcm9wZXJ0eURlZmluaXRpb24oJ25hdGl2ZUV2ZW50JywgbnVsbCkpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3ByZXZlbnREZWZhdWx0JywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbigncHJldmVudERlZmF1bHQnLCBub29wKSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc3RvcFByb3BhZ2F0aW9uJywgZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbignc3RvcFByb3BhZ2F0aW9uJywgbm9vcCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFN5bnRoZXRpY0V2ZW50LkludGVyZmFjZSA9IEV2ZW50SW50ZXJmYWNlO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpc1Byb3h5U3VwcG9ydGVkKSB7XG4gICAgICBTeW50aGV0aWNFdmVudCA9IG5ldyBQcm94eShTeW50aGV0aWNFdmVudCwge1xuICAgICAgICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uKHRhcmdldCwgYXJncykge1xuICAgICAgICAgIHJldHVybiB0aGlzLmFwcGx5KHRhcmdldCwgT2JqZWN0LmNyZWF0ZSh0YXJnZXQucHJvdG90eXBlKSwgYXJncyk7XG4gICAgICAgIH0sXG4gICAgICAgIGFwcGx5OiBmdW5jdGlvbihjb25zdHJ1Y3RvciwgdGhhdCwgYXJncykge1xuICAgICAgICAgIHJldHVybiBuZXcgUHJveHkoY29uc3RydWN0b3IuYXBwbHkodGhhdCwgYXJncyksIHtzZXQ6IGZ1bmN0aW9uKHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKHByb3AgIT09ICdpc1BlcnNpc3RlbnQnICYmICF0YXJnZXQuY29uc3RydWN0b3IuSW50ZXJmYWNlLmhhc093blByb3BlcnR5KHByb3ApICYmIHNob3VsZEJlUmVsZWFzZWRQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHkgfHwgdGFyZ2V0LmlzUGVyc2lzdGVudCgpLCAnVGhpcyBzeW50aGV0aWMgZXZlbnQgaXMgcmV1c2VkIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLiBJZiB5b3VcXCdyZSAnICsgJ3NlZWluZyB0aGlzLCB5b3VcXCdyZSBhZGRpbmcgYSBuZXcgcHJvcGVydHkgaW4gdGhlIHN5bnRoZXRpYyBldmVudCBvYmplY3QuICcgKyAnVGhlIHByb3BlcnR5IGlzIG5ldmVyIHJlbGVhc2VkLiBTZWUgJyArICdodHRwczovL2ZiLm1lL3JlYWN0LWV2ZW50LXBvb2xpbmcgZm9yIG1vcmUgaW5mb3JtYXRpb24uJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgICAgZGlkV2FybkZvckFkZGVkTmV3UHJvcGVydHkgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH19KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIFN5bnRoZXRpY0V2ZW50LmF1Z21lbnRDbGFzcyA9IGZ1bmN0aW9uKENsYXNzLCBJbnRlcmZhY2UpIHtcbiAgICB2YXIgU3VwZXIgPSB0aGlzO1xuICAgIHZhciBFID0gZnVuY3Rpb24oKSB7fTtcbiAgICBFLnByb3RvdHlwZSA9IFN1cGVyLnByb3RvdHlwZTtcbiAgICB2YXIgcHJvdG90eXBlID0gbmV3IEUoKTtcbiAgICBfYXNzaWduKHByb3RvdHlwZSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICBDbGFzcy5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ2xhc3M7XG4gICAgQ2xhc3MuSW50ZXJmYWNlID0gX2Fzc2lnbih7fSwgU3VwZXIuSW50ZXJmYWNlLCBJbnRlcmZhY2UpO1xuICAgIENsYXNzLmF1Z21lbnRDbGFzcyA9IFN1cGVyLmF1Z21lbnRDbGFzcztcbiAgICBQb29sZWRDbGFzcy5hZGRQb29saW5nVG8oQ2xhc3MsIFBvb2xlZENsYXNzLmZvdXJBcmd1bWVudFBvb2xlcik7XG4gIH07XG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhTeW50aGV0aWNFdmVudCwgUG9vbGVkQ2xhc3MuZm91ckFyZ3VtZW50UG9vbGVyKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNFdmVudDtcbiAgZnVuY3Rpb24gZ2V0UG9vbGVkV2FybmluZ1Byb3BlcnR5RGVmaW5pdGlvbihwcm9wTmFtZSwgZ2V0VmFsKSB7XG4gICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgZ2V0VmFsID09PSAnZnVuY3Rpb24nO1xuICAgIHJldHVybiB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBzZXQ6IHNldCxcbiAgICAgIGdldDogZ2V0XG4gICAgfTtcbiAgICBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICB2YXIgYWN0aW9uID0gaXNGdW5jdGlvbiA/ICdzZXR0aW5nIHRoZSBtZXRob2QnIDogJ3NldHRpbmcgdGhlIHByb3BlcnR5JztcbiAgICAgIHdhcm4oYWN0aW9uLCAnVGhpcyBpcyBlZmZlY3RpdmVseSBhIG5vLW9wJyk7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICB2YXIgYWN0aW9uID0gaXNGdW5jdGlvbiA/ICdhY2Nlc3NpbmcgdGhlIG1ldGhvZCcgOiAnYWNjZXNzaW5nIHRoZSBwcm9wZXJ0eSc7XG4gICAgICB2YXIgcmVzdWx0ID0gaXNGdW5jdGlvbiA/ICdUaGlzIGlzIGEgbm8tb3AgZnVuY3Rpb24nIDogJ1RoaXMgaXMgc2V0IHRvIG51bGwnO1xuICAgICAgd2FybihhY3Rpb24sIHJlc3VsdCk7XG4gICAgICByZXR1cm4gZ2V0VmFsO1xuICAgIH1cbiAgICBmdW5jdGlvbiB3YXJuKGFjdGlvbiwgcmVzdWx0KSB7XG4gICAgICB2YXIgd2FybmluZ0NvbmRpdGlvbiA9IGZhbHNlO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcod2FybmluZ0NvbmRpdGlvbiwgJ1RoaXMgc3ludGhldGljIGV2ZW50IGlzIHJldXNlZCBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gSWYgeW91XFwncmUgc2VlaW5nIHRoaXMsICcgKyAneW91XFwncmUgJXMgYCVzYCBvbiBhIHJlbGVhc2VkL251bGxpZmllZCBzeW50aGV0aWMgZXZlbnQuICVzLiAnICsgJ0lmIHlvdSBtdXN0IGtlZXAgdGhlIG9yaWdpbmFsIHN5bnRoZXRpYyBldmVudCBhcm91bmQsIHVzZSBldmVudC5wZXJzaXN0KCkuICcgKyAnU2VlIGh0dHBzOi8vZmIubWUvcmVhY3QtZXZlbnQtcG9vbGluZyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLCBhY3Rpb24sIHByb3BOYW1lLCByZXN1bHQpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudFRhcmdldFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBHZXRzIHRoZSB0YXJnZXQgbm9kZSBmcm9tIGEgbmF0aXZlIGJyb3dzZXIgZXZlbnQgYnkgYWNjb3VudGluZyBmb3JcbiAqIGluY29uc2lzdGVuY2llcyBpbiBicm93c2VyIERPTSBBUElzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge0RPTUV2ZW50VGFyZ2V0fSBUYXJnZXQgbm9kZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkge1xuICB2YXIgdGFyZ2V0ID0gbmF0aXZlRXZlbnQudGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQgfHwgd2luZG93O1xuXG4gIC8vIE5vcm1hbGl6ZSBTVkcgPHVzZT4gZWxlbWVudCBldmVudHMgIzQ5NjNcbiAgaWYgKHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCkge1xuICAgIHRhcmdldCA9IHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudDtcbiAgfVxuXG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IDMgPyB0YXJnZXQucGFyZW50Tm9kZSA6IHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRFdmVudFRhcmdldDsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBTeW50aGV0aWNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRXZlbnQnKTtcbnZhciBnZXRFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRUYXJnZXQnKTtcbnZhciBVSUV2ZW50SW50ZXJmYWNlID0ge1xuICB2aWV3OiBmdW5jdGlvbihldmVudCkge1xuICAgIGlmIChldmVudC52aWV3KSB7XG4gICAgICByZXR1cm4gZXZlbnQudmlldztcbiAgICB9XG4gICAgdmFyIHRhcmdldCA9IGdldEV2ZW50VGFyZ2V0KGV2ZW50KTtcbiAgICBpZiAodGFyZ2V0ICE9IG51bGwgJiYgdGFyZ2V0LndpbmRvdyA9PT0gdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICB2YXIgZG9jID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgaWYgKGRvYykge1xuICAgICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gd2luZG93O1xuICAgIH1cbiAgfSxcbiAgZGV0YWlsOiBmdW5jdGlvbihldmVudCkge1xuICAgIHJldHVybiBldmVudC5kZXRhaWwgfHwgMDtcbiAgfVxufTtcbmZ1bmN0aW9uIFN5bnRoZXRpY1VJRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xufVxuU3ludGhldGljRXZlbnQuYXVnbWVudENsYXNzKFN5bnRoZXRpY1VJRXZlbnQsIFVJRXZlbnRJbnRlcmZhY2UpO1xubW9kdWxlLmV4cG9ydHMgPSBTeW50aGV0aWNVSUV2ZW50O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEV2ZW50TW9kaWZpZXJTdGF0ZVxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBUcmFuc2xhdGlvbiBmcm9tIG1vZGlmaWVyIGtleSB0byB0aGUgYXNzb2NpYXRlZCBwcm9wZXJ0eSBpbiB0aGUgZXZlbnQuXG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8ja2V5cy1Nb2RpZmllcnNcbiAqL1xuXG52YXIgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gICdBbHQnOiAnYWx0S2V5JyxcbiAgJ0NvbnRyb2wnOiAnY3RybEtleScsXG4gICdNZXRhJzogJ21ldGFLZXknLFxuICAnU2hpZnQnOiAnc2hpZnRLZXknXG59O1xuXG4vLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGdldE1vZGlmaWVyU3RhdGUgc28gd2Ugc2ltcGx5IG1hcCBpdCB0byB0aGUgb25seVxuLy8gbW9kaWZpZXIga2V5cyBleHBvc2VkIGJ5IHRoZSBldmVudCBpdHNlbGYsIGRvZXMgbm90IHN1cHBvcnQgTG9jay1rZXlzLlxuLy8gQ3VycmVudGx5LCBhbGwgbWFqb3IgYnJvd3NlcnMgZXhjZXB0IENocm9tZSBzZWVtcyB0byBzdXBwb3J0IExvY2sta2V5cy5cbmZ1bmN0aW9uIG1vZGlmaWVyU3RhdGVHZXR0ZXIoa2V5QXJnKSB7XG4gIHZhciBzeW50aGV0aWNFdmVudCA9IHRoaXM7XG4gIHZhciBuYXRpdmVFdmVudCA9IHN5bnRoZXRpY0V2ZW50Lm5hdGl2ZUV2ZW50O1xuICBpZiAobmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSkge1xuICAgIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZyk7XG4gIH1cbiAgdmFyIGtleVByb3AgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddO1xuICByZXR1cm4ga2V5UHJvcCA/ICEhbmF0aXZlRXZlbnRba2V5UHJvcF0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50TW9kaWZpZXJTdGF0ZTsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG52YXIgVmlld3BvcnRNZXRyaWNzID0gcmVxdWlyZSgnLi9WaWV3cG9ydE1ldHJpY3MnKTtcbnZhciBnZXRFdmVudE1vZGlmaWVyU3RhdGUgPSByZXF1aXJlKCcuL2dldEV2ZW50TW9kaWZpZXJTdGF0ZScpO1xudmFyIE1vdXNlRXZlbnRJbnRlcmZhY2UgPSB7XG4gIHNjcmVlblg6IG51bGwsXG4gIHNjcmVlblk6IG51bGwsXG4gIGNsaWVudFg6IG51bGwsXG4gIGNsaWVudFk6IG51bGwsXG4gIGN0cmxLZXk6IG51bGwsXG4gIHNoaWZ0S2V5OiBudWxsLFxuICBhbHRLZXk6IG51bGwsXG4gIG1ldGFLZXk6IG51bGwsXG4gIGdldE1vZGlmaWVyU3RhdGU6IGdldEV2ZW50TW9kaWZpZXJTdGF0ZSxcbiAgYnV0dG9uOiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciBidXR0b24gPSBldmVudC5idXR0b247XG4gICAgaWYgKCd3aGljaCcgaW4gZXZlbnQpIHtcbiAgICAgIHJldHVybiBidXR0b247XG4gICAgfVxuICAgIHJldHVybiBidXR0b24gPT09IDIgPyAyIDogYnV0dG9uID09PSA0ID8gMSA6IDA7XG4gIH0sXG4gIGJ1dHRvbnM6IG51bGwsXG4gIHJlbGF0ZWRUYXJnZXQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHwgKGV2ZW50LmZyb21FbGVtZW50ID09PSBldmVudC5zcmNFbGVtZW50ID8gZXZlbnQudG9FbGVtZW50IDogZXZlbnQuZnJvbUVsZW1lbnQpO1xuICB9LFxuICBwYWdlWDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ3BhZ2VYJyBpbiBldmVudCA/IGV2ZW50LnBhZ2VYIDogZXZlbnQuY2xpZW50WCArIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsTGVmdDtcbiAgfSxcbiAgcGFnZVk6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuICdwYWdlWScgaW4gZXZlbnQgPyBldmVudC5wYWdlWSA6IGV2ZW50LmNsaWVudFkgKyBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbFRvcDtcbiAgfVxufTtcbmZ1bmN0aW9uIFN5bnRoZXRpY01vdXNlRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY1VJRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5TeW50aGV0aWNVSUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNNb3VzZUV2ZW50LCBNb3VzZUV2ZW50SW50ZXJmYWNlKTtcbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljTW91c2VFdmVudDtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY01vdXNlRXZlbnQnKTtcbnZhciBXaGVlbEV2ZW50SW50ZXJmYWNlID0ge1xuICBkZWx0YVg6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuICdkZWx0YVgnIGluIGV2ZW50ID8gZXZlbnQuZGVsdGFYIDogJ3doZWVsRGVsdGFYJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhWCA6IDA7XG4gIH0sXG4gIGRlbHRhWTogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICByZXR1cm4gJ2RlbHRhWScgaW4gZXZlbnQgPyBldmVudC5kZWx0YVkgOiAnd2hlZWxEZWx0YVknIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFZIDogJ3doZWVsRGVsdGEnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGEgOiAwO1xuICB9LFxuICBkZWx0YVo6IG51bGwsXG4gIGRlbHRhTW9kZTogbnVsbFxufTtcbmZ1bmN0aW9uIFN5bnRoZXRpY1doZWVsRXZlbnQoZGlzcGF0Y2hDb25maWcsIGRpc3BhdGNoTWFya2VyLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgcmV0dXJuIFN5bnRoZXRpY01vdXNlRXZlbnQuY2FsbCh0aGlzLCBkaXNwYXRjaENvbmZpZywgZGlzcGF0Y2hNYXJrZXIsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5TeW50aGV0aWNNb3VzZUV2ZW50LmF1Z21lbnRDbGFzcyhTeW50aGV0aWNXaGVlbEV2ZW50LCBXaGVlbEV2ZW50SW50ZXJmYWNlKTtcbm1vZHVsZS5leHBvcnRzID0gU3ludGhldGljV2hlZWxFdmVudDtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRFdmVudENoYXJDb2RlXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIGBjaGFyQ29kZWAgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFwiY2hhcmFjdGVyIGNvZGVcIiBhbmQgaXMgc2FmZSB0byB1c2Ugd2l0aFxuICogYFN0cmluZy5mcm9tQ2hhckNvZGVgLiBBcyBzdWNoLCBvbmx5IGtleXMgdGhhdCBjb3JyZXNwb25kIHRvIHByaW50YWJsZVxuICogY2hhcmFjdGVycyBwcm9kdWNlIGEgdmFsaWQgYGNoYXJDb2RlYCwgdGhlIG9ubHkgZXhjZXB0aW9uIHRvIHRoaXMgaXMgRW50ZXIuXG4gKiBUaGUgVGFiLWtleSBpcyBjb25zaWRlcmVkIG5vbi1wcmludGFibGUgYW5kIGRvZXMgbm90IGhhdmUgYSBgY2hhckNvZGVgLFxuICogcHJlc3VtYWJseSBiZWNhdXNlIGl0IGRvZXMgbm90IHByb2R1Y2UgYSB0YWItY2hhcmFjdGVyIGluIGJyb3dzZXJzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge251bWJlcn0gTm9ybWFsaXplZCBgY2hhckNvZGVgIHByb3BlcnR5LlxuICovXG5cbmZ1bmN0aW9uIGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpIHtcbiAgdmFyIGNoYXJDb2RlO1xuICB2YXIga2V5Q29kZSA9IG5hdGl2ZUV2ZW50LmtleUNvZGU7XG5cbiAgaWYgKCdjaGFyQ29kZScgaW4gbmF0aXZlRXZlbnQpIHtcbiAgICBjaGFyQ29kZSA9IG5hdGl2ZUV2ZW50LmNoYXJDb2RlO1xuXG4gICAgLy8gRkYgZG9lcyBub3Qgc2V0IGBjaGFyQ29kZWAgZm9yIHRoZSBFbnRlci1rZXksIGNoZWNrIGFnYWluc3QgYGtleUNvZGVgLlxuICAgIGlmIChjaGFyQ29kZSA9PT0gMCAmJiBrZXlDb2RlID09PSAxMykge1xuICAgICAgY2hhckNvZGUgPSAxMztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSUU4IGRvZXMgbm90IGltcGxlbWVudCBgY2hhckNvZGVgLCBidXQgYGtleUNvZGVgIGhhcyB0aGUgY29ycmVjdCB2YWx1ZS5cbiAgICBjaGFyQ29kZSA9IGtleUNvZGU7XG4gIH1cblxuICAvLyBTb21lIG5vbi1wcmludGFibGUga2V5cyBhcmUgcmVwb3J0ZWQgaW4gYGNoYXJDb2RlYC9ga2V5Q29kZWAsIGRpc2NhcmQgdGhlbS5cbiAgLy8gTXVzdCBub3QgZGlzY2FyZCB0aGUgKG5vbi0pcHJpbnRhYmxlIEVudGVyLWtleS5cbiAgaWYgKGNoYXJDb2RlID49IDMyIHx8IGNoYXJDb2RlID09PSAxMykge1xuICAgIHJldHVybiBjaGFyQ29kZTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEV2ZW50Q2hhckNvZGU7IiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbiAgdmFyIEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCdmYmpzL2xpYi9FdmVudExpc3RlbmVyJyk7XG4gIHZhciBFdmVudFByb3BhZ2F0b3JzID0gcmVxdWlyZSgnLi9FdmVudFByb3BhZ2F0b3JzJyk7XG4gIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xuICB2YXIgU3ludGhldGljQW5pbWF0aW9uRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY0FuaW1hdGlvbkV2ZW50Jyk7XG4gIHZhciBTeW50aGV0aWNDbGlwYm9hcmRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljQ2xpcGJvYXJkRXZlbnQnKTtcbiAgdmFyIFN5bnRoZXRpY0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNFdmVudCcpO1xuICB2YXIgU3ludGhldGljRm9jdXNFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljRm9jdXNFdmVudCcpO1xuICB2YXIgU3ludGhldGljS2V5Ym9hcmRFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljS2V5Ym9hcmRFdmVudCcpO1xuICB2YXIgU3ludGhldGljTW91c2VFdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljTW91c2VFdmVudCcpO1xuICB2YXIgU3ludGhldGljRHJhZ0V2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNEcmFnRXZlbnQnKTtcbiAgdmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSByZXF1aXJlKCcuL1N5bnRoZXRpY1RvdWNoRXZlbnQnKTtcbiAgdmFyIFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCA9IHJlcXVpcmUoJy4vU3ludGhldGljVHJhbnNpdGlvbkV2ZW50Jyk7XG4gIHZhciBTeW50aGV0aWNVSUV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNVSUV2ZW50Jyk7XG4gIHZhciBTeW50aGV0aWNXaGVlbEV2ZW50ID0gcmVxdWlyZSgnLi9TeW50aGV0aWNXaGVlbEV2ZW50Jyk7XG4gIHZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xuICB2YXIgZ2V0RXZlbnRDaGFyQ29kZSA9IHJlcXVpcmUoJy4vZ2V0RXZlbnRDaGFyQ29kZScpO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIHZhciBrZXlPZiA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU9mJyk7XG4gIHZhciB0b3BMZXZlbFR5cGVzID0gRXZlbnRDb25zdGFudHMudG9wTGV2ZWxUeXBlcztcbiAgdmFyIGV2ZW50VHlwZXMgPSB7XG4gICAgYWJvcnQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25BYm9ydDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQWJvcnRDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGFuaW1hdGlvbkVuZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkFuaW1hdGlvbkVuZDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQW5pbWF0aW9uRW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBhbmltYXRpb25JdGVyYXRpb246IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25BbmltYXRpb25JdGVyYXRpb246IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkFuaW1hdGlvbkl0ZXJhdGlvbkNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgYW5pbWF0aW9uU3RhcnQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25BbmltYXRpb25TdGFydDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQW5pbWF0aW9uU3RhcnRDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGJsdXI6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25CbHVyOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25CbHVyQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBjYW5QbGF5OiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ2FuUGxheTogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ2FuUGxheUNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgY2FuUGxheVRocm91Z2g6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25DYW5QbGF5VGhyb3VnaDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ2FuUGxheVRocm91Z2hDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGNsaWNrOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uQ2xpY2s6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNsaWNrQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBjb250ZXh0TWVudToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvbnRleHRNZW51OiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Db250ZXh0TWVudUNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgY29weToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkNvcHk6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkNvcHlDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGN1dDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkN1dDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uQ3V0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBkb3VibGVDbGljazoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRvdWJsZUNsaWNrOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Eb3VibGVDbGlja0NhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgZHJhZzoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWc6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGRyYWdFbmQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnRW5kOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnRW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBkcmFnRW50ZXI6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnRW50ZXI6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkRyYWdFbnRlckNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgZHJhZ0V4aXQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25EcmFnRXhpdDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0V4aXRDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGRyYWdMZWF2ZToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdMZWF2ZTogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRHJhZ0xlYXZlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBkcmFnT3Zlcjoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkRyYWdPdmVyOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnT3ZlckNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgZHJhZ1N0YXJ0OiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uRHJhZ1N0YXJ0OiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EcmFnU3RhcnRDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGRyb3A6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25Ecm9wOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Ecm9wQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBkdXJhdGlvbkNoYW5nZToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkR1cmF0aW9uQ2hhbmdlOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25EdXJhdGlvbkNoYW5nZUNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgZW1wdGllZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkVtcHRpZWQ6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkVtcHRpZWRDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGVuY3J5cHRlZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkVuY3J5cHRlZDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRW5jcnlwdGVkQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBlbmRlZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkVuZGVkOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25FbmRlZENhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgZXJyb3I6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25FcnJvcjogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uRXJyb3JDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGZvY3VzOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uRm9jdXM6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkZvY3VzQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBpbnB1dDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbklucHV0OiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25JbnB1dENhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgaW52YWxpZDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkludmFsaWQ6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbkludmFsaWRDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGtleURvd246IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25LZXlEb3duOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25LZXlEb3duQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBrZXlQcmVzczoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbktleVByZXNzOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25LZXlQcmVzc0NhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAga2V5VXA6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25LZXlVcDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uS2V5VXBDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGxvYWQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25Mb2FkOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Mb2FkQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBsb2FkZWREYXRhOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uTG9hZGVkRGF0YTogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTG9hZGVkRGF0YUNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgbG9hZGVkTWV0YWRhdGE6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25Mb2FkZWRNZXRhZGF0YTogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTG9hZGVkTWV0YWRhdGFDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIGxvYWRTdGFydDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbkxvYWRTdGFydDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uTG9hZFN0YXJ0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBtb3VzZURvd246IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZURvd246IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlRG93bkNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgbW91c2VNb3ZlOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VNb3ZlOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Nb3VzZU1vdmVDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIG1vdXNlT3V0OiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uTW91c2VPdXQ6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlT3V0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBtb3VzZU92ZXI6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25Nb3VzZU92ZXI6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlT3ZlckNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgbW91c2VVcDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbk1vdXNlVXA6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbk1vdXNlVXBDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIHBhc3RlOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uUGFzdGU6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblBhc3RlQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBwYXVzZToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblBhdXNlOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25QYXVzZUNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgcGxheToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblBsYXk6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblBsYXlDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIHBsYXlpbmc6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25QbGF5aW5nOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25QbGF5aW5nQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBwcm9ncmVzczoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblByb2dyZXNzOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25Qcm9ncmVzc0NhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgcmF0ZUNoYW5nZToge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblJhdGVDaGFuZ2U6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblJhdGVDaGFuZ2VDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIHJlc2V0OiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uUmVzZXQ6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblJlc2V0Q2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBzY3JvbGw6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25TY3JvbGw6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblNjcm9sbENhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgc2Vla2VkOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uU2Vla2VkOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TZWVrZWRDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIHNlZWtpbmc6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25TZWVraW5nOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TZWVraW5nQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICBzdGFsbGVkOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uU3RhbGxlZDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uU3RhbGxlZENhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgc3VibWl0OiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uU3VibWl0OiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TdWJtaXRDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIHN1c3BlbmQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25TdXNwZW5kOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25TdXNwZW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICB0aW1lVXBkYXRlOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uVGltZVVwZGF0ZTogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVGltZVVwZGF0ZUNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgdG91Y2hDYW5jZWw6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaENhbmNlbDogdHJ1ZX0pLFxuICAgICAgICBjYXB0dXJlZDoga2V5T2Yoe29uVG91Y2hDYW5jZWxDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIHRvdWNoRW5kOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uVG91Y2hFbmQ6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoRW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICB0b3VjaE1vdmU6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25Ub3VjaE1vdmU6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoTW92ZUNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgdG91Y2hTdGFydDoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvblRvdWNoU3RhcnQ6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblRvdWNoU3RhcnRDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIHRyYW5zaXRpb25FbmQ6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25UcmFuc2l0aW9uRW5kOiB0cnVlfSksXG4gICAgICAgIGNhcHR1cmVkOiBrZXlPZih7b25UcmFuc2l0aW9uRW5kQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fSxcbiAgICB2b2x1bWVDaGFuZ2U6IHtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgICBidWJibGVkOiBrZXlPZih7b25Wb2x1bWVDaGFuZ2U6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvblZvbHVtZUNoYW5nZUNhcHR1cmU6IHRydWV9KVxuICAgICAgfX0sXG4gICAgd2FpdGluZzoge3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICAgIGJ1YmJsZWQ6IGtleU9mKHtvbldhaXRpbmc6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbldhaXRpbmdDYXB0dXJlOiB0cnVlfSlcbiAgICAgIH19LFxuICAgIHdoZWVsOiB7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAgICAgICAgYnViYmxlZDoga2V5T2Yoe29uV2hlZWw6IHRydWV9KSxcbiAgICAgICAgY2FwdHVyZWQ6IGtleU9mKHtvbldoZWVsQ2FwdHVyZTogdHJ1ZX0pXG4gICAgICB9fVxuICB9O1xuICB2YXIgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnID0ge1xuICAgIHRvcEFib3J0OiBldmVudFR5cGVzLmFib3J0LFxuICAgIHRvcEFuaW1hdGlvbkVuZDogZXZlbnRUeXBlcy5hbmltYXRpb25FbmQsXG4gICAgdG9wQW5pbWF0aW9uSXRlcmF0aW9uOiBldmVudFR5cGVzLmFuaW1hdGlvbkl0ZXJhdGlvbixcbiAgICB0b3BBbmltYXRpb25TdGFydDogZXZlbnRUeXBlcy5hbmltYXRpb25TdGFydCxcbiAgICB0b3BCbHVyOiBldmVudFR5cGVzLmJsdXIsXG4gICAgdG9wQ2FuUGxheTogZXZlbnRUeXBlcy5jYW5QbGF5LFxuICAgIHRvcENhblBsYXlUaHJvdWdoOiBldmVudFR5cGVzLmNhblBsYXlUaHJvdWdoLFxuICAgIHRvcENsaWNrOiBldmVudFR5cGVzLmNsaWNrLFxuICAgIHRvcENvbnRleHRNZW51OiBldmVudFR5cGVzLmNvbnRleHRNZW51LFxuICAgIHRvcENvcHk6IGV2ZW50VHlwZXMuY29weSxcbiAgICB0b3BDdXQ6IGV2ZW50VHlwZXMuY3V0LFxuICAgIHRvcERvdWJsZUNsaWNrOiBldmVudFR5cGVzLmRvdWJsZUNsaWNrLFxuICAgIHRvcERyYWc6IGV2ZW50VHlwZXMuZHJhZyxcbiAgICB0b3BEcmFnRW5kOiBldmVudFR5cGVzLmRyYWdFbmQsXG4gICAgdG9wRHJhZ0VudGVyOiBldmVudFR5cGVzLmRyYWdFbnRlcixcbiAgICB0b3BEcmFnRXhpdDogZXZlbnRUeXBlcy5kcmFnRXhpdCxcbiAgICB0b3BEcmFnTGVhdmU6IGV2ZW50VHlwZXMuZHJhZ0xlYXZlLFxuICAgIHRvcERyYWdPdmVyOiBldmVudFR5cGVzLmRyYWdPdmVyLFxuICAgIHRvcERyYWdTdGFydDogZXZlbnRUeXBlcy5kcmFnU3RhcnQsXG4gICAgdG9wRHJvcDogZXZlbnRUeXBlcy5kcm9wLFxuICAgIHRvcER1cmF0aW9uQ2hhbmdlOiBldmVudFR5cGVzLmR1cmF0aW9uQ2hhbmdlLFxuICAgIHRvcEVtcHRpZWQ6IGV2ZW50VHlwZXMuZW1wdGllZCxcbiAgICB0b3BFbmNyeXB0ZWQ6IGV2ZW50VHlwZXMuZW5jcnlwdGVkLFxuICAgIHRvcEVuZGVkOiBldmVudFR5cGVzLmVuZGVkLFxuICAgIHRvcEVycm9yOiBldmVudFR5cGVzLmVycm9yLFxuICAgIHRvcEZvY3VzOiBldmVudFR5cGVzLmZvY3VzLFxuICAgIHRvcElucHV0OiBldmVudFR5cGVzLmlucHV0LFxuICAgIHRvcEludmFsaWQ6IGV2ZW50VHlwZXMuaW52YWxpZCxcbiAgICB0b3BLZXlEb3duOiBldmVudFR5cGVzLmtleURvd24sXG4gICAgdG9wS2V5UHJlc3M6IGV2ZW50VHlwZXMua2V5UHJlc3MsXG4gICAgdG9wS2V5VXA6IGV2ZW50VHlwZXMua2V5VXAsXG4gICAgdG9wTG9hZDogZXZlbnRUeXBlcy5sb2FkLFxuICAgIHRvcExvYWRlZERhdGE6IGV2ZW50VHlwZXMubG9hZGVkRGF0YSxcbiAgICB0b3BMb2FkZWRNZXRhZGF0YTogZXZlbnRUeXBlcy5sb2FkZWRNZXRhZGF0YSxcbiAgICB0b3BMb2FkU3RhcnQ6IGV2ZW50VHlwZXMubG9hZFN0YXJ0LFxuICAgIHRvcE1vdXNlRG93bjogZXZlbnRUeXBlcy5tb3VzZURvd24sXG4gICAgdG9wTW91c2VNb3ZlOiBldmVudFR5cGVzLm1vdXNlTW92ZSxcbiAgICB0b3BNb3VzZU91dDogZXZlbnRUeXBlcy5tb3VzZU91dCxcbiAgICB0b3BNb3VzZU92ZXI6IGV2ZW50VHlwZXMubW91c2VPdmVyLFxuICAgIHRvcE1vdXNlVXA6IGV2ZW50VHlwZXMubW91c2VVcCxcbiAgICB0b3BQYXN0ZTogZXZlbnRUeXBlcy5wYXN0ZSxcbiAgICB0b3BQYXVzZTogZXZlbnRUeXBlcy5wYXVzZSxcbiAgICB0b3BQbGF5OiBldmVudFR5cGVzLnBsYXksXG4gICAgdG9wUGxheWluZzogZXZlbnRUeXBlcy5wbGF5aW5nLFxuICAgIHRvcFByb2dyZXNzOiBldmVudFR5cGVzLnByb2dyZXNzLFxuICAgIHRvcFJhdGVDaGFuZ2U6IGV2ZW50VHlwZXMucmF0ZUNoYW5nZSxcbiAgICB0b3BSZXNldDogZXZlbnRUeXBlcy5yZXNldCxcbiAgICB0b3BTY3JvbGw6IGV2ZW50VHlwZXMuc2Nyb2xsLFxuICAgIHRvcFNlZWtlZDogZXZlbnRUeXBlcy5zZWVrZWQsXG4gICAgdG9wU2Vla2luZzogZXZlbnRUeXBlcy5zZWVraW5nLFxuICAgIHRvcFN0YWxsZWQ6IGV2ZW50VHlwZXMuc3RhbGxlZCxcbiAgICB0b3BTdWJtaXQ6IGV2ZW50VHlwZXMuc3VibWl0LFxuICAgIHRvcFN1c3BlbmQ6IGV2ZW50VHlwZXMuc3VzcGVuZCxcbiAgICB0b3BUaW1lVXBkYXRlOiBldmVudFR5cGVzLnRpbWVVcGRhdGUsXG4gICAgdG9wVG91Y2hDYW5jZWw6IGV2ZW50VHlwZXMudG91Y2hDYW5jZWwsXG4gICAgdG9wVG91Y2hFbmQ6IGV2ZW50VHlwZXMudG91Y2hFbmQsXG4gICAgdG9wVG91Y2hNb3ZlOiBldmVudFR5cGVzLnRvdWNoTW92ZSxcbiAgICB0b3BUb3VjaFN0YXJ0OiBldmVudFR5cGVzLnRvdWNoU3RhcnQsXG4gICAgdG9wVHJhbnNpdGlvbkVuZDogZXZlbnRUeXBlcy50cmFuc2l0aW9uRW5kLFxuICAgIHRvcFZvbHVtZUNoYW5nZTogZXZlbnRUeXBlcy52b2x1bWVDaGFuZ2UsXG4gICAgdG9wV2FpdGluZzogZXZlbnRUeXBlcy53YWl0aW5nLFxuICAgIHRvcFdoZWVsOiBldmVudFR5cGVzLndoZWVsXG4gIH07XG4gIGZvciAodmFyIHR5cGUgaW4gdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnKSB7XG4gICAgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnW3R5cGVdLmRlcGVuZGVuY2llcyA9IFt0eXBlXTtcbiAgfVxuICB2YXIgT05fQ0xJQ0tfS0VZID0ga2V5T2Yoe29uQ2xpY2s6IG51bGx9KTtcbiAgdmFyIG9uQ2xpY2tMaXN0ZW5lcnMgPSB7fTtcbiAgdmFyIFNpbXBsZUV2ZW50UGx1Z2luID0ge1xuICAgIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG4gICAgZXh0cmFjdEV2ZW50czogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICAgIHZhciBkaXNwYXRjaENvbmZpZyA9IHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0b3BMZXZlbFR5cGVdO1xuICAgICAgaWYgKCFkaXNwYXRjaENvbmZpZykge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBFdmVudENvbnN0cnVjdG9yO1xuICAgICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEFib3J0OlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ2FuUGxheTpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENhblBsYXlUaHJvdWdoOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHVyYXRpb25DaGFuZ2U6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BFbXB0aWVkOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRW5jcnlwdGVkOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRW5kZWQ6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BFcnJvcjpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcElucHV0OlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wSW52YWxpZDpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcExvYWQ6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BMb2FkZWREYXRhOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wTG9hZGVkTWV0YWRhdGE6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BMb2FkU3RhcnQ6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQYXVzZTpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBsYXk6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BQbGF5aW5nOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUHJvZ3Jlc3M6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BSYXRlQ2hhbmdlOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wUmVzZXQ6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTZWVrZWQ6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BTZWVraW5nOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wU3RhbGxlZDpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFN1Ym1pdDpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFN1c3BlbmQ6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUaW1lVXBkYXRlOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVm9sdW1lQ2hhbmdlOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wV2FpdGluZzpcbiAgICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRXZlbnQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlQcmVzczpcbiAgICAgICAgICBpZiAoZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEtleURvd246XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BLZXlVcDpcbiAgICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEJsdXI6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BGb2N1czpcbiAgICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENsaWNrOlxuICAgICAgICAgIGlmIChuYXRpdmVFdmVudC5idXR0b24gPT09IDIpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcENvbnRleHRNZW51OlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRG91YmxlQ2xpY2s6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd246XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU1vdmU6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BNb3VzZU91dDpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlT3ZlcjpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlVXA6XG4gICAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY01vdXNlRXZlbnQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0VuZDpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFbnRlcjpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcERyYWdFeGl0OlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ0xlYXZlOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wRHJhZ092ZXI6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcmFnU3RhcnQ6XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BEcm9wOlxuICAgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgdG9wTGV2ZWxUeXBlcy50b3BUb3VjaENhbmNlbDpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoRW5kOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlOlxuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wVG91Y2hTdGFydDpcbiAgICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEFuaW1hdGlvbkVuZDpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEFuaW1hdGlvbkl0ZXJhdGlvbjpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEFuaW1hdGlvblN0YXJ0OlxuICAgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNBbmltYXRpb25FdmVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFRyYW5zaXRpb25FbmQ6XG4gICAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFNjcm9sbDpcbiAgICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVUlFdmVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFdoZWVsOlxuICAgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNXaGVlbEV2ZW50O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIHRvcExldmVsVHlwZXMudG9wQ29weTpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcEN1dDpcbiAgICAgICAgY2FzZSB0b3BMZXZlbFR5cGVzLnRvcFBhc3RlOlxuICAgICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNDbGlwYm9hcmRFdmVudDtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgICFFdmVudENvbnN0cnVjdG9yID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1NpbXBsZUV2ZW50UGx1Z2luOiBVbmhhbmRsZWQgZXZlbnQgdHlwZSwgYCVzYC4nLCB0b3BMZXZlbFR5cGUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBldmVudCA9IEV2ZW50Q29uc3RydWN0b3IuZ2V0UG9vbGVkKGRpc3BhdGNoQ29uZmlnLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgRXZlbnRQcm9wYWdhdG9ycy5hY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICAgIHJldHVybiBldmVudDtcbiAgICB9LFxuICAgIGRpZFB1dExpc3RlbmVyOiBmdW5jdGlvbihpbnN0LCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09IE9OX0NMSUNLX0tFWSkge1xuICAgICAgICB2YXIgaWQgPSBpbnN0Ll9yb290Tm9kZUlEO1xuICAgICAgICB2YXIgbm9kZSA9IFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgICAgICBpZiAoIW9uQ2xpY2tMaXN0ZW5lcnNbaWRdKSB7XG4gICAgICAgICAgb25DbGlja0xpc3RlbmVyc1tpZF0gPSBFdmVudExpc3RlbmVyLmxpc3Rlbihub2RlLCAnY2xpY2snLCBlbXB0eUZ1bmN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgd2lsbERlbGV0ZUxpc3RlbmVyOiBmdW5jdGlvbihpbnN0LCByZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgICBpZiAocmVnaXN0cmF0aW9uTmFtZSA9PT0gT05fQ0xJQ0tfS0VZKSB7XG4gICAgICAgIHZhciBpZCA9IGluc3QuX3Jvb3ROb2RlSUQ7XG4gICAgICAgIG9uQ2xpY2tMaXN0ZW5lcnNbaWRdLnJlbW92ZSgpO1xuICAgICAgICBkZWxldGUgb25DbGlja0xpc3RlbmVyc1tpZF07XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFNpbXBsZUV2ZW50UGx1Z2luO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIEJlZm9yZUlucHV0RXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL0JlZm9yZUlucHV0RXZlbnRQbHVnaW4nKTtcbnZhciBDaGFuZ2VFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vQ2hhbmdlRXZlbnRQbHVnaW4nKTtcbnZhciBEZWZhdWx0RXZlbnRQbHVnaW5PcmRlciA9IHJlcXVpcmUoJy4vRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXInKTtcbnZhciBFbnRlckxlYXZlRXZlbnRQbHVnaW4gPSByZXF1aXJlKCcuL0VudGVyTGVhdmVFdmVudFBsdWdpbicpO1xudmFyIEhUTUxET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoJy4vSFRNTERPTVByb3BlcnR5Q29uZmlnJyk7XG52YXIgUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50QnJvd3NlckVudmlyb25tZW50Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50Jyk7XG52YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbXBvbmVudFRyZWUnKTtcbnZhciBSZWFjdERPTUVtcHR5Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdERPTUVtcHR5Q29tcG9uZW50Jyk7XG52YXIgUmVhY3RET01UcmVlVHJhdmVyc2FsID0gcmVxdWlyZSgnLi9SZWFjdERPTVRyZWVUcmF2ZXJzYWwnKTtcbnZhciBSZWFjdERPTVRleHRDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RE9NVGV4dENvbXBvbmVudCcpO1xudmFyIFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kgPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3knKTtcbnZhciBSZWFjdEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCcuL1JlYWN0RXZlbnRMaXN0ZW5lcicpO1xudmFyIFJlYWN0SW5qZWN0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluamVjdGlvbicpO1xudmFyIFJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24nKTtcbnZhciBTVkdET01Qcm9wZXJ0eUNvbmZpZyA9IHJlcXVpcmUoJy4vU1ZHRE9NUHJvcGVydHlDb25maWcnKTtcbnZhciBTZWxlY3RFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vU2VsZWN0RXZlbnRQbHVnaW4nKTtcbnZhciBTaW1wbGVFdmVudFBsdWdpbiA9IHJlcXVpcmUoJy4vU2ltcGxlRXZlbnRQbHVnaW4nKTtcbnZhciBhbHJlYWR5SW5qZWN0ZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGluamVjdCgpIHtcbiAgaWYgKGFscmVhZHlJbmplY3RlZCkge1xuICAgIHJldHVybjtcbiAgfVxuICBhbHJlYWR5SW5qZWN0ZWQgPSB0cnVlO1xuICBSZWFjdEluamVjdGlvbi5FdmVudEVtaXR0ZXIuaW5qZWN0UmVhY3RFdmVudExpc3RlbmVyKFJlYWN0RXZlbnRMaXN0ZW5lcik7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoRGVmYXVsdEV2ZW50UGx1Z2luT3JkZXIpO1xuICBSZWFjdEluamVjdGlvbi5FdmVudFBsdWdpblV0aWxzLmluamVjdENvbXBvbmVudFRyZWUoUmVhY3RET01Db21wb25lbnRUcmVlKTtcbiAgUmVhY3RJbmplY3Rpb24uRXZlbnRQbHVnaW5VdGlscy5pbmplY3RUcmVlVHJhdmVyc2FsKFJlYWN0RE9NVHJlZVRyYXZlcnNhbCk7XG4gIFJlYWN0SW5qZWN0aW9uLkV2ZW50UGx1Z2luSHViLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZSh7XG4gICAgU2ltcGxlRXZlbnRQbHVnaW46IFNpbXBsZUV2ZW50UGx1Z2luLFxuICAgIEVudGVyTGVhdmVFdmVudFBsdWdpbjogRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLFxuICAgIENoYW5nZUV2ZW50UGx1Z2luOiBDaGFuZ2VFdmVudFBsdWdpbixcbiAgICBTZWxlY3RFdmVudFBsdWdpbjogU2VsZWN0RXZlbnRQbHVnaW4sXG4gICAgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogQmVmb3JlSW5wdXRFdmVudFBsdWdpblxuICB9KTtcbiAgUmVhY3RJbmplY3Rpb24uTmF0aXZlQ29tcG9uZW50LmluamVjdEdlbmVyaWNDb21wb25lbnRDbGFzcyhSZWFjdERPTUNvbXBvbmVudCk7XG4gIFJlYWN0SW5qZWN0aW9uLk5hdGl2ZUNvbXBvbmVudC5pbmplY3RUZXh0Q29tcG9uZW50Q2xhc3MoUmVhY3RET01UZXh0Q29tcG9uZW50KTtcbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoSFRNTERPTVByb3BlcnR5Q29uZmlnKTtcbiAgUmVhY3RJbmplY3Rpb24uRE9NUHJvcGVydHkuaW5qZWN0RE9NUHJvcGVydHlDb25maWcoU1ZHRE9NUHJvcGVydHlDb25maWcpO1xuICBSZWFjdEluamVjdGlvbi5FbXB0eUNvbXBvbmVudC5pbmplY3RFbXB0eUNvbXBvbmVudEZhY3RvcnkoZnVuY3Rpb24oaW5zdGFudGlhdGUpIHtcbiAgICByZXR1cm4gbmV3IFJlYWN0RE9NRW1wdHlDb21wb25lbnQoaW5zdGFudGlhdGUpO1xuICB9KTtcbiAgUmVhY3RJbmplY3Rpb24uVXBkYXRlcy5pbmplY3RSZWNvbmNpbGVUcmFuc2FjdGlvbihSZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uKTtcbiAgUmVhY3RJbmplY3Rpb24uVXBkYXRlcy5pbmplY3RCYXRjaGluZ1N0cmF0ZWd5KFJlYWN0RGVmYXVsdEJhdGNoaW5nU3RyYXRlZ3kpO1xuICBSZWFjdEluamVjdGlvbi5Db21wb25lbnQuaW5qZWN0RW52aXJvbm1lbnQoUmVhY3RDb21wb25lbnRCcm93c2VyRW52aXJvbm1lbnQpO1xufVxubW9kdWxlLmV4cG9ydHMgPSB7aW5qZWN0OiBpbmplY3R9O1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbiAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG4gIHZhciBSZWFjdEluc3RhbmNlTWFwID0gcmVxdWlyZSgnLi9SZWFjdEluc3RhbmNlTWFwJyk7XG4gIHZhciBnZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlID0gcmVxdWlyZSgnLi9nZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIGZ1bmN0aW9uIGZpbmRET01Ob2RlKGNvbXBvbmVudE9yRWxlbWVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgb3duZXIgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50O1xuICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciwgJyVzIGlzIGFjY2Vzc2luZyBmaW5kRE9NTm9kZSBpbnNpZGUgaXRzIHJlbmRlcigpLiAnICsgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArICduZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyAnICsgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgKyAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJywgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgICBvd25lci5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29tcG9uZW50T3JFbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoY29tcG9uZW50T3JFbGVtZW50Lm5vZGVUeXBlID09PSAxKSB7XG4gICAgICByZXR1cm4gY29tcG9uZW50T3JFbGVtZW50O1xuICAgIH1cbiAgICB2YXIgaW5zdCA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KGNvbXBvbmVudE9yRWxlbWVudCk7XG4gICAgaWYgKGluc3QpIHtcbiAgICAgIGluc3QgPSBnZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlKGluc3QpO1xuICAgICAgcmV0dXJuIGluc3QgPyBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KSA6IG51bGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29tcG9uZW50T3JFbGVtZW50LnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgIWZhbHNlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2ZpbmRET01Ob2RlIHdhcyBjYWxsZWQgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFbGVtZW50IGFwcGVhcnMgdG8gYmUgbmVpdGhlciBSZWFjdENvbXBvbmVudCBub3IgRE9NTm9kZSAoa2V5czogJXMpJywgT2JqZWN0LmtleXMoY29tcG9uZW50T3JFbGVtZW50KSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGZpbmRET01Ob2RlO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIFJlYWN0Tm9kZVR5cGVzID0gcmVxdWlyZSgnLi9SZWFjdE5vZGVUeXBlcycpO1xuZnVuY3Rpb24gZ2V0TmF0aXZlQ29tcG9uZW50RnJvbUNvbXBvc2l0ZShpbnN0KSB7XG4gIHZhciB0eXBlO1xuICB3aGlsZSAoKHR5cGUgPSBpbnN0Ll9yZW5kZXJlZE5vZGVUeXBlKSA9PT0gUmVhY3ROb2RlVHlwZXMuQ09NUE9TSVRFKSB7XG4gICAgaW5zdCA9IGluc3QuX3JlbmRlcmVkQ29tcG9uZW50O1xuICB9XG4gIGlmICh0eXBlID09PSBSZWFjdE5vZGVUeXBlcy5OQVRJVkUpIHtcbiAgICByZXR1cm4gaW5zdC5fcmVuZGVyZWRDb21wb25lbnQ7XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gUmVhY3ROb2RlVHlwZXMuRU1QVFkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIERPTU5hbWVzcGFjZXNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBET01OYW1lc3BhY2VzID0ge1xuICBodG1sOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCcsXG4gIG1hdGhtbDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnLFxuICBzdmc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zydcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRE9NTmFtZXNwYWNlczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVNDQVBFX0xPT0tVUCA9IHtcbiAgJyYnOiAnJmFtcDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJzwnOiAnJmx0OycsXG4gICdcIic6ICcmcXVvdDsnLFxuICAnXFwnJzogJyYjeDI3Oydcbn07XG5cbnZhciBFU0NBUEVfUkVHRVggPSAvWyY+PFwiJ10vZztcblxuZnVuY3Rpb24gZXNjYXBlcihtYXRjaCkge1xuICByZXR1cm4gRVNDQVBFX0xPT0tVUFttYXRjaF07XG59XG5cbi8qKlxuICogRXNjYXBlcyB0ZXh0IHRvIHByZXZlbnQgc2NyaXB0aW5nIGF0dGFja3MuXG4gKlxuICogQHBhcmFtIHsqfSB0ZXh0IFRleHQgdmFsdWUgdG8gZXNjYXBlLlxuICogQHJldHVybiB7c3RyaW5nfSBBbiBlc2NhcGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyKHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UoRVNDQVBFX1JFR0VYLCBlc2NhcGVyKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXI7IiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgRXhlY3V0aW9uRW52aXJvbm1lbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCcpO1xudmFyIGVzY2FwZVRleHRDb250ZW50Rm9yQnJvd3NlciA9IHJlcXVpcmUoJy4vZXNjYXBlVGV4dENvbnRlbnRGb3JCcm93c2VyJyk7XG52YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZSgnLi9zZXRJbm5lckhUTUwnKTtcbnZhciBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59O1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICBpZiAoISgndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkpIHtcbiAgICBzZXRUZXh0Q29udGVudCA9IGZ1bmN0aW9uKG5vZGUsIHRleHQpIHtcbiAgICAgIHNldElubmVySFRNTChub2RlLCBlc2NhcGVUZXh0Q29udGVudEZvckJyb3dzZXIodGV4dCkpO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0VGV4dENvbnRlbnQ7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBET01OYW1lc3BhY2VzID0gcmVxdWlyZSgnLi9ET01OYW1lc3BhY2VzJyk7XG52YXIgY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbiA9IHJlcXVpcmUoJy4vY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbicpO1xudmFyIHNldFRleHRDb250ZW50ID0gcmVxdWlyZSgnLi9zZXRUZXh0Q29udGVudCcpO1xudmFyIEVMRU1FTlRfTk9ERV9UWVBFID0gMTtcbnZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUgPSAxMTtcbnZhciBlbmFibGVMYXp5ID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQuZG9jdW1lbnRNb2RlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbmF2aWdhdG9yLnVzZXJBZ2VudCA9PT0gJ3N0cmluZycgJiYgL1xcYkVkZ2VcXC9cXGQvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5mdW5jdGlvbiBpbnNlcnRUcmVlQ2hpbGRyZW4odHJlZSkge1xuICBpZiAoIWVuYWJsZUxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG5vZGUgPSB0cmVlLm5vZGU7XG4gIHZhciBjaGlsZHJlbiA9IHRyZWUuY2hpbGRyZW47XG4gIGlmIChjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbnNlcnRUcmVlQmVmb3JlKG5vZGUsIGNoaWxkcmVuW2ldLCBudWxsKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHJlZS5odG1sICE9IG51bGwpIHtcbiAgICBub2RlLmlubmVySFRNTCA9IHRyZWUuaHRtbDtcbiAgfSBlbHNlIGlmICh0cmVlLnRleHQgIT0gbnVsbCkge1xuICAgIHNldFRleHRDb250ZW50KG5vZGUsIHRyZWUudGV4dCk7XG4gIH1cbn1cbnZhciBpbnNlcnRUcmVlQmVmb3JlID0gY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbihwYXJlbnROb2RlLCB0cmVlLCByZWZlcmVuY2VOb2RlKSB7XG4gIGlmICh0cmVlLm5vZGUubm9kZVR5cGUgPT09IERPQ1VNRU5UX0ZSQUdNRU5UX05PREVfVFlQRSB8fCB0cmVlLm5vZGUubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERV9UWVBFICYmIHRyZWUubm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnb2JqZWN0JyAmJiAodHJlZS5ub2RlLm5hbWVzcGFjZVVSSSA9PSBudWxsIHx8IHRyZWUubm9kZS5uYW1lc3BhY2VVUkkgPT09IERPTU5hbWVzcGFjZXMuaHRtbCkpIHtcbiAgICBpbnNlcnRUcmVlQ2hpbGRyZW4odHJlZSk7XG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodHJlZS5ub2RlLCByZWZlcmVuY2VOb2RlKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZSh0cmVlLm5vZGUsIHJlZmVyZW5jZU5vZGUpO1xuICAgIGluc2VydFRyZWVDaGlsZHJlbih0cmVlKTtcbiAgfVxufSk7XG5mdW5jdGlvbiByZXBsYWNlQ2hpbGRXaXRoVHJlZShvbGROb2RlLCBuZXdUcmVlKSB7XG4gIG9sZE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobmV3VHJlZS5ub2RlLCBvbGROb2RlKTtcbiAgaW5zZXJ0VHJlZUNoaWxkcmVuKG5ld1RyZWUpO1xufVxuZnVuY3Rpb24gcXVldWVDaGlsZChwYXJlbnRUcmVlLCBjaGlsZFRyZWUpIHtcbiAgaWYgKGVuYWJsZUxhenkpIHtcbiAgICBwYXJlbnRUcmVlLmNoaWxkcmVuLnB1c2goY2hpbGRUcmVlKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJlbnRUcmVlLm5vZGUuYXBwZW5kQ2hpbGQoY2hpbGRUcmVlLm5vZGUpO1xuICB9XG59XG5mdW5jdGlvbiBxdWV1ZUhUTUwodHJlZSwgaHRtbCkge1xuICBpZiAoZW5hYmxlTGF6eSkge1xuICAgIHRyZWUuaHRtbCA9IGh0bWw7XG4gIH0gZWxzZSB7XG4gICAgdHJlZS5ub2RlLmlubmVySFRNTCA9IGh0bWw7XG4gIH1cbn1cbmZ1bmN0aW9uIHF1ZXVlVGV4dCh0cmVlLCB0ZXh0KSB7XG4gIGlmIChlbmFibGVMYXp5KSB7XG4gICAgdHJlZS50ZXh0ID0gdGV4dDtcbiAgfSBlbHNlIHtcbiAgICBzZXRUZXh0Q29udGVudCh0cmVlLm5vZGUsIHRleHQpO1xuICB9XG59XG5mdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHRoaXMubm9kZS5ub2RlTmFtZTtcbn1cbmZ1bmN0aW9uIERPTUxhenlUcmVlKG5vZGUpIHtcbiAgcmV0dXJuIHtcbiAgICBub2RlOiBub2RlLFxuICAgIGNoaWxkcmVuOiBbXSxcbiAgICBodG1sOiBudWxsLFxuICAgIHRleHQ6IG51bGwsXG4gICAgdG9TdHJpbmc6IHRvU3RyaW5nXG4gIH07XG59XG5ET01MYXp5VHJlZS5pbnNlcnRUcmVlQmVmb3JlID0gaW5zZXJ0VHJlZUJlZm9yZTtcbkRPTUxhenlUcmVlLnJlcGxhY2VDaGlsZFdpdGhUcmVlID0gcmVwbGFjZUNoaWxkV2l0aFRyZWU7XG5ET01MYXp5VHJlZS5xdWV1ZUNoaWxkID0gcXVldWVDaGlsZDtcbkRPTUxhenlUcmVlLnF1ZXVlSFRNTCA9IHF1ZXVlSFRNTDtcbkRPTUxhenlUcmVlLnF1ZXVlVGV4dCA9IHF1ZXVlVGV4dDtcbm1vZHVsZS5leHBvcnRzID0gRE9NTGF6eVRyZWU7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIgRXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG4gIHZhciBuYW1lc1RvUGx1Z2lucyA9IHt9O1xuICBmdW5jdGlvbiByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpIHtcbiAgICBpZiAoIUV2ZW50UGx1Z2luT3JkZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yICh2YXIgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucykge1xuICAgICAgdmFyIFBsdWdpbk1vZHVsZSA9IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgICAgdmFyIHBsdWdpbkluZGV4ID0gRXZlbnRQbHVnaW5PcmRlci5pbmRleE9mKHBsdWdpbk5hbWUpO1xuICAgICAgIShwbHVnaW5JbmRleCA+IC0xKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IGV2ZW50IHBsdWdpbnMgdGhhdCBkbyBub3QgZXhpc3QgaW4gJyArICd0aGUgcGx1Z2luIG9yZGVyaW5nLCBgJXNgLicsIHBsdWdpbk5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGlmIChFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgIVBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEV2ZW50IHBsdWdpbnMgbXVzdCBpbXBsZW1lbnQgYW4gYGV4dHJhY3RFdmVudHNgICcgKyAnbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC4nLCBwbHVnaW5OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LnBsdWdpbnNbcGx1Z2luSW5kZXhdID0gUGx1Z2luTW9kdWxlO1xuICAgICAgdmFyIHB1Ymxpc2hlZEV2ZW50cyA9IFBsdWdpbk1vZHVsZS5ldmVudFR5cGVzO1xuICAgICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHB1Ymxpc2hlZEV2ZW50cykge1xuICAgICAgICAhcHVibGlzaEV2ZW50Rm9yUGx1Z2luKHB1Ymxpc2hlZEV2ZW50c1tldmVudE5hbWVdLCBQbHVnaW5Nb2R1bGUsIGV2ZW50TmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5SZWdpc3RyeTogRmFpbGVkIHRvIHB1Ymxpc2ggZXZlbnQgYCVzYCBmb3IgcGx1Z2luIGAlc2AuJywgZXZlbnROYW1lLCBwbHVnaW5OYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHB1Ymxpc2hFdmVudEZvclBsdWdpbihkaXNwYXRjaENvbmZpZywgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgICAhIUV2ZW50UGx1Z2luUmVnaXN0cnkuZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lICcgKyAnZXZlbnQgbmFtZSwgYCVzYC4nLCBldmVudE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBFdmVudFBsdWdpblJlZ2lzdHJ5LmV2ZW50TmFtZURpc3BhdGNoQ29uZmlnc1tldmVudE5hbWVdID0gZGlzcGF0Y2hDb25maWc7XG4gICAgdmFyIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzID0gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7XG4gICAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBmb3IgKHZhciBwaGFzZU5hbWUgaW4gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgICAgaWYgKHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KHBoYXNlTmFtZSkpIHtcbiAgICAgICAgICB2YXIgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSA9IHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW3BoYXNlTmFtZV07XG4gICAgICAgICAgcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUocGhhc2VkUmVnaXN0cmF0aW9uTmFtZSwgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKGRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUsIFBsdWdpbk1vZHVsZSwgZXZlbnROYW1lKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUocmVnaXN0cmF0aW9uTmFtZSwgUGx1Z2luTW9kdWxlLCBldmVudE5hbWUpIHtcbiAgICAhIUV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lICcgKyAncmVnaXN0cmF0aW9uIG5hbWUsIGAlc2AuJywgcmVnaXN0cmF0aW9uTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBQbHVnaW5Nb2R1bGU7XG4gICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gUGx1Z2luTW9kdWxlLmV2ZW50VHlwZXNbZXZlbnROYW1lXS5kZXBlbmRlbmNpZXM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBsb3dlckNhc2VkTmFtZSA9IHJlZ2lzdHJhdGlvbk5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIEV2ZW50UGx1Z2luUmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1tsb3dlckNhc2VkTmFtZV0gPSByZWdpc3RyYXRpb25OYW1lO1xuICAgIH1cbiAgfVxuICB2YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHtcbiAgICBwbHVnaW5zOiBbXSxcbiAgICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M6IHt9LFxuICAgIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzOiB7fSxcbiAgICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOiB7fSxcbiAgICBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8ge30gOiBudWxsLFxuICAgIGluamVjdEV2ZW50UGx1Z2luT3JkZXI6IGZ1bmN0aW9uKEluamVjdGVkRXZlbnRQbHVnaW5PcmRlcikge1xuICAgICAgISFFdmVudFBsdWdpbk9yZGVyID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgZXZlbnQgcGx1Z2luIG9yZGVyaW5nIG1vcmUgdGhhbiAnICsgJ29uY2UuIFlvdSBhcmUgbGlrZWx5IHRyeWluZyB0byBsb2FkIG1vcmUgdGhhbiBvbmUgY29weSBvZiBSZWFjdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBFdmVudFBsdWdpbk9yZGVyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyKTtcbiAgICAgIHJlY29tcHV0ZVBsdWdpbk9yZGVyaW5nKCk7XG4gICAgfSxcbiAgICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IGZ1bmN0aW9uKGluamVjdGVkTmFtZXNUb1BsdWdpbnMpIHtcbiAgICAgIHZhciBpc09yZGVyaW5nRGlydHkgPSBmYWxzZTtcbiAgICAgIGZvciAodmFyIHBsdWdpbk5hbWUgaW4gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICAgICAgICBpZiAoIWluamVjdGVkTmFtZXNUb1BsdWdpbnMuaGFzT3duUHJvcGVydHkocGx1Z2luTmFtZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgUGx1Z2luTW9kdWxlID0gaW5qZWN0ZWROYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgICAgaWYgKCFuYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSB8fCBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSAhPT0gUGx1Z2luTW9kdWxlKSB7XG4gICAgICAgICAgISFuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFdmVudFBsdWdpblJlZ2lzdHJ5OiBDYW5ub3QgaW5qZWN0IHR3byBkaWZmZXJlbnQgZXZlbnQgcGx1Z2lucyAnICsgJ3VzaW5nIHRoZSBzYW1lIG5hbWUsIGAlc2AuJywgcGx1Z2luTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgIG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdID0gUGx1Z2luTW9kdWxlO1xuICAgICAgICAgIGlzT3JkZXJpbmdEaXJ0eSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc09yZGVyaW5nRGlydHkpIHtcbiAgICAgICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldFBsdWdpbk1vZHVsZUZvckV2ZW50OiBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIGRpc3BhdGNoQ29uZmlnID0gZXZlbnQuZGlzcGF0Y2hDb25maWc7XG4gICAgICBpZiAoZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkge1xuICAgICAgICByZXR1cm4gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lXSB8fCBudWxsO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgcGhhc2UgaW4gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpIHtcbiAgICAgICAgaWYgKCFkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcy5oYXNPd25Qcm9wZXJ0eShwaGFzZSkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tkaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1twaGFzZV1dO1xuICAgICAgICBpZiAoUGx1Z2luTW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuIFBsdWdpbk1vZHVsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBfcmVzZXRFdmVudFBsdWdpbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgRXZlbnRQbHVnaW5PcmRlciA9IG51bGw7XG4gICAgICBmb3IgKHZhciBwbHVnaW5OYW1lIGluIG5hbWVzVG9QbHVnaW5zKSB7XG4gICAgICAgIGlmIChuYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSkge1xuICAgICAgICAgIGRlbGV0ZSBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zLmxlbmd0aCA9IDA7XG4gICAgICB2YXIgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5ldmVudE5hbWVEaXNwYXRjaENvbmZpZ3M7XG4gICAgICBmb3IgKHZhciBldmVudE5hbWUgaW4gZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzKSB7XG4gICAgICAgIGlmIChldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MuaGFzT3duUHJvcGVydHkoZXZlbnROYW1lKSkge1xuICAgICAgICAgIGRlbGV0ZSBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlcztcbiAgICAgIGZvciAodmFyIHJlZ2lzdHJhdGlvbk5hbWUgaW4gcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXMpIHtcbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzLmhhc093blByb3BlcnR5KHJlZ2lzdHJhdGlvbk5hbWUpKSB7XG4gICAgICAgICAgZGVsZXRlIHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YXIgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyA9IEV2ZW50UGx1Z2luUmVnaXN0cnkucG9zc2libGVSZWdpc3RyYXRpb25OYW1lcztcbiAgICAgICAgZm9yICh2YXIgbG93ZXJDYXNlZE5hbWUgaW4gcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcykge1xuICAgICAgICAgIGlmIChwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSkge1xuICAgICAgICAgICAgZGVsZXRlIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXNbbG93ZXJDYXNlZE5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5O1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBFdmVudENvbnN0YW50c1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU1pcnJvcicpO1xuXG52YXIgUHJvcGFnYXRpb25QaGFzZXMgPSBrZXlNaXJyb3IoeyBidWJibGVkOiBudWxsLCBjYXB0dXJlZDogbnVsbCB9KTtcblxuLyoqXG4gKiBUeXBlcyBvZiByYXcgc2lnbmFscyBmcm9tIHRoZSBicm93c2VyIGNhdWdodCBhdCB0aGUgdG9wIGxldmVsLlxuICovXG52YXIgdG9wTGV2ZWxUeXBlcyA9IGtleU1pcnJvcih7XG4gIHRvcEFib3J0OiBudWxsLFxuICB0b3BBbmltYXRpb25FbmQ6IG51bGwsXG4gIHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjogbnVsbCxcbiAgdG9wQW5pbWF0aW9uU3RhcnQ6IG51bGwsXG4gIHRvcEJsdXI6IG51bGwsXG4gIHRvcENhblBsYXk6IG51bGwsXG4gIHRvcENhblBsYXlUaHJvdWdoOiBudWxsLFxuICB0b3BDaGFuZ2U6IG51bGwsXG4gIHRvcENsaWNrOiBudWxsLFxuICB0b3BDb21wb3NpdGlvbkVuZDogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogbnVsbCxcbiAgdG9wQ29tcG9zaXRpb25VcGRhdGU6IG51bGwsXG4gIHRvcENvbnRleHRNZW51OiBudWxsLFxuICB0b3BDb3B5OiBudWxsLFxuICB0b3BDdXQ6IG51bGwsXG4gIHRvcERvdWJsZUNsaWNrOiBudWxsLFxuICB0b3BEcmFnOiBudWxsLFxuICB0b3BEcmFnRW5kOiBudWxsLFxuICB0b3BEcmFnRW50ZXI6IG51bGwsXG4gIHRvcERyYWdFeGl0OiBudWxsLFxuICB0b3BEcmFnTGVhdmU6IG51bGwsXG4gIHRvcERyYWdPdmVyOiBudWxsLFxuICB0b3BEcmFnU3RhcnQ6IG51bGwsXG4gIHRvcERyb3A6IG51bGwsXG4gIHRvcER1cmF0aW9uQ2hhbmdlOiBudWxsLFxuICB0b3BFbXB0aWVkOiBudWxsLFxuICB0b3BFbmNyeXB0ZWQ6IG51bGwsXG4gIHRvcEVuZGVkOiBudWxsLFxuICB0b3BFcnJvcjogbnVsbCxcbiAgdG9wRm9jdXM6IG51bGwsXG4gIHRvcElucHV0OiBudWxsLFxuICB0b3BJbnZhbGlkOiBudWxsLFxuICB0b3BLZXlEb3duOiBudWxsLFxuICB0b3BLZXlQcmVzczogbnVsbCxcbiAgdG9wS2V5VXA6IG51bGwsXG4gIHRvcExvYWQ6IG51bGwsXG4gIHRvcExvYWRlZERhdGE6IG51bGwsXG4gIHRvcExvYWRlZE1ldGFkYXRhOiBudWxsLFxuICB0b3BMb2FkU3RhcnQ6IG51bGwsXG4gIHRvcE1vdXNlRG93bjogbnVsbCxcbiAgdG9wTW91c2VNb3ZlOiBudWxsLFxuICB0b3BNb3VzZU91dDogbnVsbCxcbiAgdG9wTW91c2VPdmVyOiBudWxsLFxuICB0b3BNb3VzZVVwOiBudWxsLFxuICB0b3BQYXN0ZTogbnVsbCxcbiAgdG9wUGF1c2U6IG51bGwsXG4gIHRvcFBsYXk6IG51bGwsXG4gIHRvcFBsYXlpbmc6IG51bGwsXG4gIHRvcFByb2dyZXNzOiBudWxsLFxuICB0b3BSYXRlQ2hhbmdlOiBudWxsLFxuICB0b3BSZXNldDogbnVsbCxcbiAgdG9wU2Nyb2xsOiBudWxsLFxuICB0b3BTZWVrZWQ6IG51bGwsXG4gIHRvcFNlZWtpbmc6IG51bGwsXG4gIHRvcFNlbGVjdGlvbkNoYW5nZTogbnVsbCxcbiAgdG9wU3RhbGxlZDogbnVsbCxcbiAgdG9wU3VibWl0OiBudWxsLFxuICB0b3BTdXNwZW5kOiBudWxsLFxuICB0b3BUZXh0SW5wdXQ6IG51bGwsXG4gIHRvcFRpbWVVcGRhdGU6IG51bGwsXG4gIHRvcFRvdWNoQ2FuY2VsOiBudWxsLFxuICB0b3BUb3VjaEVuZDogbnVsbCxcbiAgdG9wVG91Y2hNb3ZlOiBudWxsLFxuICB0b3BUb3VjaFN0YXJ0OiBudWxsLFxuICB0b3BUcmFuc2l0aW9uRW5kOiBudWxsLFxuICB0b3BWb2x1bWVDaGFuZ2U6IG51bGwsXG4gIHRvcFdhaXRpbmc6IG51bGwsXG4gIHRvcFdoZWVsOiBudWxsXG59KTtcblxudmFyIEV2ZW50Q29uc3RhbnRzID0ge1xuICB0b3BMZXZlbFR5cGVzOiB0b3BMZXZlbFR5cGVzLFxuICBQcm9wYWdhdGlvblBoYXNlczogUHJvcGFnYXRpb25QaGFzZXNcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRDb25zdGFudHM7IiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBFdmVudENvbnN0YW50cyA9IHJlcXVpcmUoJy4vRXZlbnRDb25zdGFudHMnKTtcbiAgdmFyIFJlYWN0RXJyb3JVdGlscyA9IHJlcXVpcmUoJy4vUmVhY3RFcnJvclV0aWxzJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIHZhciBDb21wb25lbnRUcmVlO1xuICB2YXIgVHJlZVRyYXZlcnNhbDtcbiAgdmFyIGluamVjdGlvbiA9IHtcbiAgICBpbmplY3RDb21wb25lbnRUcmVlOiBmdW5jdGlvbihJbmplY3RlZCkge1xuICAgICAgQ29tcG9uZW50VHJlZSA9IEluamVjdGVkO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoSW5qZWN0ZWQgJiYgSW5qZWN0ZWQuZ2V0Tm9kZUZyb21JbnN0YW5jZSAmJiBJbmplY3RlZC5nZXRJbnN0YW5jZUZyb21Ob2RlLCAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0Q29tcG9uZW50VHJlZSguLi4pOiBJbmplY3RlZCAnICsgJ21vZHVsZSBpcyBtaXNzaW5nIGdldE5vZGVGcm9tSW5zdGFuY2Ugb3IgZ2V0SW5zdGFuY2VGcm9tTm9kZS4nKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGluamVjdFRyZWVUcmF2ZXJzYWw6IGZ1bmN0aW9uKEluamVjdGVkKSB7XG4gICAgICBUcmVlVHJhdmVyc2FsID0gSW5qZWN0ZWQ7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhJbmplY3RlZCAmJiBJbmplY3RlZC5pc0FuY2VzdG9yICYmIEluamVjdGVkLmdldExvd2VzdENvbW1vbkFuY2VzdG9yLCAnRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0VHJlZVRyYXZlcnNhbCguLi4pOiBJbmplY3RlZCAnICsgJ21vZHVsZSBpcyBtaXNzaW5nIGlzQW5jZXN0b3Igb3IgZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IuJykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG4gIGZ1bmN0aW9uIGlzRW5kaXNoKHRvcExldmVsVHlwZSkge1xuICAgIHJldHVybiB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wTW91c2VVcCB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hFbmQgfHwgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoQ2FuY2VsO1xuICB9XG4gIGZ1bmN0aW9uIGlzTW92ZWlzaCh0b3BMZXZlbFR5cGUpIHtcbiAgICByZXR1cm4gdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcE1vdXNlTW92ZSB8fCB0b3BMZXZlbFR5cGUgPT09IHRvcExldmVsVHlwZXMudG9wVG91Y2hNb3ZlO1xuICB9XG4gIGZ1bmN0aW9uIGlzU3RhcnRpc2godG9wTGV2ZWxUeXBlKSB7XG4gICAgcmV0dXJuIHRvcExldmVsVHlwZSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BNb3VzZURvd24gfHwgdG9wTGV2ZWxUeXBlID09PSB0b3BMZXZlbFR5cGVzLnRvcFRvdWNoU3RhcnQ7XG4gIH1cbiAgdmFyIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhbGlkYXRlRXZlbnREaXNwYXRjaGVzID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHZhciBkaXNwYXRjaExpc3RlbmVycyA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgICAgIHZhciBkaXNwYXRjaEluc3RhbmNlcyA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAgICAgIHZhciBsaXN0ZW5lcnNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcnMpO1xuICAgICAgdmFyIGxpc3RlbmVyc0xlbiA9IGxpc3RlbmVyc0lzQXJyID8gZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoIDogZGlzcGF0Y2hMaXN0ZW5lcnMgPyAxIDogMDtcbiAgICAgIHZhciBpbnN0YW5jZXNJc0FyciA9IEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hJbnN0YW5jZXMpO1xuICAgICAgdmFyIGluc3RhbmNlc0xlbiA9IGluc3RhbmNlc0lzQXJyID8gZGlzcGF0Y2hJbnN0YW5jZXMubGVuZ3RoIDogZGlzcGF0Y2hJbnN0YW5jZXMgPyAxIDogMDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGluc3RhbmNlc0lzQXJyID09PSBsaXN0ZW5lcnNJc0FyciAmJiBpbnN0YW5jZXNMZW4gPT09IGxpc3RlbmVyc0xlbiwgJ0V2ZW50UGx1Z2luVXRpbHM6IEludmFsaWQgYGV2ZW50YC4nKSA6IHZvaWQgMDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgc2ltdWxhdGVkLCBsaXN0ZW5lciwgaW5zdCkge1xuICAgIHZhciB0eXBlID0gZXZlbnQudHlwZSB8fCAndW5rbm93bi1ldmVudCc7XG4gICAgZXZlbnQuY3VycmVudFRhcmdldCA9IEV2ZW50UGx1Z2luVXRpbHMuZ2V0Tm9kZUZyb21JbnN0YW5jZShpbnN0KTtcbiAgICBpZiAoc2ltdWxhdGVkKSB7XG4gICAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrV2l0aENhdGNoKHR5cGUsIGxpc3RlbmVyLCBldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0RXJyb3JVdGlscy5pbnZva2VHdWFyZGVkQ2FsbGJhY2sodHlwZSwgbGlzdGVuZXIsIGV2ZW50KTtcbiAgICB9XG4gICAgZXZlbnQuY3VycmVudFRhcmdldCA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBzaW11bGF0ZWQpIHtcbiAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gICAgdmFyIGRpc3BhdGNoSW5zdGFuY2VzID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgc2ltdWxhdGVkLCBkaXNwYXRjaExpc3RlbmVyc1tpXSwgZGlzcGF0Y2hJbnN0YW5jZXNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGlzcGF0Y2hMaXN0ZW5lcnMpIHtcbiAgICAgIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgc2ltdWxhdGVkLCBkaXNwYXRjaExpc3RlbmVycywgZGlzcGF0Y2hJbnN0YW5jZXMpO1xuICAgIH1cbiAgICBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnMgPSBudWxsO1xuICAgIGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcyA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZUltcGwoZXZlbnQpIHtcbiAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lcnMgPSBldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gICAgdmFyIGRpc3BhdGNoSW5zdGFuY2VzID0gZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YWxpZGF0ZUV2ZW50RGlzcGF0Y2hlcyhldmVudCk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGRpc3BhdGNoTGlzdGVuZXJzKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaExpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNwYXRjaExpc3RlbmVyc1tpXShldmVudCwgZGlzcGF0Y2hJbnN0YW5jZXNbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGRpc3BhdGNoSW5zdGFuY2VzW2ldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkaXNwYXRjaExpc3RlbmVycykge1xuICAgICAgaWYgKGRpc3BhdGNoTGlzdGVuZXJzKGV2ZW50LCBkaXNwYXRjaEluc3RhbmNlcykpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoSW5zdGFuY2VzO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXJTdG9wQXRUcnVlKGV2ZW50KSB7XG4gICAgdmFyIHJldCA9IGV4ZWN1dGVEaXNwYXRjaGVzSW5PcmRlclN0b3BBdFRydWVJbXBsKGV2ZW50KTtcbiAgICBldmVudC5fZGlzcGF0Y2hJbnN0YW5jZXMgPSBudWxsO1xuICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gICAgcmV0dXJuIHJldDtcbiAgfVxuICBmdW5jdGlvbiBleGVjdXRlRGlyZWN0RGlzcGF0Y2goZXZlbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFsaWRhdGVFdmVudERpc3BhdGNoZXMoZXZlbnQpO1xuICAgIH1cbiAgICB2YXIgZGlzcGF0Y2hMaXN0ZW5lciA9IGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycztcbiAgICB2YXIgZGlzcGF0Y2hJbnN0YW5jZSA9IGV2ZW50Ll9kaXNwYXRjaEluc3RhbmNlcztcbiAgICAhIUFycmF5LmlzQXJyYXkoZGlzcGF0Y2hMaXN0ZW5lcikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnZXhlY3V0ZURpcmVjdERpc3BhdGNoKC4uLik6IEludmFsaWQgYGV2ZW50YC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgZXZlbnQuY3VycmVudFRhcmdldCA9IGRpc3BhdGNoTGlzdGVuZXIgPyBFdmVudFBsdWdpblV0aWxzLmdldE5vZGVGcm9tSW5zdGFuY2UoZGlzcGF0Y2hJbnN0YW5jZSkgOiBudWxsO1xuICAgIHZhciByZXMgPSBkaXNwYXRjaExpc3RlbmVyID8gZGlzcGF0Y2hMaXN0ZW5lcihldmVudCkgOiBudWxsO1xuICAgIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBudWxsO1xuICAgIGV2ZW50Ll9kaXNwYXRjaExpc3RlbmVycyA9IG51bGw7XG4gICAgZXZlbnQuX2Rpc3BhdGNoSW5zdGFuY2VzID0gbnVsbDtcbiAgICByZXR1cm4gcmVzO1xuICB9XG4gIGZ1bmN0aW9uIGhhc0Rpc3BhdGNoZXMoZXZlbnQpIHtcbiAgICByZXR1cm4gISFldmVudC5fZGlzcGF0Y2hMaXN0ZW5lcnM7XG4gIH1cbiAgdmFyIEV2ZW50UGx1Z2luVXRpbHMgPSB7XG4gICAgaXNFbmRpc2g6IGlzRW5kaXNoLFxuICAgIGlzTW92ZWlzaDogaXNNb3ZlaXNoLFxuICAgIGlzU3RhcnRpc2g6IGlzU3RhcnRpc2gsXG4gICAgZXhlY3V0ZURpcmVjdERpc3BhdGNoOiBleGVjdXRlRGlyZWN0RGlzcGF0Y2gsXG4gICAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyOiBleGVjdXRlRGlzcGF0Y2hlc0luT3JkZXIsXG4gICAgZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZTogZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyU3RvcEF0VHJ1ZSxcbiAgICBoYXNEaXNwYXRjaGVzOiBoYXNEaXNwYXRjaGVzLFxuICAgIGdldEluc3RhbmNlRnJvbU5vZGU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiBDb21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUobm9kZSk7XG4gICAgfSxcbiAgICBnZXROb2RlRnJvbUluc3RhbmNlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICByZXR1cm4gQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKG5vZGUpO1xuICAgIH0sXG4gICAgaXNBbmNlc3RvcjogZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIFRyZWVUcmF2ZXJzYWwuaXNBbmNlc3RvcihhLCBiKTtcbiAgICB9LFxuICAgIGdldExvd2VzdENvbW1vbkFuY2VzdG9yOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgICByZXR1cm4gVHJlZVRyYXZlcnNhbC5nZXRMb3dlc3RDb21tb25BbmNlc3RvcihhLCBiKTtcbiAgICB9LFxuICAgIGdldFBhcmVudEluc3RhbmNlOiBmdW5jdGlvbihpbnN0KSB7XG4gICAgICByZXR1cm4gVHJlZVRyYXZlcnNhbC5nZXRQYXJlbnRJbnN0YW5jZShpbnN0KTtcbiAgICB9LFxuICAgIHRyYXZlcnNlVHdvUGhhc2U6IGZ1bmN0aW9uKHRhcmdldCwgZm4sIGFyZykge1xuICAgICAgcmV0dXJuIFRyZWVUcmF2ZXJzYWwudHJhdmVyc2VUd29QaGFzZSh0YXJnZXQsIGZuLCBhcmcpO1xuICAgIH0sXG4gICAgdHJhdmVyc2VFbnRlckxlYXZlOiBmdW5jdGlvbihmcm9tLCB0bywgZm4sIGFyZ0Zyb20sIGFyZ1RvKSB7XG4gICAgICByZXR1cm4gVHJlZVRyYXZlcnNhbC50cmF2ZXJzZUVudGVyTGVhdmUoZnJvbSwgdG8sIGZuLCBhcmdGcm9tLCBhcmdUbyk7XG4gICAgfSxcbiAgICBpbmplY3Rpb246IGluamVjdGlvblxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IEV2ZW50UGx1Z2luVXRpbHM7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgZnVuY3Rpb24gYWNjdW11bGF0ZUludG8oY3VycmVudCwgbmV4dCkge1xuICAgICEobmV4dCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaWYgKGN1cnJlbnQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfVxuICAgIHZhciBjdXJyZW50SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoY3VycmVudCk7XG4gICAgdmFyIG5leHRJc0FycmF5ID0gQXJyYXkuaXNBcnJheShuZXh0KTtcbiAgICBpZiAoY3VycmVudElzQXJyYXkgJiYgbmV4dElzQXJyYXkpIHtcbiAgICAgIGN1cnJlbnQucHVzaC5hcHBseShjdXJyZW50LCBuZXh0KTtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgICBpZiAoY3VycmVudElzQXJyYXkpIHtcbiAgICAgIGN1cnJlbnQucHVzaChuZXh0KTtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgICBpZiAobmV4dElzQXJyYXkpIHtcbiAgICAgIHJldHVybiBbY3VycmVudF0uY29uY2F0KG5leHQpO1xuICAgIH1cbiAgICByZXR1cm4gW2N1cnJlbnQsIG5leHRdO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gYWNjdW11bGF0ZUludG87XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGZvckVhY2hBY2N1bXVsYXRlZFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge2FycmF5fSBhcnIgYW4gXCJhY2N1bXVsYXRpb25cIiBvZiBpdGVtcyB3aGljaCBpcyBlaXRoZXIgYW4gQXJyYXkgb3JcbiAqIGEgc2luZ2xlIGl0ZW0uIFVzZWZ1bCB3aGVuIHBhaXJlZCB3aXRoIHRoZSBgYWNjdW11bGF0ZWAgbW9kdWxlLiBUaGlzIGlzIGFcbiAqIHNpbXBsZSB1dGlsaXR5IHRoYXQgYWxsb3dzIHVzIHRvIHJlYXNvbiBhYm91dCBhIGNvbGxlY3Rpb24gb2YgaXRlbXMsIGJ1dFxuICogaGFuZGxpbmcgdGhlIGNhc2Ugd2hlbiB0aGVyZSBpcyBleGFjdGx5IG9uZSBpdGVtIChhbmQgd2UgZG8gbm90IG5lZWQgdG9cbiAqIGFsbG9jYXRlIGFuIGFycmF5KS5cbiAqL1xuXG52YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gZnVuY3Rpb24gKGFyciwgY2IsIHNjb3BlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICBhcnIuZm9yRWFjaChjYiwgc2NvcGUpO1xuICB9IGVsc2UgaWYgKGFycikge1xuICAgIGNiLmNhbGwoc2NvcGUsIGFycik7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZm9yRWFjaEFjY3VtdWxhdGVkOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgRXZlbnRQbHVnaW5SZWdpc3RyeSA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5SZWdpc3RyeScpO1xuICB2YXIgRXZlbnRQbHVnaW5VdGlscyA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5VdGlscycpO1xuICB2YXIgUmVhY3RFcnJvclV0aWxzID0gcmVxdWlyZSgnLi9SZWFjdEVycm9yVXRpbHMnKTtcbiAgdmFyIGFjY3VtdWxhdGVJbnRvID0gcmVxdWlyZSgnLi9hY2N1bXVsYXRlSW50bycpO1xuICB2YXIgZm9yRWFjaEFjY3VtdWxhdGVkID0gcmVxdWlyZSgnLi9mb3JFYWNoQWNjdW11bGF0ZWQnKTtcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIgbGlzdGVuZXJCYW5rID0ge307XG4gIHZhciBldmVudFF1ZXVlID0gbnVsbDtcbiAgdmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZSA9IGZ1bmN0aW9uKGV2ZW50LCBzaW11bGF0ZWQpIHtcbiAgICBpZiAoZXZlbnQpIHtcbiAgICAgIEV2ZW50UGx1Z2luVXRpbHMuZXhlY3V0ZURpc3BhdGNoZXNJbk9yZGVyKGV2ZW50LCBzaW11bGF0ZWQpO1xuICAgICAgaWYgKCFldmVudC5pc1BlcnNpc3RlbnQoKSkge1xuICAgICAgICBldmVudC5jb25zdHJ1Y3Rvci5yZWxlYXNlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHZhciBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2VTaW11bGF0ZWQgPSBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZShlLCB0cnVlKTtcbiAgfTtcbiAgdmFyIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsID0gZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiBleGVjdXRlRGlzcGF0Y2hlc0FuZFJlbGVhc2UoZSwgZmFsc2UpO1xuICB9O1xuICB2YXIgRXZlbnRQbHVnaW5IdWIgPSB7XG4gICAgaW5qZWN0aW9uOiB7XG4gICAgICBpbmplY3RFdmVudFBsdWdpbk9yZGVyOiBFdmVudFBsdWdpblJlZ2lzdHJ5LmluamVjdEV2ZW50UGx1Z2luT3JkZXIsXG4gICAgICBpbmplY3RFdmVudFBsdWdpbnNCeU5hbWU6IEV2ZW50UGx1Z2luUmVnaXN0cnkuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lXG4gICAgfSxcbiAgICBwdXRMaXN0ZW5lcjogZnVuY3Rpb24oaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICEodHlwZW9mIGxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCAlcyBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCB0eXBlICVzJywgcmVnaXN0cmF0aW9uTmFtZSwgdHlwZW9mIGxpc3RlbmVyKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgPSBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV0gfHwgKGxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXSA9IHt9KTtcbiAgICAgIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2luc3QuX3Jvb3ROb2RlSURdID0gbGlzdGVuZXI7XG4gICAgICB2YXIgUGx1Z2luTW9kdWxlID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5yZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXTtcbiAgICAgIGlmIChQbHVnaW5Nb2R1bGUgJiYgUGx1Z2luTW9kdWxlLmRpZFB1dExpc3RlbmVyKSB7XG4gICAgICAgIFBsdWdpbk1vZHVsZS5kaWRQdXRMaXN0ZW5lcihpbnN0LCByZWdpc3RyYXRpb25OYW1lLCBsaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRMaXN0ZW5lcjogZnVuY3Rpb24oaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSkge1xuICAgICAgdmFyIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lID0gbGlzdGVuZXJCYW5rW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgICAgcmV0dXJuIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lICYmIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2luc3QuX3Jvb3ROb2RlSURdO1xuICAgIH0sXG4gICAgZGVsZXRlTGlzdGVuZXI6IGZ1bmN0aW9uKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgICAgaWYgKFBsdWdpbk1vZHVsZSAmJiBQbHVnaW5Nb2R1bGUud2lsbERlbGV0ZUxpc3RlbmVyKSB7XG4gICAgICAgIFBsdWdpbk1vZHVsZS53aWxsRGVsZXRlTGlzdGVuZXIoaW5zdCwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgICB9XG4gICAgICB2YXIgYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUgPSBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICBpZiAoYmFua0ZvclJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgICAgICAgZGVsZXRlIGJhbmtGb3JSZWdpc3RyYXRpb25OYW1lW2luc3QuX3Jvb3ROb2RlSURdO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVsZXRlQWxsTGlzdGVuZXJzOiBmdW5jdGlvbihpbnN0KSB7XG4gICAgICBmb3IgKHZhciByZWdpc3RyYXRpb25OYW1lIGluIGxpc3RlbmVyQmFuaykge1xuICAgICAgICBpZiAoIWxpc3RlbmVyQmFua1tyZWdpc3RyYXRpb25OYW1lXVtpbnN0Ll9yb290Tm9kZUlEXSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHZhciBQbHVnaW5Nb2R1bGUgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzW3JlZ2lzdHJhdGlvbk5hbWVdO1xuICAgICAgICBpZiAoUGx1Z2luTW9kdWxlICYmIFBsdWdpbk1vZHVsZS53aWxsRGVsZXRlTGlzdGVuZXIpIHtcbiAgICAgICAgICBQbHVnaW5Nb2R1bGUud2lsbERlbGV0ZUxpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGRlbGV0ZSBsaXN0ZW5lckJhbmtbcmVnaXN0cmF0aW9uTmFtZV1baW5zdC5fcm9vdE5vZGVJRF07XG4gICAgICB9XG4gICAgfSxcbiAgICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgICAgdmFyIGV2ZW50cztcbiAgICAgIHZhciBwbHVnaW5zID0gRXZlbnRQbHVnaW5SZWdpc3RyeS5wbHVnaW5zO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbHVnaW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwb3NzaWJsZVBsdWdpbiA9IHBsdWdpbnNbaV07XG4gICAgICAgIGlmIChwb3NzaWJsZVBsdWdpbikge1xuICAgICAgICAgIHZhciBleHRyYWN0ZWRFdmVudHMgPSBwb3NzaWJsZVBsdWdpbi5leHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICAgICAgICBpZiAoZXh0cmFjdGVkRXZlbnRzKSB7XG4gICAgICAgICAgICBldmVudHMgPSBhY2N1bXVsYXRlSW50byhldmVudHMsIGV4dHJhY3RlZEV2ZW50cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZXZlbnRzO1xuICAgIH0sXG4gICAgZW5xdWV1ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7XG4gICAgICBpZiAoZXZlbnRzKSB7XG4gICAgICAgIGV2ZW50UXVldWUgPSBhY2N1bXVsYXRlSW50byhldmVudFF1ZXVlLCBldmVudHMpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcHJvY2Vzc0V2ZW50UXVldWU6IGZ1bmN0aW9uKHNpbXVsYXRlZCkge1xuICAgICAgdmFyIHByb2Nlc3NpbmdFdmVudFF1ZXVlID0gZXZlbnRRdWV1ZTtcbiAgICAgIGV2ZW50UXVldWUgPSBudWxsO1xuICAgICAgaWYgKHNpbXVsYXRlZCkge1xuICAgICAgICBmb3JFYWNoQWNjdW11bGF0ZWQocHJvY2Vzc2luZ0V2ZW50UXVldWUsIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVNpbXVsYXRlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3JFYWNoQWNjdW11bGF0ZWQocHJvY2Vzc2luZ0V2ZW50UXVldWUsIGV4ZWN1dGVEaXNwYXRjaGVzQW5kUmVsZWFzZVRvcExldmVsKTtcbiAgICAgIH1cbiAgICAgICEhZXZlbnRRdWV1ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdwcm9jZXNzRXZlbnRRdWV1ZSgpOiBBZGRpdGlvbmFsIGV2ZW50cyB3ZXJlIGVucXVldWVkIHdoaWxlIHByb2Nlc3NpbmcgJyArICdhbiBldmVudCBxdWV1ZS4gU3VwcG9ydCBmb3IgdGhpcyBoYXMgbm90IHlldCBiZWVuIGltcGxlbWVudGVkLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIFJlYWN0RXJyb3JVdGlscy5yZXRocm93Q2F1Z2h0RXJyb3IoKTtcbiAgICB9LFxuICAgIF9fcHVyZ2U6IGZ1bmN0aW9uKCkge1xuICAgICAgbGlzdGVuZXJCYW5rID0ge307XG4gICAgfSxcbiAgICBfX2dldExpc3RlbmVyQmFuazogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXJCYW5rO1xuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBFdmVudFBsdWdpbkh1Yjtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBFdmVudFBsdWdpbkh1YiA9IHJlcXVpcmUoJy4vRXZlbnRQbHVnaW5IdWInKTtcbmZ1bmN0aW9uIHJ1bkV2ZW50UXVldWVJbkJhdGNoKGV2ZW50cykge1xuICBFdmVudFBsdWdpbkh1Yi5lbnF1ZXVlRXZlbnRzKGV2ZW50cyk7XG4gIEV2ZW50UGx1Z2luSHViLnByb2Nlc3NFdmVudFF1ZXVlKGZhbHNlKTtcbn1cbnZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0ge2hhbmRsZVRvcExldmVsOiBmdW5jdGlvbih0b3BMZXZlbFR5cGUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCkge1xuICAgIHZhciBldmVudHMgPSBFdmVudFBsdWdpbkh1Yi5leHRyYWN0RXZlbnRzKHRvcExldmVsVHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBydW5FdmVudFF1ZXVlSW5CYXRjaChldmVudHMpO1xuICB9fTtcbm1vZHVsZS5leHBvcnRzID0gUmVhY3RFdmVudEVtaXR0ZXJNaXhpbjtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBWaWV3cG9ydE1ldHJpY3NcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBWaWV3cG9ydE1ldHJpY3MgPSB7XG5cbiAgY3VycmVudFNjcm9sbExlZnQ6IDAsXG5cbiAgY3VycmVudFNjcm9sbFRvcDogMCxcblxuICByZWZyZXNoU2Nyb2xsVmFsdWVzOiBmdW5jdGlvbiAoc2Nyb2xsUG9zaXRpb24pIHtcbiAgICBWaWV3cG9ydE1ldHJpY3MuY3VycmVudFNjcm9sbExlZnQgPSBzY3JvbGxQb3NpdGlvbi54O1xuICAgIFZpZXdwb3J0TWV0cmljcy5jdXJyZW50U2Nyb2xsVG9wID0gc2Nyb2xsUG9zaXRpb24ueTtcbiAgfVxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFZpZXdwb3J0TWV0cmljczsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWVcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBtYXBwaW5nIG9mIHN0YW5kYXJkIHZlbmRvciBwcmVmaXhlcyB1c2luZyB0aGUgZGVmaW5lZCBzdHlsZSBwcm9wZXJ0eSBhbmQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc3R5bGVQcm9wXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtYWtlUHJlZml4TWFwKHN0eWxlUHJvcCwgZXZlbnROYW1lKSB7XG4gIHZhciBwcmVmaXhlcyA9IHt9O1xuXG4gIHByZWZpeGVzW3N0eWxlUHJvcC50b0xvd2VyQ2FzZSgpXSA9IGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuICBwcmVmaXhlc1snV2Via2l0JyArIHN0eWxlUHJvcF0gPSAnd2Via2l0JyArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbJ01veicgKyBzdHlsZVByb3BdID0gJ21veicgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzWydtcycgKyBzdHlsZVByb3BdID0gJ01TJyArIGV2ZW50TmFtZTtcbiAgcHJlZml4ZXNbJ08nICsgc3R5bGVQcm9wXSA9ICdvJyArIGV2ZW50TmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gIHJldHVybiBwcmVmaXhlcztcbn1cblxuLyoqXG4gKiBBIGxpc3Qgb2YgZXZlbnQgbmFtZXMgdG8gYSBjb25maWd1cmFibGUgbGlzdCBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbnZhciB2ZW5kb3JQcmVmaXhlcyA9IHtcbiAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uRW5kJyksXG4gIGFuaW1hdGlvbml0ZXJhdGlvbjogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvbkl0ZXJhdGlvbicpLFxuICBhbmltYXRpb25zdGFydDogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvblN0YXJ0JyksXG4gIHRyYW5zaXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ1RyYW5zaXRpb24nLCAnVHJhbnNpdGlvbkVuZCcpXG59O1xuXG4vKipcbiAqIEV2ZW50IG5hbWVzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gZGV0ZWN0ZWQgYW5kIHByZWZpeGVkIChpZiBhcHBsaWNhYmxlKS5cbiAqL1xudmFyIHByZWZpeGVkRXZlbnROYW1lcyA9IHt9O1xuXG4vKipcbiAqIEVsZW1lbnQgdG8gY2hlY2sgZm9yIHByZWZpeGVzIG9uLlxuICovXG52YXIgc3R5bGUgPSB7fTtcblxuLyoqXG4gKiBCb290c3RyYXAgaWYgYSBET00gZXhpc3RzLlxuICovXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbiAgLy8gT24gc29tZSBwbGF0Zm9ybXMsIGluIHBhcnRpY3VsYXIgc29tZSByZWxlYXNlcyBvZiBBbmRyb2lkIDQueCxcbiAgLy8gdGhlIHVuLXByZWZpeGVkIFwiYW5pbWF0aW9uXCIgYW5kIFwidHJhbnNpdGlvblwiIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgb24gdGhlXG4gIC8vIHN0eWxlIG9iamVjdCBidXQgdGhlIGV2ZW50cyB0aGF0IGZpcmUgd2lsbCBzdGlsbCBiZSBwcmVmaXhlZCwgc28gd2UgbmVlZFxuICAvLyB0byBjaGVjayBpZiB0aGUgdW4tcHJlZml4ZWQgZXZlbnRzIGFyZSB1c2FibGUsIGFuZCBpZiBub3QgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgbWFwLlxuICBpZiAoISgnQW5pbWF0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uO1xuICB9XG5cbiAgLy8gU2FtZSBhcyBhYm92ZVxuICBpZiAoISgnVHJhbnNpdGlvbkV2ZW50JyBpbiB3aW5kb3cpKSB7XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbjtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGRldGVybWluZSB0aGUgY29ycmVjdCB2ZW5kb3IgcHJlZml4ZWQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgaWYgKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICB9IGVsc2UgaWYgKCF2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIGV2ZW50TmFtZTtcbiAgfVxuXG4gIHZhciBwcmVmaXhNYXAgPSB2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdO1xuXG4gIGZvciAodmFyIHN0eWxlUHJvcCBpbiBwcmVmaXhNYXApIHtcbiAgICBpZiAocHJlZml4TWFwLmhhc093blByb3BlcnR5KHN0eWxlUHJvcCkgJiYgc3R5bGVQcm9wIGluIHN0eWxlKSB7XG4gICAgICByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0gPSBwcmVmaXhNYXBbc3R5bGVQcm9wXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWU7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGlzRXZlbnRTdXBwb3J0ZWRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG5cbnZhciB1c2VIYXNGZWF0dXJlO1xuaWYgKEV4ZWN1dGlvbkVudmlyb25tZW50LmNhblVzZURPTSkge1xuICB1c2VIYXNGZWF0dXJlID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24gJiYgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSAmJlxuICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gIC8vIEBzZWUgaHR0cDovL2RvbS5zcGVjLndoYXR3Zy5vcmcvI2RvbS1kb21pbXBsZW1lbnRhdGlvbi1oYXNmZWF0dXJlXG4gIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUoJycsICcnKSAhPT0gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgaWYgKCFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHwgY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgZXZlbnROYW1lID0gJ29uJyArIGV2ZW50TmFtZVN1ZmZpeDtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICBpZiAoIWlzU3VwcG9ydGVkICYmIHVzZUhhc0ZlYXR1cmUgJiYgZXZlbnROYW1lU3VmZml4ID09PSAnd2hlZWwnKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRXZlbnRTdXBwb3J0ZWQ7IiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuICB2YXIgRXZlbnRDb25zdGFudHMgPSByZXF1aXJlKCcuL0V2ZW50Q29uc3RhbnRzJyk7XG4gIHZhciBFdmVudFBsdWdpblJlZ2lzdHJ5ID0gcmVxdWlyZSgnLi9FdmVudFBsdWdpblJlZ2lzdHJ5Jyk7XG4gIHZhciBSZWFjdEV2ZW50RW1pdHRlck1peGluID0gcmVxdWlyZSgnLi9SZWFjdEV2ZW50RW1pdHRlck1peGluJyk7XG4gIHZhciBWaWV3cG9ydE1ldHJpY3MgPSByZXF1aXJlKCcuL1ZpZXdwb3J0TWV0cmljcycpO1xuICB2YXIgZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUgPSByZXF1aXJlKCcuL2dldFZlbmRvclByZWZpeGVkRXZlbnROYW1lJyk7XG4gIHZhciBpc0V2ZW50U3VwcG9ydGVkID0gcmVxdWlyZSgnLi9pc0V2ZW50U3VwcG9ydGVkJyk7XG4gIHZhciBoYXNFdmVudFBhZ2VYWTtcbiAgdmFyIGFscmVhZHlMaXN0ZW5pbmdUbyA9IHt9O1xuICB2YXIgaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUgPSBmYWxzZTtcbiAgdmFyIHJlYWN0VG9wTGlzdGVuZXJzQ291bnRlciA9IDA7XG4gIHZhciB0b3BFdmVudE1hcHBpbmcgPSB7XG4gICAgdG9wQWJvcnQ6ICdhYm9ydCcsXG4gICAgdG9wQW5pbWF0aW9uRW5kOiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgnYW5pbWF0aW9uZW5kJykgfHwgJ2FuaW1hdGlvbmVuZCcsXG4gICAgdG9wQW5pbWF0aW9uSXRlcmF0aW9uOiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgnYW5pbWF0aW9uaXRlcmF0aW9uJykgfHwgJ2FuaW1hdGlvbml0ZXJhdGlvbicsXG4gICAgdG9wQW5pbWF0aW9uU3RhcnQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCdhbmltYXRpb25zdGFydCcpIHx8ICdhbmltYXRpb25zdGFydCcsXG4gICAgdG9wQmx1cjogJ2JsdXInLFxuICAgIHRvcENhblBsYXk6ICdjYW5wbGF5JyxcbiAgICB0b3BDYW5QbGF5VGhyb3VnaDogJ2NhbnBsYXl0aHJvdWdoJyxcbiAgICB0b3BDaGFuZ2U6ICdjaGFuZ2UnLFxuICAgIHRvcENsaWNrOiAnY2xpY2snLFxuICAgIHRvcENvbXBvc2l0aW9uRW5kOiAnY29tcG9zaXRpb25lbmQnLFxuICAgIHRvcENvbXBvc2l0aW9uU3RhcnQ6ICdjb21wb3NpdGlvbnN0YXJ0JyxcbiAgICB0b3BDb21wb3NpdGlvblVwZGF0ZTogJ2NvbXBvc2l0aW9udXBkYXRlJyxcbiAgICB0b3BDb250ZXh0TWVudTogJ2NvbnRleHRtZW51JyxcbiAgICB0b3BDb3B5OiAnY29weScsXG4gICAgdG9wQ3V0OiAnY3V0JyxcbiAgICB0b3BEb3VibGVDbGljazogJ2RibGNsaWNrJyxcbiAgICB0b3BEcmFnOiAnZHJhZycsXG4gICAgdG9wRHJhZ0VuZDogJ2RyYWdlbmQnLFxuICAgIHRvcERyYWdFbnRlcjogJ2RyYWdlbnRlcicsXG4gICAgdG9wRHJhZ0V4aXQ6ICdkcmFnZXhpdCcsXG4gICAgdG9wRHJhZ0xlYXZlOiAnZHJhZ2xlYXZlJyxcbiAgICB0b3BEcmFnT3ZlcjogJ2RyYWdvdmVyJyxcbiAgICB0b3BEcmFnU3RhcnQ6ICdkcmFnc3RhcnQnLFxuICAgIHRvcERyb3A6ICdkcm9wJyxcbiAgICB0b3BEdXJhdGlvbkNoYW5nZTogJ2R1cmF0aW9uY2hhbmdlJyxcbiAgICB0b3BFbXB0aWVkOiAnZW1wdGllZCcsXG4gICAgdG9wRW5jcnlwdGVkOiAnZW5jcnlwdGVkJyxcbiAgICB0b3BFbmRlZDogJ2VuZGVkJyxcbiAgICB0b3BFcnJvcjogJ2Vycm9yJyxcbiAgICB0b3BGb2N1czogJ2ZvY3VzJyxcbiAgICB0b3BJbnB1dDogJ2lucHV0JyxcbiAgICB0b3BLZXlEb3duOiAna2V5ZG93bicsXG4gICAgdG9wS2V5UHJlc3M6ICdrZXlwcmVzcycsXG4gICAgdG9wS2V5VXA6ICdrZXl1cCcsXG4gICAgdG9wTG9hZGVkRGF0YTogJ2xvYWRlZGRhdGEnLFxuICAgIHRvcExvYWRlZE1ldGFkYXRhOiAnbG9hZGVkbWV0YWRhdGEnLFxuICAgIHRvcExvYWRTdGFydDogJ2xvYWRzdGFydCcsXG4gICAgdG9wTW91c2VEb3duOiAnbW91c2Vkb3duJyxcbiAgICB0b3BNb3VzZU1vdmU6ICdtb3VzZW1vdmUnLFxuICAgIHRvcE1vdXNlT3V0OiAnbW91c2VvdXQnLFxuICAgIHRvcE1vdXNlT3ZlcjogJ21vdXNlb3ZlcicsXG4gICAgdG9wTW91c2VVcDogJ21vdXNldXAnLFxuICAgIHRvcFBhc3RlOiAncGFzdGUnLFxuICAgIHRvcFBhdXNlOiAncGF1c2UnLFxuICAgIHRvcFBsYXk6ICdwbGF5JyxcbiAgICB0b3BQbGF5aW5nOiAncGxheWluZycsXG4gICAgdG9wUHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gICAgdG9wUmF0ZUNoYW5nZTogJ3JhdGVjaGFuZ2UnLFxuICAgIHRvcFNjcm9sbDogJ3Njcm9sbCcsXG4gICAgdG9wU2Vla2VkOiAnc2Vla2VkJyxcbiAgICB0b3BTZWVraW5nOiAnc2Vla2luZycsXG4gICAgdG9wU2VsZWN0aW9uQ2hhbmdlOiAnc2VsZWN0aW9uY2hhbmdlJyxcbiAgICB0b3BTdGFsbGVkOiAnc3RhbGxlZCcsXG4gICAgdG9wU3VzcGVuZDogJ3N1c3BlbmQnLFxuICAgIHRvcFRleHRJbnB1dDogJ3RleHRJbnB1dCcsXG4gICAgdG9wVGltZVVwZGF0ZTogJ3RpbWV1cGRhdGUnLFxuICAgIHRvcFRvdWNoQ2FuY2VsOiAndG91Y2hjYW5jZWwnLFxuICAgIHRvcFRvdWNoRW5kOiAndG91Y2hlbmQnLFxuICAgIHRvcFRvdWNoTW92ZTogJ3RvdWNobW92ZScsXG4gICAgdG9wVG91Y2hTdGFydDogJ3RvdWNoc3RhcnQnLFxuICAgIHRvcFRyYW5zaXRpb25FbmQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCd0cmFuc2l0aW9uZW5kJykgfHwgJ3RyYW5zaXRpb25lbmQnLFxuICAgIHRvcFZvbHVtZUNoYW5nZTogJ3ZvbHVtZWNoYW5nZScsXG4gICAgdG9wV2FpdGluZzogJ3dhaXRpbmcnLFxuICAgIHRvcFdoZWVsOiAnd2hlZWwnXG4gIH07XG4gIHZhciB0b3BMaXN0ZW5lcnNJREtleSA9ICdfcmVhY3RMaXN0ZW5lcnNJRCcgKyBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XG4gIGZ1bmN0aW9uIGdldExpc3RlbmluZ0ZvckRvY3VtZW50KG1vdW50QXQpIHtcbiAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3VudEF0LCB0b3BMaXN0ZW5lcnNJREtleSkpIHtcbiAgICAgIG1vdW50QXRbdG9wTGlzdGVuZXJzSURLZXldID0gcmVhY3RUb3BMaXN0ZW5lcnNDb3VudGVyKys7XG4gICAgICBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dID0ge307XG4gICAgfVxuICAgIHJldHVybiBhbHJlYWR5TGlzdGVuaW5nVG9bbW91bnRBdFt0b3BMaXN0ZW5lcnNJREtleV1dO1xuICB9XG4gIHZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSBfYXNzaWduKHt9LCBSZWFjdEV2ZW50RW1pdHRlck1peGluLCB7XG4gICAgUmVhY3RFdmVudExpc3RlbmVyOiBudWxsLFxuICAgIGluamVjdGlvbjoge2luamVjdFJlYWN0RXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oUmVhY3RFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIFJlYWN0RXZlbnRMaXN0ZW5lci5zZXRIYW5kbGVUb3BMZXZlbChSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuaGFuZGxlVG9wTGV2ZWwpO1xuICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyID0gUmVhY3RFdmVudExpc3RlbmVyO1xuICAgICAgfX0sXG4gICAgc2V0RW5hYmxlZDogZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgICAgaWYgKFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci5zZXRFbmFibGVkKGVuYWJsZWQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXNFbmFibGVkOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhIShSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyICYmIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIuaXNFbmFibGVkKCkpO1xuICAgIH0sXG4gICAgbGlzdGVuVG86IGZ1bmN0aW9uKHJlZ2lzdHJhdGlvbk5hbWUsIGNvbnRlbnREb2N1bWVudEhhbmRsZSkge1xuICAgICAgdmFyIG1vdW50QXQgPSBjb250ZW50RG9jdW1lbnRIYW5kbGU7XG4gICAgICB2YXIgaXNMaXN0ZW5pbmcgPSBnZXRMaXN0ZW5pbmdGb3JEb2N1bWVudChtb3VudEF0KTtcbiAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBFdmVudFBsdWdpblJlZ2lzdHJ5LnJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV07XG4gICAgICB2YXIgdG9wTGV2ZWxUeXBlcyA9IEV2ZW50Q29uc3RhbnRzLnRvcExldmVsVHlwZXM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY2llc1tpXTtcbiAgICAgICAgaWYgKCEoaXNMaXN0ZW5pbmcuaGFzT3duUHJvcGVydHkoZGVwZW5kZW5jeSkgJiYgaXNMaXN0ZW5pbmdbZGVwZW5kZW5jeV0pKSB7XG4gICAgICAgICAgaWYgKGRlcGVuZGVuY3kgPT09IHRvcExldmVsVHlwZXMudG9wV2hlZWwpIHtcbiAgICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCd3aGVlbCcpKSB7XG4gICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCh0b3BMZXZlbFR5cGVzLnRvcFdoZWVsLCAnd2hlZWwnLCBtb3VudEF0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNFdmVudFN1cHBvcnRlZCgnbW91c2V3aGVlbCcpKSB7XG4gICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCh0b3BMZXZlbFR5cGVzLnRvcFdoZWVsLCAnbW91c2V3aGVlbCcsIG1vdW50QXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wV2hlZWwsICdET01Nb3VzZVNjcm9sbCcsIG1vdW50QXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwpIHtcbiAgICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdzY3JvbGwnLCB0cnVlKSkge1xuICAgICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBDYXB0dXJlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wU2Nyb2xsLCAnc2Nyb2xsJywgbW91bnRBdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BTY3JvbGwsICdzY3JvbGwnLCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLldJTkRPV19IQU5ETEUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoZGVwZW5kZW5jeSA9PT0gdG9wTGV2ZWxUeXBlcy50b3BGb2N1cyB8fCBkZXBlbmRlbmN5ID09PSB0b3BMZXZlbFR5cGVzLnRvcEJsdXIpIHtcbiAgICAgICAgICAgIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1cycsIHRydWUpKSB7XG4gICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BGb2N1cywgJ2ZvY3VzJywgbW91bnRBdCk7XG4gICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQodG9wTGV2ZWxUeXBlcy50b3BCbHVyLCAnYmx1cicsIG1vdW50QXQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0V2ZW50U3VwcG9ydGVkKCdmb2N1c2luJykpIHtcbiAgICAgICAgICAgICAgUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyLlJlYWN0RXZlbnRMaXN0ZW5lci50cmFwQnViYmxlZEV2ZW50KHRvcExldmVsVHlwZXMudG9wRm9jdXMsICdmb2N1c2luJywgbW91bnRBdCk7XG4gICAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudCh0b3BMZXZlbFR5cGVzLnRvcEJsdXIsICdmb2N1c291dCcsIG1vdW50QXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXNMaXN0ZW5pbmdbdG9wTGV2ZWxUeXBlcy50b3BCbHVyXSA9IHRydWU7XG4gICAgICAgICAgICBpc0xpc3RlbmluZ1t0b3BMZXZlbFR5cGVzLnRvcEZvY3VzXSA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmICh0b3BFdmVudE1hcHBpbmcuaGFzT3duUHJvcGVydHkoZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICAgIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcEJ1YmJsZWRFdmVudChkZXBlbmRlbmN5LCB0b3BFdmVudE1hcHBpbmdbZGVwZW5kZW5jeV0sIG1vdW50QXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpc0xpc3RlbmluZ1tkZXBlbmRlbmN5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYXBCdWJibGVkRXZlbnQ6IGZ1bmN0aW9uKHRvcExldmVsVHlwZSwgaGFuZGxlckJhc2VOYW1lLCBoYW5kbGUpIHtcbiAgICAgIHJldHVybiBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLnRyYXBCdWJibGVkRXZlbnQodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSk7XG4gICAgfSxcbiAgICB0cmFwQ2FwdHVyZWRFdmVudDogZnVuY3Rpb24odG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSkge1xuICAgICAgcmV0dXJuIFJlYWN0QnJvd3NlckV2ZW50RW1pdHRlci5SZWFjdEV2ZW50TGlzdGVuZXIudHJhcENhcHR1cmVkRXZlbnQodG9wTGV2ZWxUeXBlLCBoYW5kbGVyQmFzZU5hbWUsIGhhbmRsZSk7XG4gICAgfSxcbiAgICBlbnN1cmVTY3JvbGxWYWx1ZU1vbml0b3Jpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGhhc0V2ZW50UGFnZVhZID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaGFzRXZlbnRQYWdlWFkgPSBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiAncGFnZVgnIGluIGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdNb3VzZUV2ZW50Jyk7XG4gICAgICB9XG4gICAgICBpZiAoIWhhc0V2ZW50UGFnZVhZICYmICFpc01vbml0b3JpbmdTY3JvbGxWYWx1ZSkge1xuICAgICAgICB2YXIgcmVmcmVzaCA9IFZpZXdwb3J0TWV0cmljcy5yZWZyZXNoU2Nyb2xsVmFsdWVzO1xuICAgICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuUmVhY3RFdmVudExpc3RlbmVyLm1vbml0b3JTY3JvbGxWYWx1ZShyZWZyZXNoKTtcbiAgICAgICAgaXNNb25pdG9yaW5nU2Nyb2xsVmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RCcm93c2VyRXZlbnRFbWl0dGVyO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIGZ1bmN0aW9uIGNoZWNrTWFzayh2YWx1ZSwgYml0bWFzaykge1xuICAgIHJldHVybiAodmFsdWUgJiBiaXRtYXNrKSA9PT0gYml0bWFzaztcbiAgfVxuICB2YXIgRE9NUHJvcGVydHlJbmplY3Rpb24gPSB7XG4gICAgTVVTVF9VU0VfUFJPUEVSVFk6IDB4MSxcbiAgICBIQVNfU0lERV9FRkZFQ1RTOiAweDIsXG4gICAgSEFTX0JPT0xFQU5fVkFMVUU6IDB4NCxcbiAgICBIQVNfTlVNRVJJQ19WQUxVRTogMHg4LFxuICAgIEhBU19QT1NJVElWRV9OVU1FUklDX1ZBTFVFOiAweDEwIHwgMHg4LFxuICAgIEhBU19PVkVSTE9BREVEX0JPT0xFQU5fVkFMVUU6IDB4MjAsXG4gICAgaW5qZWN0RE9NUHJvcGVydHlDb25maWc6IGZ1bmN0aW9uKGRvbVByb3BlcnR5Q29uZmlnKSB7XG4gICAgICB2YXIgSW5qZWN0aW9uID0gRE9NUHJvcGVydHlJbmplY3Rpb247XG4gICAgICB2YXIgUHJvcGVydGllcyA9IGRvbVByb3BlcnR5Q29uZmlnLlByb3BlcnRpZXMgfHwge307XG4gICAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXNwYWNlcyA9IGRvbVByb3BlcnR5Q29uZmlnLkRPTUF0dHJpYnV0ZU5hbWVzcGFjZXMgfHwge307XG4gICAgICB2YXIgRE9NQXR0cmlidXRlTmFtZXMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01BdHRyaWJ1dGVOYW1lcyB8fCB7fTtcbiAgICAgIHZhciBET01Qcm9wZXJ0eU5hbWVzID0gZG9tUHJvcGVydHlDb25maWcuRE9NUHJvcGVydHlOYW1lcyB8fCB7fTtcbiAgICAgIHZhciBET01NdXRhdGlvbk1ldGhvZHMgPSBkb21Qcm9wZXJ0eUNvbmZpZy5ET01NdXRhdGlvbk1ldGhvZHMgfHwge307XG4gICAgICBpZiAoZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGUpIHtcbiAgICAgICAgRE9NUHJvcGVydHkuX2lzQ3VzdG9tQXR0cmlidXRlRnVuY3Rpb25zLnB1c2goZG9tUHJvcGVydHlDb25maWcuaXNDdXN0b21BdHRyaWJ1dGUpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gUHJvcGVydGllcykge1xuICAgICAgICAhIURPTVByb3BlcnR5LnByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ2luamVjdERPTVByb3BlcnR5Q29uZmlnKC4uLik6IFlvdVxcJ3JlIHRyeWluZyB0byBpbmplY3QgRE9NIHByb3BlcnR5ICcgKyAnXFwnJXNcXCcgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiBpbmplY3RlZC4gWW91IG1heSBiZSBhY2NpZGVudGFsbHkgJyArICdpbmplY3RpbmcgdGhlIHNhbWUgRE9NIHByb3BlcnR5IGNvbmZpZyB0d2ljZSwgb3IgeW91IG1heSBiZSAnICsgJ2luamVjdGluZyB0d28gY29uZmlncyB0aGF0IGhhdmUgY29uZmxpY3RpbmcgcHJvcGVydHkgbmFtZXMuJywgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgdmFyIGxvd2VyQ2FzZWQgPSBwcm9wTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YXIgcHJvcENvbmZpZyA9IFByb3BlcnRpZXNbcHJvcE5hbWVdO1xuICAgICAgICB2YXIgcHJvcGVydHlJbmZvID0ge1xuICAgICAgICAgIGF0dHJpYnV0ZU5hbWU6IGxvd2VyQ2FzZWQsXG4gICAgICAgICAgYXR0cmlidXRlTmFtZXNwYWNlOiBudWxsLFxuICAgICAgICAgIHByb3BlcnR5TmFtZTogcHJvcE5hbWUsXG4gICAgICAgICAgbXV0YXRpb25NZXRob2Q6IG51bGwsXG4gICAgICAgICAgbXVzdFVzZVByb3BlcnR5OiBjaGVja01hc2socHJvcENvbmZpZywgSW5qZWN0aW9uLk1VU1RfVVNFX1BST1BFUlRZKSxcbiAgICAgICAgICBoYXNTaWRlRWZmZWN0czogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5IQVNfU0lERV9FRkZFQ1RTKSxcbiAgICAgICAgICBoYXNCb29sZWFuVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX0JPT0xFQU5fVkFMVUUpLFxuICAgICAgICAgIGhhc051bWVyaWNWYWx1ZTogY2hlY2tNYXNrKHByb3BDb25maWcsIEluamVjdGlvbi5IQVNfTlVNRVJJQ19WQUxVRSksXG4gICAgICAgICAgaGFzUG9zaXRpdmVOdW1lcmljVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX1BPU0lUSVZFX05VTUVSSUNfVkFMVUUpLFxuICAgICAgICAgIGhhc092ZXJsb2FkZWRCb29sZWFuVmFsdWU6IGNoZWNrTWFzayhwcm9wQ29uZmlnLCBJbmplY3Rpb24uSEFTX09WRVJMT0FERURfQk9PTEVBTl9WQUxVRSlcbiAgICAgICAgfTtcbiAgICAgICAgIShwcm9wZXJ0eUluZm8ubXVzdFVzZVByb3BlcnR5IHx8ICFwcm9wZXJ0eUluZm8uaGFzU2lkZUVmZmVjdHMpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RPTVByb3BlcnR5OiBQcm9wZXJ0aWVzIHRoYXQgaGF2ZSBzaWRlIGVmZmVjdHMgbXVzdCB1c2UgcHJvcGVydHk6ICVzJywgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgIShwcm9wZXJ0eUluZm8uaGFzQm9vbGVhblZhbHVlICsgcHJvcGVydHlJbmZvLmhhc051bWVyaWNWYWx1ZSArIHByb3BlcnR5SW5mby5oYXNPdmVybG9hZGVkQm9vbGVhblZhbHVlIDw9IDEpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0RPTVByb3BlcnR5OiBWYWx1ZSBjYW4gYmUgb25lIG9mIGJvb2xlYW4sIG92ZXJsb2FkZWQgYm9vbGVhbiwgb3IgJyArICdudW1lcmljIHZhbHVlLCBidXQgbm90IGEgY29tYmluYXRpb246ICVzJywgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBET01Qcm9wZXJ0eS5nZXRQb3NzaWJsZVN0YW5kYXJkTmFtZVtsb3dlckNhc2VkXSA9IHByb3BOYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChET01BdHRyaWJ1dGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IERPTUF0dHJpYnV0ZU5hbWVzW3Byb3BOYW1lXTtcbiAgICAgICAgICBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZSA9IGF0dHJpYnV0ZU5hbWU7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIERPTVByb3BlcnR5LmdldFBvc3NpYmxlU3RhbmRhcmROYW1lW2F0dHJpYnV0ZU5hbWVdID0gcHJvcE5hbWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChET01BdHRyaWJ1dGVOYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICAgIHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lc3BhY2UgPSBET01BdHRyaWJ1dGVOYW1lc3BhY2VzW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoRE9NUHJvcGVydHlOYW1lcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICBwcm9wZXJ0eUluZm8ucHJvcGVydHlOYW1lID0gRE9NUHJvcGVydHlOYW1lc1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERPTU11dGF0aW9uTWV0aG9kcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICBwcm9wZXJ0eUluZm8ubXV0YXRpb25NZXRob2QgPSBET01NdXRhdGlvbk1ldGhvZHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICAgIERPTVByb3BlcnR5LnByb3BlcnRpZXNbcHJvcE5hbWVdID0gcHJvcGVydHlJbmZvO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgdmFyIEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgPSAnOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRCc7XG4gIHZhciBET01Qcm9wZXJ0eSA9IHtcbiAgICBJRF9BVFRSSUJVVEVfTkFNRTogJ2RhdGEtcmVhY3RpZCcsXG4gICAgUk9PVF9BVFRSSUJVVEVfTkFNRTogJ2RhdGEtcmVhY3Ryb290JyxcbiAgICBBVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSOiBBVFRSSUJVVEVfTkFNRV9TVEFSVF9DSEFSLFxuICAgIEFUVFJJQlVURV9OQU1FX0NIQVI6IEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgKyAnXFxcXC0uMC05XFxcXHVCN1xcXFx1MDMwMC1cXFxcdTAzNkZcXFxcdTIwM0YtXFxcXHUyMDQwJyxcbiAgICBwcm9wZXJ0aWVzOiB7fSxcbiAgICBnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZTogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHt9IDogbnVsbCxcbiAgICBfaXNDdXN0b21BdHRyaWJ1dGVGdW5jdGlvbnM6IFtdLFxuICAgIGlzQ3VzdG9tQXR0cmlidXRlOiBmdW5jdGlvbihhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgaXNDdXN0b21BdHRyaWJ1dGVGbiA9IERPTVByb3BlcnR5Ll9pc0N1c3RvbUF0dHJpYnV0ZUZ1bmN0aW9uc1tpXTtcbiAgICAgICAgaWYgKGlzQ3VzdG9tQXR0cmlidXRlRm4oYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgaW5qZWN0aW9uOiBET01Qcm9wZXJ0eUluamVjdGlvblxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IERPTVByb3BlcnR5O1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdERPTUNvbXBvbmVudEZsYWdzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01Db21wb25lbnRGbGFncyA9IHtcbiAgaGFzQ2FjaGVkQ2hpbGROb2RlczogMSA8PCAwXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RE9NQ29tcG9uZW50RmxhZ3M7IiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBET01Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vRE9NUHJvcGVydHknKTtcbiAgdmFyIFJlYWN0RE9NQ29tcG9uZW50RmxhZ3MgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50RmxhZ3MnKTtcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIgQVRUUl9OQU1FID0gRE9NUHJvcGVydHkuSURfQVRUUklCVVRFX05BTUU7XG4gIHZhciBGbGFncyA9IFJlYWN0RE9NQ29tcG9uZW50RmxhZ3M7XG4gIHZhciBpbnRlcm5hbEluc3RhbmNlS2V5ID0gJ19fcmVhY3RJbnRlcm5hbEluc3RhbmNlJCcgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcbiAgZnVuY3Rpb24gZ2V0UmVuZGVyZWROYXRpdmVPclRleHRGcm9tQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgIHZhciByZW5kZXJlZDtcbiAgICB3aGlsZSAocmVuZGVyZWQgPSBjb21wb25lbnQuX3JlbmRlcmVkQ29tcG9uZW50KSB7XG4gICAgICBjb21wb25lbnQgPSByZW5kZXJlZDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudDtcbiAgfVxuICBmdW5jdGlvbiBwcmVjYWNoZU5vZGUoaW5zdCwgbm9kZSkge1xuICAgIHZhciBuYXRpdmVJbnN0ID0gZ2V0UmVuZGVyZWROYXRpdmVPclRleHRGcm9tQ29tcG9uZW50KGluc3QpO1xuICAgIG5hdGl2ZUluc3QuX25hdGl2ZU5vZGUgPSBub2RlO1xuICAgIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSBuYXRpdmVJbnN0O1xuICB9XG4gIGZ1bmN0aW9uIHVuY2FjaGVOb2RlKGluc3QpIHtcbiAgICB2YXIgbm9kZSA9IGluc3QuX25hdGl2ZU5vZGU7XG4gICAgaWYgKG5vZGUpIHtcbiAgICAgIGRlbGV0ZSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICAgICAgaW5zdC5fbmF0aXZlTm9kZSA9IG51bGw7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHByZWNhY2hlQ2hpbGROb2RlcyhpbnN0LCBub2RlKSB7XG4gICAgaWYgKGluc3QuX2ZsYWdzICYgRmxhZ3MuaGFzQ2FjaGVkQ2hpbGROb2Rlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgY2hpbGRyZW4gPSBpbnN0Ll9yZW5kZXJlZENoaWxkcmVuO1xuICAgIHZhciBjaGlsZE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgb3V0ZXI6IGZvciAodmFyIG5hbWUgaW4gY2hpbGRyZW4pIHtcbiAgICAgIGlmICghY2hpbGRyZW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRJbnN0ID0gY2hpbGRyZW5bbmFtZV07XG4gICAgICB2YXIgY2hpbGRJRCA9IGdldFJlbmRlcmVkTmF0aXZlT3JUZXh0RnJvbUNvbXBvbmVudChjaGlsZEluc3QpLl9kb21JRDtcbiAgICAgIGlmIChjaGlsZElEID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBmb3IgKDsgY2hpbGROb2RlICE9PSBudWxsOyBjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgaWYgKGNoaWxkTm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBjaGlsZE5vZGUuZ2V0QXR0cmlidXRlKEFUVFJfTkFNRSkgPT09IFN0cmluZyhjaGlsZElEKSB8fCBjaGlsZE5vZGUubm9kZVR5cGUgPT09IDggJiYgY2hpbGROb2RlLm5vZGVWYWx1ZSA9PT0gJyByZWFjdC10ZXh0OiAnICsgY2hpbGRJRCArICcgJyB8fCBjaGlsZE5vZGUubm9kZVR5cGUgPT09IDggJiYgY2hpbGROb2RlLm5vZGVWYWx1ZSA9PT0gJyByZWFjdC1lbXB0eTogJyArIGNoaWxkSUQgKyAnICcpIHtcbiAgICAgICAgICBwcmVjYWNoZU5vZGUoY2hpbGRJbnN0LCBjaGlsZE5vZGUpO1xuICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVW5hYmxlIHRvIGZpbmQgZWxlbWVudCB3aXRoIElEICVzLicsIGNoaWxkSUQpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgaW5zdC5fZmxhZ3MgfD0gRmxhZ3MuaGFzQ2FjaGVkQ2hpbGROb2RlcztcbiAgfVxuICBmdW5jdGlvbiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShub2RlKSB7XG4gICAgaWYgKG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0pIHtcbiAgICAgIHJldHVybiBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICAgIH1cbiAgICB2YXIgcGFyZW50cyA9IFtdO1xuICAgIHdoaWxlICghbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSkge1xuICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjbG9zZXN0O1xuICAgIHZhciBpbnN0O1xuICAgIGZvciAoOyBub2RlICYmIChpbnN0ID0gbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSk7IG5vZGUgPSBwYXJlbnRzLnBvcCgpKSB7XG4gICAgICBjbG9zZXN0ID0gaW5zdDtcbiAgICAgIGlmIChwYXJlbnRzLmxlbmd0aCkge1xuICAgICAgICBwcmVjYWNoZUNoaWxkTm9kZXMoaW5zdCwgbm9kZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbG9zZXN0O1xuICB9XG4gIGZ1bmN0aW9uIGdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICAgIHZhciBpbnN0ID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobm9kZSk7XG4gICAgaWYgKGluc3QgIT0gbnVsbCAmJiBpbnN0Ll9uYXRpdmVOb2RlID09PSBub2RlKSB7XG4gICAgICByZXR1cm4gaW5zdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldE5vZGVGcm9tSW5zdGFuY2UoaW5zdCkge1xuICAgICEoaW5zdC5fbmF0aXZlTm9kZSAhPT0gdW5kZWZpbmVkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdnZXROb2RlRnJvbUluc3RhbmNlOiBJbnZhbGlkIGFyZ3VtZW50LicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAoaW5zdC5fbmF0aXZlTm9kZSkge1xuICAgICAgcmV0dXJuIGluc3QuX25hdGl2ZU5vZGU7XG4gICAgfVxuICAgIHZhciBwYXJlbnRzID0gW107XG4gICAgd2hpbGUgKCFpbnN0Ll9uYXRpdmVOb2RlKSB7XG4gICAgICBwYXJlbnRzLnB1c2goaW5zdCk7XG4gICAgICAhaW5zdC5fbmF0aXZlUGFyZW50ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0IERPTSB0cmVlIHJvb3Qgc2hvdWxkIGFsd2F5cyBoYXZlIGEgbm9kZSByZWZlcmVuY2UuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgaW5zdCA9IGluc3QuX25hdGl2ZVBhcmVudDtcbiAgICB9XG4gICAgZm9yICg7IHBhcmVudHMubGVuZ3RoOyBpbnN0ID0gcGFyZW50cy5wb3AoKSkge1xuICAgICAgcHJlY2FjaGVDaGlsZE5vZGVzKGluc3QsIGluc3QuX25hdGl2ZU5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gaW5zdC5fbmF0aXZlTm9kZTtcbiAgfVxuICB2YXIgUmVhY3RET01Db21wb25lbnRUcmVlID0ge1xuICAgIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOiBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxcbiAgICBnZXRJbnN0YW5jZUZyb21Ob2RlOiBnZXRJbnN0YW5jZUZyb21Ob2RlLFxuICAgIGdldE5vZGVGcm9tSW5zdGFuY2U6IGdldE5vZGVGcm9tSW5zdGFuY2UsXG4gICAgcHJlY2FjaGVDaGlsZE5vZGVzOiBwcmVjYWNoZUNoaWxkTm9kZXMsXG4gICAgcHJlY2FjaGVOb2RlOiBwcmVjYWNoZU5vZGUsXG4gICAgdW5jYWNoZU5vZGU6IHVuY2FjaGVOb2RlXG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01Db21wb25lbnRUcmVlO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbiAgdmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgdmFsaWRhdGVET01OZXN0aW5nID0gZW1wdHlGdW5jdGlvbjtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgc3BlY2lhbFRhZ3MgPSBbJ2FkZHJlc3MnLCAnYXBwbGV0JywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdiYXNlJywgJ2Jhc2Vmb250JywgJ2Jnc291bmQnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYXB0aW9uJywgJ2NlbnRlcicsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGQnLCAnZGV0YWlscycsICdkaXInLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2ZyYW1lJywgJ2ZyYW1lc2V0JywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaXNpbmRleCcsICdsaScsICdsaW5rJywgJ2xpc3RpbmcnLCAnbWFpbicsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICduYXYnLCAnbm9lbWJlZCcsICdub2ZyYW1lcycsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAncCcsICdwYXJhbScsICdwbGFpbnRleHQnLCAncHJlJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzb3VyY2UnLCAnc3R5bGUnLCAnc3VtbWFyeScsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZW1wbGF0ZScsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1bCcsICd3YnInLCAneG1wJ107XG4gICAgdmFyIGluU2NvcGVUYWdzID0gWydhcHBsZXQnLCAnY2FwdGlvbicsICdodG1sJywgJ3RhYmxlJywgJ3RkJywgJ3RoJywgJ21hcnF1ZWUnLCAnb2JqZWN0JywgJ3RlbXBsYXRlJywgJ2ZvcmVpZ25PYmplY3QnLCAnZGVzYycsICd0aXRsZSddO1xuICAgIHZhciBidXR0b25TY29wZVRhZ3MgPSBpblNjb3BlVGFncy5jb25jYXQoWydidXR0b24nXSk7XG4gICAgdmFyIGltcGxpZWRFbmRUYWdzID0gWydkZCcsICdkdCcsICdsaScsICdvcHRpb24nLCAnb3B0Z3JvdXAnLCAncCcsICdycCcsICdydCddO1xuICAgIHZhciBlbXB0eUFuY2VzdG9ySW5mbyA9IHtcbiAgICAgIGN1cnJlbnQ6IG51bGwsXG4gICAgICBmb3JtVGFnOiBudWxsLFxuICAgICAgYVRhZ0luU2NvcGU6IG51bGwsXG4gICAgICBidXR0b25UYWdJblNjb3BlOiBudWxsLFxuICAgICAgbm9iclRhZ0luU2NvcGU6IG51bGwsXG4gICAgICBwVGFnSW5CdXR0b25TY29wZTogbnVsbCxcbiAgICAgIGxpc3RJdGVtVGFnQXV0b2Nsb3Npbmc6IG51bGwsXG4gICAgICBkbEl0ZW1UYWdBdXRvY2xvc2luZzogbnVsbFxuICAgIH07XG4gICAgdmFyIHVwZGF0ZWRBbmNlc3RvckluZm8gPSBmdW5jdGlvbihvbGRJbmZvLCB0YWcsIGluc3RhbmNlKSB7XG4gICAgICB2YXIgYW5jZXN0b3JJbmZvID0gX2Fzc2lnbih7fSwgb2xkSW5mbyB8fCBlbXB0eUFuY2VzdG9ySW5mbyk7XG4gICAgICB2YXIgaW5mbyA9IHtcbiAgICAgICAgdGFnOiB0YWcsXG4gICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgICAgfTtcbiAgICAgIGlmIChpblNjb3BlVGFncy5pbmRleE9mKHRhZykgIT09IC0xKSB7XG4gICAgICAgIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZSA9IG51bGw7XG4gICAgICAgIGFuY2VzdG9ySW5mby5idXR0b25UYWdJblNjb3BlID0gbnVsbDtcbiAgICAgICAgYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChidXR0b25TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgICBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGUgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHNwZWNpYWxUYWdzLmluZGV4T2YodGFnKSAhPT0gLTEgJiYgdGFnICE9PSAnYWRkcmVzcycgJiYgdGFnICE9PSAnZGl2JyAmJiB0YWcgIT09ICdwJykge1xuICAgICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgICAgIGFuY2VzdG9ySW5mby5kbEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgICB9XG4gICAgICBhbmNlc3RvckluZm8uY3VycmVudCA9IGluZm87XG4gICAgICBpZiAodGFnID09PSAnZm9ybScpIHtcbiAgICAgICAgYW5jZXN0b3JJbmZvLmZvcm1UYWcgPSBpbmZvO1xuICAgICAgfVxuICAgICAgaWYgKHRhZyA9PT0gJ2EnKSB7XG4gICAgICAgIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZSA9IGluZm87XG4gICAgICB9XG4gICAgICBpZiAodGFnID09PSAnYnV0dG9uJykge1xuICAgICAgICBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZSA9IGluZm87XG4gICAgICB9XG4gICAgICBpZiAodGFnID09PSAnbm9icicpIHtcbiAgICAgICAgYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlID0gaW5mbztcbiAgICAgIH1cbiAgICAgIGlmICh0YWcgPT09ICdwJykge1xuICAgICAgICBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGUgPSBpbmZvO1xuICAgICAgfVxuICAgICAgaWYgKHRhZyA9PT0gJ2xpJykge1xuICAgICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IGluZm87XG4gICAgICB9XG4gICAgICBpZiAodGFnID09PSAnZGQnIHx8IHRhZyA9PT0gJ2R0Jykge1xuICAgICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBpbmZvO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mbztcbiAgICB9O1xuICAgIHZhciBpc1RhZ1ZhbGlkV2l0aFBhcmVudCA9IGZ1bmN0aW9uKHRhZywgcGFyZW50VGFnKSB7XG4gICAgICBzd2l0Y2ggKHBhcmVudFRhZykge1xuICAgICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICAgIHJldHVybiB0YWcgPT09ICdvcHRpb24nIHx8IHRhZyA9PT0gJ29wdGdyb3VwJyB8fCB0YWcgPT09ICcjdGV4dCc7XG4gICAgICAgIGNhc2UgJ29wdGdyb3VwJzpcbiAgICAgICAgICByZXR1cm4gdGFnID09PSAnb3B0aW9uJyB8fCB0YWcgPT09ICcjdGV4dCc7XG4gICAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgICAgcmV0dXJuIHRhZyA9PT0gJyN0ZXh0JztcbiAgICAgICAgY2FzZSAndHInOlxuICAgICAgICAgIHJldHVybiB0YWcgPT09ICd0aCcgfHwgdGFnID09PSAndGQnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgICAgY2FzZSAndGJvZHknOlxuICAgICAgICBjYXNlICd0aGVhZCc6XG4gICAgICAgIGNhc2UgJ3Rmb290JzpcbiAgICAgICAgICByZXR1cm4gdGFnID09PSAndHInIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgICAgY2FzZSAnY29sZ3JvdXAnOlxuICAgICAgICAgIHJldHVybiB0YWcgPT09ICdjb2wnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgICAgIHJldHVybiB0YWcgPT09ICdjYXB0aW9uJyB8fCB0YWcgPT09ICdjb2xncm91cCcgfHwgdGFnID09PSAndGJvZHknIHx8IHRhZyA9PT0gJ3Rmb290JyB8fCB0YWcgPT09ICd0aGVhZCcgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgICBjYXNlICdoZWFkJzpcbiAgICAgICAgICByZXR1cm4gdGFnID09PSAnYmFzZScgfHwgdGFnID09PSAnYmFzZWZvbnQnIHx8IHRhZyA9PT0gJ2Jnc291bmQnIHx8IHRhZyA9PT0gJ2xpbmsnIHx8IHRhZyA9PT0gJ21ldGEnIHx8IHRhZyA9PT0gJ3RpdGxlJyB8fCB0YWcgPT09ICdub3NjcmlwdCcgfHwgdGFnID09PSAnbm9mcmFtZXMnIHx8IHRhZyA9PT0gJ3N0eWxlJyB8fCB0YWcgPT09ICdzY3JpcHQnIHx8IHRhZyA9PT0gJ3RlbXBsYXRlJztcbiAgICAgICAgY2FzZSAnaHRtbCc6XG4gICAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2hlYWQnIHx8IHRhZyA9PT0gJ2JvZHknO1xuICAgICAgICBjYXNlICcjZG9jdW1lbnQnOlxuICAgICAgICAgIHJldHVybiB0YWcgPT09ICdodG1sJztcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICAgIGNhc2UgJ2gxJzpcbiAgICAgICAgY2FzZSAnaDInOlxuICAgICAgICBjYXNlICdoMyc6XG4gICAgICAgIGNhc2UgJ2g0JzpcbiAgICAgICAgY2FzZSAnaDUnOlxuICAgICAgICBjYXNlICdoNic6XG4gICAgICAgICAgcmV0dXJuIHBhcmVudFRhZyAhPT0gJ2gxJyAmJiBwYXJlbnRUYWcgIT09ICdoMicgJiYgcGFyZW50VGFnICE9PSAnaDMnICYmIHBhcmVudFRhZyAhPT0gJ2g0JyAmJiBwYXJlbnRUYWcgIT09ICdoNScgJiYgcGFyZW50VGFnICE9PSAnaDYnO1xuICAgICAgICBjYXNlICdycCc6XG4gICAgICAgIGNhc2UgJ3J0JzpcbiAgICAgICAgICByZXR1cm4gaW1wbGllZEVuZFRhZ3MuaW5kZXhPZihwYXJlbnRUYWcpID09PSAtMTtcbiAgICAgICAgY2FzZSAnYm9keSc6XG4gICAgICAgIGNhc2UgJ2NhcHRpb24nOlxuICAgICAgICBjYXNlICdjb2wnOlxuICAgICAgICBjYXNlICdjb2xncm91cCc6XG4gICAgICAgIGNhc2UgJ2ZyYW1lJzpcbiAgICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICBjYXNlICd0Ym9keSc6XG4gICAgICAgIGNhc2UgJ3RkJzpcbiAgICAgICAgY2FzZSAndGZvb3QnOlxuICAgICAgICBjYXNlICd0aCc6XG4gICAgICAgIGNhc2UgJ3RoZWFkJzpcbiAgICAgICAgY2FzZSAndHInOlxuICAgICAgICAgIHJldHVybiBwYXJlbnRUYWcgPT0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgdmFyIGZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcgPSBmdW5jdGlvbih0YWcsIGFuY2VzdG9ySW5mbykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSAnYWRkcmVzcyc6XG4gICAgICAgIGNhc2UgJ2FydGljbGUnOlxuICAgICAgICBjYXNlICdhc2lkZSc6XG4gICAgICAgIGNhc2UgJ2Jsb2NrcXVvdGUnOlxuICAgICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICBjYXNlICdkZXRhaWxzJzpcbiAgICAgICAgY2FzZSAnZGlhbG9nJzpcbiAgICAgICAgY2FzZSAnZGlyJzpcbiAgICAgICAgY2FzZSAnZGl2JzpcbiAgICAgICAgY2FzZSAnZGwnOlxuICAgICAgICBjYXNlICdmaWVsZHNldCc6XG4gICAgICAgIGNhc2UgJ2ZpZ2NhcHRpb24nOlxuICAgICAgICBjYXNlICdmaWd1cmUnOlxuICAgICAgICBjYXNlICdmb290ZXInOlxuICAgICAgICBjYXNlICdoZWFkZXInOlxuICAgICAgICBjYXNlICdoZ3JvdXAnOlxuICAgICAgICBjYXNlICdtYWluJzpcbiAgICAgICAgY2FzZSAnbWVudSc6XG4gICAgICAgIGNhc2UgJ25hdic6XG4gICAgICAgIGNhc2UgJ29sJzpcbiAgICAgICAgY2FzZSAncCc6XG4gICAgICAgIGNhc2UgJ3NlY3Rpb24nOlxuICAgICAgICBjYXNlICdzdW1tYXJ5JzpcbiAgICAgICAgY2FzZSAndWwnOlxuICAgICAgICBjYXNlICdwcmUnOlxuICAgICAgICBjYXNlICdsaXN0aW5nJzpcbiAgICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgICBjYXNlICdocic6XG4gICAgICAgIGNhc2UgJ3htcCc6XG4gICAgICAgIGNhc2UgJ2gxJzpcbiAgICAgICAgY2FzZSAnaDInOlxuICAgICAgICBjYXNlICdoMyc6XG4gICAgICAgIGNhc2UgJ2g0JzpcbiAgICAgICAgY2FzZSAnaDUnOlxuICAgICAgICBjYXNlICdoNic6XG4gICAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZTtcbiAgICAgICAgY2FzZSAnZm9ybSc6XG4gICAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5mb3JtVGFnIHx8IGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZTtcbiAgICAgICAgY2FzZSAnbGknOlxuICAgICAgICAgIHJldHVybiBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZztcbiAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICBjYXNlICdkdCc6XG4gICAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5kbEl0ZW1UYWdBdXRvY2xvc2luZztcbiAgICAgICAgY2FzZSAnYnV0dG9uJzpcbiAgICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLmJ1dHRvblRhZ0luU2NvcGU7XG4gICAgICAgIGNhc2UgJ2EnOlxuICAgICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYVRhZ0luU2NvcGU7XG4gICAgICAgIGNhc2UgJ25vYnInOlxuICAgICAgICAgIHJldHVybiBhbmNlc3RvckluZm8ubm9iclRhZ0luU2NvcGU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICAgIHZhciBmaW5kT3duZXJTdGFjayA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gICAgICBpZiAoIWluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBzdGFjayA9IFtdO1xuICAgICAgZG8ge1xuICAgICAgICBzdGFjay5wdXNoKGluc3RhbmNlKTtcbiAgICAgIH0gd2hpbGUgKGluc3RhbmNlID0gaW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50Ll9vd25lcik7XG4gICAgICBzdGFjay5yZXZlcnNlKCk7XG4gICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgZGlkV2FybiA9IHt9O1xuICAgIHZhbGlkYXRlRE9NTmVzdGluZyA9IGZ1bmN0aW9uKGNoaWxkVGFnLCBjaGlsZEluc3RhbmNlLCBhbmNlc3RvckluZm8pIHtcbiAgICAgIGFuY2VzdG9ySW5mbyA9IGFuY2VzdG9ySW5mbyB8fCBlbXB0eUFuY2VzdG9ySW5mbztcbiAgICAgIHZhciBwYXJlbnRJbmZvID0gYW5jZXN0b3JJbmZvLmN1cnJlbnQ7XG4gICAgICB2YXIgcGFyZW50VGFnID0gcGFyZW50SW5mbyAmJiBwYXJlbnRJbmZvLnRhZztcbiAgICAgIHZhciBpbnZhbGlkUGFyZW50ID0gaXNUYWdWYWxpZFdpdGhQYXJlbnQoY2hpbGRUYWcsIHBhcmVudFRhZykgPyBudWxsIDogcGFyZW50SW5mbztcbiAgICAgIHZhciBpbnZhbGlkQW5jZXN0b3IgPSBpbnZhbGlkUGFyZW50ID8gbnVsbCA6IGZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWcoY2hpbGRUYWcsIGFuY2VzdG9ySW5mbyk7XG4gICAgICB2YXIgcHJvYmxlbWF0aWMgPSBpbnZhbGlkUGFyZW50IHx8IGludmFsaWRBbmNlc3RvcjtcbiAgICAgIGlmIChwcm9ibGVtYXRpYykge1xuICAgICAgICB2YXIgYW5jZXN0b3JUYWcgPSBwcm9ibGVtYXRpYy50YWc7XG4gICAgICAgIHZhciBhbmNlc3Rvckluc3RhbmNlID0gcHJvYmxlbWF0aWMuaW5zdGFuY2U7XG4gICAgICAgIHZhciBjaGlsZE93bmVyID0gY2hpbGRJbnN0YW5jZSAmJiBjaGlsZEluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgIHZhciBhbmNlc3Rvck93bmVyID0gYW5jZXN0b3JJbnN0YW5jZSAmJiBhbmNlc3Rvckluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5fb3duZXI7XG4gICAgICAgIHZhciBjaGlsZE93bmVycyA9IGZpbmRPd25lclN0YWNrKGNoaWxkT3duZXIpO1xuICAgICAgICB2YXIgYW5jZXN0b3JPd25lcnMgPSBmaW5kT3duZXJTdGFjayhhbmNlc3Rvck93bmVyKTtcbiAgICAgICAgdmFyIG1pblN0YWNrTGVuID0gTWF0aC5taW4oY2hpbGRPd25lcnMubGVuZ3RoLCBhbmNlc3Rvck93bmVycy5sZW5ndGgpO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGRlZXBlc3RDb21tb24gPSAtMTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG1pblN0YWNrTGVuOyBpKyspIHtcbiAgICAgICAgICBpZiAoY2hpbGRPd25lcnNbaV0gPT09IGFuY2VzdG9yT3duZXJzW2ldKSB7XG4gICAgICAgICAgICBkZWVwZXN0Q29tbW9uID0gaTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBVTktOT1dOID0gJyh1bmtub3duKSc7XG4gICAgICAgIHZhciBjaGlsZE93bmVyTmFtZXMgPSBjaGlsZE93bmVycy5zbGljZShkZWVwZXN0Q29tbW9uICsgMSkubWFwKGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdC5nZXROYW1lKCkgfHwgVU5LTk9XTjtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBhbmNlc3Rvck93bmVyTmFtZXMgPSBhbmNlc3Rvck93bmVycy5zbGljZShkZWVwZXN0Q29tbW9uICsgMSkubWFwKGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgICAgICByZXR1cm4gaW5zdC5nZXROYW1lKCkgfHwgVU5LTk9XTjtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBvd25lckluZm8gPSBbXS5jb25jYXQoZGVlcGVzdENvbW1vbiAhPT0gLTEgPyBjaGlsZE93bmVyc1tkZWVwZXN0Q29tbW9uXS5nZXROYW1lKCkgfHwgVU5LTk9XTiA6IFtdLCBhbmNlc3Rvck93bmVyTmFtZXMsIGFuY2VzdG9yVGFnLCBpbnZhbGlkQW5jZXN0b3IgPyBbJy4uLiddIDogW10sIGNoaWxkT3duZXJOYW1lcywgY2hpbGRUYWcpLmpvaW4oJyA+ICcpO1xuICAgICAgICB2YXIgd2FybktleSA9ICEhaW52YWxpZFBhcmVudCArICd8JyArIGNoaWxkVGFnICsgJ3wnICsgYW5jZXN0b3JUYWcgKyAnfCcgKyBvd25lckluZm87XG4gICAgICAgIGlmIChkaWRXYXJuW3dhcm5LZXldKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGRpZFdhcm5bd2FybktleV0gPSB0cnVlO1xuICAgICAgICB2YXIgdGFnRGlzcGxheU5hbWUgPSBjaGlsZFRhZztcbiAgICAgICAgaWYgKGNoaWxkVGFnICE9PSAnI3RleHQnKSB7XG4gICAgICAgICAgdGFnRGlzcGxheU5hbWUgPSAnPCcgKyBjaGlsZFRhZyArICc+JztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW52YWxpZFBhcmVudCkge1xuICAgICAgICAgIHZhciBpbmZvID0gJyc7XG4gICAgICAgICAgaWYgKGFuY2VzdG9yVGFnID09PSAndGFibGUnICYmIGNoaWxkVGFnID09PSAndHInKSB7XG4gICAgICAgICAgICBpbmZvICs9ICcgQWRkIGEgPHRib2R5PiB0byB5b3VyIGNvZGUgdG8gbWF0Y2ggdGhlIERPTSB0cmVlIGdlbmVyYXRlZCBieSAnICsgJ3RoZSBicm93c2VyLic7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAndmFsaWRhdGVET01OZXN0aW5nKC4uLik6ICVzIGNhbm5vdCBhcHBlYXIgYXMgYSBjaGlsZCBvZiA8JXM+LiAnICsgJ1NlZSAlcy4lcycsIHRhZ0Rpc3BsYXlOYW1lLCBhbmNlc3RvclRhZywgb3duZXJJbmZvLCBpbmZvKSA6IHZvaWQgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ3ZhbGlkYXRlRE9NTmVzdGluZyguLi4pOiAlcyBjYW5ub3QgYXBwZWFyIGFzIGEgZGVzY2VuZGFudCBvZiAnICsgJzwlcz4uIFNlZSAlcy4nLCB0YWdEaXNwbGF5TmFtZSwgYW5jZXN0b3JUYWcsIG93bmVySW5mbykgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHZhbGlkYXRlRE9NTmVzdGluZy51cGRhdGVkQW5jZXN0b3JJbmZvID0gdXBkYXRlZEFuY2VzdG9ySW5mbztcbiAgICB2YWxpZGF0ZURPTU5lc3RpbmcuaXNUYWdWYWxpZEluQ29udGV4dCA9IGZ1bmN0aW9uKHRhZywgYW5jZXN0b3JJbmZvKSB7XG4gICAgICBhbmNlc3RvckluZm8gPSBhbmNlc3RvckluZm8gfHwgZW1wdHlBbmNlc3RvckluZm87XG4gICAgICB2YXIgcGFyZW50SW5mbyA9IGFuY2VzdG9ySW5mby5jdXJyZW50O1xuICAgICAgdmFyIHBhcmVudFRhZyA9IHBhcmVudEluZm8gJiYgcGFyZW50SW5mby50YWc7XG4gICAgICByZXR1cm4gaXNUYWdWYWxpZFdpdGhQYXJlbnQodGFnLCBwYXJlbnRUYWcpICYmICFmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnKHRhZywgYW5jZXN0b3JJbmZvKTtcbiAgICB9O1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gdmFsaWRhdGVET01OZXN0aW5nO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgdmFsaWRhdGVET01OZXN0aW5nID0gcmVxdWlyZSgnLi92YWxpZGF0ZURPTU5lc3RpbmcnKTtcbiAgdmFyIERPQ19OT0RFX1RZUEUgPSA5O1xuICBmdW5jdGlvbiBSZWFjdERPTUNvbnRhaW5lckluZm8odG9wTGV2ZWxXcmFwcGVyLCBub2RlKSB7XG4gICAgdmFyIGluZm8gPSB7XG4gICAgICBfdG9wTGV2ZWxXcmFwcGVyOiB0b3BMZXZlbFdyYXBwZXIsXG4gICAgICBfaWRDb3VudGVyOiAxLFxuICAgICAgX293bmVyRG9jdW1lbnQ6IG5vZGUgPyBub2RlLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFID8gbm9kZSA6IG5vZGUub3duZXJEb2N1bWVudCA6IG51bGwsXG4gICAgICBfbm9kZTogbm9kZSxcbiAgICAgIF90YWc6IG5vZGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgOiBudWxsLFxuICAgICAgX25hbWVzcGFjZVVSSTogbm9kZSA/IG5vZGUubmFtZXNwYWNlVVJJIDogbnVsbFxuICAgIH07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluZm8uX2FuY2VzdG9ySW5mbyA9IG5vZGUgPyB2YWxpZGF0ZURPTU5lc3RpbmcudXBkYXRlZEFuY2VzdG9ySW5mbyhudWxsLCBpbmZvLl90YWcsIG51bGwpIDogbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGluZm87XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUNvbnRhaW5lckluZm87XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RE9NRmVhdHVyZUZsYWdzXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RET01GZWF0dXJlRmxhZ3MgPSB7XG4gIHVzZUNyZWF0ZUVsZW1lbnQ6IHRydWVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RET01GZWF0dXJlRmxhZ3M7IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGFkbGVyMzJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBNT0QgPSA2NTUyMTtcblxuLy8gYWRsZXIzMiBpcyBub3QgY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nLCBhbmQgaXMgb25seSB1c2VkIHRvIHNhbml0eSBjaGVjayB0aGF0XG4vLyBtYXJrdXAgZ2VuZXJhdGVkIG9uIHRoZSBzZXJ2ZXIgbWF0Y2hlcyB0aGUgbWFya3VwIGdlbmVyYXRlZCBvbiB0aGUgY2xpZW50LlxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiAoYSBtb2RpZmllZCB2ZXJzaW9uIG9mIHRoZSBTaGVldEpTIHZlcnNpb24pIGhhcyBiZWVuIG9wdGltaXplZFxuLy8gZm9yIG91ciB1c2UgY2FzZSwgYXQgdGhlIGV4cGVuc2Ugb2YgY29uZm9ybWluZyB0byB0aGUgYWRsZXIzMiBzcGVjaWZpY2F0aW9uXG4vLyBmb3Igbm9uLWFzY2lpIGlucHV0cy5cbmZ1bmN0aW9uIGFkbGVyMzIoZGF0YSkge1xuICB2YXIgYSA9IDE7XG4gIHZhciBiID0gMDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGRhdGEubGVuZ3RoO1xuICB2YXIgbSA9IGwgJiB+MHgzO1xuICB3aGlsZSAoaSA8IG0pIHtcbiAgICB2YXIgbiA9IE1hdGgubWluKGkgKyA0MDk2LCBtKTtcbiAgICBmb3IgKDsgaSA8IG47IGkgKz0gNCkge1xuICAgICAgYiArPSAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSkpICsgKGEgKz0gZGF0YS5jaGFyQ29kZUF0KGkgKyAxKSkgKyAoYSArPSBkYXRhLmNoYXJDb2RlQXQoaSArIDIpKSArIChhICs9IGRhdGEuY2hhckNvZGVBdChpICsgMykpO1xuICAgIH1cbiAgICBhICU9IE1PRDtcbiAgICBiICU9IE1PRDtcbiAgfVxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIGIgKz0gYSArPSBkYXRhLmNoYXJDb2RlQXQoaSk7XG4gIH1cbiAgYSAlPSBNT0Q7XG4gIGIgJT0gTU9EO1xuICByZXR1cm4gYSB8IGIgPDwgMTY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYWRsZXIzMjsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBhZGxlcjMyID0gcmVxdWlyZSgnLi9hZGxlcjMyJyk7XG52YXIgVEFHX0VORCA9IC9cXC8/Pi87XG52YXIgQ09NTUVOVF9TVEFSVCA9IC9ePFxcIVxcLVxcLS87XG52YXIgUmVhY3RNYXJrdXBDaGVja3N1bSA9IHtcbiAgQ0hFQ0tTVU1fQVRUUl9OQU1FOiAnZGF0YS1yZWFjdC1jaGVja3N1bScsXG4gIGFkZENoZWNrc3VtVG9NYXJrdXA6IGZ1bmN0aW9uKG1hcmt1cCkge1xuICAgIHZhciBjaGVja3N1bSA9IGFkbGVyMzIobWFya3VwKTtcbiAgICBpZiAoQ09NTUVOVF9TVEFSVC50ZXN0KG1hcmt1cCkpIHtcbiAgICAgIHJldHVybiBtYXJrdXA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXJrdXAucmVwbGFjZShUQUdfRU5ELCAnICcgKyBSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSArICc9XCInICsgY2hlY2tzdW0gKyAnXCIkJicpO1xuICAgIH1cbiAgfSxcbiAgY2FuUmV1c2VNYXJrdXA6IGZ1bmN0aW9uKG1hcmt1cCwgZWxlbWVudCkge1xuICAgIHZhciBleGlzdGluZ0NoZWNrc3VtID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUpO1xuICAgIGV4aXN0aW5nQ2hlY2tzdW0gPSBleGlzdGluZ0NoZWNrc3VtICYmIHBhcnNlSW50KGV4aXN0aW5nQ2hlY2tzdW0sIDEwKTtcbiAgICB2YXIgbWFya3VwQ2hlY2tzdW0gPSBhZGxlcjMyKG1hcmt1cCk7XG4gICAgcmV0dXJuIG1hcmt1cENoZWNrc3VtID09PSBleGlzdGluZ0NoZWNrc3VtO1xuICB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE1hcmt1cENoZWNrc3VtO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIGluamVjdGVkID0gZmFsc2U7XG4gIHZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0ge1xuICAgIHVubW91bnRJREZyb21FbnZpcm9ubWVudDogbnVsbCxcbiAgICByZXBsYWNlTm9kZVdpdGhNYXJrdXA6IG51bGwsXG4gICAgcHJvY2Vzc0NoaWxkcmVuVXBkYXRlczogbnVsbCxcbiAgICBpbmplY3Rpb246IHtpbmplY3RFbnZpcm9ubWVudDogZnVuY3Rpb24oZW52aXJvbm1lbnQpIHtcbiAgICAgICAgISFpbmplY3RlZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudDogaW5qZWN0RW52aXJvbm1lbnQoKSBjYW4gb25seSBiZSBjYWxsZWQgb25jZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50ID0gZW52aXJvbm1lbnQudW5tb3VudElERnJvbUVudmlyb25tZW50O1xuICAgICAgICBSZWFjdENvbXBvbmVudEVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cCA9IGVudmlyb25tZW50LnJlcGxhY2VOb2RlV2l0aE1hcmt1cDtcbiAgICAgICAgUmVhY3RDb21wb25lbnRFbnZpcm9ubWVudC5wcm9jZXNzQ2hpbGRyZW5VcGRhdGVzID0gZW52aXJvbm1lbnQucHJvY2Vzc0NoaWxkcmVuVXBkYXRlcztcbiAgICAgICAgaW5qZWN0ZWQgPSB0cnVlO1xuICAgICAgfX1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENvbXBvbmVudEVudmlyb25tZW50O1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgY2F1Z2h0RXJyb3IgPSBudWxsO1xuICBmdW5jdGlvbiBpbnZva2VHdWFyZGVkQ2FsbGJhY2sobmFtZSwgZnVuYywgYSwgYikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuYyhhLCBiKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICBpZiAoY2F1Z2h0RXJyb3IgPT09IG51bGwpIHtcbiAgICAgICAgY2F1Z2h0RXJyb3IgPSB4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgdmFyIFJlYWN0RXJyb3JVdGlscyA9IHtcbiAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2s6IGludm9rZUd1YXJkZWRDYWxsYmFjayxcbiAgICBpbnZva2VHdWFyZGVkQ2FsbGJhY2tXaXRoQ2F0Y2g6IGludm9rZUd1YXJkZWRDYWxsYmFjayxcbiAgICByZXRocm93Q2F1Z2h0RXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGNhdWdodEVycm9yKSB7XG4gICAgICAgIHZhciBlcnJvciA9IGNhdWdodEVycm9yO1xuICAgICAgICBjYXVnaHRFcnJvciA9IG51bGw7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kaXNwYXRjaEV2ZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgZmFrZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdyZWFjdCcpO1xuICAgICAgUmVhY3RFcnJvclV0aWxzLmludm9rZUd1YXJkZWRDYWxsYmFjayA9IGZ1bmN0aW9uKG5hbWUsIGZ1bmMsIGEsIGIpIHtcbiAgICAgICAgdmFyIGJvdW5kRnVuYyA9IGZ1bmMuYmluZChudWxsLCBhLCBiKTtcbiAgICAgICAgdmFyIGV2dFR5cGUgPSAncmVhY3QtJyArIG5hbWU7XG4gICAgICAgIGZha2VOb2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgYm91bmRGdW5jLCBmYWxzZSk7XG4gICAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgICAgZXZ0LmluaXRFdmVudChldnRUeXBlLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICBmYWtlTm9kZS5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICAgIGZha2VOb2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgYm91bmRGdW5jLCBmYWxzZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RXJyb3JVdGlscztcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIFJlYWN0Tm9kZVR5cGVzID0ge1xuICAgIE5BVElWRTogMCxcbiAgICBDT01QT1NJVEU6IDEsXG4gICAgRU1QVFk6IDIsXG4gICAgZ2V0VHlwZTogZnVuY3Rpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0Tm9kZVR5cGVzLkVNUFRZO1xuICAgICAgfSBlbHNlIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlLnR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gUmVhY3ROb2RlVHlwZXMuQ09NUE9TSVRFO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBSZWFjdE5vZGVUeXBlcy5OQVRJVkU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICFmYWxzZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdVbmV4cGVjdGVkIG5vZGU6ICVzJywgbm9kZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5vZGVUeXBlcztcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RJbnN0YW5jZU1hcFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBgUmVhY3RJbnN0YW5jZU1hcGAgbWFpbnRhaW5zIGEgbWFwcGluZyBmcm9tIGEgcHVibGljIGZhY2luZyBzdGF0ZWZ1bFxuICogaW5zdGFuY2UgKGtleSkgYW5kIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiAodmFsdWUpLiBUaGlzIGFsbG93cyBwdWJsaWNcbiAqIG1ldGhvZHMgdG8gYWNjZXB0IHRoZSB1c2VyIGZhY2luZyBpbnN0YW5jZSBhcyBhbiBhcmd1bWVudCBhbmQgbWFwIHRoZW0gYmFja1xuICogdG8gaW50ZXJuYWwgbWV0aG9kcy5cbiAqL1xuXG4vLyBUT0RPOiBSZXBsYWNlIHRoaXMgd2l0aCBFUzY6IHZhciBSZWFjdEluc3RhbmNlTWFwID0gbmV3IE1hcCgpO1xuXG52YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHtcblxuICAvKipcbiAgICogVGhpcyBBUEkgc2hvdWxkIGJlIGNhbGxlZCBgZGVsZXRlYCBidXQgd2UnZCBoYXZlIHRvIG1ha2Ugc3VyZSB0byBhbHdheXNcbiAgICogdHJhbnNmb3JtIHRoZXNlIHRvIHN0cmluZ3MgZm9yIElFIHN1cHBvcnQuIFdoZW4gdGhpcyB0cmFuc2Zvcm0gaXMgZnVsbHlcbiAgICogc3VwcG9ydGVkIHdlIGNhbiByZW5hbWUgaXQuXG4gICAqL1xuICByZW1vdmU6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBrZXkuX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgfSxcblxuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4ga2V5Ll9yZWFjdEludGVybmFsSW5zdGFuY2U7XG4gIH0sXG5cbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlICE9PSB1bmRlZmluZWQ7XG4gIH0sXG5cbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIGtleS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlID0gdmFsdWU7XG4gIH1cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEluc3RhbmNlTWFwOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbiAgdmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIGZ1bmN0aW9uIENhbGxiYWNrUXVldWUoKSB7XG4gICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICB0aGlzLl9jb250ZXh0cyA9IG51bGw7XG4gIH1cbiAgX2Fzc2lnbihDYWxsYmFja1F1ZXVlLnByb3RvdHlwZSwge1xuICAgIGVucXVldWU6IGZ1bmN0aW9uKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwgW107XG4gICAgICB0aGlzLl9jb250ZXh0cyA9IHRoaXMuX2NvbnRleHRzIHx8IFtdO1xuICAgICAgdGhpcy5fY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgdGhpcy5fY29udGV4dHMucHVzaChjb250ZXh0KTtcbiAgICB9LFxuICAgIG5vdGlmeUFsbDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzO1xuICAgICAgdmFyIGNvbnRleHRzID0gdGhpcy5fY29udGV4dHM7XG4gICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICEoY2FsbGJhY2tzLmxlbmd0aCA9PT0gY29udGV4dHMubGVuZ3RoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdNaXNtYXRjaGVkIGxpc3Qgb2YgY29udGV4dHMgaW4gY2FsbGJhY2sgcXVldWUnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IG51bGw7XG4gICAgICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjYWxsYmFja3NbaV0uY2FsbChjb250ZXh0c1tpXSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICAgIGNvbnRleHRzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGVja3BvaW50OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLl9jYWxsYmFja3MgPyB0aGlzLl9jYWxsYmFja3MubGVuZ3RoIDogMDtcbiAgICB9LFxuICAgIHJvbGxiYWNrOiBmdW5jdGlvbihsZW4pIHtcbiAgICAgIGlmICh0aGlzLl9jYWxsYmFja3MpIHtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzLmxlbmd0aCA9IGxlbjtcbiAgICAgICAgdGhpcy5fY29udGV4dHMubGVuZ3RoID0gbGVuO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5fY2FsbGJhY2tzID0gbnVsbDtcbiAgICAgIHRoaXMuX2NvbnRleHRzID0gbnVsbDtcbiAgICB9LFxuICAgIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cbiAgfSk7XG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhDYWxsYmFja1F1ZXVlKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBDYWxsYmFja1F1ZXVlO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEZlYXR1cmVGbGFnc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0RmVhdHVyZUZsYWdzID0ge1xuICAvLyBXaGVuIHRydWUsIGNhbGwgY29uc29sZS50aW1lKCkgYmVmb3JlIGFuZCAudGltZUVuZCgpIGFmdGVyIGVhY2ggdG9wLWxldmVsXG4gIC8vIHJlbmRlciAoYm90aCBpbml0aWFsIHJlbmRlcnMgYW5kIHVwZGF0ZXMpLiBVc2VmdWwgd2hlbiBsb29raW5nIGF0IHByb2QtbW9kZVxuICAvLyB0aW1lbGluZSBwcm9maWxlcyBpbiBDaHJvbWUsIGZvciBleGFtcGxlLlxuICBsb2dUb3BMZXZlbFJlbmRlcnM6IGZhbHNlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0RmVhdHVyZUZsYWdzOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIHZhciBSZWFjdE93bmVyID0ge1xuICAgIGlzVmFsaWRPd25lcjogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gISEob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QuYXR0YWNoUmVmID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmplY3QuZGV0YWNoUmVmID09PSAnZnVuY3Rpb24nKTtcbiAgICB9LFxuICAgIGFkZENvbXBvbmVudEFzUmVmVG86IGZ1bmN0aW9uKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgICAgIVJlYWN0T3duZXIuaXNWYWxpZE93bmVyKG93bmVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdhZGRDb21wb25lbnRBc1JlZlRvKC4uLik6IE9ubHkgYSBSZWFjdE93bmVyIGNhbiBoYXZlIHJlZnMuIFlvdSBtaWdodCAnICsgJ2JlIGFkZGluZyBhIHJlZiB0byBhIGNvbXBvbmVudCB0aGF0IHdhcyBub3QgY3JlYXRlZCBpbnNpZGUgYSBjb21wb25lbnRcXCdzICcgKyAnYHJlbmRlcmAgbWV0aG9kLCBvciB5b3UgaGF2ZSBtdWx0aXBsZSBjb3BpZXMgb2YgUmVhY3QgbG9hZGVkICcgKyAnKGRldGFpbHM6IGh0dHBzOi8vZmIubWUvcmVhY3QtcmVmcy1tdXN0LWhhdmUtb3duZXIpLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIG93bmVyLmF0dGFjaFJlZihyZWYsIGNvbXBvbmVudCk7XG4gICAgfSxcbiAgICByZW1vdmVDb21wb25lbnRBc1JlZkZyb206IGZ1bmN0aW9uKGNvbXBvbmVudCwgcmVmLCBvd25lcikge1xuICAgICAgIVJlYWN0T3duZXIuaXNWYWxpZE93bmVyKG93bmVyKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdyZW1vdmVDb21wb25lbnRBc1JlZkZyb20oLi4uKTogT25seSBhIFJlYWN0T3duZXIgY2FuIGhhdmUgcmVmcy4gWW91IG1pZ2h0ICcgKyAnYmUgcmVtb3ZpbmcgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIGEgY29tcG9uZW50XFwncyAnICsgJ2ByZW5kZXJgIG1ldGhvZCwgb3IgeW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZCAnICsgJyhkZXRhaWxzOiBodHRwczovL2ZiLm1lL3JlYWN0LXJlZnMtbXVzdC1oYXZlLW93bmVyKS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgb3duZXJQdWJsaWNJbnN0YW5jZSA9IG93bmVyLmdldFB1YmxpY0luc3RhbmNlKCk7XG4gICAgICBpZiAob3duZXJQdWJsaWNJbnN0YW5jZSAmJiBvd25lclB1YmxpY0luc3RhbmNlLnJlZnNbcmVmXSA9PT0gY29tcG9uZW50LmdldFB1YmxpY0luc3RhbmNlKCkpIHtcbiAgICAgICAgb3duZXIuZGV0YWNoUmVmKHJlZik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0T3duZXI7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBSZWFjdE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdE93bmVyJyk7XG4gIHZhciBSZWFjdFJlZiA9IHt9O1xuICBmdW5jdGlvbiBhdHRhY2hSZWYocmVmLCBjb21wb25lbnQsIG93bmVyKSB7XG4gICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlZihjb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFJlYWN0T3duZXIuYWRkQ29tcG9uZW50QXNSZWZUbyhjb21wb25lbnQsIHJlZiwgb3duZXIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkZXRhY2hSZWYocmVmLCBjb21wb25lbnQsIG93bmVyKSB7XG4gICAgaWYgKHR5cGVvZiByZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlZihudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3RPd25lci5yZW1vdmVDb21wb25lbnRBc1JlZkZyb20oY29tcG9uZW50LCByZWYsIG93bmVyKTtcbiAgICB9XG4gIH1cbiAgUmVhY3RSZWYuYXR0YWNoUmVmcyA9IGZ1bmN0aW9uKGluc3RhbmNlLCBlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgYXR0YWNoUmVmKHJlZiwgaW5zdGFuY2UsIGVsZW1lbnQuX293bmVyKTtcbiAgICB9XG4gIH07XG4gIFJlYWN0UmVmLnNob3VsZFVwZGF0ZVJlZnMgPSBmdW5jdGlvbihwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgICB2YXIgcHJldkVtcHR5ID0gcHJldkVsZW1lbnQgPT09IG51bGwgfHwgcHJldkVsZW1lbnQgPT09IGZhbHNlO1xuICAgIHZhciBuZXh0RW1wdHkgPSBuZXh0RWxlbWVudCA9PT0gbnVsbCB8fCBuZXh0RWxlbWVudCA9PT0gZmFsc2U7XG4gICAgcmV0dXJuIChwcmV2RW1wdHkgfHwgbmV4dEVtcHR5IHx8IG5leHRFbGVtZW50Ll9vd25lciAhPT0gcHJldkVsZW1lbnQuX293bmVyIHx8IG5leHRFbGVtZW50LnJlZiAhPT0gcHJldkVsZW1lbnQucmVmKTtcbiAgfTtcbiAgUmVhY3RSZWYuZGV0YWNoUmVmcyA9IGZ1bmN0aW9uKGluc3RhbmNlLCBlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQgPT09IG51bGwgfHwgZWxlbWVudCA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICAgIGlmIChyZWYgIT0gbnVsbCkge1xuICAgICAgZGV0YWNoUmVmKHJlZiwgaW5zdGFuY2UsIGVsZW1lbnQuX293bmVyKTtcbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RSZWY7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBSZWFjdFJlZiA9IHJlcXVpcmUoJy4vUmVhY3RSZWYnKTtcbiAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIGZ1bmN0aW9uIGF0dGFjaFJlZnMoKSB7XG4gICAgUmVhY3RSZWYuYXR0YWNoUmVmcyh0aGlzLCB0aGlzLl9jdXJyZW50RWxlbWVudCk7XG4gIH1cbiAgdmFyIFJlYWN0UmVjb25jaWxlciA9IHtcbiAgICBtb3VudENvbXBvbmVudDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgdHJhbnNhY3Rpb24sIG5hdGl2ZVBhcmVudCwgbmF0aXZlQ29udGFpbmVySW5mbywgY29udGV4dCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpblJlY29uY2lsZXJUaW1lcihpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCAnbW91bnRDb21wb25lbnQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG1hcmt1cCA9IGludGVybmFsSW5zdGFuY2UubW91bnRDb21wb25lbnQodHJhbnNhY3Rpb24sIG5hdGl2ZVBhcmVudCwgbmF0aXZlQ29udGFpbmVySW5mbywgY29udGV4dCk7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQgJiYgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQucmVmICE9IG51bGwpIHtcbiAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShhdHRhY2hSZWZzLCBpbnRlcm5hbEluc3RhbmNlKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kUmVjb25jaWxlclRpbWVyKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQsICdtb3VudENvbXBvbmVudCcpO1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk1vdW50Q29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFya3VwO1xuICAgIH0sXG4gICAgZ2V0TmF0aXZlTm9kZTogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgcmV0dXJuIGludGVybmFsSW5zdGFuY2UuZ2V0TmF0aXZlTm9kZSgpO1xuICAgIH0sXG4gICAgdW5tb3VudENvbXBvbmVudDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgc2FmZWx5KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luUmVjb25jaWxlclRpbWVyKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQsICd1bm1vdW50Q29tcG9uZW50Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFJlYWN0UmVmLmRldGFjaFJlZnMoaW50ZXJuYWxJbnN0YW5jZSwgaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQpO1xuICAgICAgaW50ZXJuYWxJbnN0YW5jZS51bm1vdW50Q29tcG9uZW50KHNhZmVseSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZFJlY29uY2lsZXJUaW1lcihpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCAndW5tb3VudENvbXBvbmVudCcpO1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblVubW91bnRDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKGludGVybmFsSW5zdGFuY2UsIG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIHByZXZFbGVtZW50ID0gaW50ZXJuYWxJbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG4gICAgICBpZiAobmV4dEVsZW1lbnQgPT09IHByZXZFbGVtZW50ICYmIGNvbnRleHQgPT09IGludGVybmFsSW5zdGFuY2UuX2NvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpblJlY29uY2lsZXJUaW1lcihpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCAncmVjZWl2ZUNvbXBvbmVudCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgcmVmc0NoYW5nZWQgPSBSZWFjdFJlZi5zaG91bGRVcGRhdGVSZWZzKHByZXZFbGVtZW50LCBuZXh0RWxlbWVudCk7XG4gICAgICBpZiAocmVmc0NoYW5nZWQpIHtcbiAgICAgICAgUmVhY3RSZWYuZGV0YWNoUmVmcyhpbnRlcm5hbEluc3RhbmNlLCBwcmV2RWxlbWVudCk7XG4gICAgICB9XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLnJlY2VpdmVDb21wb25lbnQobmV4dEVsZW1lbnQsIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIGlmIChyZWZzQ2hhbmdlZCAmJiBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudCAmJiBpbnRlcm5hbEluc3RhbmNlLl9jdXJyZW50RWxlbWVudC5yZWYgIT0gbnVsbCkge1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGF0dGFjaFJlZnMsIGludGVybmFsSW5zdGFuY2UpO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRSZWNvbmNpbGVyVGltZXIoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCwgJ3JlY2VpdmVDb21wb25lbnQnKTtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25VcGRhdGVDb21wb25lbnQoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeTogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgdHJhbnNhY3Rpb24sIHVwZGF0ZUJhdGNoTnVtYmVyKSB7XG4gICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fdXBkYXRlQmF0Y2hOdW1iZXIgIT09IHVwZGF0ZUJhdGNoTnVtYmVyKSB7XG4gICAgICAgICEoaW50ZXJuYWxJbnN0YW5jZS5fdXBkYXRlQmF0Y2hOdW1iZXIgPT0gbnVsbCB8fCBpbnRlcm5hbEluc3RhbmNlLl91cGRhdGVCYXRjaE51bWJlciA9PT0gdXBkYXRlQmF0Y2hOdW1iZXIgKyAxKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IFVuZXhwZWN0ZWQgYmF0Y2ggbnVtYmVyIChjdXJyZW50ICVzLCAnICsgJ3BlbmRpbmcgJXMpJywgdXBkYXRlQmF0Y2hOdW1iZXIsIGludGVybmFsSW5zdGFuY2UuX3VwZGF0ZUJhdGNoTnVtYmVyKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVnaW5SZWNvbmNpbGVyVGltZXIoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCwgJ3BlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLnBlcmZvcm1VcGRhdGVJZk5lY2Vzc2FyeSh0cmFuc2FjdGlvbik7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoaW50ZXJuYWxJbnN0YW5jZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZFJlY29uY2lsZXJUaW1lcihpbnRlcm5hbEluc3RhbmNlLl9kZWJ1Z0lELCAncGVyZm9ybVVwZGF0ZUlmTmVjZXNzYXJ5Jyk7XG4gICAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uVXBkYXRlQ29tcG9uZW50KGludGVybmFsSW5zdGFuY2UuX2RlYnVnSUQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0UmVjb25jaWxlcjtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIgTWl4aW4gPSB7XG4gICAgcmVpbml0aWFsaXplVHJhbnNhY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy50cmFuc2FjdGlvbldyYXBwZXJzID0gdGhpcy5nZXRUcmFuc2FjdGlvbldyYXBwZXJzKCk7XG4gICAgICBpZiAodGhpcy53cmFwcGVySW5pdERhdGEpIHtcbiAgICAgICAgdGhpcy53cmFwcGVySW5pdERhdGEubGVuZ3RoID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMud3JhcHBlckluaXREYXRhID0gW107XG4gICAgICB9XG4gICAgICB0aGlzLl9pc0luVHJhbnNhY3Rpb24gPSBmYWxzZTtcbiAgICB9LFxuICAgIF9pc0luVHJhbnNhY3Rpb246IGZhbHNlLFxuICAgIGdldFRyYW5zYWN0aW9uV3JhcHBlcnM6IG51bGwsXG4gICAgaXNJblRyYW5zYWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhIXRoaXMuX2lzSW5UcmFuc2FjdGlvbjtcbiAgICB9LFxuICAgIHBlcmZvcm06IGZ1bmN0aW9uKG1ldGhvZCwgc2NvcGUsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgICAgICEhdGhpcy5pc0luVHJhbnNhY3Rpb24oKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdUcmFuc2FjdGlvbi5wZXJmb3JtKC4uLik6IENhbm5vdCBpbml0aWFsaXplIGEgdHJhbnNhY3Rpb24gd2hlbiB0aGVyZSAnICsgJ2lzIGFscmVhZHkgYW4gb3V0c3RhbmRpbmcgdHJhbnNhY3Rpb24uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGVycm9yVGhyb3duO1xuICAgICAgdmFyIHJldDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMuX2lzSW5UcmFuc2FjdGlvbiA9IHRydWU7XG4gICAgICAgIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplQWxsKDApO1xuICAgICAgICByZXQgPSBtZXRob2QuY2FsbChzY29wZSwgYSwgYiwgYywgZCwgZSwgZik7XG4gICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jbG9zZUFsbCgwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhpcy5faXNJblRyYW5zYWN0aW9uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcbiAgICBpbml0aWFsaXplQWxsOiBmdW5jdGlvbihzdGFydEluZGV4KSB7XG4gICAgICB2YXIgdHJhbnNhY3Rpb25XcmFwcGVycyA9IHRoaXMudHJhbnNhY3Rpb25XcmFwcGVycztcbiAgICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4OyBpIDwgdHJhbnNhY3Rpb25XcmFwcGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHRyYW5zYWN0aW9uV3JhcHBlcnNbaV07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy53cmFwcGVySW5pdERhdGFbaV0gPSBUcmFuc2FjdGlvbi5PQlNFUlZFRF9FUlJPUjtcbiAgICAgICAgICB0aGlzLndyYXBwZXJJbml0RGF0YVtpXSA9IHdyYXBwZXIuaW5pdGlhbGl6ZSA/IHdyYXBwZXIuaW5pdGlhbGl6ZS5jYWxsKHRoaXMpIDogbnVsbDtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAodGhpcy53cmFwcGVySW5pdERhdGFbaV0gPT09IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB0aGlzLmluaXRpYWxpemVBbGwoaSArIDEpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY2xvc2VBbGw6IGZ1bmN0aW9uKHN0YXJ0SW5kZXgpIHtcbiAgICAgICF0aGlzLmlzSW5UcmFuc2FjdGlvbigpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RyYW5zYWN0aW9uLmNsb3NlQWxsKCk6IENhbm5vdCBjbG9zZSB0cmFuc2FjdGlvbiB3aGVuIG5vbmUgYXJlIG9wZW4uJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIHRyYW5zYWN0aW9uV3JhcHBlcnMgPSB0aGlzLnRyYW5zYWN0aW9uV3JhcHBlcnM7XG4gICAgICBmb3IgKHZhciBpID0gc3RhcnRJbmRleDsgaSA8IHRyYW5zYWN0aW9uV3JhcHBlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB0cmFuc2FjdGlvbldyYXBwZXJzW2ldO1xuICAgICAgICB2YXIgaW5pdERhdGEgPSB0aGlzLndyYXBwZXJJbml0RGF0YVtpXTtcbiAgICAgICAgdmFyIGVycm9yVGhyb3duO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGVycm9yVGhyb3duID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoaW5pdERhdGEgIT09IFRyYW5zYWN0aW9uLk9CU0VSVkVEX0VSUk9SICYmIHdyYXBwZXIuY2xvc2UpIHtcbiAgICAgICAgICAgIHdyYXBwZXIuY2xvc2UuY2FsbCh0aGlzLCBpbml0RGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVycm9yVGhyb3duID0gZmFsc2U7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgaWYgKGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB0aGlzLmNsb3NlQWxsKGkgKyAxKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLndyYXBwZXJJbml0RGF0YS5sZW5ndGggPSAwO1xuICAgIH1cbiAgfTtcbiAgdmFyIFRyYW5zYWN0aW9uID0ge1xuICAgIE1peGluOiBNaXhpbixcbiAgICBPQlNFUlZFRF9FUlJPUjoge31cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBUcmFuc2FjdGlvbjtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG4gIHZhciBDYWxsYmFja1F1ZXVlID0gcmVxdWlyZSgnLi9DYWxsYmFja1F1ZXVlJyk7XG4gIHZhciBQb29sZWRDbGFzcyA9IHJlcXVpcmUoJy4vUG9vbGVkQ2xhc3MnKTtcbiAgdmFyIFJlYWN0RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9SZWFjdEZlYXR1cmVGbGFncycpO1xuICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG4gIHZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xuICB2YXIgVHJhbnNhY3Rpb24gPSByZXF1aXJlKCcuL1RyYW5zYWN0aW9uJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIGRpcnR5Q29tcG9uZW50cyA9IFtdO1xuICB2YXIgdXBkYXRlQmF0Y2hOdW1iZXIgPSAwO1xuICB2YXIgYXNhcENhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xuICB2YXIgYXNhcEVucXVldWVkID0gZmFsc2U7XG4gIHZhciBiYXRjaGluZ1N0cmF0ZWd5ID0gbnVsbDtcbiAgZnVuY3Rpb24gZW5zdXJlSW5qZWN0ZWQoKSB7XG4gICAgIShSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbiAmJiBiYXRjaGluZ1N0cmF0ZWd5KSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgaW5qZWN0IGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzIGFuZCBiYXRjaGluZyAnICsgJ3N0cmF0ZWd5JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG4gIHZhciBORVNURURfVVBEQVRFUyA9IHtcbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gZGlydHlDb21wb25lbnRzLmxlbmd0aDtcbiAgICB9LFxuICAgIGNsb3NlOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmRpcnR5Q29tcG9uZW50c0xlbmd0aCAhPT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgICBkaXJ0eUNvbXBvbmVudHMuc3BsaWNlKDAsIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoKTtcbiAgICAgICAgZmx1c2hCYXRjaGVkVXBkYXRlcygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlydHlDb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICB2YXIgVVBEQVRFX1FVRVVFSU5HID0ge1xuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5jYWxsYmFja1F1ZXVlLnJlc2V0KCk7XG4gICAgfSxcbiAgICBjbG9zZTogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmNhbGxiYWNrUXVldWUubm90aWZ5QWxsKCk7XG4gICAgfVxuICB9O1xuICB2YXIgVFJBTlNBQ1RJT05fV1JBUFBFUlMgPSBbTkVTVEVEX1VQREFURVMsIFVQREFURV9RVUVVRUlOR107XG4gIGZ1bmN0aW9uIFJlYWN0VXBkYXRlc0ZsdXNoVHJhbnNhY3Rpb24oKSB7XG4gICAgdGhpcy5yZWluaXRpYWxpemVUcmFuc2FjdGlvbigpO1xuICAgIHRoaXMuZGlydHlDb21wb25lbnRzTGVuZ3RoID0gbnVsbDtcbiAgICB0aGlzLmNhbGxiYWNrUXVldWUgPSBDYWxsYmFja1F1ZXVlLmdldFBvb2xlZCgpO1xuICAgIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24gPSBSZWFjdFVwZGF0ZXMuUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbi5nZXRQb29sZWQodHJ1ZSk7XG4gIH1cbiAgX2Fzc2lnbihSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnByb3RvdHlwZSwgVHJhbnNhY3Rpb24uTWl4aW4sIHtcbiAgICBnZXRUcmFuc2FjdGlvbldyYXBwZXJzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBUUkFOU0FDVElPTl9XUkFQUEVSUztcbiAgICB9LFxuICAgIGRlc3RydWN0b3I6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kaXJ0eUNvbXBvbmVudHNMZW5ndGggPSBudWxsO1xuICAgICAgQ2FsbGJhY2tRdWV1ZS5yZWxlYXNlKHRoaXMuY2FsbGJhY2tRdWV1ZSk7XG4gICAgICB0aGlzLmNhbGxiYWNrUXVldWUgPSBudWxsO1xuICAgICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24ucmVsZWFzZSh0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uKTtcbiAgICAgIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24gPSBudWxsO1xuICAgIH0sXG4gICAgcGVyZm9ybTogZnVuY3Rpb24obWV0aG9kLCBzY29wZSwgYSkge1xuICAgICAgcmV0dXJuIFRyYW5zYWN0aW9uLk1peGluLnBlcmZvcm0uY2FsbCh0aGlzLCB0aGlzLnJlY29uY2lsZVRyYW5zYWN0aW9uLnBlcmZvcm0sIHRoaXMucmVjb25jaWxlVHJhbnNhY3Rpb24sIG1ldGhvZCwgc2NvcGUsIGEpO1xuICAgIH1cbiAgfSk7XG4gIFBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uKTtcbiAgZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIsIGMsIGQsIGUpIHtcbiAgICBlbnN1cmVJbmplY3RlZCgpO1xuICAgIGJhdGNoaW5nU3RyYXRlZ3kuYmF0Y2hlZFVwZGF0ZXMoY2FsbGJhY2ssIGEsIGIsIGMsIGQsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIG1vdW50T3JkZXJDb21wYXJhdG9yKGMxLCBjMikge1xuICAgIHJldHVybiBjMS5fbW91bnRPcmRlciAtIGMyLl9tb3VudE9yZGVyO1xuICB9XG4gIGZ1bmN0aW9uIHJ1bkJhdGNoZWRVcGRhdGVzKHRyYW5zYWN0aW9uKSB7XG4gICAgdmFyIGxlbiA9IHRyYW5zYWN0aW9uLmRpcnR5Q29tcG9uZW50c0xlbmd0aDtcbiAgICAhKGxlbiA9PT0gZGlydHlDb21wb25lbnRzLmxlbmd0aCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgZmx1c2ggdHJhbnNhY3Rpb25cXCdzIHN0b3JlZCBkaXJ0eS1jb21wb25lbnRzIGxlbmd0aCAoJXMpIHRvICcgKyAnbWF0Y2ggZGlydHktY29tcG9uZW50cyBhcnJheSBsZW5ndGggKCVzKS4nLCBsZW4sIGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBkaXJ0eUNvbXBvbmVudHMuc29ydChtb3VudE9yZGVyQ29tcGFyYXRvcik7XG4gICAgdXBkYXRlQmF0Y2hOdW1iZXIrKztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgY29tcG9uZW50ID0gZGlydHlDb21wb25lbnRzW2ldO1xuICAgICAgdmFyIGNhbGxiYWNrcyA9IGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcztcbiAgICAgIGNvbXBvbmVudC5fcGVuZGluZ0NhbGxiYWNrcyA9IG51bGw7XG4gICAgICB2YXIgbWFya2VyTmFtZTtcbiAgICAgIGlmIChSZWFjdEZlYXR1cmVGbGFncy5sb2dUb3BMZXZlbFJlbmRlcnMpIHtcbiAgICAgICAgdmFyIG5hbWVkQ29tcG9uZW50ID0gY29tcG9uZW50O1xuICAgICAgICBpZiAoY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5wcm9wcyA9PT0gY29tcG9uZW50Ll9yZW5kZXJlZENvbXBvbmVudC5fY3VycmVudEVsZW1lbnQpIHtcbiAgICAgICAgICBuYW1lZENvbXBvbmVudCA9IGNvbXBvbmVudC5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgICAgIH1cbiAgICAgICAgbWFya2VyTmFtZSA9ICdSZWFjdCB1cGRhdGU6ICcgKyBuYW1lZENvbXBvbmVudC5nZXROYW1lKCk7XG4gICAgICAgIGNvbnNvbGUudGltZShtYXJrZXJOYW1lKTtcbiAgICAgIH1cbiAgICAgIFJlYWN0UmVjb25jaWxlci5wZXJmb3JtVXBkYXRlSWZOZWNlc3NhcnkoY29tcG9uZW50LCB0cmFuc2FjdGlvbi5yZWNvbmNpbGVUcmFuc2FjdGlvbiwgdXBkYXRlQmF0Y2hOdW1iZXIpO1xuICAgICAgaWYgKG1hcmtlck5hbWUpIHtcbiAgICAgICAgY29uc29sZS50aW1lRW5kKG1hcmtlck5hbWUpO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNhbGxiYWNrcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHRyYW5zYWN0aW9uLmNhbGxiYWNrUXVldWUuZW5xdWV1ZShjYWxsYmFja3Nbal0sIGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIgZmx1c2hCYXRjaGVkVXBkYXRlcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkZsdXNoKCk7XG4gICAgfVxuICAgIHdoaWxlIChkaXJ0eUNvbXBvbmVudHMubGVuZ3RoIHx8IGFzYXBFbnF1ZXVlZCkge1xuICAgICAgaWYgKGRpcnR5Q29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHRyYW5zYWN0aW9uID0gUmVhY3RVcGRhdGVzRmx1c2hUcmFuc2FjdGlvbi5nZXRQb29sZWQoKTtcbiAgICAgICAgdHJhbnNhY3Rpb24ucGVyZm9ybShydW5CYXRjaGVkVXBkYXRlcywgbnVsbCwgdHJhbnNhY3Rpb24pO1xuICAgICAgICBSZWFjdFVwZGF0ZXNGbHVzaFRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICAgICAgfVxuICAgICAgaWYgKGFzYXBFbnF1ZXVlZCkge1xuICAgICAgICBhc2FwRW5xdWV1ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIHF1ZXVlID0gYXNhcENhbGxiYWNrUXVldWU7XG4gICAgICAgIGFzYXBDYWxsYmFja1F1ZXVlID0gQ2FsbGJhY2tRdWV1ZS5nZXRQb29sZWQoKTtcbiAgICAgICAgcXVldWUubm90aWZ5QWxsKCk7XG4gICAgICAgIENhbGxiYWNrUXVldWUucmVsZWFzZShxdWV1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRGbHVzaCgpO1xuICAgIH1cbiAgfTtcbiAgZnVuY3Rpb24gZW5xdWV1ZVVwZGF0ZShjb21wb25lbnQpIHtcbiAgICBlbnN1cmVJbmplY3RlZCgpO1xuICAgIGlmICghYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcykge1xuICAgICAgYmF0Y2hpbmdTdHJhdGVneS5iYXRjaGVkVXBkYXRlcyhlbnF1ZXVlVXBkYXRlLCBjb21wb25lbnQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkaXJ0eUNvbXBvbmVudHMucHVzaChjb21wb25lbnQpO1xuICAgIGlmIChjb21wb25lbnQuX3VwZGF0ZUJhdGNoTnVtYmVyID09IG51bGwpIHtcbiAgICAgIGNvbXBvbmVudC5fdXBkYXRlQmF0Y2hOdW1iZXIgPSB1cGRhdGVCYXRjaE51bWJlciArIDE7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAhYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXMuYXNhcDogQ2FuXFwndCBlbnF1ZXVlIGFuIGFzYXAgY2FsbGJhY2sgaW4gYSBjb250ZXh0IHdoZXJlJyArICd1cGRhdGVzIGFyZSBub3QgYmVpbmcgYmF0Y2hlZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgYXNhcENhbGxiYWNrUXVldWUuZW5xdWV1ZShjYWxsYmFjaywgY29udGV4dCk7XG4gICAgYXNhcEVucXVldWVkID0gdHJ1ZTtcbiAgfVxuICB2YXIgUmVhY3RVcGRhdGVzSW5qZWN0aW9uID0ge1xuICAgIGluamVjdFJlY29uY2lsZVRyYW5zYWN0aW9uOiBmdW5jdGlvbihSZWNvbmNpbGVUcmFuc2FjdGlvbikge1xuICAgICAgIVJlY29uY2lsZVRyYW5zYWN0aW9uID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0VXBkYXRlczogbXVzdCBwcm92aWRlIGEgcmVjb25jaWxlIHRyYW5zYWN0aW9uIGNsYXNzJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgUmVhY3RVcGRhdGVzLlJlYWN0UmVjb25jaWxlVHJhbnNhY3Rpb24gPSBSZWNvbmNpbGVUcmFuc2FjdGlvbjtcbiAgICB9LFxuICAgIGluamVjdEJhdGNoaW5nU3RyYXRlZ3k6IGZ1bmN0aW9uKF9iYXRjaGluZ1N0cmF0ZWd5KSB7XG4gICAgICAhX2JhdGNoaW5nU3RyYXRlZ3kgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RVcGRhdGVzOiBtdXN0IHByb3ZpZGUgYSBiYXRjaGluZyBzdHJhdGVneScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICEodHlwZW9mIF9iYXRjaGluZ1N0cmF0ZWd5LmJhdGNoZWRVcGRhdGVzID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhIGJhdGNoZWRVcGRhdGVzKCkgZnVuY3Rpb24nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAhKHR5cGVvZiBfYmF0Y2hpbmdTdHJhdGVneS5pc0JhdGNoaW5nVXBkYXRlcyA9PT0gJ2Jvb2xlYW4nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdFVwZGF0ZXM6IG11c3QgcHJvdmlkZSBhbiBpc0JhdGNoaW5nVXBkYXRlcyBib29sZWFuIGF0dHJpYnV0ZScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGJhdGNoaW5nU3RyYXRlZ3kgPSBfYmF0Y2hpbmdTdHJhdGVneTtcbiAgICB9XG4gIH07XG4gIHZhciBSZWFjdFVwZGF0ZXMgPSB7XG4gICAgUmVhY3RSZWNvbmNpbGVUcmFuc2FjdGlvbjogbnVsbCxcbiAgICBiYXRjaGVkVXBkYXRlczogYmF0Y2hlZFVwZGF0ZXMsXG4gICAgZW5xdWV1ZVVwZGF0ZTogZW5xdWV1ZVVwZGF0ZSxcbiAgICBmbHVzaEJhdGNoZWRVcGRhdGVzOiBmbHVzaEJhdGNoZWRVcGRhdGVzLFxuICAgIGluamVjdGlvbjogUmVhY3RVcGRhdGVzSW5qZWN0aW9uLFxuICAgIGFzYXA6IGFzYXBcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdFVwZGF0ZXM7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbiAgdmFyIFJlYWN0SW5zdGFuY2VNYXAgPSByZXF1aXJlKCcuL1JlYWN0SW5zdGFuY2VNYXAnKTtcbiAgdmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIGZ1bmN0aW9uIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIFJlYWN0VXBkYXRlcy5lbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICB9XG4gIGZ1bmN0aW9uIGZvcm1hdFVuZXhwZWN0ZWRBcmd1bWVudChhcmcpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBhcmc7XG4gICAgaWYgKHR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gYXJnLmNvbnN0cnVjdG9yICYmIGFyZy5jb25zdHJ1Y3Rvci5uYW1lIHx8IHR5cGU7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhcmcpO1xuICAgIGlmIChrZXlzLmxlbmd0aCA+IDAgJiYga2V5cy5sZW5ndGggPCAyMCkge1xuICAgICAgcmV0dXJuIGRpc3BsYXlOYW1lICsgJyAoa2V5czogJyArIGtleXMuam9pbignLCAnKSArICcpJztcbiAgICB9XG4gICAgcmV0dXJuIGRpc3BsYXlOYW1lO1xuICB9XG4gIGZ1bmN0aW9uIGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQocHVibGljSW5zdGFuY2UpO1xuICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWNhbGxlck5hbWUsICclcyguLi4pOiBDYW4gb25seSB1cGRhdGUgYSBtb3VudGVkIG9yIG1vdW50aW5nIGNvbXBvbmVudC4gJyArICdUaGlzIHVzdWFsbHkgbWVhbnMgeW91IGNhbGxlZCAlcygpIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuICcgKyAnVGhpcyBpcyBhIG5vLW9wLiBQbGVhc2UgY2hlY2sgdGhlIGNvZGUgZm9yIHRoZSAlcyBjb21wb25lbnQuJywgY2FsbGVyTmFtZSwgY2FsbGVyTmFtZSwgcHVibGljSW5zdGFuY2UuY29uc3RydWN0b3IuZGlzcGxheU5hbWUpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsICclcyguLi4pOiBDYW5ub3QgdXBkYXRlIGR1cmluZyBhbiBleGlzdGluZyBzdGF0ZSB0cmFuc2l0aW9uIChzdWNoIGFzICcgKyAnd2l0aGluIGByZW5kZXJgIG9yIGFub3RoZXIgY29tcG9uZW50XFwncyBjb25zdHJ1Y3RvcikuIFJlbmRlciBtZXRob2RzICcgKyAnc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGU7IGNvbnN0cnVjdG9yICcgKyAnc2lkZS1lZmZlY3RzIGFyZSBhbiBhbnRpLXBhdHRlcm4sIGJ1dCBjYW4gYmUgbW92ZWQgdG8gJyArICdgY29tcG9uZW50V2lsbE1vdW50YC4nLCBjYWxsZXJOYW1lKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIGludGVybmFsSW5zdGFuY2U7XG4gIH1cbiAgdmFyIFJlYWN0VXBkYXRlUXVldWUgPSB7XG4gICAgaXNNb3VudGVkOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICAgICAgaWYgKG93bmVyICE9PSBudWxsKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcob3duZXIuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyLCAnJXMgaXMgYWNjZXNzaW5nIGlzTW91bnRlZCBpbnNpZGUgaXRzIHJlbmRlcigpIGZ1bmN0aW9uLiAnICsgJ3JlbmRlcigpIHNob3VsZCBiZSBhIHB1cmUgZnVuY3Rpb24gb2YgcHJvcHMgYW5kIHN0YXRlLiBJdCBzaG91bGQgJyArICduZXZlciBhY2Nlc3Mgc29tZXRoaW5nIHRoYXQgcmVxdWlyZXMgc3RhbGUgZGF0YSBmcm9tIHRoZSBwcmV2aW91cyAnICsgJ3JlbmRlciwgc3VjaCBhcyByZWZzLiBNb3ZlIHRoaXMgbG9naWMgdG8gY29tcG9uZW50RGlkTW91bnQgYW5kICcgKyAnY29tcG9uZW50RGlkVXBkYXRlIGluc3RlYWQuJywgb3duZXIuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgICAgIG93bmVyLl93YXJuZWRBYm91dFJlZnNJblJlbmRlciA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gUmVhY3RJbnN0YW5jZU1hcC5nZXQocHVibGljSW5zdGFuY2UpO1xuICAgICAgaWYgKGludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuICEhaW50ZXJuYWxJbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgICAgUmVhY3RVcGRhdGVRdWV1ZS52YWxpZGF0ZUNhbGxiYWNrKGNhbGxiYWNrLCBjYWxsZXJOYW1lKTtcbiAgICAgIHZhciBpbnRlcm5hbEluc3RhbmNlID0gZ2V0SW50ZXJuYWxJbnN0YW5jZVJlYWR5Rm9yVXBkYXRlKHB1YmxpY0luc3RhbmNlKTtcbiAgICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICAgIH1cbiAgICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfSxcbiAgICBlbnF1ZXVlQ2FsbGJhY2tJbnRlcm5hbDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzKSB7XG4gICAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nQ2FsbGJhY2tzID0gW2NhbGxiYWNrXTtcbiAgICAgIH1cbiAgICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfSxcbiAgICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEludGVybmFsSW5zdGFuY2VSZWFkeUZvclVwZGF0ZShwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gICAgICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaW50ZXJuYWxJbnN0YW5jZS5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfSxcbiAgICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgY29tcGxldGVTdGF0ZSkge1xuICAgICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsICdyZXBsYWNlU3RhdGUnKTtcbiAgICAgIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtjb21wbGV0ZVN0YXRlXTtcbiAgICAgIGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSB0cnVlO1xuICAgICAgZW5xdWV1ZVVwZGF0ZShpbnRlcm5hbEluc3RhbmNlKTtcbiAgICB9LFxuICAgIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24ocHVibGljSW5zdGFuY2UsIHBhcnRpYWxTdGF0ZSkge1xuICAgICAgdmFyIGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnRlcm5hbEluc3RhbmNlUmVhZHlGb3JVcGRhdGUocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICAgICAgaWYgKCFpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBxdWV1ZSA9IGludGVybmFsSW5zdGFuY2UuX3BlbmRpbmdTdGF0ZVF1ZXVlIHx8IChpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IFtdKTtcbiAgICAgIHF1ZXVlLnB1c2gocGFydGlhbFN0YXRlKTtcbiAgICAgIGVucXVldWVVcGRhdGUoaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfSxcbiAgICBlbnF1ZXVlRWxlbWVudEludGVybmFsOiBmdW5jdGlvbihpbnRlcm5hbEluc3RhbmNlLCBuZXdFbGVtZW50KSB7XG4gICAgICBpbnRlcm5hbEluc3RhbmNlLl9wZW5kaW5nRWxlbWVudCA9IG5ld0VsZW1lbnQ7XG4gICAgICBlbnF1ZXVlVXBkYXRlKGludGVybmFsSW5zdGFuY2UpO1xuICAgIH0sXG4gICAgdmFsaWRhdGVDYWxsYmFjazogZnVuY3Rpb24oY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICAgICEoIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMoLi4uKTogRXhwZWN0ZWQgdGhlIGxhc3Qgb3B0aW9uYWwgYGNhbGxiYWNrYCBhcmd1bWVudCB0byBiZSBhICcgKyAnZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsIGNhbGxlck5hbWUsIGZvcm1hdFVuZXhwZWN0ZWRBcmd1bWVudChjYWxsYmFjaykpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RVcGRhdGVRdWV1ZTtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG4gIHZhciBSZWFjdENvbXBvbmVudEVudmlyb25tZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudEVudmlyb25tZW50Jyk7XG4gIHZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbiAgdmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG4gIHZhciBSZWFjdEVycm9yVXRpbHMgPSByZXF1aXJlKCcuL1JlYWN0RXJyb3JVdGlscycpO1xuICB2YXIgUmVhY3RJbnN0YW5jZU1hcCA9IHJlcXVpcmUoJy4vUmVhY3RJbnN0YW5jZU1hcCcpO1xuICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG4gIHZhciBSZWFjdE5vZGVUeXBlcyA9IHJlcXVpcmUoJy4vUmVhY3ROb2RlVHlwZXMnKTtcbiAgdmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbnMnKTtcbiAgdmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcycpO1xuICB2YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbiAgdmFyIFJlYWN0VXBkYXRlUXVldWUgPSByZXF1aXJlKCcuL1JlYWN0VXBkYXRlUXVldWUnKTtcbiAgdmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIgc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL3Nob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50Jyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICBmdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oY29tcG9uZW50KSB7XG4gICAgdmFyIG93bmVyID0gY29tcG9uZW50Ll9jdXJyZW50RWxlbWVudC5fb3duZXIgfHwgbnVsbDtcbiAgICBpZiAob3duZXIpIHtcbiAgICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGZ1bmN0aW9uIFN0YXRlbGVzc0NvbXBvbmVudChDb21wb25lbnQpIHt9XG4gIFN0YXRlbGVzc0NvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIENvbXBvbmVudCA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHRoaXMpLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgIHZhciBlbGVtZW50ID0gQ29tcG9uZW50KHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCwgdGhpcy51cGRhdGVyKTtcbiAgICB3YXJuSWZJbnZhbGlkRWxlbWVudChDb21wb25lbnQsIGVsZW1lbnQpO1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9O1xuICBmdW5jdGlvbiB3YXJuSWZJbnZhbGlkRWxlbWVudChDb21wb25lbnQsIGVsZW1lbnQpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSBmYWxzZSB8fCBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCksICclcyguLi4pOiBBIHZhbGlkIFJlYWN0IGVsZW1lbnQgKG9yIG51bGwpIG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSAnICsgJ3JldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC4nLCBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbnZva2VDb21wb25lbnREaWRNb3VudFdpdGhUaW1lcigpIHtcbiAgICB2YXIgcHVibGljSW5zdGFuY2UgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVnaW5MaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50RGlkTW91bnQnKTtcbiAgICB9XG4gICAgcHVibGljSW5zdGFuY2UuY29tcG9uZW50RGlkTW91bnQoKTtcbiAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uRW5kTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudERpZE1vdW50Jyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGludm9rZUNvbXBvbmVudERpZFVwZGF0ZVdpdGhUaW1lcihwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpIHtcbiAgICB2YXIgcHVibGljSW5zdGFuY2UgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uQmVnaW5MaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50RGlkVXBkYXRlJyk7XG4gICAgfVxuICAgIHB1YmxpY0luc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpO1xuICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50RGlkVXBkYXRlJyk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNob3VsZENvbnN0cnVjdChDb21wb25lbnQpIHtcbiAgICByZXR1cm4gQ29tcG9uZW50LnByb3RvdHlwZSAmJiBDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ7XG4gIH1cbiAgdmFyIG5leHRNb3VudElEID0gMTtcbiAgdmFyIFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50TWl4aW4gPSB7XG4gICAgY29uc3RydWN0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICAgIHRoaXMuX2luc3RhbmNlID0gbnVsbDtcbiAgICAgIHRoaXMuX25hdGl2ZVBhcmVudCA9IG51bGw7XG4gICAgICB0aGlzLl9uYXRpdmVDb250YWluZXJJbmZvID0gbnVsbDtcbiAgICAgIHRoaXMuX3VwZGF0ZUJhdGNoTnVtYmVyID0gbnVsbDtcbiAgICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3BlbmRpbmdGb3JjZVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fcmVuZGVyZWROb2RlVHlwZSA9IG51bGw7XG4gICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IG51bGw7XG4gICAgICB0aGlzLl9jb250ZXh0ID0gbnVsbDtcbiAgICAgIHRoaXMuX21vdW50T3JkZXIgPSAwO1xuICAgICAgdGhpcy5fdG9wTGV2ZWxXcmFwcGVyID0gbnVsbDtcbiAgICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICAgICAgdGhpcy5fY2FsbGVkQ29tcG9uZW50V2lsbFVubW91bnQgPSBmYWxzZTtcbiAgICB9LFxuICAgIG1vdW50Q29tcG9uZW50OiBmdW5jdGlvbih0cmFuc2FjdGlvbiwgbmF0aXZlUGFyZW50LCBuYXRpdmVDb250YWluZXJJbmZvLCBjb250ZXh0KSB7XG4gICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICAgIHRoaXMuX21vdW50T3JkZXIgPSBuZXh0TW91bnRJRCsrO1xuICAgICAgdGhpcy5fbmF0aXZlUGFyZW50ID0gbmF0aXZlUGFyZW50O1xuICAgICAgdGhpcy5fbmF0aXZlQ29udGFpbmVySW5mbyA9IG5hdGl2ZUNvbnRhaW5lckluZm87XG4gICAgICB2YXIgcHVibGljUHJvcHMgPSB0aGlzLl9wcm9jZXNzUHJvcHModGhpcy5fY3VycmVudEVsZW1lbnQucHJvcHMpO1xuICAgICAgdmFyIHB1YmxpY0NvbnRleHQgPSB0aGlzLl9wcm9jZXNzQ29udGV4dChjb250ZXh0KTtcbiAgICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgICAgdmFyIGluc3QgPSB0aGlzLl9jb25zdHJ1Y3RDb21wb25lbnQocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQpO1xuICAgICAgdmFyIHJlbmRlcmVkRWxlbWVudDtcbiAgICAgIGlmICghc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkgJiYgKGluc3QgPT0gbnVsbCB8fCBpbnN0LnJlbmRlciA9PSBudWxsKSkge1xuICAgICAgICByZW5kZXJlZEVsZW1lbnQgPSBpbnN0O1xuICAgICAgICB3YXJuSWZJbnZhbGlkRWxlbWVudChDb21wb25lbnQsIHJlbmRlcmVkRWxlbWVudCk7XG4gICAgICAgICEoaW5zdCA9PT0gbnVsbCB8fCBpbnN0ID09PSBmYWxzZSB8fCBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoaW5zdCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzKC4uLik6IEEgdmFsaWQgUmVhY3QgZWxlbWVudCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gWW91IG1heSBoYXZlICcgKyAncmV0dXJuZWQgdW5kZWZpbmVkLCBhbiBhcnJheSBvciBzb21lIG90aGVyIGludmFsaWQgb2JqZWN0LicsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBpbnN0ID0gbmV3IFN0YXRlbGVzc0NvbXBvbmVudChDb21wb25lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKGluc3QucmVuZGVyID09IG51bGwpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLik6IE5vIGByZW5kZXJgIG1ldGhvZCBmb3VuZCBvbiB0aGUgcmV0dXJuZWQgY29tcG9uZW50ICcgKyAnaW5zdGFuY2U6IHlvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gZGVmaW5lIGByZW5kZXJgLicsIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByb3BzTXV0YXRlZCA9IGluc3QucHJvcHMgIT09IHB1YmxpY1Byb3BzO1xuICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSB8fCAnQ29tcG9uZW50JztcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoaW5zdC5wcm9wcyA9PT0gdW5kZWZpbmVkIHx8ICFwcm9wc011dGF0ZWQsICclcyguLi4pOiBXaGVuIGNhbGxpbmcgc3VwZXIoKSBpbiBgJXNgLCBtYWtlIHN1cmUgdG8gcGFzcyAnICsgJ3VwIHRoZSBzYW1lIHByb3BzIHRoYXQgeW91ciBjb21wb25lbnRcXCdzIGNvbnN0cnVjdG9yIHdhcyBwYXNzZWQuJywgY29tcG9uZW50TmFtZSwgY29tcG9uZW50TmFtZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICBpbnN0LnByb3BzID0gcHVibGljUHJvcHM7XG4gICAgICBpbnN0LmNvbnRleHQgPSBwdWJsaWNDb250ZXh0O1xuICAgICAgaW5zdC5yZWZzID0gZW1wdHlPYmplY3Q7XG4gICAgICBpbnN0LnVwZGF0ZXIgPSBSZWFjdFVwZGF0ZVF1ZXVlO1xuICAgICAgdGhpcy5faW5zdGFuY2UgPSBpbnN0O1xuICAgICAgUmVhY3RJbnN0YW5jZU1hcC5zZXQoaW5zdCwgdGhpcyk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5nZXRJbml0aWFsU3RhdGUgfHwgaW5zdC5nZXRJbml0aWFsU3RhdGUuaXNSZWFjdENsYXNzQXBwcm92ZWQsICdnZXRJbml0aWFsU3RhdGUgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnRGlkIHlvdSBtZWFuIHRvIGRlZmluZSBhIHN0YXRlIHByb3BlcnR5IGluc3RlYWQ/JywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpbnN0LmdldERlZmF1bHRQcm9wcyB8fCBpbnN0LmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCwgJ2dldERlZmF1bHRQcm9wcyB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiAnICsgJ1RoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGNsYXNzZXMgY3JlYXRlZCB1c2luZyBSZWFjdC5jcmVhdGVDbGFzcy4gJyArICdVc2UgYSBzdGF0aWMgcHJvcGVydHkgdG8gZGVmaW5lIGRlZmF1bHRQcm9wcyBpbnN0ZWFkLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdhIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghaW5zdC5wcm9wVHlwZXMsICdwcm9wVHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyAnICsgJ3Byb3BlcnR5IHRvIGRlZmluZSBwcm9wVHlwZXMgaW5zdGVhZC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnYSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWluc3QuY29udGV4dFR5cGVzLCAnY29udGV4dFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSAnICsgJ3N0YXRpYyBwcm9wZXJ0eSB0byBkZWZpbmUgY29udGV4dFR5cGVzIGluc3RlYWQuJywgdGhpcy5nZXROYW1lKCkgfHwgJ2EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHR5cGVvZiBpbnN0LmNvbXBvbmVudFNob3VsZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRTaG91bGRVcGRhdGUoKS4gRGlkIHlvdSBtZWFuIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpPyAnICsgJ1RoZSBuYW1lIGlzIHBocmFzZWQgYXMgYSBxdWVzdGlvbiBiZWNhdXNlIHRoZSBmdW5jdGlvbiBpcyAnICsgJ2V4cGVjdGVkIHRvIHJldHVybiBhIHZhbHVlLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgaW5zdC5jb21wb25lbnREaWRVbm1vdW50ICE9PSAnZnVuY3Rpb24nLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudERpZFVubW91bnQoKS4gQnV0IHRoZXJlIGlzIG5vIHN1Y2ggbGlmZWN5Y2xlIG1ldGhvZC4gJyArICdEaWQgeW91IG1lYW4gY29tcG9uZW50V2lsbFVubW91bnQoKT8nLCB0aGlzLmdldE5hbWUoKSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3QuY29tcG9uZW50V2lsbFJlY2lldmVQcm9wcyAhPT0gJ2Z1bmN0aW9uJywgJyVzIGhhcyBhIG1ldGhvZCBjYWxsZWQgJyArICdjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCk/JywgdGhpcy5nZXROYW1lKCkgfHwgJ0EgY29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB2YXIgaW5pdGlhbFN0YXRlID0gaW5zdC5zdGF0ZTtcbiAgICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbnN0LnN0YXRlID0gaW5pdGlhbFN0YXRlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgICEodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuc3RhdGU6IG11c3QgYmUgc2V0IHRvIGFuIG9iamVjdCBvciBudWxsJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdGhpcy5fcGVuZGluZ1N0YXRlUXVldWUgPSBudWxsO1xuICAgICAgdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZSA9IGZhbHNlO1xuICAgICAgdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlID0gZmFsc2U7XG4gICAgICB2YXIgbWFya3VwO1xuICAgICAgaWYgKGluc3QudW5zdGFibGVfaGFuZGxlRXJyb3IpIHtcbiAgICAgICAgbWFya3VwID0gdGhpcy5wZXJmb3JtSW5pdGlhbE1vdW50V2l0aEVycm9ySGFuZGxpbmcocmVuZGVyZWRFbGVtZW50LCBuYXRpdmVQYXJlbnQsIG5hdGl2ZUNvbnRhaW5lckluZm8sIHRyYW5zYWN0aW9uLCBjb250ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcmt1cCA9IHRoaXMucGVyZm9ybUluaXRpYWxNb3VudChyZW5kZXJlZEVsZW1lbnQsIG5hdGl2ZVBhcmVudCwgbmF0aXZlQ29udGFpbmVySW5mbywgdHJhbnNhY3Rpb24sIGNvbnRleHQpO1xuICAgICAgfVxuICAgICAgaWYgKGluc3QuY29tcG9uZW50RGlkTW91bnQpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGludm9rZUNvbXBvbmVudERpZE1vdW50V2l0aFRpbWVyLCB0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGluc3QuY29tcG9uZW50RGlkTW91bnQsIGluc3QpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFya3VwO1xuICAgIH0sXG4gICAgX2NvbnN0cnVjdENvbXBvbmVudDogZnVuY3Rpb24ocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB0aGlzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9jb25zdHJ1Y3RDb21wb25lbnRXaXRob3V0T3duZXIocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5fY29uc3RydWN0Q29tcG9uZW50V2l0aG91dE93bmVyKHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIF9jb25zdHJ1Y3RDb21wb25lbnRXaXRob3V0T3duZXI6IGZ1bmN0aW9uKHB1YmxpY1Byb3BzLCBwdWJsaWNDb250ZXh0KSB7XG4gICAgICB2YXIgQ29tcG9uZW50ID0gdGhpcy5fY3VycmVudEVsZW1lbnQudHlwZTtcbiAgICAgIHZhciBpbnN0YW5jZU9yRWxlbWVudDtcbiAgICAgIGlmIChzaG91bGRDb25zdHJ1Y3QoQ29tcG9uZW50KSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkxpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdjdG9yJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluc3RhbmNlT3JFbGVtZW50ID0gbmV3IENvbXBvbmVudChwdWJsaWNQcm9wcywgcHVibGljQ29udGV4dCwgUmVhY3RVcGRhdGVRdWV1ZSk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZExpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdjdG9yJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkxpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdyZW5kZXInKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5zdGFuY2VPckVsZW1lbnQgPSBDb21wb25lbnQocHVibGljUHJvcHMsIHB1YmxpY0NvbnRleHQsIFJlYWN0VXBkYXRlUXVldWUpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAncmVuZGVyJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5zdGFuY2VPckVsZW1lbnQ7XG4gICAgfSxcbiAgICBwZXJmb3JtSW5pdGlhbE1vdW50V2l0aEVycm9ySGFuZGxpbmc6IGZ1bmN0aW9uKHJlbmRlcmVkRWxlbWVudCwgbmF0aXZlUGFyZW50LCBuYXRpdmVDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCkge1xuICAgICAgdmFyIG1hcmt1cDtcbiAgICAgIHZhciBjaGVja3BvaW50ID0gdHJhbnNhY3Rpb24uY2hlY2twb2ludCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbWFya3VwID0gdGhpcy5wZXJmb3JtSW5pdGlhbE1vdW50KHJlbmRlcmVkRWxlbWVudCwgbmF0aXZlUGFyZW50LCBuYXRpdmVDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uLnJvbGxiYWNrKGNoZWNrcG9pbnQpO1xuICAgICAgICB0aGlzLl9pbnN0YW5jZS51bnN0YWJsZV9oYW5kbGVFcnJvcihlKTtcbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlKSB7XG4gICAgICAgICAgdGhpcy5faW5zdGFuY2Uuc3RhdGUgPSB0aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKHRoaXMuX2luc3RhbmNlLnByb3BzLCB0aGlzLl9pbnN0YW5jZS5jb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBjaGVja3BvaW50ID0gdHJhbnNhY3Rpb24uY2hlY2twb2ludCgpO1xuICAgICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudC51bm1vdW50Q29tcG9uZW50KHRydWUpO1xuICAgICAgICB0cmFuc2FjdGlvbi5yb2xsYmFjayhjaGVja3BvaW50KTtcbiAgICAgICAgbWFya3VwID0gdGhpcy5wZXJmb3JtSW5pdGlhbE1vdW50KHJlbmRlcmVkRWxlbWVudCwgbmF0aXZlUGFyZW50LCBuYXRpdmVDb250YWluZXJJbmZvLCB0cmFuc2FjdGlvbiwgY29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFya3VwO1xuICAgIH0sXG4gICAgcGVyZm9ybUluaXRpYWxNb3VudDogZnVuY3Rpb24ocmVuZGVyZWRFbGVtZW50LCBuYXRpdmVQYXJlbnQsIG5hdGl2ZUNvbnRhaW5lckluZm8sIHRyYW5zYWN0aW9uLCBjb250ZXh0KSB7XG4gICAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgaWYgKGluc3QuY29tcG9uZW50V2lsbE1vdW50KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudFdpbGxNb3VudCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnN0LmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50V2lsbE1vdW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSkge1xuICAgICAgICAgIGluc3Quc3RhdGUgPSB0aGlzLl9wcm9jZXNzUGVuZGluZ1N0YXRlKGluc3QucHJvcHMsIGluc3QuY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyZW5kZXJlZEVsZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZW5kZXJlZEVsZW1lbnQgPSB0aGlzLl9yZW5kZXJWYWxpZGF0ZWRDb21wb25lbnQoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3JlbmRlcmVkTm9kZVR5cGUgPSBSZWFjdE5vZGVUeXBlcy5nZXRUeXBlKHJlbmRlcmVkRWxlbWVudCk7XG4gICAgICB0aGlzLl9yZW5kZXJlZENvbXBvbmVudCA9IHRoaXMuX2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQocmVuZGVyZWRFbGVtZW50KTtcbiAgICAgIHZhciBtYXJrdXAgPSBSZWFjdFJlY29uY2lsZXIubW91bnRDb21wb25lbnQodGhpcy5fcmVuZGVyZWRDb21wb25lbnQsIHRyYW5zYWN0aW9uLCBuYXRpdmVQYXJlbnQsIG5hdGl2ZUNvbnRhaW5lckluZm8sIHRoaXMuX3Byb2Nlc3NDaGlsZENvbnRleHQoY29udGV4dCkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRDaGlsZHJlbih0aGlzLl9kZWJ1Z0lELCB0aGlzLl9yZW5kZXJlZENvbXBvbmVudC5fZGVidWdJRCAhPT0gMCA/IFt0aGlzLl9yZW5kZXJlZENvbXBvbmVudC5fZGVidWdJRF0gOiBbXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXJrdXA7XG4gICAgfSxcbiAgICBnZXROYXRpdmVOb2RlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBSZWFjdFJlY29uY2lsZXIuZ2V0TmF0aXZlTm9kZSh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCk7XG4gICAgfSxcbiAgICB1bm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihzYWZlbHkpIHtcbiAgICAgIGlmICghdGhpcy5fcmVuZGVyZWRDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICAgIGlmIChpbnN0LmNvbXBvbmVudFdpbGxVbm1vdW50ICYmICFpbnN0Ll9jYWxsZWRDb21wb25lbnRXaWxsVW5tb3VudCkge1xuICAgICAgICBpbnN0Ll9jYWxsZWRDb21wb25lbnRXaWxsVW5tb3VudCA9IHRydWU7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudFdpbGxVbm1vdW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzYWZlbHkpIHtcbiAgICAgICAgICB2YXIgbmFtZSA9IHRoaXMuZ2V0TmFtZSgpICsgJy5jb21wb25lbnRXaWxsVW5tb3VudCgpJztcbiAgICAgICAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrKG5hbWUsIGluc3QuY29tcG9uZW50V2lsbFVubW91bnQuYmluZChpbnN0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5zdC5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkVuZExpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdjb21wb25lbnRXaWxsVW5tb3VudCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50KSB7XG4gICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50LCBzYWZlbHkpO1xuICAgICAgICB0aGlzLl9yZW5kZXJlZE5vZGVUeXBlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSBudWxsO1xuICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSA9IG51bGw7XG4gICAgICB0aGlzLl9wZW5kaW5nUmVwbGFjZVN0YXRlID0gZmFsc2U7XG4gICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFja3MgPSBudWxsO1xuICAgICAgdGhpcy5fcGVuZGluZ0VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fY29udGV4dCA9IG51bGw7XG4gICAgICB0aGlzLl9yb290Tm9kZUlEID0gbnVsbDtcbiAgICAgIHRoaXMuX3RvcExldmVsV3JhcHBlciA9IG51bGw7XG4gICAgICBSZWFjdEluc3RhbmNlTWFwLnJlbW92ZShpbnN0KTtcbiAgICB9LFxuICAgIF9tYXNrQ29udGV4dDogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICB2YXIgY29udGV4dFR5cGVzID0gQ29tcG9uZW50LmNvbnRleHRUeXBlcztcbiAgICAgIGlmICghY29udGV4dFR5cGVzKSB7XG4gICAgICAgIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICAgIH1cbiAgICAgIHZhciBtYXNrZWRDb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBjb250ZXh0TmFtZSBpbiBjb250ZXh0VHlwZXMpIHtcbiAgICAgICAgbWFza2VkQ29udGV4dFtjb250ZXh0TmFtZV0gPSBjb250ZXh0W2NvbnRleHROYW1lXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXNrZWRDb250ZXh0O1xuICAgIH0sXG4gICAgX3Byb2Nlc3NDb250ZXh0OiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICB2YXIgbWFza2VkQ29udGV4dCA9IHRoaXMuX21hc2tDb250ZXh0KGNvbnRleHQpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIENvbXBvbmVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICAgIGlmIChDb21wb25lbnQuY29udGV4dFR5cGVzKSB7XG4gICAgICAgICAgdGhpcy5fY2hlY2tQcm9wVHlwZXMoQ29tcG9uZW50LmNvbnRleHRUeXBlcywgbWFza2VkQ29udGV4dCwgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5jb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG1hc2tlZENvbnRleHQ7XG4gICAgfSxcbiAgICBfcHJvY2Vzc0NoaWxkQ29udGV4dDogZnVuY3Rpb24oY3VycmVudENvbnRleHQpIHtcbiAgICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgICAgdmFyIGluc3QgPSB0aGlzLl9pbnN0YW5jZTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dCgpO1xuICAgICAgfVxuICAgICAgdmFyIGNoaWxkQ29udGV4dCA9IGluc3QuZ2V0Q2hpbGRDb250ZXh0ICYmIGluc3QuZ2V0Q2hpbGRDb250ZXh0KCk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0KCk7XG4gICAgICB9XG4gICAgICBpZiAoY2hpbGRDb250ZXh0KSB7XG4gICAgICAgICEodHlwZW9mIENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcyA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLmdldENoaWxkQ29udGV4dCgpOiBjaGlsZENvbnRleHRUeXBlcyBtdXN0IGJlIGRlZmluZWQgaW4gb3JkZXIgdG8gJyArICd1c2UgZ2V0Q2hpbGRDb250ZXh0KCkuJywgdGhpcy5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcywgY2hpbGRDb250ZXh0LCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNoaWxkQ29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBjaGlsZENvbnRleHQpIHtcbiAgICAgICAgICAhKG5hbWUgaW4gQ29tcG9uZW50LmNoaWxkQ29udGV4dFR5cGVzKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclcy5nZXRDaGlsZENvbnRleHQoKToga2V5IFwiJXNcIiBpcyBub3QgZGVmaW5lZCBpbiBjaGlsZENvbnRleHRUeXBlcy4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9hc3NpZ24oe30sIGN1cnJlbnRDb250ZXh0LCBjaGlsZENvbnRleHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGN1cnJlbnRDb250ZXh0O1xuICAgIH0sXG4gICAgX3Byb2Nlc3NQcm9wczogZnVuY3Rpb24obmV3UHJvcHMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBDb21wb25lbnQgPSB0aGlzLl9jdXJyZW50RWxlbWVudC50eXBlO1xuICAgICAgICBpZiAoQ29tcG9uZW50LnByb3BUeXBlcykge1xuICAgICAgICAgIHRoaXMuX2NoZWNrUHJvcFR5cGVzKENvbXBvbmVudC5wcm9wVHlwZXMsIG5ld1Byb3BzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3UHJvcHM7XG4gICAgfSxcbiAgICBfY2hlY2tQcm9wVHlwZXM6IGZ1bmN0aW9uKHByb3BUeXBlcywgcHJvcHMsIGxvY2F0aW9uKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IHRoaXMuZ2V0TmFtZSgpO1xuICAgICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcFR5cGVzKSB7XG4gICAgICAgIGlmIChwcm9wVHlwZXMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAhKHR5cGVvZiBwcm9wVHlwZXNbcHJvcE5hbWVdID09PSAnZnVuY3Rpb24nKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSAnICsgJ2Zyb20gUmVhY3QuUHJvcFR5cGVzLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCBwcm9wTmFtZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICAgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICBlcnJvciA9IGV4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgdmFyIGFkZGVuZHVtID0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKHRoaXMpO1xuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdGYWlsZWQgQ29tcG9zaXRlIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdm9pZCAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdGYWlsZWQgQ29udGV4dCBUeXBlczogJXMlcycsIGVycm9yLm1lc3NhZ2UsIGFkZGVuZHVtKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHJlY2VpdmVDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCB0cmFuc2FjdGlvbiwgbmV4dENvbnRleHQpIHtcbiAgICAgIHZhciBwcmV2RWxlbWVudCA9IHRoaXMuX2N1cnJlbnRFbGVtZW50O1xuICAgICAgdmFyIHByZXZDb250ZXh0ID0gdGhpcy5fY29udGV4dDtcbiAgICAgIHRoaXMuX3BlbmRpbmdFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMudXBkYXRlQ29tcG9uZW50KHRyYW5zYWN0aW9uLCBwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQsIHByZXZDb250ZXh0LCBuZXh0Q29udGV4dCk7XG4gICAgfSxcbiAgICBwZXJmb3JtVXBkYXRlSWZOZWNlc3Nhcnk6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgICBpZiAodGhpcy5fcGVuZGluZ0VsZW1lbnQgIT0gbnVsbCkge1xuICAgICAgICBSZWFjdFJlY29uY2lsZXIucmVjZWl2ZUNvbXBvbmVudCh0aGlzLCB0aGlzLl9wZW5kaW5nRWxlbWVudCwgdHJhbnNhY3Rpb24sIHRoaXMuX2NvbnRleHQpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZSAhPT0gbnVsbCB8fCB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnQodHJhbnNhY3Rpb24sIHRoaXMuX2N1cnJlbnRFbGVtZW50LCB0aGlzLl9jdXJyZW50RWxlbWVudCwgdGhpcy5fY29udGV4dCwgdGhpcy5fY29udGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl91cGRhdGVCYXRjaE51bWJlciA9IG51bGw7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cGRhdGVDb21wb25lbnQ6IGZ1bmN0aW9uKHRyYW5zYWN0aW9uLCBwcmV2UGFyZW50RWxlbWVudCwgbmV4dFBhcmVudEVsZW1lbnQsIHByZXZVbm1hc2tlZENvbnRleHQsIG5leHRVbm1hc2tlZENvbnRleHQpIHtcbiAgICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgICB2YXIgd2lsbFJlY2VpdmUgPSBmYWxzZTtcbiAgICAgIHZhciBuZXh0Q29udGV4dDtcbiAgICAgIHZhciBuZXh0UHJvcHM7XG4gICAgICBpZiAodGhpcy5fY29udGV4dCA9PT0gbmV4dFVubWFza2VkQ29udGV4dCkge1xuICAgICAgICBuZXh0Q29udGV4dCA9IGluc3QuY29udGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRDb250ZXh0ID0gdGhpcy5fcHJvY2Vzc0NvbnRleHQobmV4dFVubWFza2VkQ29udGV4dCk7XG4gICAgICAgIHdpbGxSZWNlaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChwcmV2UGFyZW50RWxlbWVudCA9PT0gbmV4dFBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgbmV4dFByb3BzID0gbmV4dFBhcmVudEVsZW1lbnQucHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0UHJvcHMgPSB0aGlzLl9wcm9jZXNzUHJvcHMobmV4dFBhcmVudEVsZW1lbnQucHJvcHMpO1xuICAgICAgICB3aWxsUmVjZWl2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAod2lsbFJlY2VpdmUgJiYgaW5zdC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5zdC5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG5leHRTdGF0ZSA9IHRoaXMuX3Byb2Nlc3NQZW5kaW5nU3RhdGUobmV4dFByb3BzLCBuZXh0Q29udGV4dCk7XG4gICAgICB2YXIgc2hvdWxkVXBkYXRlID0gdHJ1ZTtcbiAgICAgIGlmICghdGhpcy5fcGVuZGluZ0ZvcmNlVXBkYXRlICYmIGluc3Quc2hvdWxkQ29tcG9uZW50VXBkYXRlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzaG91bGRVcGRhdGUgPSBpbnN0LnNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhzaG91bGRVcGRhdGUgIT09IHVuZGVmaW5lZCwgJyVzLnNob3VsZENvbXBvbmVudFVwZGF0ZSgpOiBSZXR1cm5lZCB1bmRlZmluZWQgaW5zdGVhZCBvZiBhICcgKyAnYm9vbGVhbiB2YWx1ZS4gTWFrZSBzdXJlIHRvIHJldHVybiB0cnVlIG9yIGZhbHNlLicsIHRoaXMuZ2V0TmFtZSgpIHx8ICdSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgdGhpcy5fdXBkYXRlQmF0Y2hOdW1iZXIgPSBudWxsO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgICB0aGlzLl9wZW5kaW5nRm9yY2VVcGRhdGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGVyZm9ybUNvbXBvbmVudFVwZGF0ZShuZXh0UGFyZW50RWxlbWVudCwgbmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0LCB0cmFuc2FjdGlvbiwgbmV4dFVubWFza2VkQ29udGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jdXJyZW50RWxlbWVudCA9IG5leHRQYXJlbnRFbGVtZW50O1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gbmV4dFVubWFza2VkQ29udGV4dDtcbiAgICAgICAgaW5zdC5wcm9wcyA9IG5leHRQcm9wcztcbiAgICAgICAgaW5zdC5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgICAgaW5zdC5jb250ZXh0ID0gbmV4dENvbnRleHQ7XG4gICAgICB9XG4gICAgfSxcbiAgICBfcHJvY2Vzc1BlbmRpbmdTdGF0ZTogZnVuY3Rpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgICB2YXIgcXVldWUgPSB0aGlzLl9wZW5kaW5nU3RhdGVRdWV1ZTtcbiAgICAgIHZhciByZXBsYWNlID0gdGhpcy5fcGVuZGluZ1JlcGxhY2VTdGF0ZTtcbiAgICAgIHRoaXMuX3BlbmRpbmdSZXBsYWNlU3RhdGUgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3BlbmRpbmdTdGF0ZVF1ZXVlID0gbnVsbDtcbiAgICAgIGlmICghcXVldWUpIHtcbiAgICAgICAgcmV0dXJuIGluc3Quc3RhdGU7XG4gICAgICB9XG4gICAgICBpZiAocmVwbGFjZSAmJiBxdWV1ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHF1ZXVlWzBdO1xuICAgICAgfVxuICAgICAgdmFyIG5leHRTdGF0ZSA9IF9hc3NpZ24oe30sIHJlcGxhY2UgPyBxdWV1ZVswXSA6IGluc3Quc3RhdGUpO1xuICAgICAgZm9yICh2YXIgaSA9IHJlcGxhY2UgPyAxIDogMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsID0gcXVldWVbaV07XG4gICAgICAgIF9hc3NpZ24obmV4dFN0YXRlLCB0eXBlb2YgcGFydGlhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcnRpYWwuY2FsbChpbnN0LCBuZXh0U3RhdGUsIHByb3BzLCBjb250ZXh0KSA6IHBhcnRpYWwpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHRTdGF0ZTtcbiAgICB9LFxuICAgIF9wZXJmb3JtQ29tcG9uZW50VXBkYXRlOiBmdW5jdGlvbihuZXh0RWxlbWVudCwgbmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0LCB0cmFuc2FjdGlvbiwgdW5tYXNrZWRDb250ZXh0KSB7XG4gICAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgdmFyIGhhc0NvbXBvbmVudERpZFVwZGF0ZSA9IEJvb2xlYW4oaW5zdC5jb21wb25lbnREaWRVcGRhdGUpO1xuICAgICAgdmFyIHByZXZQcm9wcztcbiAgICAgIHZhciBwcmV2U3RhdGU7XG4gICAgICB2YXIgcHJldkNvbnRleHQ7XG4gICAgICBpZiAoaGFzQ29tcG9uZW50RGlkVXBkYXRlKSB7XG4gICAgICAgIHByZXZQcm9wcyA9IGluc3QucHJvcHM7XG4gICAgICAgIHByZXZTdGF0ZSA9IGluc3Quc3RhdGU7XG4gICAgICAgIHByZXZDb250ZXh0ID0gaW5zdC5jb250ZXh0O1xuICAgICAgfVxuICAgICAgaWYgKGluc3QuY29tcG9uZW50V2lsbFVwZGF0ZSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkxpZmVDeWNsZVRpbWVyKHRoaXMuX2RlYnVnSUQsICdjb21wb25lbnRXaWxsVXBkYXRlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluc3QuY29tcG9uZW50V2lsbFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGlzLl9kZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAnY29tcG9uZW50V2lsbFVwZGF0ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5fY3VycmVudEVsZW1lbnQgPSBuZXh0RWxlbWVudDtcbiAgICAgIHRoaXMuX2NvbnRleHQgPSB1bm1hc2tlZENvbnRleHQ7XG4gICAgICBpbnN0LnByb3BzID0gbmV4dFByb3BzO1xuICAgICAgaW5zdC5zdGF0ZSA9IG5leHRTdGF0ZTtcbiAgICAgIGluc3QuY29udGV4dCA9IG5leHRDb250ZXh0O1xuICAgICAgdGhpcy5fdXBkYXRlUmVuZGVyZWRDb21wb25lbnQodHJhbnNhY3Rpb24sIHVubWFza2VkQ29udGV4dCk7XG4gICAgICBpZiAoaGFzQ29tcG9uZW50RGlkVXBkYXRlKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0UmVhY3RNb3VudFJlYWR5KCkuZW5xdWV1ZShpbnZva2VDb21wb25lbnREaWRVcGRhdGVXaXRoVGltZXIuYmluZCh0aGlzLCBwcmV2UHJvcHMsIHByZXZTdGF0ZSwgcHJldkNvbnRleHQpLCB0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmFuc2FjdGlvbi5nZXRSZWFjdE1vdW50UmVhZHkoKS5lbnF1ZXVlKGluc3QuY29tcG9uZW50RGlkVXBkYXRlLmJpbmQoaW5zdCwgcHJldlByb3BzLCBwcmV2U3RhdGUsIHByZXZDb250ZXh0KSwgaW5zdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIF91cGRhdGVSZW5kZXJlZENvbXBvbmVudDogZnVuY3Rpb24odHJhbnNhY3Rpb24sIGNvbnRleHQpIHtcbiAgICAgIHZhciBwcmV2Q29tcG9uZW50SW5zdGFuY2UgPSB0aGlzLl9yZW5kZXJlZENvbXBvbmVudDtcbiAgICAgIHZhciBwcmV2UmVuZGVyZWRFbGVtZW50ID0gcHJldkNvbXBvbmVudEluc3RhbmNlLl9jdXJyZW50RWxlbWVudDtcbiAgICAgIHZhciBuZXh0UmVuZGVyZWRFbGVtZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50KCk7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldlJlbmRlcmVkRWxlbWVudCwgbmV4dFJlbmRlcmVkRWxlbWVudCkpIHtcbiAgICAgICAgUmVhY3RSZWNvbmNpbGVyLnJlY2VpdmVDb21wb25lbnQocHJldkNvbXBvbmVudEluc3RhbmNlLCBuZXh0UmVuZGVyZWRFbGVtZW50LCB0cmFuc2FjdGlvbiwgdGhpcy5fcHJvY2Vzc0NoaWxkQ29udGV4dChjb250ZXh0KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb2xkTmF0aXZlTm9kZSA9IFJlYWN0UmVjb25jaWxlci5nZXROYXRpdmVOb2RlKHByZXZDb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICAgIFJlYWN0UmVjb25jaWxlci51bm1vdW50Q29tcG9uZW50KHByZXZDb21wb25lbnRJbnN0YW5jZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLl9yZW5kZXJlZE5vZGVUeXBlID0gUmVhY3ROb2RlVHlwZXMuZ2V0VHlwZShuZXh0UmVuZGVyZWRFbGVtZW50KTtcbiAgICAgICAgdGhpcy5fcmVuZGVyZWRDb21wb25lbnQgPSB0aGlzLl9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5leHRSZW5kZXJlZEVsZW1lbnQpO1xuICAgICAgICB2YXIgbmV4dE1hcmt1cCA9IFJlYWN0UmVjb25jaWxlci5tb3VudENvbXBvbmVudCh0aGlzLl9yZW5kZXJlZENvbXBvbmVudCwgdHJhbnNhY3Rpb24sIHRoaXMuX25hdGl2ZVBhcmVudCwgdGhpcy5fbmF0aXZlQ29udGFpbmVySW5mbywgdGhpcy5fcHJvY2Vzc0NoaWxkQ29udGV4dChjb250ZXh0KSk7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vblNldENoaWxkcmVuKHRoaXMuX2RlYnVnSUQsIHRoaXMuX3JlbmRlcmVkQ29tcG9uZW50Ll9kZWJ1Z0lEICE9PSAwID8gW3RoaXMuX3JlbmRlcmVkQ29tcG9uZW50Ll9kZWJ1Z0lEXSA6IFtdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVwbGFjZU5vZGVXaXRoTWFya3VwKG9sZE5hdGl2ZU5vZGUsIG5leHRNYXJrdXAsIHByZXZDb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBfcmVwbGFjZU5vZGVXaXRoTWFya3VwOiBmdW5jdGlvbihvbGROYXRpdmVOb2RlLCBuZXh0TWFya3VwLCBwcmV2SW5zdGFuY2UpIHtcbiAgICAgIFJlYWN0Q29tcG9uZW50RW52aXJvbm1lbnQucmVwbGFjZU5vZGVXaXRoTWFya3VwKG9sZE5hdGl2ZU5vZGUsIG5leHRNYXJrdXAsIHByZXZJbnN0YW5jZSk7XG4gICAgfSxcbiAgICBfcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50V2l0aG91dE93bmVyT3JDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBpbnN0ID0gdGhpcy5faW5zdGFuY2U7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAodGhpcy5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbkJlZ2luTGlmZUN5Y2xlVGltZXIodGhpcy5fZGVidWdJRCwgJ3JlbmRlcicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgcmVuZGVyZWRDb21wb25lbnQgPSBpbnN0LnJlbmRlcigpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHRoaXMuX2RlYnVnSUQgIT09IDApIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRMaWZlQ3ljbGVUaW1lcih0aGlzLl9kZWJ1Z0lELCAncmVuZGVyJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChyZW5kZXJlZENvbXBvbmVudCA9PT0gdW5kZWZpbmVkICYmIGluc3QucmVuZGVyLl9pc01vY2tGdW5jdGlvbikge1xuICAgICAgICAgIHJlbmRlcmVkQ29tcG9uZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlbmRlcmVkQ29tcG9uZW50O1xuICAgIH0sXG4gICAgX3JlbmRlclZhbGlkYXRlZENvbXBvbmVudDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gdGhpcztcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlbmRlcmVkQ29tcG9uZW50ID0gdGhpcy5fcmVuZGVyVmFsaWRhdGVkQ29tcG9uZW50V2l0aG91dE93bmVyT3JDb250ZXh0KCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICAgICEocmVuZGVyZWRDb21wb25lbnQgPT09IG51bGwgfHwgcmVuZGVyZWRDb21wb25lbnQgPT09IGZhbHNlIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChyZW5kZXJlZENvbXBvbmVudCkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzLnJlbmRlcigpOiBBIHZhbGlkIFJlYWN0IGVsZW1lbnQgKG9yIG51bGwpIG11c3QgYmUgcmV0dXJuZWQuIFlvdSBtYXkgaGF2ZSAnICsgJ3JldHVybmVkIHVuZGVmaW5lZCwgYW4gYXJyYXkgb3Igc29tZSBvdGhlciBpbnZhbGlkIG9iamVjdC4nLCB0aGlzLmdldE5hbWUoKSB8fCAnUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gcmVuZGVyZWRDb21wb25lbnQ7XG4gICAgfSxcbiAgICBhdHRhY2hSZWY6IGZ1bmN0aW9uKHJlZiwgY29tcG9uZW50KSB7XG4gICAgICB2YXIgaW5zdCA9IHRoaXMuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICAgICEoaW5zdCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdTdGF0ZWxlc3MgZnVuY3Rpb24gY29tcG9uZW50cyBjYW5ub3QgaGF2ZSByZWZzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBwdWJsaWNDb21wb25lbnRJbnN0YW5jZSA9IGNvbXBvbmVudC5nZXRQdWJsaWNJbnN0YW5jZSgpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQgJiYgY29tcG9uZW50LmdldE5hbWUgPyBjb21wb25lbnQuZ2V0TmFtZSgpIDogJ2EgY29tcG9uZW50JztcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocHVibGljQ29tcG9uZW50SW5zdGFuY2UgIT0gbnVsbCwgJ1N0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzICcgKyAnKFNlZSByZWYgXCIlc1wiIGluICVzIGNyZWF0ZWQgYnkgJXMpLiAnICsgJ0F0dGVtcHRzIHRvIGFjY2VzcyB0aGlzIHJlZiB3aWxsIGZhaWwuJywgcmVmLCBjb21wb25lbnROYW1lLCB0aGlzLmdldE5hbWUoKSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVmcyA9IGluc3QucmVmcyA9PT0gZW1wdHlPYmplY3QgPyBpbnN0LnJlZnMgPSB7fSA6IGluc3QucmVmcztcbiAgICAgIHJlZnNbcmVmXSA9IHB1YmxpY0NvbXBvbmVudEluc3RhbmNlO1xuICAgIH0sXG4gICAgZGV0YWNoUmVmOiBmdW5jdGlvbihyZWYpIHtcbiAgICAgIHZhciByZWZzID0gdGhpcy5nZXRQdWJsaWNJbnN0YW5jZSgpLnJlZnM7XG4gICAgICBkZWxldGUgcmVmc1tyZWZdO1xuICAgIH0sXG4gICAgZ2V0TmFtZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgdHlwZSA9IHRoaXMuX2N1cnJlbnRFbGVtZW50LnR5cGU7XG4gICAgICB2YXIgY29uc3RydWN0b3IgPSB0aGlzLl9pbnN0YW5jZSAmJiB0aGlzLl9pbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBjb25zdHJ1Y3RvciAmJiBjb25zdHJ1Y3Rvci5uYW1lIHx8IG51bGw7XG4gICAgfSxcbiAgICBnZXRQdWJsaWNJbnN0YW5jZTogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaW5zdCA9IHRoaXMuX2luc3RhbmNlO1xuICAgICAgaWYgKGluc3QgaW5zdGFuY2VvZiBTdGF0ZWxlc3NDb21wb25lbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gaW5zdDtcbiAgICB9LFxuICAgIF9pbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50OiBudWxsXG4gIH07XG4gIHZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHtNaXhpbjogUmVhY3RDb21wb3NpdGVDb21wb25lbnRNaXhpbn07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb3NpdGVDb21wb25lbnQ7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0RW1wdHlDb21wb25lbnRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eUNvbXBvbmVudEZhY3Rvcnk7XG5cbnZhciBSZWFjdEVtcHR5Q29tcG9uZW50SW5qZWN0aW9uID0ge1xuICBpbmplY3RFbXB0eUNvbXBvbmVudEZhY3Rvcnk6IGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgZW1wdHlDb21wb25lbnRGYWN0b3J5ID0gZmFjdG9yeTtcbiAgfVxufTtcblxudmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSB7XG4gIGNyZWF0ZTogZnVuY3Rpb24gKGluc3RhbnRpYXRlKSB7XG4gICAgcmV0dXJuIGVtcHR5Q29tcG9uZW50RmFjdG9yeShpbnN0YW50aWF0ZSk7XG4gIH1cbn07XG5cblJlYWN0RW1wdHlDb21wb25lbnQuaW5qZWN0aW9uID0gUmVhY3RFbXB0eUNvbXBvbmVudEluamVjdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVtcHR5Q29tcG9uZW50OyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIgYXV0b0dlbmVyYXRlV3JhcHBlckNsYXNzID0gbnVsbDtcbiAgdmFyIGdlbmVyaWNDb21wb25lbnRDbGFzcyA9IG51bGw7XG4gIHZhciB0YWdUb0NvbXBvbmVudENsYXNzID0ge307XG4gIHZhciB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBudWxsO1xuICB2YXIgUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb24gPSB7XG4gICAgaW5qZWN0R2VuZXJpY0NvbXBvbmVudENsYXNzOiBmdW5jdGlvbihjb21wb25lbnRDbGFzcykge1xuICAgICAgZ2VuZXJpY0NvbXBvbmVudENsYXNzID0gY29tcG9uZW50Q2xhc3M7XG4gICAgfSxcbiAgICBpbmplY3RUZXh0Q29tcG9uZW50Q2xhc3M6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzKSB7XG4gICAgICB0ZXh0Q29tcG9uZW50Q2xhc3MgPSBjb21wb25lbnRDbGFzcztcbiAgICB9LFxuICAgIGluamVjdENvbXBvbmVudENsYXNzZXM6IGZ1bmN0aW9uKGNvbXBvbmVudENsYXNzZXMpIHtcbiAgICAgIF9hc3NpZ24odGFnVG9Db21wb25lbnRDbGFzcywgY29tcG9uZW50Q2xhc3Nlcyk7XG4gICAgfVxuICB9O1xuICBmdW5jdGlvbiBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQoZWxlbWVudCkge1xuICAgIGlmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC50eXBlO1xuICAgIH1cbiAgICB2YXIgdGFnID0gZWxlbWVudC50eXBlO1xuICAgIHZhciBjb21wb25lbnRDbGFzcyA9IHRhZ1RvQ29tcG9uZW50Q2xhc3NbdGFnXTtcbiAgICBpZiAoY29tcG9uZW50Q2xhc3MgPT0gbnVsbCkge1xuICAgICAgdGFnVG9Db21wb25lbnRDbGFzc1t0YWddID0gY29tcG9uZW50Q2xhc3MgPSBhdXRvR2VuZXJhdGVXcmFwcGVyQ2xhc3ModGFnKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbXBvbmVudENsYXNzO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpIHtcbiAgICAhZ2VuZXJpY0NvbXBvbmVudENsYXNzID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1RoZXJlIGlzIG5vIHJlZ2lzdGVyZWQgY29tcG9uZW50IGZvciB0aGUgdGFnICVzJywgZWxlbWVudC50eXBlKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIG5ldyBnZW5lcmljQ29tcG9uZW50Q2xhc3MoZWxlbWVudCk7XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VGb3JUZXh0KHRleHQpIHtcbiAgICByZXR1cm4gbmV3IHRleHRDb21wb25lbnRDbGFzcyh0ZXh0KTtcbiAgfVxuICBmdW5jdGlvbiBpc1RleHRDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudCBpbnN0YW5jZW9mIHRleHRDb21wb25lbnRDbGFzcztcbiAgfVxuICB2YXIgUmVhY3ROYXRpdmVDb21wb25lbnQgPSB7XG4gICAgZ2V0Q29tcG9uZW50Q2xhc3NGb3JFbGVtZW50OiBnZXRDb21wb25lbnRDbGFzc0ZvckVsZW1lbnQsXG4gICAgY3JlYXRlSW50ZXJuYWxDb21wb25lbnQ6IGNyZWF0ZUludGVybmFsQ29tcG9uZW50LFxuICAgIGNyZWF0ZUluc3RhbmNlRm9yVGV4dDogY3JlYXRlSW5zdGFuY2VGb3JUZXh0LFxuICAgIGlzVGV4dENvbXBvbmVudDogaXNUZXh0Q29tcG9uZW50LFxuICAgIGluamVjdGlvbjogUmVhY3ROYXRpdmVDb21wb25lbnRJbmplY3Rpb25cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5hdGl2ZUNvbXBvbmVudDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG4gIHZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb3NpdGVDb21wb25lbnQnKTtcbiAgdmFyIFJlYWN0RW1wdHlDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0RW1wdHlDb21wb25lbnQnKTtcbiAgdmFyIFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdE5hdGl2ZUNvbXBvbmVudCcpO1xuICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIHZhciBSZWFjdENvbXBvc2l0ZUNvbXBvbmVudFdyYXBwZXIgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdGhpcy5jb25zdHJ1Y3QoZWxlbWVudCk7XG4gIH07XG4gIF9hc3NpZ24oUmVhY3RDb21wb3NpdGVDb21wb25lbnRXcmFwcGVyLnByb3RvdHlwZSwgUmVhY3RDb21wb3NpdGVDb21wb25lbnQuTWl4aW4sIHtfaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDogaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudH0pO1xuICBmdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0ob3duZXIpIHtcbiAgICBpZiAob3duZXIpIHtcbiAgICAgIHZhciBuYW1lID0gb3duZXIuZ2V0TmFtZSgpO1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICcgQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKGluc3RhbmNlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBpbnN0YW5jZS5fY3VycmVudEVsZW1lbnQ7XG4gICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuICcjZW1wdHknO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBlbGVtZW50ID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuICcjdGV4dCc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIGVsZW1lbnQudHlwZTtcbiAgICB9IGVsc2UgaWYgKGluc3RhbmNlLmdldE5hbWUpIHtcbiAgICAgIHJldHVybiBpbnN0YW5jZS5nZXROYW1lKCkgfHwgJ1Vua25vd24nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudC50eXBlLmRpc3BsYXlOYW1lIHx8IGVsZW1lbnQudHlwZS5uYW1lIHx8ICdVbmtub3duJztcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaXNJbnRlcm5hbENvbXBvbmVudFR5cGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0eXBlLnByb3RvdHlwZS5tb3VudENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZS5wcm90b3R5cGUucmVjZWl2ZUNvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuICB2YXIgbmV4dERlYnVnSUQgPSAxO1xuICBmdW5jdGlvbiBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5vZGUpIHtcbiAgICB2YXIgaW5zdGFuY2U7XG4gICAgdmFyIGlzRW1wdHkgPSBub2RlID09PSBudWxsIHx8IG5vZGUgPT09IGZhbHNlO1xuICAgIGlmIChpc0VtcHR5KSB7XG4gICAgICBpbnN0YW5jZSA9IFJlYWN0RW1wdHlDb21wb25lbnQuY3JlYXRlKGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IG5vZGU7XG4gICAgICAhKGVsZW1lbnQgJiYgKHR5cGVvZiBlbGVtZW50LnR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gJ3N0cmluZycpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFbGVtZW50IHR5cGUgaXMgaW52YWxpZDogZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciBidWlsdC1pbiBjb21wb25lbnRzKSAnICsgJ29yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgY29tcG9uZW50cykgYnV0IGdvdDogJXMuJXMnLCBlbGVtZW50LnR5cGUgPT0gbnVsbCA/IGVsZW1lbnQudHlwZSA6IHR5cGVvZiBlbGVtZW50LnR5cGUsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bShlbGVtZW50Ll9vd25lcikpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGlmICh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICBpbnN0YW5jZSA9IFJlYWN0TmF0aXZlQ29tcG9uZW50LmNyZWF0ZUludGVybmFsQ29tcG9uZW50KGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmIChpc0ludGVybmFsQ29tcG9uZW50VHlwZShlbGVtZW50LnR5cGUpKSB7XG4gICAgICAgIGluc3RhbmNlID0gbmV3IGVsZW1lbnQudHlwZShlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc3RhbmNlID0gbmV3IFJlYWN0Q29tcG9zaXRlQ29tcG9uZW50V3JhcHBlcihlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyB8fCB0eXBlb2Ygbm9kZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGluc3RhbmNlID0gUmVhY3ROYXRpdmVDb21wb25lbnQuY3JlYXRlSW5zdGFuY2VGb3JUZXh0KG5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRW5jb3VudGVyZWQgaW52YWxpZCBSZWFjdCBub2RlIG9mIHR5cGUgJXMnLCB0eXBlb2Ygbm9kZSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIH1cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcodHlwZW9mIGluc3RhbmNlLm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5yZWNlaXZlQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5nZXROYXRpdmVOb2RlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS51bm1vdW50Q29tcG9uZW50ID09PSAnZnVuY3Rpb24nLCAnT25seSBSZWFjdCBDb21wb25lbnRzIGNhbiBiZSBtb3VudGVkLicpIDogdm9pZCAwO1xuICAgIH1cbiAgICBpbnN0YW5jZS5fbW91bnRJbmRleCA9IDA7XG4gICAgaW5zdGFuY2UuX21vdW50SW1hZ2UgPSBudWxsO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpbnN0YW5jZS5faXNPd25lck5lY2Vzc2FyeSA9IGZhbHNlO1xuICAgICAgaW5zdGFuY2UuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgZGVidWdJRCA9IGlzRW1wdHkgPyAwIDogbmV4dERlYnVnSUQrKztcbiAgICAgIGluc3RhbmNlLl9kZWJ1Z0lEID0gZGVidWdJRDtcbiAgICAgIGlmIChkZWJ1Z0lEICE9PSAwKSB7XG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKGluc3RhbmNlKTtcbiAgICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0RGlzcGxheU5hbWUoZGVidWdJRCwgZGlzcGxheU5hbWUpO1xuICAgICAgICB2YXIgb3duZXIgPSBub2RlICYmIG5vZGUuX293bmVyO1xuICAgICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRPd25lcihkZWJ1Z0lELCBvd25lci5fZGVidWdJRCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHtcbiAgICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gaW5zdGFudGlhdGVSZWFjdENvbXBvbmVudDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvblxuICovXG5cbi8qIGdsb2JhbHMgTVNBcHAgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZSBhIGZ1bmN0aW9uIHdoaWNoIGhhcyAndW5zYWZlJyBwcml2aWxlZ2VzIChyZXF1aXJlZCBieSB3aW5kb3dzOCBhcHBzKVxuICovXG5cbnZhciBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgaWYgKHR5cGVvZiBNU0FwcCAhPT0gJ3VuZGVmaW5lZCcgJiYgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZzAsIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMoYXJnMCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb247IiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG4gIHZhciBXSElURVNQQUNFX1RFU1QgPSAvXlsgXFxyXFxuXFx0XFxmXS87XG4gIHZhciBOT05WSVNJQkxFX1RFU1QgPSAvPCghLS18bGlua3xub3NjcmlwdHxtZXRhfHNjcmlwdHxzdHlsZSlbIFxcclxcblxcdFxcZlxcLz5dLztcbiAgdmFyIGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSByZXF1aXJlKCcuL2NyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24nKTtcbiAgdmFyIHNldElubmVySFRNTCA9IGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24obm9kZSwgaHRtbCkge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgfSk7XG4gIGlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgICB2YXIgdGVzdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0ZXN0RWxlbWVudC5pbm5lckhUTUwgPSAnICc7XG4gICAgaWYgKHRlc3RFbGVtZW50LmlubmVySFRNTCA9PT0gJycpIHtcbiAgICAgIHNldElubmVySFRNTCA9IGZ1bmN0aW9uKG5vZGUsIGh0bWwpIHtcbiAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQobm9kZSwgbm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFdISVRFU1BBQ0VfVEVTVC50ZXN0KGh0bWwpIHx8IGh0bWxbMF0gPT09ICc8JyAmJiBOT05WSVNJQkxFX1RFU1QudGVzdChodG1sKSkge1xuICAgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEZFRkYpICsgaHRtbDtcbiAgICAgICAgICB2YXIgdGV4dE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgaWYgKHRleHROb2RlLmRhdGEubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKHRleHROb2RlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dE5vZGUuZGVsZXRlRGF0YSgwLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICB0ZXN0RWxlbWVudCA9IG51bGw7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBzZXRJbm5lckhUTUw7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEdpdmVuIGEgYHByZXZFbGVtZW50YCBhbmQgYG5leHRFbGVtZW50YCwgZGV0ZXJtaW5lcyBpZiB0aGUgZXhpc3RpbmdcbiAqIGluc3RhbmNlIHNob3VsZCBiZSB1cGRhdGVkIGFzIG9wcG9zZWQgdG8gYmVpbmcgZGVzdHJveWVkIG9yIHJlcGxhY2VkIGJ5IGEgbmV3XG4gKiBpbnN0YW5jZS4gQm90aCBhcmd1bWVudHMgYXJlIGVsZW1lbnRzLiBUaGlzIGVuc3VyZXMgdGhhdCB0aGlzIGxvZ2ljIGNhblxuICogb3BlcmF0ZSBvbiBzdGF0ZWxlc3MgdHJlZXMgd2l0aG91dCBhbnkgYmFja2luZyBpbnN0YW5jZS5cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IHByZXZFbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG5leHRFbGVtZW50XG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBleGlzdGluZyBpbnN0YW5jZSBzaG91bGQgYmUgdXBkYXRlZC5cbiAqIEBwcm90ZWN0ZWRcbiAqL1xuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudChwcmV2RWxlbWVudCwgbmV4dEVsZW1lbnQpIHtcbiAgdmFyIHByZXZFbXB0eSA9IHByZXZFbGVtZW50ID09PSBudWxsIHx8IHByZXZFbGVtZW50ID09PSBmYWxzZTtcbiAgdmFyIG5leHRFbXB0eSA9IG5leHRFbGVtZW50ID09PSBudWxsIHx8IG5leHRFbGVtZW50ID09PSBmYWxzZTtcbiAgaWYgKHByZXZFbXB0eSB8fCBuZXh0RW1wdHkpIHtcbiAgICByZXR1cm4gcHJldkVtcHR5ID09PSBuZXh0RW1wdHk7XG4gIH1cblxuICB2YXIgcHJldlR5cGUgPSB0eXBlb2YgcHJldkVsZW1lbnQ7XG4gIHZhciBuZXh0VHlwZSA9IHR5cGVvZiBuZXh0RWxlbWVudDtcbiAgaWYgKHByZXZUeXBlID09PSAnc3RyaW5nJyB8fCBwcmV2VHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gbmV4dFR5cGUgPT09ICdzdHJpbmcnIHx8IG5leHRUeXBlID09PSAnbnVtYmVyJztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV4dFR5cGUgPT09ICdvYmplY3QnICYmIHByZXZFbGVtZW50LnR5cGUgPT09IG5leHRFbGVtZW50LnR5cGUgJiYgcHJldkVsZW1lbnQua2V5ID09PSBuZXh0RWxlbWVudC5rZXk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudDsiLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIERPTUxhenlUcmVlID0gcmVxdWlyZSgnLi9ET01MYXp5VHJlZScpO1xuICB2YXIgRE9NUHJvcGVydHkgPSByZXF1aXJlKCcuL0RPTVByb3BlcnR5Jyk7XG4gIHZhciBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcicpO1xuICB2YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG4gIHZhciBSZWFjdERPTUNvbXBvbmVudFRyZWUgPSByZXF1aXJlKCcuL1JlYWN0RE9NQ29tcG9uZW50VHJlZScpO1xuICB2YXIgUmVhY3RET01Db250YWluZXJJbmZvID0gcmVxdWlyZSgnLi9SZWFjdERPTUNvbnRhaW5lckluZm8nKTtcbiAgdmFyIFJlYWN0RE9NRmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9SZWFjdERPTUZlYXR1cmVGbGFncycpO1xuICB2YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbiAgdmFyIFJlYWN0RmVhdHVyZUZsYWdzID0gcmVxdWlyZSgnLi9SZWFjdEZlYXR1cmVGbGFncycpO1xuICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG4gIHZhciBSZWFjdE1hcmt1cENoZWNrc3VtID0gcmVxdWlyZSgnLi9SZWFjdE1hcmt1cENoZWNrc3VtJyk7XG4gIHZhciBSZWFjdFJlY29uY2lsZXIgPSByZXF1aXJlKCcuL1JlYWN0UmVjb25jaWxlcicpO1xuICB2YXIgUmVhY3RVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVRdWV1ZScpO1xuICB2YXIgUmVhY3RVcGRhdGVzID0gcmVxdWlyZSgnLi9SZWFjdFVwZGF0ZXMnKTtcbiAgdmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbiAgdmFyIGluc3RhbnRpYXRlUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL2luc3RhbnRpYXRlUmVhY3RDb21wb25lbnQnKTtcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIgc2V0SW5uZXJIVE1MID0gcmVxdWlyZSgnLi9zZXRJbm5lckhUTUwnKTtcbiAgdmFyIHNob3VsZFVwZGF0ZVJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9zaG91bGRVcGRhdGVSZWFjdENvbXBvbmVudCcpO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgdmFyIEFUVFJfTkFNRSA9IERPTVByb3BlcnR5LklEX0FUVFJJQlVURV9OQU1FO1xuICB2YXIgUk9PVF9BVFRSX05BTUUgPSBET01Qcm9wZXJ0eS5ST09UX0FUVFJJQlVURV9OQU1FO1xuICB2YXIgRUxFTUVOVF9OT0RFX1RZUEUgPSAxO1xuICB2YXIgRE9DX05PREVfVFlQRSA9IDk7XG4gIHZhciBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUgPSAxMTtcbiAgdmFyIGluc3RhbmNlc0J5UmVhY3RSb290SUQgPSB7fTtcbiAgZnVuY3Rpb24gZmlyc3REaWZmZXJlbmNlSW5kZXgoc3RyaW5nMSwgc3RyaW5nMikge1xuICAgIHZhciBtaW5MZW4gPSBNYXRoLm1pbihzdHJpbmcxLmxlbmd0aCwgc3RyaW5nMi5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWluTGVuOyBpKyspIHtcbiAgICAgIGlmIChzdHJpbmcxLmNoYXJBdChpKSAhPT0gc3RyaW5nMi5jaGFyQXQoaSkpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmcxLmxlbmd0aCA9PT0gc3RyaW5nMi5sZW5ndGggPyAtMSA6IG1pbkxlbjtcbiAgfVxuICBmdW5jdGlvbiBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKSB7XG4gICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgICByZXR1cm4gY29udGFpbmVyLmRvY3VtZW50RWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbnRhaW5lci5maXJzdENoaWxkO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbnRlcm5hbEdldElEKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoQVRUUl9OQU1FKSB8fCAnJztcbiAgfVxuICBmdW5jdGlvbiBtb3VudENvbXBvbmVudEludG9Ob2RlKHdyYXBwZXJJbnN0YW5jZSwgY29udGFpbmVyLCB0cmFuc2FjdGlvbiwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpIHtcbiAgICB2YXIgbWFya2VyTmFtZTtcbiAgICBpZiAoUmVhY3RGZWF0dXJlRmxhZ3MubG9nVG9wTGV2ZWxSZW5kZXJzKSB7XG4gICAgICB2YXIgd3JhcHBlZEVsZW1lbnQgPSB3cmFwcGVySW5zdGFuY2UuX2N1cnJlbnRFbGVtZW50LnByb3BzO1xuICAgICAgdmFyIHR5cGUgPSB3cmFwcGVkRWxlbWVudC50eXBlO1xuICAgICAgbWFya2VyTmFtZSA9ICdSZWFjdCBtb3VudDogJyArICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgPyB0eXBlIDogdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUpO1xuICAgICAgY29uc29sZS50aW1lKG1hcmtlck5hbWUpO1xuICAgIH1cbiAgICB2YXIgbWFya3VwID0gUmVhY3RSZWNvbmNpbGVyLm1vdW50Q29tcG9uZW50KHdyYXBwZXJJbnN0YW5jZSwgdHJhbnNhY3Rpb24sIG51bGwsIFJlYWN0RE9NQ29udGFpbmVySW5mbyh3cmFwcGVySW5zdGFuY2UsIGNvbnRhaW5lciksIGNvbnRleHQpO1xuICAgIGlmIChtYXJrZXJOYW1lKSB7XG4gICAgICBjb25zb2xlLnRpbWVFbmQobWFya2VyTmFtZSk7XG4gICAgfVxuICAgIHdyYXBwZXJJbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQuX3RvcExldmVsV3JhcHBlciA9IHdyYXBwZXJJbnN0YW5jZTtcbiAgICBSZWFjdE1vdW50Ll9tb3VudEltYWdlSW50b05vZGUobWFya3VwLCBjb250YWluZXIsIHdyYXBwZXJJbnN0YW5jZSwgc2hvdWxkUmV1c2VNYXJrdXAsIHRyYW5zYWN0aW9uKTtcbiAgfVxuICBmdW5jdGlvbiBiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZShjb21wb25lbnRJbnN0YW5jZSwgY29udGFpbmVyLCBzaG91bGRSZXVzZU1hcmt1cCwgY29udGV4dCkge1xuICAgIHZhciB0cmFuc2FjdGlvbiA9IFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLmdldFBvb2xlZCghc2hvdWxkUmV1c2VNYXJrdXAgJiYgUmVhY3RET01GZWF0dXJlRmxhZ3MudXNlQ3JlYXRlRWxlbWVudCk7XG4gICAgdHJhbnNhY3Rpb24ucGVyZm9ybShtb3VudENvbXBvbmVudEludG9Ob2RlLCBudWxsLCBjb21wb25lbnRJbnN0YW5jZSwgY29udGFpbmVyLCB0cmFuc2FjdGlvbiwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpO1xuICAgIFJlYWN0VXBkYXRlcy5SZWFjdFJlY29uY2lsZVRyYW5zYWN0aW9uLnJlbGVhc2UodHJhbnNhY3Rpb24pO1xuICB9XG4gIGZ1bmN0aW9uIHVubW91bnRDb21wb25lbnRGcm9tTm9kZShpbnN0YW5jZSwgY29udGFpbmVyLCBzYWZlbHkpIHtcbiAgICBSZWFjdFJlY29uY2lsZXIudW5tb3VudENvbXBvbmVudChpbnN0YW5jZSwgc2FmZWx5KTtcbiAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFKSB7XG4gICAgICBjb250YWluZXIgPSBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICAgIH1cbiAgICB3aGlsZSAoY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5sYXN0Q2hpbGQpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBoYXNOb25Sb290UmVhY3RDaGlsZChjb250YWluZXIpIHtcbiAgICB2YXIgcm9vdEVsID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgaWYgKHJvb3RFbCkge1xuICAgICAgdmFyIGluc3QgPSBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0SW5zdGFuY2VGcm9tTm9kZShyb290RWwpO1xuICAgICAgcmV0dXJuICEhKGluc3QgJiYgaW5zdC5fbmF0aXZlUGFyZW50KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0TmF0aXZlUm9vdEluc3RhbmNlSW5Db250YWluZXIoY29udGFpbmVyKSB7XG4gICAgdmFyIHJvb3RFbCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIHZhciBwcmV2TmF0aXZlSW5zdGFuY2UgPSByb290RWwgJiYgUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUocm9vdEVsKTtcbiAgICByZXR1cm4gcHJldk5hdGl2ZUluc3RhbmNlICYmICFwcmV2TmF0aXZlSW5zdGFuY2UuX25hdGl2ZVBhcmVudCA/IHByZXZOYXRpdmVJbnN0YW5jZSA6IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0VG9wTGV2ZWxXcmFwcGVySW5Db250YWluZXIoY29udGFpbmVyKSB7XG4gICAgdmFyIHJvb3QgPSBnZXROYXRpdmVSb290SW5zdGFuY2VJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIHJldHVybiByb290ID8gcm9vdC5fbmF0aXZlQ29udGFpbmVySW5mby5fdG9wTGV2ZWxXcmFwcGVyIDogbnVsbDtcbiAgfVxuICB2YXIgdG9wTGV2ZWxSb290Q291bnRlciA9IDE7XG4gIHZhciBUb3BMZXZlbFdyYXBwZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJvb3RJRCA9IHRvcExldmVsUm9vdENvdW50ZXIrKztcbiAgfTtcbiAgVG9wTGV2ZWxXcmFwcGVyLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgVG9wTGV2ZWxXcmFwcGVyLmRpc3BsYXlOYW1lID0gJ1RvcExldmVsV3JhcHBlcic7XG4gIH1cbiAgVG9wTGV2ZWxXcmFwcGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcztcbiAgfTtcbiAgdmFyIFJlYWN0TW91bnQgPSB7XG4gICAgVG9wTGV2ZWxXcmFwcGVyOiBUb3BMZXZlbFdyYXBwZXIsXG4gICAgX2luc3RhbmNlc0J5UmVhY3RSb290SUQ6IGluc3RhbmNlc0J5UmVhY3RSb290SUQsXG4gICAgc2Nyb2xsTW9uaXRvcjogZnVuY3Rpb24oY29udGFpbmVyLCByZW5kZXJDYWxsYmFjaykge1xuICAgICAgcmVuZGVyQ2FsbGJhY2soKTtcbiAgICB9LFxuICAgIF91cGRhdGVSb290Q29tcG9uZW50OiBmdW5jdGlvbihwcmV2Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICAgUmVhY3RNb3VudC5zY3JvbGxNb25pdG9yKGNvbnRhaW5lciwgZnVuY3Rpb24oKSB7XG4gICAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUVsZW1lbnRJbnRlcm5hbChwcmV2Q29tcG9uZW50LCBuZXh0RWxlbWVudCk7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIFJlYWN0VXBkYXRlUXVldWUuZW5xdWV1ZUNhbGxiYWNrSW50ZXJuYWwocHJldkNvbXBvbmVudCwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwcmV2Q29tcG9uZW50O1xuICAgIH0sXG4gICAgX3JlbmRlck5ld1Jvb3RDb21wb25lbnQ6IGZ1bmN0aW9uKG5leHRFbGVtZW50LCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwLCBjb250ZXh0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25CZWdpbkZsdXNoKCk7XG4gICAgICB9XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID09IG51bGwsICdfcmVuZGVyTmV3Um9vdENvbXBvbmVudCgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgKyAnb2YgcHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tICcgKyAncmVuZGVyIGlzIG5vdCBhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArICdjb21wb25lbnREaWRVcGRhdGUuIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICVzLicsIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAhKGNvbnRhaW5lciAmJiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdfcmVnaXN0ZXJDb21wb25lbnQoLi4uKTogVGFyZ2V0IGNvbnRhaW5lciBpcyBub3QgYSBET00gZWxlbWVudC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuZW5zdXJlU2Nyb2xsVmFsdWVNb25pdG9yaW5nKCk7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSBpbnN0YW50aWF0ZVJlYWN0Q29tcG9uZW50KG5leHRFbGVtZW50KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9kZWJ1Z0lEID0gMDtcbiAgICAgIH1cbiAgICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyhiYXRjaGVkTW91bnRDb21wb25lbnRJbnRvTm9kZSwgY29tcG9uZW50SW5zdGFuY2UsIGNvbnRhaW5lciwgc2hvdWxkUmV1c2VNYXJrdXAsIGNvbnRleHQpO1xuICAgICAgdmFyIHdyYXBwZXJJRCA9IGNvbXBvbmVudEluc3RhbmNlLl9pbnN0YW5jZS5yb290SUQ7XG4gICAgICBpbnN0YW5jZXNCeVJlYWN0Um9vdElEW3dyYXBwZXJJRF0gPSBjb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk1vdW50Um9vdENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZS5fcmVuZGVyZWRDb21wb25lbnQuX2RlYnVnSUQpO1xuICAgICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25FbmRGbHVzaCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbXBvbmVudEluc3RhbmNlO1xuICAgIH0sXG4gICAgcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6IGZ1bmN0aW9uKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAgICEocGFyZW50Q29tcG9uZW50ICE9IG51bGwgJiYgcGFyZW50Q29tcG9uZW50Ll9yZWFjdEludGVybmFsSW5zdGFuY2UgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAncGFyZW50Q29tcG9uZW50IG11c3QgYmUgYSB2YWxpZCBSZWFjdCBDb21wb25lbnQnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gUmVhY3RNb3VudC5fcmVuZGVyU3VidHJlZUludG9Db250YWluZXIocGFyZW50Q29tcG9uZW50LCBuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gICAgfSxcbiAgICBfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI6IGZ1bmN0aW9uKHBhcmVudENvbXBvbmVudCwgbmV4dEVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAgIFJlYWN0VXBkYXRlUXVldWUudmFsaWRhdGVDYWxsYmFjayhjYWxsYmFjaywgJ1JlYWN0RE9NLnJlbmRlcicpO1xuICAgICAgIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChuZXh0RWxlbWVudCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RET00ucmVuZGVyKCk6IEludmFsaWQgY29tcG9uZW50IGVsZW1lbnQuJXMnLCB0eXBlb2YgbmV4dEVsZW1lbnQgPT09ICdzdHJpbmcnID8gJyBJbnN0ZWFkIG9mIHBhc3NpbmcgYSBzdHJpbmcgbGlrZSBcXCdkaXZcXCcsIHBhc3MgJyArICdSZWFjdC5jcmVhdGVFbGVtZW50KFxcJ2RpdlxcJykgb3IgPGRpdiAvPi4nIDogdHlwZW9mIG5leHRFbGVtZW50ID09PSAnZnVuY3Rpb24nID8gJyBJbnN0ZWFkIG9mIHBhc3NpbmcgYSBjbGFzcyBsaWtlIEZvbywgcGFzcyAnICsgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQoRm9vKSBvciA8Rm9vIC8+LicgOiBuZXh0RWxlbWVudCAhPSBudWxsICYmIG5leHRFbGVtZW50LnByb3BzICE9PSB1bmRlZmluZWQgPyAnIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB1bmludGVudGlvbmFsbHkgbG9hZGluZyB0d28gaW5kZXBlbmRlbnQgJyArICdjb3BpZXMgb2YgUmVhY3QuJyA6ICcnKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY29udGFpbmVyIHx8ICFjb250YWluZXIudGFnTmFtZSB8fCBjb250YWluZXIudGFnTmFtZS50b1VwcGVyQ2FzZSgpICE9PSAnQk9EWScsICdyZW5kZXIoKTogUmVuZGVyaW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgaW50byBkb2N1bWVudC5ib2R5IGlzICcgKyAnZGlzY291cmFnZWQsIHNpbmNlIGl0cyBjaGlsZHJlbiBhcmUgb2Z0ZW4gbWFuaXB1bGF0ZWQgYnkgdGhpcmQtcGFydHkgJyArICdzY3JpcHRzIGFuZCBicm93c2VyIGV4dGVuc2lvbnMuIFRoaXMgbWF5IGxlYWQgdG8gc3VidGxlICcgKyAncmVjb25jaWxpYXRpb24gaXNzdWVzLiBUcnkgcmVuZGVyaW5nIGludG8gYSBjb250YWluZXIgZWxlbWVudCBjcmVhdGVkICcgKyAnZm9yIHlvdXIgYXBwLicpIDogdm9pZCAwO1xuICAgICAgdmFyIG5leHRXcmFwcGVkRWxlbWVudCA9IFJlYWN0RWxlbWVudChUb3BMZXZlbFdyYXBwZXIsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG5leHRFbGVtZW50KTtcbiAgICAgIHZhciBwcmV2Q29tcG9uZW50ID0gZ2V0VG9wTGV2ZWxXcmFwcGVySW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICAgIGlmIChwcmV2Q29tcG9uZW50KSB7XG4gICAgICAgIHZhciBwcmV2V3JhcHBlZEVsZW1lbnQgPSBwcmV2Q29tcG9uZW50Ll9jdXJyZW50RWxlbWVudDtcbiAgICAgICAgdmFyIHByZXZFbGVtZW50ID0gcHJldldyYXBwZWRFbGVtZW50LnByb3BzO1xuICAgICAgICBpZiAoc2hvdWxkVXBkYXRlUmVhY3RDb21wb25lbnQocHJldkVsZW1lbnQsIG5leHRFbGVtZW50KSkge1xuICAgICAgICAgIHZhciBwdWJsaWNJbnN0ID0gcHJldkNvbXBvbmVudC5fcmVuZGVyZWRDb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICAgICAgICB2YXIgdXBkYXRlZENhbGxiYWNrID0gY2FsbGJhY2sgJiYgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHB1YmxpY0luc3QpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgUmVhY3RNb3VudC5fdXBkYXRlUm9vdENvbXBvbmVudChwcmV2Q29tcG9uZW50LCBuZXh0V3JhcHBlZEVsZW1lbnQsIGNvbnRhaW5lciwgdXBkYXRlZENhbGxiYWNrKTtcbiAgICAgICAgICByZXR1cm4gcHVibGljSW5zdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBSZWFjdE1vdW50LnVubW91bnRDb21wb25lbnRBdE5vZGUoY29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHJlYWN0Um9vdEVsZW1lbnQgPSBnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIoY29udGFpbmVyKTtcbiAgICAgIHZhciBjb250YWluZXJIYXNSZWFjdE1hcmt1cCA9IHJlYWN0Um9vdEVsZW1lbnQgJiYgISFpbnRlcm5hbEdldElEKHJlYWN0Um9vdEVsZW1lbnQpO1xuICAgICAgdmFyIGNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkID0gaGFzTm9uUm9vdFJlYWN0Q2hpbGQoY29udGFpbmVyKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCwgJ3JlbmRlciguLi4pOiBSZXBsYWNpbmcgUmVhY3QtcmVuZGVyZWQgY2hpbGRyZW4gd2l0aCBhIG5ldyByb290ICcgKyAnY29tcG9uZW50LiBJZiB5b3UgaW50ZW5kZWQgdG8gdXBkYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUsICcgKyAneW91IHNob3VsZCBpbnN0ZWFkIGhhdmUgdGhlIGV4aXN0aW5nIGNoaWxkcmVuIHVwZGF0ZSB0aGVpciBzdGF0ZSAnICsgJ2FuZCByZW5kZXIgdGhlIG5ldyBjb21wb25lbnRzIGluc3RlYWQgb2YgY2FsbGluZyBSZWFjdERPTS5yZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgICAgIGlmICghY29udGFpbmVySGFzUmVhY3RNYXJrdXAgfHwgcmVhY3RSb290RWxlbWVudC5uZXh0U2libGluZykge1xuICAgICAgICAgIHZhciByb290RWxlbWVudFNpYmxpbmcgPSByZWFjdFJvb3RFbGVtZW50O1xuICAgICAgICAgIHdoaWxlIChyb290RWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICAgIGlmIChpbnRlcm5hbEdldElEKHJvb3RFbGVtZW50U2libGluZykpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdyZW5kZXIoKTogVGFyZ2V0IG5vZGUgaGFzIG1hcmt1cCByZW5kZXJlZCBieSBSZWFjdCwgYnV0IHRoZXJlICcgKyAnYXJlIHVucmVsYXRlZCBub2RlcyBhcyB3ZWxsLiBUaGlzIGlzIG1vc3QgY29tbW9ubHkgY2F1c2VkIGJ5ICcgKyAnd2hpdGUtc3BhY2UgaW5zZXJ0ZWQgYXJvdW5kIHNlcnZlci1yZW5kZXJlZCBtYXJrdXAuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcm9vdEVsZW1lbnRTaWJsaW5nID0gcm9vdEVsZW1lbnRTaWJsaW5nLm5leHRTaWJsaW5nO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIHNob3VsZFJldXNlTWFya3VwID0gY29udGFpbmVySGFzUmVhY3RNYXJrdXAgJiYgIXByZXZDb21wb25lbnQgJiYgIWNvbnRhaW5lckhhc05vblJvb3RSZWFjdENoaWxkO1xuICAgICAgdmFyIGNvbXBvbmVudCA9IFJlYWN0TW91bnQuX3JlbmRlck5ld1Jvb3RDb21wb25lbnQobmV4dFdyYXBwZWRFbGVtZW50LCBjb250YWluZXIsIHNob3VsZFJldXNlTWFya3VwLCBwYXJlbnRDb21wb25lbnQgIT0gbnVsbCA/IHBhcmVudENvbXBvbmVudC5fcmVhY3RJbnRlcm5hbEluc3RhbmNlLl9wcm9jZXNzQ2hpbGRDb250ZXh0KHBhcmVudENvbXBvbmVudC5fcmVhY3RJbnRlcm5hbEluc3RhbmNlLl9jb250ZXh0KSA6IGVtcHR5T2JqZWN0KS5fcmVuZGVyZWRDb21wb25lbnQuZ2V0UHVibGljSW5zdGFuY2UoKTtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjay5jYWxsKGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29tcG9uZW50O1xuICAgIH0sXG4gICAgcmVuZGVyOiBmdW5jdGlvbihuZXh0RWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIFJlYWN0TW91bnQuX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKG51bGwsIG5leHRFbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIHVubW91bnRDb21wb25lbnRBdE5vZGU6IGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9PSBudWxsLCAndW5tb3VudENvbXBvbmVudEF0Tm9kZSgpOiBSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uICcgKyAnb2YgcHJvcHMgYW5kIHN0YXRlOyB0cmlnZ2VyaW5nIG5lc3RlZCBjb21wb25lbnQgdXBkYXRlcyBmcm9tIHJlbmRlciAnICsgJ2lzIG5vdCBhbGxvd2VkLiBJZiBuZWNlc3NhcnksIHRyaWdnZXIgbmVzdGVkIHVwZGF0ZXMgaW4gJyArICdjb21wb25lbnREaWRVcGRhdGUuIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICVzLicsIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCkgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiB2b2lkIDA7XG4gICAgICAhKGNvbnRhaW5lciAmJiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREVfVFlQRSB8fCBjb250YWluZXIubm9kZVR5cGUgPT09IERPQ19OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFX1RZUEUpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICd1bm1vdW50Q29tcG9uZW50QXROb2RlKC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIHByZXZDb21wb25lbnQgPSBnZXRUb3BMZXZlbFdyYXBwZXJJbkNvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgaWYgKCFwcmV2Q29tcG9uZW50KSB7XG4gICAgICAgIHZhciBjb250YWluZXJIYXNOb25Sb290UmVhY3RDaGlsZCA9IGhhc05vblJvb3RSZWFjdENoaWxkKGNvbnRhaW5lcik7XG4gICAgICAgIHZhciBpc0NvbnRhaW5lclJlYWN0Um9vdCA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gMSAmJiBjb250YWluZXIuaGFzQXR0cmlidXRlKFJPT1RfQVRUUl9OQU1FKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY29udGFpbmVySGFzTm9uUm9vdFJlYWN0Q2hpbGQsICd1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFRoZSBub2RlIHlvdVxcJ3JlIGF0dGVtcHRpbmcgdG8gdW5tb3VudCAnICsgJ3dhcyByZW5kZXJlZCBieSBSZWFjdCBhbmQgaXMgbm90IGEgdG9wLWxldmVsIGNvbnRhaW5lci4gJXMnLCBpc0NvbnRhaW5lclJlYWN0Um9vdCA/ICdZb3UgbWF5IGhhdmUgYWNjaWRlbnRhbGx5IHBhc3NlZCBpbiBhIFJlYWN0IHJvb3Qgbm9kZSBpbnN0ZWFkICcgKyAnb2YgaXRzIGNvbnRhaW5lci4nIDogJ0luc3RlYWQsIGhhdmUgdGhlIHBhcmVudCBjb21wb25lbnQgdXBkYXRlIGl0cyBzdGF0ZSBhbmQgJyArICdyZXJlbmRlciBpbiBvcmRlciB0byByZW1vdmUgdGhpcyBjb21wb25lbnQuJykgOiB2b2lkIDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgZGVsZXRlIGluc3RhbmNlc0J5UmVhY3RSb290SURbcHJldkNvbXBvbmVudC5faW5zdGFuY2Uucm9vdElEXTtcbiAgICAgIFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyh1bm1vdW50Q29tcG9uZW50RnJvbU5vZGUsIHByZXZDb21wb25lbnQsIGNvbnRhaW5lciwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBfbW91bnRJbWFnZUludG9Ob2RlOiBmdW5jdGlvbihtYXJrdXAsIGNvbnRhaW5lciwgaW5zdGFuY2UsIHNob3VsZFJldXNlTWFya3VwLCB0cmFuc2FjdGlvbikge1xuICAgICAgIShjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUgfHwgY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NfTk9ERV9UWVBFIHx8IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfRlJBR01FTlRfTk9ERV9UWVBFKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnbW91bnRDb21wb25lbnRJbnRvTm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCB2YWxpZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBpZiAoc2hvdWxkUmV1c2VNYXJrdXApIHtcbiAgICAgICAgdmFyIHJvb3RFbGVtZW50ID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICAgIGlmIChSZWFjdE1hcmt1cENoZWNrc3VtLmNhblJldXNlTWFya3VwKG1hcmt1cCwgcm9vdEVsZW1lbnQpKSB7XG4gICAgICAgICAgUmVhY3RET01Db21wb25lbnRUcmVlLnByZWNhY2hlTm9kZShpbnN0YW5jZSwgcm9vdEVsZW1lbnQpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY2hlY2tzdW0gPSByb290RWxlbWVudC5nZXRBdHRyaWJ1dGUoUmVhY3RNYXJrdXBDaGVja3N1bS5DSEVDS1NVTV9BVFRSX05BTUUpO1xuICAgICAgICAgIHJvb3RFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShSZWFjdE1hcmt1cENoZWNrc3VtLkNIRUNLU1VNX0FUVFJfTkFNRSk7XG4gICAgICAgICAgdmFyIHJvb3RNYXJrdXAgPSByb290RWxlbWVudC5vdXRlckhUTUw7XG4gICAgICAgICAgcm9vdEVsZW1lbnQuc2V0QXR0cmlidXRlKFJlYWN0TWFya3VwQ2hlY2tzdW0uQ0hFQ0tTVU1fQVRUUl9OQU1FLCBjaGVja3N1bSk7XG4gICAgICAgICAgdmFyIG5vcm1hbGl6ZWRNYXJrdXAgPSBtYXJrdXA7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHZhciBub3JtYWxpemVyO1xuICAgICAgICAgICAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFX1RZUEUpIHtcbiAgICAgICAgICAgICAgbm9ybWFsaXplciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICBub3JtYWxpemVyLmlubmVySFRNTCA9IG1hcmt1cDtcbiAgICAgICAgICAgICAgbm9ybWFsaXplZE1hcmt1cCA9IG5vcm1hbGl6ZXIuaW5uZXJIVE1MO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbm9ybWFsaXplciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG5vcm1hbGl6ZXIpO1xuICAgICAgICAgICAgICBub3JtYWxpemVyLmNvbnRlbnREb2N1bWVudC53cml0ZShtYXJrdXApO1xuICAgICAgICAgICAgICBub3JtYWxpemVkTWFya3VwID0gbm9ybWFsaXplci5jb250ZW50RG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTDtcbiAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChub3JtYWxpemVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGRpZmZJbmRleCA9IGZpcnN0RGlmZmVyZW5jZUluZGV4KG5vcm1hbGl6ZWRNYXJrdXAsIHJvb3RNYXJrdXApO1xuICAgICAgICAgIHZhciBkaWZmZXJlbmNlID0gJyAoY2xpZW50KSAnICsgbm9ybWFsaXplZE1hcmt1cC5zdWJzdHJpbmcoZGlmZkluZGV4IC0gMjAsIGRpZmZJbmRleCArIDIwKSArICdcXG4gKHNlcnZlcikgJyArIHJvb3RNYXJrdXAuc3Vic3RyaW5nKGRpZmZJbmRleCAtIDIwLCBkaWZmSW5kZXggKyAyMCk7XG4gICAgICAgICAgIShjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IHVzaW5nICcgKyAnc2VydmVyIHJlbmRlcmluZyBidXQgdGhlIGNoZWNrc3VtIHdhcyBpbnZhbGlkLiBUaGlzIHVzdWFsbHkgJyArICdtZWFucyB5b3UgcmVuZGVyZWQgYSBkaWZmZXJlbnQgY29tcG9uZW50IHR5cGUgb3IgcHJvcHMgb24gJyArICd0aGUgY2xpZW50IGZyb20gdGhlIG9uZSBvbiB0aGUgc2VydmVyLCBvciB5b3VyIHJlbmRlcigpICcgKyAnbWV0aG9kcyBhcmUgaW1wdXJlLiBSZWFjdCBjYW5ub3QgaGFuZGxlIHRoaXMgY2FzZSBkdWUgdG8gJyArICdjcm9zcy1icm93c2VyIHF1aXJrcyBieSByZW5kZXJpbmcgYXQgdGhlIGRvY3VtZW50IHJvb3QuIFlvdSAnICsgJ3Nob3VsZCBsb29rIGZvciBlbnZpcm9ubWVudCBkZXBlbmRlbnQgY29kZSBpbiB5b3VyIGNvbXBvbmVudHMgJyArICdhbmQgZW5zdXJlIHRoZSBwcm9wcyBhcmUgdGhlIHNhbWUgY2xpZW50IGFuZCBzZXJ2ZXIgc2lkZTpcXG4lcycsIGRpZmZlcmVuY2UpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdSZWFjdCBhdHRlbXB0ZWQgdG8gcmV1c2UgbWFya3VwIGluIGEgY29udGFpbmVyIGJ1dCB0aGUgJyArICdjaGVja3N1bSB3YXMgaW52YWxpZC4gVGhpcyBnZW5lcmFsbHkgbWVhbnMgdGhhdCB5b3UgYXJlICcgKyAndXNpbmcgc2VydmVyIHJlbmRlcmluZyBhbmQgdGhlIG1hcmt1cCBnZW5lcmF0ZWQgb24gdGhlICcgKyAnc2VydmVyIHdhcyBub3Qgd2hhdCB0aGUgY2xpZW50IHdhcyBleHBlY3RpbmcuIFJlYWN0IGluamVjdGVkICcgKyAnbmV3IG1hcmt1cCB0byBjb21wZW5zYXRlIHdoaWNoIHdvcmtzIGJ1dCB5b3UgaGF2ZSBsb3N0IG1hbnkgJyArICdvZiB0aGUgYmVuZWZpdHMgb2Ygc2VydmVyIHJlbmRlcmluZy4gSW5zdGVhZCwgZmlndXJlIG91dCAnICsgJ3doeSB0aGUgbWFya3VwIGJlaW5nIGdlbmVyYXRlZCBpcyBkaWZmZXJlbnQgb24gdGhlIGNsaWVudCAnICsgJ29yIHNlcnZlcjpcXG4lcycsIGRpZmZlcmVuY2UpIDogdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgIShjb250YWluZXIubm9kZVR5cGUgIT09IERPQ19OT0RFX1RZUEUpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1lvdVxcJ3JlIHRyeWluZyB0byByZW5kZXIgYSBjb21wb25lbnQgdG8gdGhlIGRvY3VtZW50IGJ1dCAnICsgJ3lvdSBkaWRuXFwndCB1c2Ugc2VydmVyIHJlbmRlcmluZy4gV2UgY2FuXFwndCBkbyB0aGlzICcgKyAnd2l0aG91dCB1c2luZyBzZXJ2ZXIgcmVuZGVyaW5nIGR1ZSB0byBjcm9zcy1icm93c2VyIHF1aXJrcy4gJyArICdTZWUgUmVhY3RET01TZXJ2ZXIucmVuZGVyVG9TdHJpbmcoKSBmb3Igc2VydmVyIHJlbmRlcmluZy4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICBpZiAodHJhbnNhY3Rpb24udXNlQ3JlYXRlRWxlbWVudCkge1xuICAgICAgICB3aGlsZSAoY29udGFpbmVyLmxhc3RDaGlsZCkge1xuICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIubGFzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgICBET01MYXp5VHJlZS5pbnNlcnRUcmVlQmVmb3JlKGNvbnRhaW5lciwgbWFya3VwLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldElubmVySFRNTChjb250YWluZXIsIG1hcmt1cCk7XG4gICAgICAgIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5wcmVjYWNoZU5vZGUoaW5zdGFuY2UsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBuYXRpdmVOb2RlID0gUmVhY3RET01Db21wb25lbnRUcmVlLmdldEluc3RhbmNlRnJvbU5vZGUoY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgICBpZiAobmF0aXZlTm9kZS5fZGVidWdJRCAhPT0gMCkge1xuICAgICAgICAgIFJlYWN0SW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk5hdGl2ZU9wZXJhdGlvbihuYXRpdmVOb2RlLl9kZWJ1Z0lELCAnbW91bnQnLCBtYXJrdXAudG9TdHJpbmcoKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RNb3VudDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBSZWFjdE1vdW50ID0gcmVxdWlyZSgnLi9SZWFjdE1vdW50Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0TW91bnQucmVuZGVyU3VidHJlZUludG9Db250YWluZXI7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIFJlYWN0RE9NQ29tcG9uZW50VHJlZSA9IHJlcXVpcmUoJy4vUmVhY3RET01Db21wb25lbnRUcmVlJyk7XG4gIHZhciBSZWFjdERlZmF1bHRJbmplY3Rpb24gPSByZXF1aXJlKCcuL1JlYWN0RGVmYXVsdEluamVjdGlvbicpO1xuICB2YXIgUmVhY3RNb3VudCA9IHJlcXVpcmUoJy4vUmVhY3RNb3VudCcpO1xuICB2YXIgUmVhY3RSZWNvbmNpbGVyID0gcmVxdWlyZSgnLi9SZWFjdFJlY29uY2lsZXInKTtcbiAgdmFyIFJlYWN0VXBkYXRlcyA9IHJlcXVpcmUoJy4vUmVhY3RVcGRhdGVzJyk7XG4gIHZhciBSZWFjdFZlcnNpb24gPSByZXF1aXJlKCcuL1JlYWN0VmVyc2lvbicpO1xuICB2YXIgZmluZERPTU5vZGUgPSByZXF1aXJlKCcuL2ZpbmRET01Ob2RlJyk7XG4gIHZhciBnZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlID0gcmVxdWlyZSgnLi9nZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlJyk7XG4gIHZhciByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciA9IHJlcXVpcmUoJy4vcmVuZGVyU3VidHJlZUludG9Db250YWluZXInKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIFJlYWN0RGVmYXVsdEluamVjdGlvbi5pbmplY3QoKTtcbiAgdmFyIFJlYWN0ID0ge1xuICAgIGZpbmRET01Ob2RlOiBmaW5kRE9NTm9kZSxcbiAgICByZW5kZXI6IFJlYWN0TW91bnQucmVuZGVyLFxuICAgIHVubW91bnRDb21wb25lbnRBdE5vZGU6IFJlYWN0TW91bnQudW5tb3VudENvbXBvbmVudEF0Tm9kZSxcbiAgICB2ZXJzaW9uOiBSZWFjdFZlcnNpb24sXG4gICAgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM6IFJlYWN0VXBkYXRlcy5iYXRjaGVkVXBkYXRlcyxcbiAgICB1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjogcmVuZGVyU3VidHJlZUludG9Db250YWluZXJcbiAgfTtcbiAgaWYgKHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmluamVjdCh7XG4gICAgICBDb21wb25lbnRUcmVlOiB7XG4gICAgICAgIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlOiBSZWFjdERPTUNvbXBvbmVudFRyZWUuZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUsXG4gICAgICAgIGdldE5vZGVGcm9tSW5zdGFuY2U6IGZ1bmN0aW9uKGluc3QpIHtcbiAgICAgICAgICBpZiAoaW5zdC5fcmVuZGVyZWRDb21wb25lbnQpIHtcbiAgICAgICAgICAgIGluc3QgPSBnZXROYXRpdmVDb21wb25lbnRGcm9tQ29tcG9zaXRlKGluc3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW5zdCkge1xuICAgICAgICAgICAgcmV0dXJuIFJlYWN0RE9NQ29tcG9uZW50VHJlZS5nZXROb2RlRnJvbUluc3RhbmNlKGluc3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBNb3VudDogUmVhY3RNb3VudCxcbiAgICAgIFJlY29uY2lsZXI6IFJlYWN0UmVjb25jaWxlclxuICAgIH0pO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIEV4ZWN1dGlvbkVudmlyb25tZW50ID0gcmVxdWlyZSgnZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbiAgICBpZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NICYmIHdpbmRvdy50b3AgPT09IHdpbmRvdy5zZWxmKSB7XG4gICAgICBpZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgPiAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0VkZ2UnKSA9PT0gLTEgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPiAtMSkge1xuICAgICAgICAgIHZhciBzaG93RmlsZVVybE1lc3NhZ2UgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wuaW5kZXhPZignaHR0cCcpID09PSAtMSAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG4gICAgICAgICAgY29uc29sZS5kZWJ1ZygnRG93bmxvYWQgdGhlIFJlYWN0IERldlRvb2xzICcgKyAoc2hvd0ZpbGVVcmxNZXNzYWdlID8gJ2FuZCB1c2UgYW4gSFRUUCBzZXJ2ZXIgKGluc3RlYWQgb2YgYSBmaWxlOiBVUkwpICcgOiAnJykgKyAnZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6ICcgKyAnaHR0cHM6Ly9mYi5tZS9yZWFjdC1kZXZ0b29scycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdGVzdEZ1bmMgPSBmdW5jdGlvbiB0ZXN0Rm4oKSB7fTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCh0ZXN0RnVuYy5uYW1lIHx8IHRlc3RGdW5jLnRvU3RyaW5nKCkpLmluZGV4T2YoJ3Rlc3RGbicpICE9PSAtMSwgJ0l0IGxvb2tzIGxpa2UgeW91XFwncmUgdXNpbmcgYSBtaW5pZmllZCBjb3B5IG9mIHRoZSBkZXZlbG9wbWVudCBidWlsZCAnICsgJ29mIFJlYWN0LiBXaGVuIGRlcGxveWluZyBSZWFjdCBhcHBzIHRvIHByb2R1Y3Rpb24sIG1ha2Ugc3VyZSB0byB1c2UgJyArICd0aGUgcHJvZHVjdGlvbiBidWlsZCB3aGljaCBza2lwcyBkZXZlbG9wbWVudCB3YXJuaW5ncyBhbmQgaXMgZmFzdGVyLiAnICsgJ1NlZSBodHRwczovL2ZiLm1lL3JlYWN0LW1pbmlmaWNhdGlvbiBmb3IgbW9yZSBkZXRhaWxzLicpIDogdm9pZCAwO1xuICAgICAgdmFyIGllQ29tcGF0aWJpbGl0eU1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDwgODtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFpZUNvbXBhdGliaWxpdHlNb2RlLCAnSW50ZXJuZXQgRXhwbG9yZXIgaXMgcnVubmluZyBpbiBjb21wYXRpYmlsaXR5IG1vZGU7IHBsZWFzZSBhZGQgdGhlICcgKyAnZm9sbG93aW5nIHRhZyB0byB5b3VyIEhUTUwgdG8gcHJldmVudCB0aGlzIGZyb20gaGFwcGVuaW5nOiAnICsgJzxtZXRhIGh0dHAtZXF1aXY9XCJYLVVBLUNvbXBhdGlibGVcIiBjb250ZW50PVwiSUU9ZWRnZVwiIC8+JykgOiB2b2lkIDA7XG4gICAgICB2YXIgZXhwZWN0ZWRGZWF0dXJlcyA9IFtBcnJheS5pc0FycmF5LCBBcnJheS5wcm90b3R5cGUuZXZlcnksIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiwgQXJyYXkucHJvdG90eXBlLm1hcCwgRGF0ZS5ub3csIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLCBPYmplY3Qua2V5cywgU3RyaW5nLnByb3RvdHlwZS5zcGxpdCwgU3RyaW5nLnByb3RvdHlwZS50cmltXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRGZWF0dXJlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWV4cGVjdGVkRmVhdHVyZXNbaV0pIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ09uZSBvciBtb3JlIEVTNSBzaGltcyBleHBlY3RlZCBieSBSZWFjdCBhcmUgbm90IGF2YWlsYWJsZTogJyArICdodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmctcG9seWZpbGxzJykgOiB2b2lkIDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCdyZWFjdC9saWIvUmVhY3RET00nKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5wbTpyZWFjdC1kb21AMTUuMS4wL2luZGV4LmpzXCIpOyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmNvbnN0IE1haW5IZWFkZXIgPSAoKSA9PiAoXG4gIDxoZWFkZXIgY2xhc3NOYW1lPSdoZWFkZXInIHJvbGU9J2Jhbm5lcic+XG4gICAgPGEgY2xhc3NOYW1lPSdsb2dvJyBocmVmPScuLycgcm9sZT0nbG9nbyc+XG4gICAgICA8aW1nIHNyYz0nc3ZnL2xvZ28uc3ZnJyAvPlxuICAgIDwvYT5cbiAgICA8YVxuICAgICAgY2xhc3NOYW1lPSdidG4tbGluaydcbiAgICAgIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9mcm9udGVuZGJyL2V2ZW50b3MnXG4gICAgICB0aXRsZT0nQW51bmNpZSBzZXUgZXZlbnRvJz5cbiAgICAgICAgQW51bmNpYXIgRXZlbnRvXG4gICAgPC9hPlxuICA8L2hlYWRlcj5cbilcblxuZXhwb3J0IGRlZmF1bHQgTWFpbkhlYWRlclxuIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBMYXp5SW1nIGZyb20gJy4vbGF6eS1pbWcnXG5cbmNvbnN0IEJhbm5lckJveCA9ICh7IGxpbmssIHRpdGxlLCBkYXRlLCBpbWFnZSB9KSA9PiAoXG4gIDxhIGNsYXNzTmFtZT0nYmFubmVyLWJveCcgaHJlZj17bGlua30gdGl0bGU9e2Ake3RpdGxlfSAke2RhdGV9YH0+XG4gICAgeyEhaW1hZ2UgJiYgPExhenlJbWcgc3JjPXtpbWFnZX0gYWx0PXt0aXRsZX0gLz59XG4gICAgPGgyIGNsYXNzTmFtZT0ndGl0bGUnPlxuICAgICAge2Ake3RpdGxlfSBgfTxzcGFuIGNsYXNzTmFtZT0nZGF0ZSc+e2RhdGV9PC9zcGFuPlxuICAgIDwvaDI+XG4gIDwvYT5cbilcblxuQmFubmVyQm94LmRlZmF1bHRQcm9wcyA9IHtcbiAgbGluazogJyMnXG59XG5cbkJhbm5lckJveC5wcm9wVHlwZXMgPSB7XG4gIHRpdGxlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGRhdGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbGluazogUHJvcFR5cGVzLnN0cmluZyxcbiAgaW1hZ2U6IFByb3BUeXBlcy5zdHJpbmdcbn1cblxuZXhwb3J0IGRlZmF1bHQgQmFubmVyQm94XG4iLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IEJhbm5lckJveCBmcm9tICcuLi8uLi9jb21wb25lbnRzL2Jhbm5lci1ib3gnXG5cbmNvbnN0IGdldERhdGUgPSAoZGF0ZSkgPT4ge1xuICByZXR1cm4gYCR7ZGF0ZS5kYXl9IC0gJHtkYXRlLm1vbnRofWBcbn1cblxuY29uc3QgSGVhZGVyQmFubmVyID0gKHsgZXZlbnRzIH0pID0+IChcbiAgPHNlY3Rpb24gY2xhc3NOYW1lPSdiYW5uZXInPlxuICAgIDxkaXYgY2xhc3NOYW1lPSdiYW5uZXItbWFpbic+XG4gICAgICA8QmFubmVyQm94XG4gICAgICAgIGxpbms9e2V2ZW50c1swXS5saW5rfVxuICAgICAgICB0aXRsZT17ZXZlbnRzWzBdLnRpdGxlfVxuICAgICAgICBkYXRlPXtnZXREYXRlKGV2ZW50c1swXS5kYXRlKX1cbiAgICAgICAgaW1hZ2U9e2V2ZW50c1swXS5pbWFnZX0gLz5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYga2V5PXswfSBjbGFzc05hbWU9J2Jhbm5lci1hc2lkZSc+XG4gICAgICB7ZXZlbnRzLnNsaWNlKDEsIDMpLm1hcCgoZXZlbnQsIGluZGV4KSA9PiAoXG4gICAgICAgIDxCYW5uZXJCb3hcbiAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgIGxpbms9e2V2ZW50Lmxpbmt9XG4gICAgICAgICAgdGl0bGU9e2V2ZW50LnRpdGxlfVxuICAgICAgICAgIGRhdGU9e2dldERhdGUoZXZlbnQuZGF0ZSl9IC8+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYga2V5PXsxfSBjbGFzc05hbWU9J2Jhbm5lci1hc2lkZSc+XG4gICAgICB7ZXZlbnRzLnNsaWNlKDMpLm1hcCgoZXZlbnQsIGluZGV4KSA9PiAoXG4gICAgICAgIDxCYW5uZXJCb3hcbiAgICAgICAgICBrZXk9e2luZGV4fVxuICAgICAgICAgIGxpbms9e2V2ZW50Lmxpbmt9XG4gICAgICAgICAgdGl0bGU9e2V2ZW50LnRpdGxlfVxuICAgICAgICAgIGRhdGU9e2dldERhdGUoZXZlbnQuZGF0ZSl9IC8+XG4gICAgICApKX1cbiAgICA8L2Rpdj5cbiAgPC9zZWN0aW9uPlxuKVxuXG5IZWFkZXJCYW5uZXIucHJvcFR5cGVzID0ge1xuICBldmVudHM6IFByb3BUeXBlcy5hcnJheS5pc1JlcXVpcmVkXG59XG5cbmV4cG9ydCBkZWZhdWx0IEhlYWRlckJhbm5lclxuIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMsIENvbXBvbmVudCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IEhlYWRlckJhbm5lciBmcm9tICcuL2hlYWRlci1iYW5uZXInXG4vLyBpbXBvcnQgSGVhZGVyRmlsdGVyIGZyb20gJy4vaGVhZGVyLWZpbHRlcidcbmltcG9ydCB7IGZldGNoRXZlbnRzIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9pbmRleCdcblxuY2xhc3MgSGVhZGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIHRoaXMucHJvcHMuZGlzcGF0Y2goZmV0Y2hFdmVudHMoKSlcbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPSd3ZWxsbmVzcyc+XG4gICAgICAgIDxoMSBjbGFzc05hbWU9J3RpdGxlJz5cbiAgICAgICAgICBFbmNvbnRyZSBldmVudG9zIGRlIEZyb250LUVuZCBlbSB0b2RvIG8gQnJhc2lsXG4gICAgICAgIDwvaDE+XG5cbiAgICAgICAgPEhlYWRlckJhbm5lciBldmVudHM9e3RoaXMucHJvcHMuZXZlbnRzfSAvPlxuICAgICAgICB7LyogPEhlYWRlckZpbHRlciAvPiAqL31cbiAgICAgIDwvaGVhZGVyPlxuICAgIClcbiAgfVxufVxuXG5IZWFkZXIucHJvcFR5cGVzID0ge1xuICBldmVudHM6IFByb3BUeXBlcy5zaGFwZS5pc1JlcXVpcmVkXG59XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4gKHtcbiAgZXZlbnRzOiBzdGF0ZS5ldmVudHMuZXZlbnRzLmZpbHRlcigoXywgaW5kZXgpID0+IGluZGV4IDwgNSlcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShIZWFkZXIpXG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB1bmRlZmluZWQ7XG4gIHZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuICB2YXIgX3N0b3JlU2hhcGUgPSByZXF1aXJlKCcuLi91dGlscy9zdG9yZVNoYXBlJyk7XG4gIHZhciBfc3RvcmVTaGFwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zdG9yZVNoYXBlKTtcbiAgdmFyIF93YXJuaW5nID0gcmVxdWlyZSgnLi4vdXRpbHMvd2FybmluZycpO1xuICB2YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG4gIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcImRlZmF1bHRcIjogb2JqfTtcbiAgfVxuICBmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gICAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7XG4gIH1cbiAgZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gICAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7XG4gICAgfVxuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge2NvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH19KTtcbiAgICBpZiAoc3VwZXJDbGFzcylcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xuICB9XG4gIHZhciBkaWRXYXJuQWJvdXRSZWNlaXZpbmdTdG9yZSA9IGZhbHNlO1xuICBmdW5jdGlvbiB3YXJuQWJvdXRSZWNlaXZpbmdTdG9yZSgpIHtcbiAgICBpZiAoZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZGlkV2FybkFib3V0UmVjZWl2aW5nU3RvcmUgPSB0cnVlO1xuICAgICgwLCBfd2FybmluZzJbXCJkZWZhdWx0XCJdKSgnPFByb3ZpZGVyPiBkb2VzIG5vdCBzdXBwb3J0IGNoYW5naW5nIGBzdG9yZWAgb24gdGhlIGZseS4gJyArICdJdCBpcyBtb3N0IGxpa2VseSB0aGF0IHlvdSBzZWUgdGhpcyBlcnJvciBiZWNhdXNlIHlvdSB1cGRhdGVkIHRvICcgKyAnUmVkdXggMi54IGFuZCBSZWFjdCBSZWR1eCAyLnggd2hpY2ggbm8gbG9uZ2VyIGhvdCByZWxvYWQgcmVkdWNlcnMgJyArICdhdXRvbWF0aWNhbGx5LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtcmVkdXgvcmVsZWFzZXMvJyArICd0YWcvdjIuMC4wIGZvciB0aGUgbWlncmF0aW9uIGluc3RydWN0aW9ucy4nKTtcbiAgfVxuICB2YXIgUHJvdmlkZXIgPSBmdW5jdGlvbihfQ29tcG9uZW50KSB7XG4gICAgX2luaGVyaXRzKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcbiAgICBQcm92aWRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgcmV0dXJuIHtzdG9yZTogdGhpcy5zdG9yZX07XG4gICAgfTtcbiAgICBmdW5jdGlvbiBQcm92aWRlcihwcm9wcywgY29udGV4dCkge1xuICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFByb3ZpZGVyKTtcbiAgICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9Db21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuICAgICAgX3RoaXMuc3RvcmUgPSBwcm9wcy5zdG9yZTtcbiAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgUHJvdmlkZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgICByZXR1cm4gX3JlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pO1xuICAgIH07XG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KF9yZWFjdC5Db21wb25lbnQpO1xuICBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IFByb3ZpZGVyO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFByb3ZpZGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24obmV4dFByb3BzKSB7XG4gICAgICB2YXIgc3RvcmUgPSB0aGlzLnN0b3JlO1xuICAgICAgdmFyIG5leHRTdG9yZSA9IG5leHRQcm9wcy5zdG9yZTtcbiAgICAgIGlmIChzdG9yZSAhPT0gbmV4dFN0b3JlKSB7XG4gICAgICAgIHdhcm5BYm91dFJlY2VpdmluZ1N0b3JlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IF9zdG9yZVNoYXBlMltcImRlZmF1bHRcIl0uaXNSZXF1aXJlZCxcbiAgICBjaGlsZHJlbjogX3JlYWN0LlByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRcbiAgfTtcbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7c3RvcmU6IF9zdG9yZVNoYXBlMltcImRlZmF1bHRcIl0uaXNSZXF1aXJlZH07XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIG9uZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oY29weUZpZWxkc0Zyb20pIHtcbiAgICB2YXIgS2xhc3MgPSB0aGlzO1xuICAgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICAgIH1cbiAgfTtcbiAgdmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyKSB7XG4gICAgdmFyIEtsYXNzID0gdGhpcztcbiAgICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIsIGEzKSB7XG4gICAgdmFyIEtsYXNzID0gdGhpcztcbiAgICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMyk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMyk7XG4gICAgfVxuICB9O1xuICB2YXIgZm91ckFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyLCBhMywgYTQpIHtcbiAgICB2YXIgS2xhc3MgPSB0aGlzO1xuICAgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGZpdmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICAgIHZhciBLbGFzcyA9IHRoaXM7XG4gICAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgICB9XG4gIH07XG4gIHZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICB2YXIgS2xhc3MgPSB0aGlzO1xuICAgICEoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuICAgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoIDwgS2xhc3MucG9vbFNpemUpIHtcbiAgICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcbiAgICB9XG4gIH07XG4gIHZhciBERUZBVUxUX1BPT0xfU0laRSA9IDEwO1xuICB2YXIgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcbiAgdmFyIGFkZFBvb2xpbmdUbyA9IGZ1bmN0aW9uKENvcHlDb25zdHJ1Y3RvciwgcG9vbGVyKSB7XG4gICAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICAgIE5ld0tsYXNzLmluc3RhbmNlUG9vbCA9IFtdO1xuICAgIE5ld0tsYXNzLmdldFBvb2xlZCA9IHBvb2xlciB8fCBERUZBVUxUX1BPT0xFUjtcbiAgICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuICAgIH1cbiAgICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgICByZXR1cm4gTmV3S2xhc3M7XG4gIH07XG4gIHZhciBQb29sZWRDbGFzcyA9IHtcbiAgICBhZGRQb29saW5nVG86IGFkZFBvb2xpbmdUbyxcbiAgICBvbmVBcmd1bWVudFBvb2xlcjogb25lQXJndW1lbnRQb29sZXIsXG4gICAgdHdvQXJndW1lbnRQb29sZXI6IHR3b0FyZ3VtZW50UG9vbGVyLFxuICAgIHRocmVlQXJndW1lbnRQb29sZXI6IHRocmVlQXJndW1lbnRQb29sZXIsXG4gICAgZm91ckFyZ3VtZW50UG9vbGVyOiBmb3VyQXJndW1lbnRQb29sZXIsXG4gICAgZml2ZUFyZ3VtZW50UG9vbGVyOiBmaXZlQXJndW1lbnRQb29sZXJcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzcztcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgS2V5RXNjYXBlVXRpbHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRXNjYXBlIGFuZCB3cmFwIGtleSBzbyBpdCBpcyBzYWZlIHRvIHVzZSBhcyBhIHJlYWN0aWRcbiAqXG4gKiBAcGFyYW0geyp9IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgZXNjYXBlZCBrZXkuXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICB2YXIgZXNjYXBlUmVnZXggPSAvWz06XS9nO1xuICB2YXIgZXNjYXBlckxvb2t1cCA9IHtcbiAgICAnPSc6ICc9MCcsXG4gICAgJzonOiAnPTInXG4gIH07XG4gIHZhciBlc2NhcGVkU3RyaW5nID0gKCcnICsga2V5KS5yZXBsYWNlKGVzY2FwZVJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gZXNjYXBlckxvb2t1cFttYXRjaF07XG4gIH0pO1xuXG4gIHJldHVybiAnJCcgKyBlc2NhcGVkU3RyaW5nO1xufVxuXG4vKipcbiAqIFVuZXNjYXBlIGFuZCB1bndyYXAga2V5IGZvciBodW1hbi1yZWFkYWJsZSBkaXNwbGF5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSB0byB1bmVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHVuZXNjYXBlZCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHVuZXNjYXBlKGtleSkge1xuICB2YXIgdW5lc2NhcGVSZWdleCA9IC8oPTB8PTIpL2c7XG4gIHZhciB1bmVzY2FwZXJMb29rdXAgPSB7XG4gICAgJz0wJzogJz0nLFxuICAgICc9Mic6ICc6J1xuICB9O1xuICB2YXIga2V5U3Vic3RyaW5nID0ga2V5WzBdID09PSAnLicgJiYga2V5WzFdID09PSAnJCcgPyBrZXkuc3Vic3RyaW5nKDIpIDoga2V5LnN1YnN0cmluZygxKTtcblxuICByZXR1cm4gKCcnICsga2V5U3Vic3RyaW5nKS5yZXBsYWNlKHVuZXNjYXBlUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiB1bmVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICB9KTtcbn1cblxudmFyIEtleUVzY2FwZVV0aWxzID0ge1xuICBlc2NhcGU6IGVzY2FwZSxcbiAgdW5lc2NhcGU6IHVuZXNjYXBlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleUVzY2FwZVV0aWxzOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG4gIHZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuICB2YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3JGbicpO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIHZhciBLZXlFc2NhcGVVdGlscyA9IHJlcXVpcmUoJy4vS2V5RXNjYXBlVXRpbHMnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIHZhciBTRVBBUkFUT1IgPSAnLic7XG4gIHZhciBTVUJTRVBBUkFUT1IgPSAnOic7XG4gIHZhciBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGdldENvbXBvbmVudEtleShjb21wb25lbnQsIGluZGV4KSB7XG4gICAgaWYgKGNvbXBvbmVudCAmJiB0eXBlb2YgY29tcG9uZW50ID09PSAnb2JqZWN0JyAmJiBjb21wb25lbnQua2V5ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBLZXlFc2NhcGVVdGlscy5lc2NhcGUoY29tcG9uZW50LmtleSk7XG4gICAgfVxuICAgIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG4gIH1cbiAgZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sIG5hbWVTb0ZhciwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuICAgIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGNoaWxkcmVuID09PSBudWxsIHx8IHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdudW1iZXInIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpIHtcbiAgICAgIGNhbGxiYWNrKHRyYXZlcnNlQ29udGV4dCwgY2hpbGRyZW4sIG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKTtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICB2YXIgY2hpbGQ7XG4gICAgdmFyIG5leHROYW1lO1xuICAgIHZhciBzdWJ0cmVlQ291bnQgPSAwO1xuICAgIHZhciBuZXh0TmFtZVByZWZpeCA9IG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgOiBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1I7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGkpO1xuICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcbiAgICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG4gICAgICAgIHZhciBzdGVwO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gY2hpbGRyZW4uZW50cmllcykge1xuICAgICAgICAgIHZhciBpaSA9IDA7XG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgY2hpbGQgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRpZFdhcm5BYm91dE1hcHMsICdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCB5ZXQgZnVsbHkgc3VwcG9ydGVkLiBJdCBpcyBhbiAnICsgJ2V4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWlnaHQgYmUgcmVtb3ZlZC4gQ29udmVydCBpdCB0byBhICcgKyAnc2VxdWVuY2UgLyBpdGVyYWJsZSBvZiBrZXllZCBSZWFjdEVsZW1lbnRzIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICBjaGlsZCA9IGVudHJ5WzFdO1xuICAgICAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgS2V5RXNjYXBlVXRpbHMuZXNjYXBlKGVudHJ5WzBdKSArIFNVQlNFUEFSQVRPUiArIGdldENvbXBvbmVudEtleShjaGlsZCwgMCk7XG4gICAgICAgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgYWRkZW5kdW0gPSAnJztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgJyArICdSZWFjdCBhZGQtb25zLic7XG4gICAgICAgICAgaWYgKGNoaWxkcmVuLl9pc1JlYWN0RWxlbWVudCkge1xuICAgICAgICAgICAgYWRkZW5kdW0gPSAnIEl0IGxvb2tzIGxpa2UgeW91XFwncmUgdXNpbmcgYW4gZWxlbWVudCBjcmVhdGVkIGJ5IGEgZGlmZmVyZW50ICcgKyAndmVyc2lvbiBvZiBSZWFjdC4gTWFrZSBzdXJlIHRvIHVzZSBvbmx5IG9uZSBjb3B5IG9mIFJlYWN0Lic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgYWRkZW5kdW0gKz0gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hpbGRyZW5TdHJpbmcgPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiAlcykuJXMnLCBjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcsIGFkZGVuZHVtKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdWJ0cmVlQ291bnQ7XG4gIH1cbiAgZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCAnJywgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSB0cmF2ZXJzZUFsbENoaWxkcmVuO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlcjtcbnZhciBmb3VyQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXI7XG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKy9nO1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsICckJi8nKTtcbn1cbmZ1bmN0aW9uIEZvckVhY2hCb29rS2VlcGluZyhmb3JFYWNoRnVuY3Rpb24sIGZvckVhY2hDb250ZXh0KSB7XG4gIHRoaXMuZnVuYyA9IGZvckVhY2hGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gZm9yRWFjaENvbnRleHQ7XG4gIHRoaXMuY291bnQgPSAwO1xufVxuRm9yRWFjaEJvb2tLZWVwaW5nLnByb3RvdHlwZS5kZXN0cnVjdG9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZnVuYyA9IG51bGw7XG4gIHRoaXMuY29udGV4dCA9IG51bGw7XG4gIHRoaXMuY291bnQgPSAwO1xufTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhGb3JFYWNoQm9va0tlZXBpbmcsIHR3b0FyZ3VtZW50UG9vbGVyKTtcbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZChib29rS2VlcGluZywgY2hpbGQsIG5hbWUpIHtcbiAgdmFyIGZ1bmMgPSBib29rS2VlcGluZy5mdW5jO1xuICB2YXIgY29udGV4dCA9IGJvb2tLZWVwaW5nLmNvbnRleHQ7XG4gIGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgYm9va0tlZXBpbmcuY291bnQrKyk7XG59XG5mdW5jdGlvbiBmb3JFYWNoQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgdHJhdmVyc2VDb250ZXh0ID0gRm9yRWFjaEJvb2tLZWVwaW5nLmdldFBvb2xlZChmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpO1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIEZvckVhY2hCb29rS2VlcGluZy5yZWxlYXNlKHRyYXZlcnNlQ29udGV4dCk7XG59XG5mdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsIGtleVByZWZpeCwgbWFwRnVuY3Rpb24sIG1hcENvbnRleHQpIHtcbiAgdGhpcy5yZXN1bHQgPSBtYXBSZXN1bHQ7XG4gIHRoaXMua2V5UHJlZml4ID0ga2V5UHJlZml4O1xuICB0aGlzLmZ1bmMgPSBtYXBGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gbWFwQ29udGV4dDtcbiAgdGhpcy5jb3VudCA9IDA7XG59XG5NYXBCb29rS2VlcGluZy5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlc3VsdCA9IG51bGw7XG4gIHRoaXMua2V5UHJlZml4ID0gbnVsbDtcbiAgdGhpcy5mdW5jID0gbnVsbDtcbiAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgdGhpcy5jb3VudCA9IDA7XG59O1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKE1hcEJvb2tLZWVwaW5nLCBmb3VyQXJndW1lbnRQb29sZXIpO1xuZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChib29rS2VlcGluZywgY2hpbGQsIGNoaWxkS2V5KSB7XG4gIHZhciByZXN1bHQgPSBib29rS2VlcGluZy5yZXN1bHQ7XG4gIHZhciBrZXlQcmVmaXggPSBib29rS2VlcGluZy5rZXlQcmVmaXg7XG4gIHZhciBmdW5jID0gYm9va0tlZXBpbmcuZnVuYztcbiAgdmFyIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuICB2YXIgbWFwcGVkQ2hpbGQgPSBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGJvb2tLZWVwaW5nLmNvdW50KyspO1xuICBpZiAoQXJyYXkuaXNBcnJheShtYXBwZWRDaGlsZCkpIHtcbiAgICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKG1hcHBlZENoaWxkLCByZXN1bHQsIGNoaWxkS2V5LCBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQpO1xuICB9IGVsc2UgaWYgKG1hcHBlZENoaWxkICE9IG51bGwpIHtcbiAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG1hcHBlZENoaWxkKSkge1xuICAgICAgbWFwcGVkQ2hpbGQgPSBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlS2V5KG1hcHBlZENoaWxkLCBrZXlQcmVmaXggKyAobWFwcGVkQ2hpbGQua2V5ICYmICghY2hpbGQgfHwgY2hpbGQua2V5ICE9PSBtYXBwZWRDaGlsZC5rZXkpID8gZXNjYXBlVXNlclByb3ZpZGVkS2V5KG1hcHBlZENoaWxkLmtleSkgKyAnLycgOiAnJykgKyBjaGlsZEtleSk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKG1hcHBlZENoaWxkKTtcbiAgfVxufVxuZnVuY3Rpb24gbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgYXJyYXksIHByZWZpeCwgZnVuYywgY29udGV4dCkge1xuICB2YXIgZXNjYXBlZFByZWZpeCA9ICcnO1xuICBpZiAocHJlZml4ICE9IG51bGwpIHtcbiAgICBlc2NhcGVkUHJlZml4ID0gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHByZWZpeCkgKyAnLyc7XG4gIH1cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IE1hcEJvb2tLZWVwaW5nLmdldFBvb2xlZChhcnJheSwgZXNjYXBlZFByZWZpeCwgZnVuYywgY29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIE1hcEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBmdW5jLCBjb250ZXh0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZER1bW15KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250ZXh0KSB7XG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSwgbnVsbCk7XG59XG5mdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxudmFyIFJlYWN0Q2hpbGRyZW4gPSB7XG4gIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcbiAgbWFwOiBtYXBDaGlsZHJlbixcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbDogbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCxcbiAgY291bnQ6IGNvdW50Q2hpbGRyZW4sXG4gIHRvQXJyYXk6IHRvQXJyYXlcbn07XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2hpbGRyZW47XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHByb2Nlc3NpbmdDaGlsZENvbnRleHQgPSBmYWxzZTtcbiAgICB2YXIgd2FybkludmFsaWRTZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIXByb2Nlc3NpbmdDaGlsZENvbnRleHQsICdzZXRTdGF0ZSguLi4pOiBDYW5ub3QgY2FsbCBzZXRTdGF0ZSgpIGluc2lkZSBnZXRDaGlsZENvbnRleHQoKScpIDogdm9pZCAwO1xuICAgIH07XG4gIH1cbiAgdmFyIFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0RldlRvb2wgPSB7XG4gICAgb25CZWdpblByb2Nlc3NpbmdDaGlsZENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcHJvY2Vzc2luZ0NoaWxkQ29udGV4dCA9IHRydWU7XG4gICAgfSxcbiAgICBvbkVuZFByb2Nlc3NpbmdDaGlsZENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcHJvY2Vzc2luZ0NoaWxkQ29udGV4dCA9IGZhbHNlO1xuICAgIH0sXG4gICAgb25TZXRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICB3YXJuSW52YWxpZFNldFN0YXRlKCk7XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0SW52YWxpZFNldFN0YXRlV2FybmluZ0RldlRvb2w7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sID0gcmVxdWlyZSgnLi9SZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sJyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgZXZlbnRIYW5kbGVycyA9IFtdO1xuICB2YXIgaGFuZGxlckRvZXNUaHJvd0ZvckV2ZW50ID0ge307XG4gIGZ1bmN0aW9uIGVtaXRFdmVudChoYW5kbGVyRnVuY3Rpb25OYW1lLCBhcmcxLCBhcmcyLCBhcmczLCBhcmc0LCBhcmc1KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGV2ZW50SGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGhhbmRsZXJbaGFuZGxlckZ1bmN0aW9uTmFtZV0pIHtcbiAgICAgICAgICAgIGhhbmRsZXJbaGFuZGxlckZ1bmN0aW9uTmFtZV0oYXJnMSwgYXJnMiwgYXJnMywgYXJnNCwgYXJnNSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWhhbmRsZXJEb2VzVGhyb3dGb3JFdmVudFtoYW5kbGVyRnVuY3Rpb25OYW1lXSwgJ2V4Y2VwdGlvbiB0aHJvd24gYnkgZGV2dG9vbCB3aGlsZSBoYW5kbGluZyAlczogJXMnLCBoYW5kbGVyRnVuY3Rpb25OYW1lLCBlLm1lc3NhZ2UpIDogdm9pZCAwO1xuICAgICAgICAgIGhhbmRsZXJEb2VzVGhyb3dGb3JFdmVudFtoYW5kbGVyRnVuY3Rpb25OYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICB2YXIgUmVhY3REZWJ1Z1Rvb2wgPSB7XG4gICAgYWRkRGV2dG9vbDogZnVuY3Rpb24oZGV2dG9vbCkge1xuICAgICAgZXZlbnRIYW5kbGVycy5wdXNoKGRldnRvb2wpO1xuICAgIH0sXG4gICAgcmVtb3ZlRGV2dG9vbDogZnVuY3Rpb24oZGV2dG9vbCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChldmVudEhhbmRsZXJzW2ldID09PSBkZXZ0b29sKSB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dDogZnVuY3Rpb24oKSB7XG4gICAgICBlbWl0RXZlbnQoJ29uQmVnaW5Qcm9jZXNzaW5nQ2hpbGRDb250ZXh0Jyk7XG4gICAgfSxcbiAgICBvbkVuZFByb2Nlc3NpbmdDaGlsZENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZW1pdEV2ZW50KCdvbkVuZFByb2Nlc3NpbmdDaGlsZENvbnRleHQnKTtcbiAgICB9LFxuICAgIG9uU2V0U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgZW1pdEV2ZW50KCdvblNldFN0YXRlJyk7XG4gICAgfSxcbiAgICBvbk1vdW50Um9vdENvbXBvbmVudDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgZW1pdEV2ZW50KCdvbk1vdW50Um9vdENvbXBvbmVudCcsIGludGVybmFsSW5zdGFuY2UpO1xuICAgIH0sXG4gICAgb25Nb3VudENvbXBvbmVudDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgZW1pdEV2ZW50KCdvbk1vdW50Q29tcG9uZW50JywgaW50ZXJuYWxJbnN0YW5jZSk7XG4gICAgfSxcbiAgICBvblVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24oaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgICAgZW1pdEV2ZW50KCdvblVwZGF0ZUNvbXBvbmVudCcsIGludGVybmFsSW5zdGFuY2UpO1xuICAgIH0sXG4gICAgb25Vbm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihpbnRlcm5hbEluc3RhbmNlKSB7XG4gICAgICBlbWl0RXZlbnQoJ29uVW5tb3VudENvbXBvbmVudCcsIGludGVybmFsSW5zdGFuY2UpO1xuICAgIH1cbiAgfTtcbiAgUmVhY3REZWJ1Z1Rvb2wuYWRkRGV2dG9vbChSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERlYnVnVG9vbDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBSZWFjdERlYnVnVG9vbCA9IHJlcXVpcmUoJy4vUmVhY3REZWJ1Z1Rvb2wnKTtcbm1vZHVsZS5leHBvcnRzID0ge2RlYnVnVG9vbDogUmVhY3REZWJ1Z1Rvb2x9O1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3ROb29wVXBkYXRlUXVldWUnKTtcbiAgdmFyIFJlYWN0SW5zdHJ1bWVudGF0aW9uID0gcmVxdWlyZSgnLi9SZWFjdEluc3RydW1lbnRhdGlvbicpO1xuICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG4gIHZhciBlbXB0eU9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5T2JqZWN0Jyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIGZ1bmN0aW9uIFJlYWN0Q29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7XG4gICAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbiAgfVxuICBSZWFjdENvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuICBSZWFjdENvbXBvbmVudC5wcm90b3R5cGUuc2V0U3RhdGUgPSBmdW5jdGlvbihwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gICAgISh0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgcGFydGlhbFN0YXRlID09PSAnZnVuY3Rpb24nIHx8IHBhcnRpYWxTdGF0ZSA9PSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhICcgKyAnZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgUmVhY3RJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uU2V0U3RhdGUoKTtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHBhcnRpYWxTdGF0ZSAhPSBudWxsLCAnc2V0U3RhdGUoLi4uKTogWW91IHBhc3NlZCBhbiB1bmRlZmluZWQgb3IgbnVsbCBzdGF0ZSBvYmplY3Q7ICcgKyAnaW5zdGVhZCwgdXNlIGZvcmNlVXBkYXRlKCkuJykgOiB2b2lkIDA7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcywgcGFydGlhbFN0YXRlKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2ssICdzZXRTdGF0ZScpO1xuICAgIH1cbiAgfTtcbiAgUmVhY3RDb21wb25lbnQucHJvdG90eXBlLmZvcmNlVXBkYXRlID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjaywgJ2ZvcmNlVXBkYXRlJyk7XG4gICAgfVxuICB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBkZXByZWNhdGVkQVBJcyA9IHtcbiAgICAgIGlzTW91bnRlZDogWydpc01vdW50ZWQnLCAnSW5zdGVhZCwgbWFrZSBzdXJlIHRvIGNsZWFuIHVwIHN1YnNjcmlwdGlvbnMgYW5kIHBlbmRpbmcgcmVxdWVzdHMgaW4gJyArICdjb21wb25lbnRXaWxsVW5tb3VudCB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcy4nXSxcbiAgICAgIHJlcGxhY2VTdGF0ZTogWydyZXBsYWNlU3RhdGUnLCAnUmVmYWN0b3IgeW91ciBjb2RlIHRvIHVzZSBzZXRTdGF0ZSBpbnN0ZWFkIChzZWUgJyArICdodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzMyMzYpLiddXG4gICAgfTtcbiAgICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5mbykge1xuICAgICAgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFjdENvbXBvbmVudC5wcm90b3R5cGUsIG1ldGhvZE5hbWUsIHtnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclcyguLi4pIGlzIGRlcHJlY2F0ZWQgaW4gcGxhaW4gSmF2YVNjcmlwdCBSZWFjdCBjbGFzc2VzLiAlcycsIGluZm9bMF0sIGluZm9bMV0pIDogdm9pZCAwO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICB9fSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBmb3IgKHZhciBmbk5hbWUgaW4gZGVwcmVjYXRlZEFQSXMpIHtcbiAgICAgIGlmIChkZXByZWNhdGVkQVBJcy5oYXNPd25Qcm9wZXJ0eShmbk5hbWUpKSB7XG4gICAgICAgIGRlZmluZURlcHJlY2F0aW9uV2FybmluZyhmbk5hbWUsIGRlcHJlY2F0ZWRBUElzW2ZuTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50O1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgZnVuY3Rpb24gd2FyblREWihwdWJsaWNJbnN0YW5jZSwgY2FsbGVyTmFtZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLik6IENhbiBvbmx5IHVwZGF0ZSBhIG1vdW50ZWQgb3IgbW91bnRpbmcgY29tcG9uZW50LiAnICsgJ1RoaXMgdXN1YWxseSBtZWFucyB5b3UgY2FsbGVkICVzKCkgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4gJyArICdUaGlzIGlzIGEgbm8tb3AuIFBsZWFzZSBjaGVjayB0aGUgY29kZSBmb3IgdGhlICVzIGNvbXBvbmVudC4nLCBjYWxsZXJOYW1lLCBjYWxsZXJOYW1lLCBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3RvciAmJiBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCAnJykgOiB2b2lkIDA7XG4gICAgfVxuICB9XG4gIHZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgICBpc01vdW50ZWQ6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBlbnF1ZXVlQ2FsbGJhY2s6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBjYWxsYmFjaykge30sXG4gICAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSkge1xuICAgICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gICAgfSxcbiAgICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgY29tcGxldGVTdGF0ZSkge1xuICAgICAgd2FyblREWihwdWJsaWNJbnN0YW5jZSwgJ3JlcGxhY2VTdGF0ZScpO1xuICAgIH0sXG4gICAgZW5xdWV1ZVNldFN0YXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgICB3YXJuVERaKHB1YmxpY0luc3RhbmNlLCAnc2V0U3RhdGUnKTtcbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3ROb29wVXBkYXRlUXVldWU7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuICB2YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50Jyk7XG4gIHZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9ucycpO1xuICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG4gIHZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3ROb29wVXBkYXRlUXVldWUnKTtcbiAgdmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIga2V5TWlycm9yID0gcmVxdWlyZSgnZmJqcy9saWIva2V5TWlycm9yJyk7XG4gIHZhciBrZXlPZiA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU9mJyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgTUlYSU5TX0tFWSA9IGtleU9mKHttaXhpbnM6IG51bGx9KTtcbiAgdmFyIFNwZWNQb2xpY3kgPSBrZXlNaXJyb3Ioe1xuICAgIERFRklORV9PTkNFOiBudWxsLFxuICAgIERFRklORV9NQU5ZOiBudWxsLFxuICAgIE9WRVJSSURFX0JBU0U6IG51bGwsXG4gICAgREVGSU5FX01BTllfTUVSR0VEOiBudWxsXG4gIH0pO1xuICB2YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcbiAgdmFyIFJlYWN0Q2xhc3NJbnRlcmZhY2UgPSB7XG4gICAgbWl4aW5zOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIHN0YXRpY3M6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgcHJvcFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIGNvbnRleHRUeXBlczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcbiAgICBjaGlsZENvbnRleHRUeXBlczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuICAgIGdldEluaXRpYWxTdGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG4gICAgZ2V0Q2hpbGRDb250ZXh0OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcbiAgICByZW5kZXI6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG4gICAgY29tcG9uZW50V2lsbE1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIGNvbXBvbmVudERpZE1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuICAgIGNvbXBvbmVudFdpbGxVcGRhdGU6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgY29tcG9uZW50RGlkVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIHVwZGF0ZUNvbXBvbmVudDogU3BlY1BvbGljeS5PVkVSUklERV9CQVNFXG4gIH07XG4gIHZhciBSRVNFUlZFRF9TUEVDX0tFWVMgPSB7XG4gICAgZGlzcGxheU5hbWU6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBkaXNwbGF5TmFtZSkge1xuICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICB9LFxuICAgIG1peGluczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIG1peGlucykge1xuICAgICAgaWYgKG1peGlucykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBtaXhpbnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGlsZENvbnRleHRUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNoaWxkQ29udGV4dCk7XG4gICAgICB9XG4gICAgICBDb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyA9IF9hc3NpZ24oe30sIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLCBjaGlsZENvbnRleHRUeXBlcyk7XG4gICAgfSxcbiAgICBjb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY29udGV4dFR5cGVzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzID0gX2Fzc2lnbih7fSwgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLCBjb250ZXh0VHlwZXMpO1xuICAgIH0sXG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcywgZ2V0RGVmYXVsdFByb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGdldERlZmF1bHRQcm9wcztcbiAgICAgIH1cbiAgICB9LFxuICAgIHByb3BUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIHByb3BUeXBlcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBwcm9wVHlwZXMsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCk7XG4gICAgICB9XG4gICAgICBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMgPSBfYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMsIHByb3BUeXBlcyk7XG4gICAgfSxcbiAgICBzdGF0aWNzOiBmdW5jdGlvbihDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICAgICAgbWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHN0YXRpY3MpO1xuICAgIH0sXG4gICAgYXV0b2JpbmQ6IGZ1bmN0aW9uKCkge31cbiAgfTtcbiAgZnVuY3Rpb24gdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCB0eXBlRGVmLCBsb2NhdGlvbikge1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHR5cGVEZWYpIHtcbiAgICAgIGlmICh0eXBlRGVmLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgKyAnUmVhY3QuUHJvcFR5cGVzLicsIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCBwcm9wTmFtZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUoaXNBbHJlYWR5RGVmaW5lZCwgbmFtZSkge1xuICAgIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV0gOiBudWxsO1xuICAgIGlmIChSZWFjdENsYXNzTWl4aW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICEoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5PVkVSUklERV9CQVNFKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgJyArICdgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyAnICsgJ2RvIG5vdCBvdmVybGFwIHdpdGggUmVhY3QgbWV0aG9kcy4nLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAhKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkgfHwgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArICdgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSBkdWUgJyArICd0byBhIG1peGluLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgISh0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICsgJ3VzZSBhIGNvbXBvbmVudCBjbGFzcyBvciBmdW5jdGlvbiBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhICcgKyAncmVndWxhciBvYmplY3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHNwZWMpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdVxcJ3JlIGF0dGVtcHRpbmcgdG8gJyArICd1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHByb3RvID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIHZhciBhdXRvQmluZFBhaXJzID0gcHJvdG8uX19yZWFjdEF1dG9CaW5kUGFpcnM7XG4gICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICAgIFJFU0VSVkVEX1NQRUNfS0VZUy5taXhpbnMoQ29uc3RydWN0b3IsIHNwZWMubWl4aW5zKTtcbiAgICB9XG4gICAgZm9yICh2YXIgbmFtZSBpbiBzcGVjKSB7XG4gICAgICBpZiAoIXNwZWMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PT0gTUlYSU5TX0tFWSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wZXJ0eSA9IHNwZWNbbmFtZV07XG4gICAgICB2YXIgaXNBbHJlYWR5RGVmaW5lZCA9IHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKTtcbiAgICAgIGlmIChSRVNFUlZFRF9TUEVDX0tFWVMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgUkVTRVJWRURfU1BFQ19LRVlTW25hbWVdKENvbnN0cnVjdG9yLCBwcm9wZXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaXNSZWFjdENsYXNzTWV0aG9kID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIHZhciBzaG91bGRBdXRvQmluZCA9IGlzRnVuY3Rpb24gJiYgIWlzUmVhY3RDbGFzc01ldGhvZCAmJiAhaXNBbHJlYWR5RGVmaW5lZCAmJiBzcGVjLmF1dG9iaW5kICE9PSBmYWxzZTtcbiAgICAgICAgaWYgKHNob3VsZEF1dG9CaW5kKSB7XG4gICAgICAgICAgYXV0b0JpbmRQYWlycy5wdXNoKG5hbWUsIHByb3BlcnR5KTtcbiAgICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV07XG4gICAgICAgICAgICAhKGlzUmVhY3RDbGFzc01ldGhvZCAmJiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQgfHwgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFVuZXhwZWN0ZWQgc3BlYyBwb2xpY3kgJXMgZm9yIGtleSAlcyAnICsgJ3doZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy4nLCBzcGVjUG9saWN5LCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBpZiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQpIHtcbiAgICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZKSB7XG4gICAgICAgICAgICAgIHByb3RvW25hbWVdID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3RvW25hbWVdID0gcHJvcGVydHk7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nICYmIHNwZWMuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICAgICAgICBwcm90b1tuYW1lXS5kaXNwbGF5TmFtZSA9IHNwZWMuZGlzcGxheU5hbWUgKyAnXycgKyBuYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgaWYgKCFzdGF0aWNzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAodmFyIG5hbWUgaW4gc3RhdGljcykge1xuICAgICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICAgIGlmICghc3RhdGljcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Jlc2VydmVkID0gbmFtZSBpbiBSRVNFUlZFRF9TUEVDX0tFWVM7XG4gICAgICAhIWlzUmVzZXJ2ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkICcgKyAncHJvcGVydHksIGAlc2AsIHRoYXQgc2hvdWxkblxcJ3QgYmUgb24gdGhlIFwic3RhdGljc1wiIGtleS4gRGVmaW5lIGl0ICcgKyAnYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSAnICsgJ2NvbnN0cnVjdG9yLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBpc0luaGVyaXRlZCA9IG5hbWUgaW4gQ29uc3RydWN0b3I7XG4gICAgICAhIWlzSW5oZXJpdGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArICdgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSAnICsgJ2R1ZSB0byBhIG1peGluLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIENvbnN0cnVjdG9yW25hbWVdID0gcHJvcGVydHk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMob25lLCB0d28pIHtcbiAgICAhKG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gdHdvKSB7XG4gICAgICBpZiAodHdvLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgIShvbmVba2V5XSA9PT0gdW5kZWZpbmVkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6ICcgKyAnVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgJyArICdtYXkgYmUgZHVlIHRvIGEgbWl4aW47IGluIHBhcnRpY3VsYXIsIHRoaXMgbWF5IGJlIGNhdXNlZCBieSB0d28gJyArICdnZXRJbml0aWFsU3RhdGUoKSBvciBnZXREZWZhdWx0UHJvcHMoKSBtZXRob2RzIHJldHVybmluZyBvYmplY3RzICcgKyAnd2l0aCBjbGFzaGluZyBrZXlzLicsIGtleSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBvbmVba2V5XSA9IHR3b1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb25lO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZFJlc3VsdCgpIHtcbiAgICAgIHZhciBhID0gb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgICAgdmFyIGMgPSB7fTtcbiAgICAgIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYywgYSk7XG4gICAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGIpO1xuICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICAgIHZhciBib3VuZE1ldGhvZCA9IG1ldGhvZC5iaW5kKGNvbXBvbmVudCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBudWxsO1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgICB2YXIgX2JpbmQgPSBib3VuZE1ldGhvZC5iaW5kO1xuICAgICAgYm91bmRNZXRob2QuYmluZCA9IGZ1bmN0aW9uKG5ld1RoaXMpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLFxuICAgICAgICAgICAgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3VGhpcyAhPT0gY29tcG9uZW50ICYmIG5ld1RoaXMgIT09IG51bGwpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgKyAnY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJXMnLCBjb21wb25lbnROYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2JpbmQoKTogWW91IGFyZSBiaW5kaW5nIGEgY29tcG9uZW50IG1ldGhvZCB0byB0aGUgY29tcG9uZW50LiAnICsgJ1JlYWN0IGRvZXMgdGhpcyBmb3IgeW91IGF1dG9tYXRpY2FsbHkgaW4gYSBoaWdoLXBlcmZvcm1hbmNlICcgKyAnd2F5LCBzbyB5b3UgY2FuIHNhZmVseSByZW1vdmUgdGhpcyBjYWxsLiBTZWUgJXMnLCBjb21wb25lbnROYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4gYm91bmRNZXRob2Q7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlYm91bmRNZXRob2QgPSBfYmluZC5hcHBseShib3VuZE1ldGhvZCwgYXJndW1lbnRzKTtcbiAgICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBhcmdzO1xuICAgICAgICByZXR1cm4gcmVib3VuZE1ldGhvZDtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgfVxuICBmdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2RzKGNvbXBvbmVudCkge1xuICAgIHZhciBwYWlycyA9IGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRQYWlycztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICB2YXIgYXV0b0JpbmRLZXkgPSBwYWlyc1tpXTtcbiAgICAgIHZhciBtZXRob2QgPSBwYWlyc1tpICsgMV07XG4gICAgICBjb21wb25lbnRbYXV0b0JpbmRLZXldID0gYmluZEF1dG9CaW5kTWV0aG9kKGNvbXBvbmVudCwgbWV0aG9kKTtcbiAgICB9XG4gIH1cbiAgdmFyIFJlYWN0Q2xhc3NNaXhpbiA9IHtcbiAgICByZXBsYWNlU3RhdGU6IGZ1bmN0aW9uKG5ld1N0YXRlLCBjYWxsYmFjaykge1xuICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUodGhpcywgbmV3U3RhdGUpO1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2ssICdyZXBsYWNlU3RhdGUnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzTW91bnRlZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVyLmlzTW91bnRlZCh0aGlzKTtcbiAgICB9XG4gIH07XG4gIHZhciBSZWFjdENsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24oKSB7fTtcbiAgX2Fzc2lnbihSZWFjdENsYXNzQ29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RDb21wb25lbnQucHJvdG90eXBlLCBSZWFjdENsYXNzTWl4aW4pO1xuICB2YXIgUmVhY3RDbGFzcyA9IHtcbiAgICBjcmVhdGVDbGFzczogZnVuY3Rpb24oc3BlYykge1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24ocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0aGlzIGluc3RhbmNlb2YgQ29uc3RydWN0b3IsICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICsgJ0pTWCBpbnN0ZWFkLiBTZWU6IGh0dHBzOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9fcmVhY3RBdXRvQmluZFBhaXJzLmxlbmd0aCkge1xuICAgICAgICAgIGJpbmRBdXRvQmluZE1ldGhvZHModGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICAgICAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgICAgIHZhciBpbml0aWFsU3RhdGUgPSB0aGlzLmdldEluaXRpYWxTdGF0ZSA/IHRoaXMuZ2V0SW5pdGlhbFN0YXRlKCkgOiBudWxsO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLmdldEluaXRpYWxTdGF0ZS5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICEodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0SW5pdGlhbFN0YXRlKCk6IG11c3QgcmV0dXJuIGFuIG9iamVjdCBvciBudWxsJywgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgICAgfTtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBSZWFjdENsYXNzQ29tcG9uZW50KCk7XG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5fX3JlYWN0QXV0b0JpbmRQYWlycyA9IFtdO1xuICAgICAgaW5qZWN0ZWRNaXhpbnMuZm9yRWFjaChtaXhTcGVjSW50b0NvbXBvbmVudC5iaW5kKG51bGwsIENvbnN0cnVjdG9yKSk7XG4gICAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3BlYyk7XG4gICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmRlZmF1bHRQcm9wcyA9IENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcygpO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlKSB7XG4gICAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAhQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVDbGFzcyguLi4pOiBDbGFzcyBzcGVjaWZpY2F0aW9uIG11c3QgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50U2hvdWxkVXBkYXRlLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/ICcgKyAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgKyAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJywgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMoKS4gRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKT8nLCBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBSZWFjdENsYXNzSW50ZXJmYWNlKSB7XG4gICAgICAgIGlmICghQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH0sXG4gICAgaW5qZWN0aW9uOiB7aW5qZWN0TWl4aW46IGZ1bmN0aW9uKG1peGluKSB7XG4gICAgICAgIGluamVjdGVkTWl4aW5zLnB1c2gobWl4aW4pO1xuICAgICAgfX1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENsYXNzO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbiAgdmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50VmFsaWRhdG9yJyk7XG4gIHZhciBtYXBPYmplY3QgPSByZXF1aXJlKCdmYmpzL2xpYi9tYXBPYmplY3QnKTtcbiAgZnVuY3Rpb24gY3JlYXRlRE9NRmFjdG9yeSh0YWcpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmV0dXJuIFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5KHRhZyk7XG4gICAgfVxuICAgIHJldHVybiBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSh0YWcpO1xuICB9XG4gIHZhciBSZWFjdERPTUZhY3RvcmllcyA9IG1hcE9iamVjdCh7XG4gICAgYTogJ2EnLFxuICAgIGFiYnI6ICdhYmJyJyxcbiAgICBhZGRyZXNzOiAnYWRkcmVzcycsXG4gICAgYXJlYTogJ2FyZWEnLFxuICAgIGFydGljbGU6ICdhcnRpY2xlJyxcbiAgICBhc2lkZTogJ2FzaWRlJyxcbiAgICBhdWRpbzogJ2F1ZGlvJyxcbiAgICBiOiAnYicsXG4gICAgYmFzZTogJ2Jhc2UnLFxuICAgIGJkaTogJ2JkaScsXG4gICAgYmRvOiAnYmRvJyxcbiAgICBiaWc6ICdiaWcnLFxuICAgIGJsb2NrcXVvdGU6ICdibG9ja3F1b3RlJyxcbiAgICBib2R5OiAnYm9keScsXG4gICAgYnI6ICdicicsXG4gICAgYnV0dG9uOiAnYnV0dG9uJyxcbiAgICBjYW52YXM6ICdjYW52YXMnLFxuICAgIGNhcHRpb246ICdjYXB0aW9uJyxcbiAgICBjaXRlOiAnY2l0ZScsXG4gICAgY29kZTogJ2NvZGUnLFxuICAgIGNvbDogJ2NvbCcsXG4gICAgY29sZ3JvdXA6ICdjb2xncm91cCcsXG4gICAgZGF0YTogJ2RhdGEnLFxuICAgIGRhdGFsaXN0OiAnZGF0YWxpc3QnLFxuICAgIGRkOiAnZGQnLFxuICAgIGRlbDogJ2RlbCcsXG4gICAgZGV0YWlsczogJ2RldGFpbHMnLFxuICAgIGRmbjogJ2RmbicsXG4gICAgZGlhbG9nOiAnZGlhbG9nJyxcbiAgICBkaXY6ICdkaXYnLFxuICAgIGRsOiAnZGwnLFxuICAgIGR0OiAnZHQnLFxuICAgIGVtOiAnZW0nLFxuICAgIGVtYmVkOiAnZW1iZWQnLFxuICAgIGZpZWxkc2V0OiAnZmllbGRzZXQnLFxuICAgIGZpZ2NhcHRpb246ICdmaWdjYXB0aW9uJyxcbiAgICBmaWd1cmU6ICdmaWd1cmUnLFxuICAgIGZvb3RlcjogJ2Zvb3RlcicsXG4gICAgZm9ybTogJ2Zvcm0nLFxuICAgIGgxOiAnaDEnLFxuICAgIGgyOiAnaDInLFxuICAgIGgzOiAnaDMnLFxuICAgIGg0OiAnaDQnLFxuICAgIGg1OiAnaDUnLFxuICAgIGg2OiAnaDYnLFxuICAgIGhlYWQ6ICdoZWFkJyxcbiAgICBoZWFkZXI6ICdoZWFkZXInLFxuICAgIGhncm91cDogJ2hncm91cCcsXG4gICAgaHI6ICdocicsXG4gICAgaHRtbDogJ2h0bWwnLFxuICAgIGk6ICdpJyxcbiAgICBpZnJhbWU6ICdpZnJhbWUnLFxuICAgIGltZzogJ2ltZycsXG4gICAgaW5wdXQ6ICdpbnB1dCcsXG4gICAgaW5zOiAnaW5zJyxcbiAgICBrYmQ6ICdrYmQnLFxuICAgIGtleWdlbjogJ2tleWdlbicsXG4gICAgbGFiZWw6ICdsYWJlbCcsXG4gICAgbGVnZW5kOiAnbGVnZW5kJyxcbiAgICBsaTogJ2xpJyxcbiAgICBsaW5rOiAnbGluaycsXG4gICAgbWFpbjogJ21haW4nLFxuICAgIG1hcDogJ21hcCcsXG4gICAgbWFyazogJ21hcmsnLFxuICAgIG1lbnU6ICdtZW51JyxcbiAgICBtZW51aXRlbTogJ21lbnVpdGVtJyxcbiAgICBtZXRhOiAnbWV0YScsXG4gICAgbWV0ZXI6ICdtZXRlcicsXG4gICAgbmF2OiAnbmF2JyxcbiAgICBub3NjcmlwdDogJ25vc2NyaXB0JyxcbiAgICBvYmplY3Q6ICdvYmplY3QnLFxuICAgIG9sOiAnb2wnLFxuICAgIG9wdGdyb3VwOiAnb3B0Z3JvdXAnLFxuICAgIG9wdGlvbjogJ29wdGlvbicsXG4gICAgb3V0cHV0OiAnb3V0cHV0JyxcbiAgICBwOiAncCcsXG4gICAgcGFyYW06ICdwYXJhbScsXG4gICAgcGljdHVyZTogJ3BpY3R1cmUnLFxuICAgIHByZTogJ3ByZScsXG4gICAgcHJvZ3Jlc3M6ICdwcm9ncmVzcycsXG4gICAgcTogJ3EnLFxuICAgIHJwOiAncnAnLFxuICAgIHJ0OiAncnQnLFxuICAgIHJ1Ynk6ICdydWJ5JyxcbiAgICBzOiAncycsXG4gICAgc2FtcDogJ3NhbXAnLFxuICAgIHNjcmlwdDogJ3NjcmlwdCcsXG4gICAgc2VjdGlvbjogJ3NlY3Rpb24nLFxuICAgIHNlbGVjdDogJ3NlbGVjdCcsXG4gICAgc21hbGw6ICdzbWFsbCcsXG4gICAgc291cmNlOiAnc291cmNlJyxcbiAgICBzcGFuOiAnc3BhbicsXG4gICAgc3Ryb25nOiAnc3Ryb25nJyxcbiAgICBzdHlsZTogJ3N0eWxlJyxcbiAgICBzdWI6ICdzdWInLFxuICAgIHN1bW1hcnk6ICdzdW1tYXJ5JyxcbiAgICBzdXA6ICdzdXAnLFxuICAgIHRhYmxlOiAndGFibGUnLFxuICAgIHRib2R5OiAndGJvZHknLFxuICAgIHRkOiAndGQnLFxuICAgIHRleHRhcmVhOiAndGV4dGFyZWEnLFxuICAgIHRmb290OiAndGZvb3QnLFxuICAgIHRoOiAndGgnLFxuICAgIHRoZWFkOiAndGhlYWQnLFxuICAgIHRpbWU6ICd0aW1lJyxcbiAgICB0aXRsZTogJ3RpdGxlJyxcbiAgICB0cjogJ3RyJyxcbiAgICB0cmFjazogJ3RyYWNrJyxcbiAgICB1OiAndScsXG4gICAgdWw6ICd1bCcsXG4gICAgJ3Zhcic6ICd2YXInLFxuICAgIHZpZGVvOiAndmlkZW8nLFxuICAgIHdicjogJ3dicicsXG4gICAgY2lyY2xlOiAnY2lyY2xlJyxcbiAgICBjbGlwUGF0aDogJ2NsaXBQYXRoJyxcbiAgICBkZWZzOiAnZGVmcycsXG4gICAgZWxsaXBzZTogJ2VsbGlwc2UnLFxuICAgIGc6ICdnJyxcbiAgICBpbWFnZTogJ2ltYWdlJyxcbiAgICBsaW5lOiAnbGluZScsXG4gICAgbGluZWFyR3JhZGllbnQ6ICdsaW5lYXJHcmFkaWVudCcsXG4gICAgbWFzazogJ21hc2snLFxuICAgIHBhdGg6ICdwYXRoJyxcbiAgICBwYXR0ZXJuOiAncGF0dGVybicsXG4gICAgcG9seWdvbjogJ3BvbHlnb24nLFxuICAgIHBvbHlsaW5lOiAncG9seWxpbmUnLFxuICAgIHJhZGlhbEdyYWRpZW50OiAncmFkaWFsR3JhZGllbnQnLFxuICAgIHJlY3Q6ICdyZWN0JyxcbiAgICBzdG9wOiAnc3RvcCcsXG4gICAgc3ZnOiAnc3ZnJyxcbiAgICB0ZXh0OiAndGV4dCcsXG4gICAgdHNwYW46ICd0c3BhbidcbiAgfSwgY3JlYXRlRE9NRmFjdG9yeSk7XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RET01GYWN0b3JpZXM7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBrZXlNaXJyb3IgPSByZXF1aXJlKCdmYmpzL2xpYi9rZXlNaXJyb3InKTtcblxudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMgPSBrZXlNaXJyb3Ioe1xuICBwcm9wOiBudWxsLFxuICBjb250ZXh0OiBudWxsLFxuICBjaGlsZENvbnRleHQ6IG51bGxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbnM7IiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9ucycpO1xuICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG4gIHZhciBSZWFjdEN1cnJlbnRPd25lciA9IHJlcXVpcmUoJy4vUmVhY3RDdXJyZW50T3duZXInKTtcbiAgdmFyIGNhbkRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9jYW5EZWZpbmVQcm9wZXJ0eScpO1xuICB2YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3JGbicpO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICBmdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSB7XG4gICAgaWYgKFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAgIHZhciBuYW1lID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC5nZXROYW1lKCk7XG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICByZXR1cm4gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJyc7XG4gIH1cbiAgdmFyIG93bmVySGFzS2V5VXNlV2FybmluZyA9IHt9O1xuICB2YXIgbG9nZ2VkVHlwZUZhaWx1cmVzID0ge307XG4gIGZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICAgIGlmICghZWxlbWVudC5fc3RvcmUgfHwgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkIHx8IGVsZW1lbnQua2V5ICE9IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB2YXIgYWRkZW5kYSA9IGdldEFkZGVuZGFGb3JLZXlVc2UoJ3VuaXF1ZUtleScsIGVsZW1lbnQsIHBhcmVudFR5cGUpO1xuICAgIGlmIChhZGRlbmRhID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSBcImtleVwiIHByb3AuJyArICclcyVzJXMnLCBhZGRlbmRhLnBhcmVudE9yT3duZXIgfHwgJycsIGFkZGVuZGEuY2hpbGRPd25lciB8fCAnJywgYWRkZW5kYS51cmwgfHwgJycpIDogdm9pZCAwO1xuICB9XG4gIGZ1bmN0aW9uIGdldEFkZGVuZGFGb3JLZXlVc2UobWVzc2FnZVR5cGUsIGVsZW1lbnQsIHBhcmVudFR5cGUpIHtcbiAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcbiAgICBpZiAoIWFkZGVuZHVtKSB7XG4gICAgICB2YXIgcGFyZW50TmFtZSA9IHR5cGVvZiBwYXJlbnRUeXBlID09PSAnc3RyaW5nJyA/IHBhcmVudFR5cGUgOiBwYXJlbnRUeXBlLmRpc3BsYXlOYW1lIHx8IHBhcmVudFR5cGUubmFtZTtcbiAgICAgIGlmIChwYXJlbnROYW1lKSB7XG4gICAgICAgIGFkZGVuZHVtID0gJyBDaGVjayB0aGUgdG9wLWxldmVsIHJlbmRlciBjYWxsIHVzaW5nIDwnICsgcGFyZW50TmFtZSArICc+Lic7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtZW1vaXplciA9IG93bmVySGFzS2V5VXNlV2FybmluZ1ttZXNzYWdlVHlwZV0gfHwgKG93bmVySGFzS2V5VXNlV2FybmluZ1ttZXNzYWdlVHlwZV0gPSB7fSk7XG4gICAgaWYgKG1lbW9pemVyW2FkZGVuZHVtXSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIG1lbW9pemVyW2FkZGVuZHVtXSA9IHRydWU7XG4gICAgdmFyIGFkZGVuZGEgPSB7XG4gICAgICBwYXJlbnRPck93bmVyOiBhZGRlbmR1bSxcbiAgICAgIHVybDogJyBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJyxcbiAgICAgIGNoaWxkT3duZXI6IG51bGxcbiAgICB9O1xuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuX293bmVyICYmIGVsZW1lbnQuX293bmVyICE9PSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgICBhZGRlbmRhLmNoaWxkT3duZXIgPSAnIEl0IHdhcyBwYXNzZWQgYSBjaGlsZCBmcm9tICcgKyBlbGVtZW50Ll9vd25lci5nZXROYW1lKCkgKyAnLic7XG4gICAgfVxuICAgIHJldHVybiBhZGRlbmRhO1xuICB9XG4gIGZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRLZXlzKG5vZGUsIHBhcmVudFR5cGUpIHtcbiAgICBpZiAodHlwZW9mIG5vZGUgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG5vZGUpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcbiAgICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KGNoaWxkLCBwYXJlbnRUeXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG5vZGUpKSB7XG4gICAgICBpZiAobm9kZS5fc3RvcmUpIHtcbiAgICAgICAgbm9kZS5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUpIHtcbiAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihub2RlKTtcbiAgICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICAgIGlmIChpdGVyYXRvckZuICE9PSBub2RlLmVudHJpZXMpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwobm9kZSk7XG4gICAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgaWYgKFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjaGVja1Byb3BUeXBlcyhjb21wb25lbnROYW1lLCBwcm9wVHlwZXMsIHByb3BzLCBsb2NhdGlvbikge1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHByb3BUeXBlcykge1xuICAgICAgaWYgKHByb3BUeXBlcy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgdmFyIGVycm9yO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICEodHlwZW9mIHByb3BUeXBlc1twcm9wTmFtZV0gPT09ICdmdW5jdGlvbicpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJyVzOiAlcyB0eXBlIGAlc2AgaXMgaW52YWxpZDsgaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gJyArICdSZWFjdC5Qcm9wVHlwZXMuJywgY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnLCBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl0sIHByb3BOYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgZXJyb3IgPSBwcm9wVHlwZXNbcHJvcE5hbWVdKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24pO1xuICAgICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAgIGVycm9yID0gZXg7XG4gICAgICAgIH1cbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWVycm9yIHx8IGVycm9yIGluc3RhbmNlb2YgRXJyb3IsICclczogdHlwZSBzcGVjaWZpY2F0aW9uIG9mICVzIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgcHJvcE5hbWUsIHR5cGVvZiBlcnJvcikgOiB2b2lkIDA7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yICYmICEoZXJyb3IubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yLm1lc3NhZ2VdID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgYWRkZW5kdW0gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ0ZhaWxlZCBwcm9wVHlwZTogJXMlcycsIGVycm9yLm1lc3NhZ2UsIGFkZGVuZHVtKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KSB7XG4gICAgdmFyIGNvbXBvbmVudENsYXNzID0gZWxlbWVudC50eXBlO1xuICAgIGlmICh0eXBlb2YgY29tcG9uZW50Q2xhc3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIG5hbWUgPSBjb21wb25lbnRDbGFzcy5kaXNwbGF5TmFtZSB8fCBjb21wb25lbnRDbGFzcy5uYW1lO1xuICAgIGlmIChjb21wb25lbnRDbGFzcy5wcm9wVHlwZXMpIHtcbiAgICAgIGNoZWNrUHJvcFR5cGVzKG5hbWUsIGNvbXBvbmVudENsYXNzLnByb3BUeXBlcywgZWxlbWVudC5wcm9wcywgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucy5wcm9wKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnRDbGFzcy5nZXREZWZhdWx0UHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGNvbXBvbmVudENsYXNzLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCwgJ2dldERlZmF1bHRQcm9wcyBpcyBvbmx5IHVzZWQgb24gY2xhc3NpYyBSZWFjdC5jcmVhdGVDbGFzcyAnICsgJ2RlZmluaXRpb25zLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgYGRlZmF1bHRQcm9wc2AgaW5zdGVhZC4nKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgdmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHtcbiAgICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbih0eXBlLCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICAgIHZhciB2YWxpZFR5cGUgPSB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbic7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh2YWxpZFR5cGUsICdSZWFjdC5jcmVhdGVFbGVtZW50OiB0eXBlIHNob3VsZCBub3QgYmUgbnVsbCwgdW5kZWZpbmVkLCBib29sZWFuLCBvciAnICsgJ251bWJlci4gSXQgc2hvdWxkIGJlIGEgc3RyaW5nIChmb3IgRE9NIGVsZW1lbnRzKSBvciBhIFJlYWN0Q2xhc3MgJyArICcoZm9yIGNvbXBvc2l0ZSBjb21wb25lbnRzKS4lcycsIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpKSA6IHZvaWQgMDtcbiAgICAgIHZhciBlbGVtZW50ID0gUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICB9XG4gICAgICBpZiAodmFsaWRUeXBlKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCk7XG4gICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9LFxuICAgIGNyZWF0ZUZhY3Rvcnk6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgIHZhciB2YWxpZGF0ZWRGYWN0b3J5ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQuYmluZChudWxsLCB0eXBlKTtcbiAgICAgIHZhbGlkYXRlZEZhY3RvcnkudHlwZSA9IHR5cGU7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodmFsaWRhdGVkRmFjdG9yeSwgJ3R5cGUnLCB7XG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFjdG9yeS50eXBlIGlzIGRlcHJlY2F0ZWQuIEFjY2VzcyB0aGUgY2xhc3MgZGlyZWN0bHkgJyArICdiZWZvcmUgcGFzc2luZyBpdCB0byBjcmVhdGVGYWN0b3J5LicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3R5cGUnLCB7dmFsdWU6IHR5cGV9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWxpZGF0ZWRGYWN0b3J5O1xuICAgIH0sXG4gICAgY2xvbmVFbGVtZW50OiBmdW5jdGlvbihlbGVtZW50LCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgICAgIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCBuZXdFbGVtZW50LnR5cGUpO1xuICAgICAgfVxuICAgICAgdmFsaWRhdGVQcm9wVHlwZXMobmV3RWxlbWVudCk7XG4gICAgICByZXR1cm4gbmV3RWxlbWVudDtcbiAgICB9XG4gIH07XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHtcbiAgICAgIHByb3A6ICdwcm9wJyxcbiAgICAgIGNvbnRleHQ6ICdjb250ZXh0JyxcbiAgICAgIGNoaWxkQ29udGV4dDogJ2NoaWxkIGNvbnRleHQnXG4gICAgfTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBnZXRJdGVyYXRvckZuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKiBnbG9iYWwgU3ltYm9sICovXG5cbnZhciBJVEVSQVRPUl9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsgLy8gQmVmb3JlIFN5bWJvbCBzcGVjLlxuXG4vKipcbiAqIFJldHVybnMgdGhlIGl0ZXJhdG9yIG1ldGhvZCBmdW5jdGlvbiBjb250YWluZWQgb24gdGhlIGl0ZXJhYmxlIG9iamVjdC5cbiAqXG4gKiBCZSBzdXJlIHRvIGludm9rZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgaXRlcmFibGUgYXMgY29udGV4dDpcbiAqXG4gKiAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG15SXRlcmFibGUpO1xuICogICAgIGlmIChpdGVyYXRvckZuKSB7XG4gKiAgICAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvckZuLmNhbGwobXlJdGVyYWJsZSk7XG4gKiAgICAgICAuLi5cbiAqICAgICB9XG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBtYXliZUl0ZXJhYmxlXG4gKiBAcmV0dXJuIHs/ZnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICB2YXIgaXRlcmF0b3JGbiA9IG1heWJlSXRlcmFibGUgJiYgKElURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF0pO1xuICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gaXRlcmF0b3JGbjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEl0ZXJhdG9yRm47IiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbnZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMnKTtcbnZhciBlbXB0eUZ1bmN0aW9uID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlGdW5jdGlvbicpO1xudmFyIGdldEl0ZXJhdG9yRm4gPSByZXF1aXJlKCcuL2dldEl0ZXJhdG9yRm4nKTtcbnZhciBBTk9OWU1PVVMgPSAnPDxhbm9ueW1vdXM+Pic7XG52YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gIGFycmF5OiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYXJyYXknKSxcbiAgYm9vbDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Jvb2xlYW4nKSxcbiAgZnVuYzogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ2Z1bmN0aW9uJyksXG4gIG51bWJlcjogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ251bWJlcicpLFxuICBvYmplY3Q6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdvYmplY3QnKSxcbiAgc3RyaW5nOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignc3RyaW5nJyksXG4gIGFueTogY3JlYXRlQW55VHlwZUNoZWNrZXIoKSxcbiAgYXJyYXlPZjogY3JlYXRlQXJyYXlPZlR5cGVDaGVja2VyLFxuICBlbGVtZW50OiBjcmVhdGVFbGVtZW50VHlwZUNoZWNrZXIoKSxcbiAgaW5zdGFuY2VPZjogY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcixcbiAgbm9kZTogY3JlYXRlTm9kZUNoZWNrZXIoKSxcbiAgb2JqZWN0T2Y6IGNyZWF0ZU9iamVjdE9mVHlwZUNoZWNrZXIsXG4gIG9uZU9mOiBjcmVhdGVFbnVtVHlwZUNoZWNrZXIsXG4gIG9uZU9mVHlwZTogY3JlYXRlVW5pb25UeXBlQ2hlY2tlcixcbiAgc2hhcGU6IGNyZWF0ZVNoYXBlVHlwZUNoZWNrZXJcbn07XG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKSB7XG4gIGZ1bmN0aW9uIGNoZWNrVHlwZShpc1JlcXVpcmVkLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBjb21wb25lbnROYW1lID0gY29tcG9uZW50TmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgcHJvcEZ1bGxOYW1lID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIGlmIChpc1JlcXVpcmVkKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1JlcXVpcmVkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agd2FzIG5vdCBzcGVjaWZpZWQgaW4gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJykpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpO1xuICAgIH1cbiAgfVxuICB2YXIgY2hhaW5lZENoZWNrVHlwZSA9IGNoZWNrVHlwZS5iaW5kKG51bGwsIGZhbHNlKTtcbiAgY2hhaW5lZENoZWNrVHlwZS5pc1JlcXVpcmVkID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgdHJ1ZSk7XG4gIHJldHVybiBjaGFpbmVkQ2hlY2tUeXBlO1xufVxuZnVuY3Rpb24gY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoZXhwZWN0ZWRUeXBlKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09IGV4cGVjdGVkVHlwZSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHZhciBwcmVjaXNlVHlwZSA9IGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSk7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByZWNpc2VUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdgJyArIGV4cGVjdGVkVHlwZSArICdgLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFueVR5cGVDaGVja2VyKCkge1xuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyhudWxsKSk7XG59XG5mdW5jdGlvbiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIodHlwZUNoZWNrZXIpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgaWYgKHR5cGVvZiB0eXBlQ2hlY2tlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignUHJvcGVydHkgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiBjb21wb25lbnQgYCcgKyBjb21wb25lbnROYW1lICsgJ2AgaGFzIGludmFsaWQgUHJvcFR5cGUgbm90YXRpb24gaW5zaWRlIGFycmF5T2YuJyk7XG4gICAgfVxuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBhcnJheS4nKSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcFZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnWycgKyBpICsgJ10nKTtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgaWYgKCFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBzaW5nbGUgUmVhY3RFbGVtZW50LicpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlVHlwZUNoZWNrZXIoZXhwZWN0ZWRDbGFzcykge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBpZiAoIShwcm9wc1twcm9wTmFtZV0gaW5zdGFuY2VvZiBleHBlY3RlZENsYXNzKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHZhciBleHBlY3RlZENsYXNzTmFtZSA9IGV4cGVjdGVkQ2xhc3MubmFtZSB8fCBBTk9OWU1PVVM7XG4gICAgICB2YXIgYWN0dWFsQ2xhc3NOYW1lID0gZ2V0Q2xhc3NOYW1lKHByb3BzW3Byb3BOYW1lXSk7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIGFjdHVhbENsYXNzTmFtZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCAnKSArICgnaW5zdGFuY2Ugb2YgYCcgKyBleHBlY3RlZENsYXNzTmFtZSArICdgLicpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVudW1UeXBlQ2hlY2tlcihleHBlY3RlZFZhbHVlcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRWYWx1ZXMpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZiwgZXhwZWN0ZWQgYW4gaW5zdGFuY2Ugb2YgYXJyYXkuJyk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4cGVjdGVkVmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaXMocHJvcFZhbHVlLCBleHBlY3RlZFZhbHVlc1tpXSkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgdmFyIHZhbHVlc1N0cmluZyA9IEpTT04uc3RyaW5naWZ5KGV4cGVjdGVkVmFsdWVzKTtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdmFsdWUgYCcgKyBwcm9wVmFsdWUgKyAnYCAnICsgKCdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgb25lIG9mICcgKyB2YWx1ZXNTdHJpbmcgKyAnLicpKTtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgb2JqZWN0T2YuJyk7XG4gICAgfVxuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgJyArICgnYCcgKyBwcm9wVHlwZSArICdgIHN1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhbiBvYmplY3QuJykpO1xuICAgIH1cbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcFZhbHVlKSB7XG4gICAgICBpZiAocHJvcFZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgdmFyIGVycm9yID0gdHlwZUNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXkpO1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlVW5pb25UeXBlQ2hlY2tlcihhcnJheU9mVHlwZUNoZWNrZXJzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShhcnJheU9mVHlwZUNoZWNrZXJzKSkge1xuICAgIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgYXJndW1lbnQgc3VwcGxpZWQgdG8gb25lT2ZUeXBlLCBleHBlY3RlZCBhbiBpbnN0YW5jZSBvZiBhcnJheS4nKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5T2ZUeXBlQ2hlY2tlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGVja2VyID0gYXJyYXlPZlR5cGVDaGVja2Vyc1tpXTtcbiAgICAgIGlmIChjaGVja2VyKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agc3VwcGxpZWQgdG8gJyArICgnYCcgKyBjb21wb25lbnROYW1lICsgJ2AuJykpO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVOb2RlQ2hlY2tlcigpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgaWYgKCFpc05vZGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYSBSZWFjdE5vZGUuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlU2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1twcm9wTmFtZV07XG4gICAgdmFyIHByb3BUeXBlID0gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKTtcbiAgICBpZiAocHJvcFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBgb2JqZWN0YC4nKSk7XG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBzaGFwZVR5cGVzKSB7XG4gICAgICB2YXIgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUgKyAnLicgKyBrZXkpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cbmZ1bmN0aW9uIGlzTm9kZShwcm9wVmFsdWUpIHtcbiAgc3dpdGNoICh0eXBlb2YgcHJvcFZhbHVlKSB7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiAhcHJvcFZhbHVlO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBwcm9wVmFsdWUuZXZlcnkoaXNOb2RlKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wVmFsdWUgPT09IG51bGwgfHwgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4ocHJvcFZhbHVlKTtcbiAgICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChwcm9wVmFsdWUpO1xuICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IHByb3BWYWx1ZS5lbnRyaWVzKSB7XG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgaWYgKCFpc05vZGUoc3RlcC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICAgIGlmICghaXNOb2RlKGVudHJ5WzFdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0UHJvcFR5cGUocHJvcFZhbHVlKSB7XG4gIHZhciBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICByZXR1cm4gJ2FycmF5JztcbiAgfVxuICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuICdvYmplY3QnO1xuICB9XG4gIHJldHVybiBwcm9wVHlwZTtcbn1cbmZ1bmN0aW9uIGdldFByZWNpc2VUeXBlKHByb3BWYWx1ZSkge1xuICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICBpZiAocHJvcFR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgfSBlbHNlIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICAgIHJldHVybiAncmVnZXhwJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuZnVuY3Rpb24gZ2V0Q2xhc3NOYW1lKHByb3BWYWx1ZSkge1xuICBpZiAoIXByb3BWYWx1ZS5jb25zdHJ1Y3RvciB8fCAhcHJvcFZhbHVlLmNvbnN0cnVjdG9yLm5hbWUpIHtcbiAgICByZXR1cm4gQU5PTllNT1VTO1xuICB9XG4gIHJldHVybiBwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXM7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RWZXJzaW9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICcxNS4wLjInOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdEN1cnJlbnRPd25lclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBLZWVwcyB0cmFjayBvZiB0aGUgY3VycmVudCBvd25lci5cbiAqXG4gKiBUaGUgY3VycmVudCBvd25lciBpcyB0aGUgY29tcG9uZW50IHdobyBzaG91bGQgb3duIGFueSBjb21wb25lbnRzIHRoYXQgYXJlXG4gKiBjdXJyZW50bHkgYmVpbmcgY29uc3RydWN0ZWQuXG4gKi9cblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0ge1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogQHR5cGUge1JlYWN0Q29tcG9uZW50fVxuICAgKi9cbiAgY3VycmVudDogbnVsbFxuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q3VycmVudE93bmVyOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSBmYWxzZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHtnZXQ6IGZ1bmN0aW9uKCkge319KTtcbiAgICAgIGNhbkRlZmluZVByb3BlcnR5ID0gdHJ1ZTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gY2FuRGVmaW5lUHJvcGVydHk7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuICB2YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG4gIHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbFsnZm9yJ10gJiYgU3ltYm9sWydmb3InXSgncmVhY3QuZWxlbWVudCcpIHx8IDB4ZWFjNztcbiAgdmFyIFJFU0VSVkVEX1BST1BTID0ge1xuICAgIGtleTogdHJ1ZSxcbiAgICByZWY6IHRydWUsXG4gICAgX19zZWxmOiB0cnVlLFxuICAgIF9fc291cmNlOiB0cnVlXG4gIH07XG4gIHZhciBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bixcbiAgICAgIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duO1xuICB2YXIgUmVhY3RFbGVtZW50ID0gZnVuY3Rpb24odHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB7XG4gICAgICAkJHR5cGVvZjogUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGtleToga2V5LFxuICAgICAgcmVmOiByZWYsXG4gICAgICBwcm9wczogcHJvcHMsXG4gICAgICBfb3duZXI6IG93bmVyXG4gICAgfTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgZWxlbWVudC5fc3RvcmUgPSB7fTtcbiAgICAgIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NlbGYnLCB7XG4gICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6IHNlbGZcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICB2YWx1ZTogc291cmNlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkID0gZmFsc2U7XG4gICAgICAgIGVsZW1lbnQuX3NlbGYgPSBzZWxmO1xuICAgICAgICBlbGVtZW50Ll9zb3VyY2UgPSBzb3VyY2U7XG4gICAgICB9XG4gICAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpO1xuICAgICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfTtcbiAgUmVhY3RFbGVtZW50LmNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbih0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gICAgdmFyIHByb3BOYW1lO1xuICAgIHZhciBwcm9wcyA9IHt9O1xuICAgIHZhciBrZXkgPSBudWxsO1xuICAgIHZhciByZWYgPSBudWxsO1xuICAgIHZhciBzZWxmID0gbnVsbDtcbiAgICB2YXIgc291cmNlID0gbnVsbDtcbiAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHJlZiA9ICFjb25maWcuaGFzT3duUHJvcGVydHkoJ3JlZicpIHx8IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAncmVmJykuZ2V0ID8gbnVsbCA6IGNvbmZpZy5yZWY7XG4gICAgICAgIGtleSA9ICFjb25maWcuaGFzT3duUHJvcGVydHkoJ2tleScpIHx8IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAna2V5JykuZ2V0ID8gbnVsbCA6ICcnICsgY29uZmlnLmtleTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZiA9IGNvbmZpZy5yZWYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcucmVmO1xuICAgICAgICBrZXkgPSBjb25maWcua2V5ID09PSB1bmRlZmluZWQgPyBudWxsIDogJycgKyBjb25maWcua2V5O1xuICAgICAgfVxuICAgICAgc2VsZiA9IGNvbmZpZy5fX3NlbGYgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zZWxmO1xuICAgICAgc291cmNlID0gY29uZmlnLl9fc291cmNlID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc291cmNlO1xuICAgICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNoaWxkcmVuTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gICAgaWYgKGNoaWxkcmVuTGVuZ3RoID09PSAxKSB7XG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgICB2YXIgY2hpbGRBcnJheSA9IEFycmF5KGNoaWxkcmVuTGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICAgIH1cbiAgICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgICB9XG4gICAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICAgIHZhciBkZWZhdWx0UHJvcHMgPSB0eXBlLmRlZmF1bHRQcm9wcztcbiAgICAgIGZvciAocHJvcE5hbWUgaW4gZGVmYXVsdFByb3BzKSB7XG4gICAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJvcHMuJCR0eXBlb2YgPT09ICd1bmRlZmluZWQnIHx8IHByb3BzLiQkdHlwZW9mICE9PSBSRUFDVF9FTEVNRU5UX1RZUEUpIHtcbiAgICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eSgna2V5JykpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdrZXknLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAoIXNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duKSB7XG4gICAgICAgICAgICAgICAgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXM6IGBrZXlgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgJyArICdpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lICcgKyAndmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCAnICsgJ3Byb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpJywgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgJ2Rpc3BsYXlOYW1lJyBpbiB0eXBlID8gdHlwZS5kaXNwbGF5TmFtZSA6ICdFbGVtZW50JykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXByb3BzLmhhc093blByb3BlcnR5KCdyZWYnKSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ3JlZicsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICghc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24pIHtcbiAgICAgICAgICAgICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHRydWU7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICclczogYHJlZmAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vZmIubWUvcmVhY3Qtc3BlY2lhbC1wcm9wcyknLCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiAnZGlzcGxheU5hbWUnIGluIHR5cGUgPyB0eXBlLmRpc3BsYXlOYW1lIDogJ0VsZW1lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBSZWFjdEVsZW1lbnQodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCwgcHJvcHMpO1xuICB9O1xuICBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeSA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICB2YXIgZmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50LmJpbmQobnVsbCwgdHlwZSk7XG4gICAgZmFjdG9yeS50eXBlID0gdHlwZTtcbiAgICByZXR1cm4gZmFjdG9yeTtcbiAgfTtcbiAgUmVhY3RFbGVtZW50LmNsb25lQW5kUmVwbGFjZUtleSA9IGZ1bmN0aW9uKG9sZEVsZW1lbnQsIG5ld0tleSkge1xuICAgIHZhciBuZXdFbGVtZW50ID0gUmVhY3RFbGVtZW50KG9sZEVsZW1lbnQudHlwZSwgbmV3S2V5LCBvbGRFbGVtZW50LnJlZiwgb2xkRWxlbWVudC5fc2VsZiwgb2xkRWxlbWVudC5fc291cmNlLCBvbGRFbGVtZW50Ll9vd25lciwgb2xkRWxlbWVudC5wcm9wcyk7XG4gICAgcmV0dXJuIG5ld0VsZW1lbnQ7XG4gIH07XG4gIFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtZW50LCBjb25maWcsIGNoaWxkcmVuKSB7XG4gICAgdmFyIHByb3BOYW1lO1xuICAgIHZhciBwcm9wcyA9IF9hc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpO1xuICAgIHZhciBrZXkgPSBlbGVtZW50LmtleTtcbiAgICB2YXIgcmVmID0gZWxlbWVudC5yZWY7XG4gICAgdmFyIHNlbGYgPSBlbGVtZW50Ll9zZWxmO1xuICAgIHZhciBzb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG4gICAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICBpZiAoY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgICAgIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICAgIH1cbiAgICAgIGlmIChjb25maWcua2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgICAgfVxuICAgICAgdmFyIGRlZmF1bHRQcm9wcztcbiAgICAgIGlmIChlbGVtZW50LnR5cGUgJiYgZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcykge1xuICAgICAgICBkZWZhdWx0UHJvcHMgPSBlbGVtZW50LnR5cGUuZGVmYXVsdFByb3BzO1xuICAgICAgfVxuICAgICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgJiYgIVJFU0VSVkVEX1BST1BTLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICAgIGlmIChjb25maWdbcHJvcE5hbWVdID09PSB1bmRlZmluZWQgJiYgZGVmYXVsdFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgICB9XG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gICAgfVxuICAgIHJldHVybiBSZWFjdEVsZW1lbnQoZWxlbWVudC50eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpO1xuICB9O1xuICBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RWxlbWVudDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gICAgIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnb25seUNoaWxkIG11c3QgYmUgcGFzc2VkIGEgY2hpbGRyZW4gd2l0aCBleGFjdGx5IG9uZSBjaGlsZC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gb25seUNoaWxkO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbiAgdmFyIFJlYWN0Q2hpbGRyZW4gPSByZXF1aXJlKCcuL1JlYWN0Q2hpbGRyZW4nKTtcbiAgdmFyIFJlYWN0Q29tcG9uZW50ID0gcmVxdWlyZSgnLi9SZWFjdENvbXBvbmVudCcpO1xuICB2YXIgUmVhY3RDbGFzcyA9IHJlcXVpcmUoJy4vUmVhY3RDbGFzcycpO1xuICB2YXIgUmVhY3RET01GYWN0b3JpZXMgPSByZXF1aXJlKCcuL1JlYWN0RE9NRmFjdG9yaWVzJyk7XG4gIHZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuICB2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3InKTtcbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlcycpO1xuICB2YXIgUmVhY3RWZXJzaW9uID0gcmVxdWlyZSgnLi9SZWFjdFZlcnNpb24nKTtcbiAgdmFyIG9ubHlDaGlsZCA9IHJlcXVpcmUoJy4vb25seUNoaWxkJyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50O1xuICB2YXIgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5O1xuICB2YXIgY2xvbmVFbGVtZW50ID0gUmVhY3RFbGVtZW50LmNsb25lRWxlbWVudDtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjcmVhdGVFbGVtZW50ID0gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUVsZW1lbnQ7XG4gICAgY3JlYXRlRmFjdG9yeSA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVGYWN0b3J5O1xuICAgIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jbG9uZUVsZW1lbnQ7XG4gIH1cbiAgdmFyIF9fc3ByZWFkID0gX2Fzc2lnbjtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB2YXIgd2FybmVkID0gZmFsc2U7XG4gICAgX19zcHJlYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHdhcm5lZCwgJ1JlYWN0Ll9fc3ByZWFkIGlzIGRlcHJlY2F0ZWQgYW5kIHNob3VsZCBub3QgYmUgdXNlZC4gVXNlICcgKyAnT2JqZWN0LmFzc2lnbiBkaXJlY3RseSBvciBhbm90aGVyIGhlbHBlciBmdW5jdGlvbiB3aXRoIHNpbWlsYXIgJyArICdzZW1hbnRpY3MuIFlvdSBtYXkgYmUgc2VlaW5nIHRoaXMgd2FybmluZyBkdWUgdG8geW91ciBjb21waWxlci4gJyArICdTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcHJlYWQtZGVwcmVjYXRpb24gZm9yIG1vcmUgZGV0YWlscy4nKSA6IHZvaWQgMDtcbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICByZXR1cm4gX2Fzc2lnbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbiAgdmFyIFJlYWN0ID0ge1xuICAgIENoaWxkcmVuOiB7XG4gICAgICBtYXA6IFJlYWN0Q2hpbGRyZW4ubWFwLFxuICAgICAgZm9yRWFjaDogUmVhY3RDaGlsZHJlbi5mb3JFYWNoLFxuICAgICAgY291bnQ6IFJlYWN0Q2hpbGRyZW4uY291bnQsXG4gICAgICB0b0FycmF5OiBSZWFjdENoaWxkcmVuLnRvQXJyYXksXG4gICAgICBvbmx5OiBvbmx5Q2hpbGRcbiAgICB9LFxuICAgIENvbXBvbmVudDogUmVhY3RDb21wb25lbnQsXG4gICAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCxcbiAgICBjbG9uZUVsZW1lbnQ6IGNsb25lRWxlbWVudCxcbiAgICBpc1ZhbGlkRWxlbWVudDogUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50LFxuICAgIFByb3BUeXBlczogUmVhY3RQcm9wVHlwZXMsXG4gICAgY3JlYXRlQ2xhc3M6IFJlYWN0Q2xhc3MuY3JlYXRlQ2xhc3MsXG4gICAgY3JlYXRlRmFjdG9yeTogY3JlYXRlRmFjdG9yeSxcbiAgICBjcmVhdGVNaXhpbjogZnVuY3Rpb24obWl4aW4pIHtcbiAgICAgIHJldHVybiBtaXhpbjtcbiAgICB9LFxuICAgIERPTTogUmVhY3RET01GYWN0b3JpZXMsXG4gICAgdmVyc2lvbjogUmVhY3RWZXJzaW9uLFxuICAgIF9fc3ByZWFkOiBfX3NwcmVhZFxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0O1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9SZWFjdCcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibnBtOnJlYWN0QDE1LjAuMi9yZWFjdC5qc1wiKTsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX3JlYWN0LlByb3BUeXBlcy5zaGFwZSh7XG4gIHN1YnNjcmliZTogX3JlYWN0LlByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIGRpc3BhdGNoOiBfcmVhY3QuUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZ2V0U3RhdGU6IF9yZWFjdC5Qcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59KTsiLCIvKiAqLyBcblwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBzaGFsbG93RXF1YWw7XG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAob2JqQSA9PT0gb2JqQikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIHZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd24uY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgb2JqQVtrZXlzQVtpXV0gIT09IG9iakJba2V5c0FbaV1dKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHdyYXBBY3Rpb25DcmVhdG9ycztcblxudmFyIF9yZWR1eCA9IHJlcXVpcmUoJ3JlZHV4Jyk7XG5cbmZ1bmN0aW9uIHdyYXBBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuICgwLCBfcmVkdXguYmluZEFjdGlvbkNyZWF0b3JzKShhY3Rpb25DcmVhdG9ycywgZGlzcGF0Y2gpO1xuICB9O1xufSIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB3YXJuaW5nO1xuLyoqXG4gKiBQcmludHMgYSB3YXJuaW5nIGluIHRoZSBjb25zb2xlIGlmIGl0IGV4aXN0cy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSBUaGUgd2FybmluZyBtZXNzYWdlLlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHdhcm5pbmcobWVzc2FnZSkge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICB9XG4gIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1lbXB0eSAqL1xuICB9IGNhdGNoIChlKSB7fVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWVtcHR5ICovXG59IiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICAgIGRpc3BsYXlOYW1lOiB0cnVlLFxuICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBtaXhpbnM6IHRydWUsXG4gICAgcHJvcFR5cGVzOiB0cnVlLFxuICAgIHR5cGU6IHRydWVcbn07XG5cbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICAgIG5hbWU6IHRydWUsXG4gICAgbGVuZ3RoOiB0cnVlLFxuICAgIHByb3RvdHlwZTogdHJ1ZSxcbiAgICBjYWxsZXI6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50KSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgIGZvciAodmFyIGk9MDsgaTxrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXlzW2ldXSAmJiAhS05PV05fU1RBVElDU1trZXlzW2ldXSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0YXJnZXRDb21wb25lbnRba2V5c1tpXV0gPSBzb3VyY2VDb21wb25lbnRba2V5c1tpXV07XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5wbTpob2lzdC1ub24tcmVhY3Qtc3RhdGljc0AxLjAuNS9pbmRleC5qc1wiKTsiLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGludmFyaWFudCA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFyaWFudCByZXF1aXJlcyBhbiBlcnJvciBtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgZXJyb3I7XG4gICAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pKTtcbiAgICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICAgIH1cbiAgICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibnBtOmludmFyaWFudEAyLjIuMS9icm93c2VyLmpzXCIpOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBjb25uZWN0O1xuICB2YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbiAgdmFyIF9zdG9yZVNoYXBlID0gcmVxdWlyZSgnLi4vdXRpbHMvc3RvcmVTaGFwZScpO1xuICB2YXIgX3N0b3JlU2hhcGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmVTaGFwZSk7XG4gIHZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgnLi4vdXRpbHMvc2hhbGxvd0VxdWFsJyk7XG4gIHZhciBfc2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoYWxsb3dFcXVhbCk7XG4gIHZhciBfd3JhcEFjdGlvbkNyZWF0b3JzID0gcmVxdWlyZSgnLi4vdXRpbHMvd3JhcEFjdGlvbkNyZWF0b3JzJyk7XG4gIHZhciBfd3JhcEFjdGlvbkNyZWF0b3JzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dyYXBBY3Rpb25DcmVhdG9ycyk7XG4gIHZhciBfd2FybmluZyA9IHJlcXVpcmUoJy4uL3V0aWxzL3dhcm5pbmcnKTtcbiAgdmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuICB2YXIgX2lzUGxhaW5PYmplY3QgPSByZXF1aXJlKCdsb2Rhc2gvaXNQbGFpbk9iamVjdCcpO1xuICB2YXIgX2lzUGxhaW5PYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQbGFpbk9iamVjdCk7XG4gIHZhciBfaG9pc3ROb25SZWFjdFN0YXRpY3MgPSByZXF1aXJlKCdob2lzdC1ub24tcmVhY3Qtc3RhdGljcycpO1xuICB2YXIgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hvaXN0Tm9uUmVhY3RTdGF0aWNzKTtcbiAgdmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcbiAgdmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1wiZGVmYXVsdFwiOiBvYmp9O1xuICB9XG4gIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkge1xuICAgIGlmICghc2VsZikge1xuICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjtcbiAgfVxuICBmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgICBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgICB9XG4gICAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7Y29uc3RydWN0b3I6IHtcbiAgICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfX0pO1xuICAgIGlmIChzdXBlckNsYXNzKVxuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cbiAgdmFyIGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBkZWZhdWx0TWFwU3RhdGVUb1Byb3BzKHN0YXRlKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9O1xuICB2YXIgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcyA9IGZ1bmN0aW9uIGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gpIHtcbiAgICByZXR1cm4ge2Rpc3BhdGNoOiBkaXNwYXRjaH07XG4gIH07XG4gIHZhciBkZWZhdWx0TWVyZ2VQcm9wcyA9IGZ1bmN0aW9uIGRlZmF1bHRNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIHBhcmVudFByb3BzKSB7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBwYXJlbnRQcm9wcywgc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcyk7XG4gIH07XG4gIGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgICByZXR1cm4gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gIH1cbiAgdmFyIGVycm9yT2JqZWN0ID0ge3ZhbHVlOiBudWxsfTtcbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIGN0eCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4uYXBwbHkoY3R4KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnJvck9iamVjdC52YWx1ZSA9IGU7XG4gICAgICByZXR1cm4gZXJyb3JPYmplY3Q7XG4gICAgfVxuICB9XG4gIHZhciBuZXh0VmVyc2lvbiA9IDA7XG4gIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMyB8fCBhcmd1bWVudHNbM10gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzNdO1xuICAgIHZhciBzaG91bGRTdWJzY3JpYmUgPSBCb29sZWFuKG1hcFN0YXRlVG9Qcm9wcyk7XG4gICAgdmFyIG1hcFN0YXRlID0gbWFwU3RhdGVUb1Byb3BzIHx8IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHM7XG4gICAgdmFyIG1hcERpc3BhdGNoID0gdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBtYXBEaXNwYXRjaCA9IG1hcERpc3BhdGNoVG9Qcm9wcztcbiAgICB9IGVsc2UgaWYgKCFtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgICAgIG1hcERpc3BhdGNoID0gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wcztcbiAgICB9IGVsc2Uge1xuICAgICAgbWFwRGlzcGF0Y2ggPSAoMCwgX3dyYXBBY3Rpb25DcmVhdG9yczJbXCJkZWZhdWx0XCJdKShtYXBEaXNwYXRjaFRvUHJvcHMpO1xuICAgIH1cbiAgICB2YXIgZmluYWxNZXJnZVByb3BzID0gbWVyZ2VQcm9wcyB8fCBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgICB2YXIgX29wdGlvbnMkcHVyZSA9IG9wdGlvbnMucHVyZTtcbiAgICB2YXIgcHVyZSA9IF9vcHRpb25zJHB1cmUgPT09IHVuZGVmaW5lZCA/IHRydWUgOiBfb3B0aW9ucyRwdXJlO1xuICAgIHZhciBfb3B0aW9ucyR3aXRoUmVmID0gb3B0aW9ucy53aXRoUmVmO1xuICAgIHZhciB3aXRoUmVmID0gX29wdGlvbnMkd2l0aFJlZiA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyR3aXRoUmVmO1xuICAgIHZhciBjaGVja01lcmdlZEVxdWFscyA9IHB1cmUgJiYgZmluYWxNZXJnZVByb3BzICE9PSBkZWZhdWx0TWVyZ2VQcm9wcztcbiAgICB2YXIgdmVyc2lvbiA9IG5leHRWZXJzaW9uKys7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgICB2YXIgY29ubmVjdERpc3BsYXlOYW1lID0gJ0Nvbm5lY3QoJyArIGdldERpc3BsYXlOYW1lKFdyYXBwZWRDb21wb25lbnQpICsgJyknO1xuICAgICAgZnVuY3Rpb24gY2hlY2tTdGF0ZVNoYXBlKHByb3BzLCBtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmICghKDAsIF9pc1BsYWluT2JqZWN0MltcImRlZmF1bHRcIl0pKHByb3BzKSkge1xuICAgICAgICAgICgwLCBfd2FybmluZzJbXCJkZWZhdWx0XCJdKShtZXRob2ROYW1lICsgJygpIGluICcgKyBjb25uZWN0RGlzcGxheU5hbWUgKyAnIG11c3QgcmV0dXJuIGEgcGxhaW4gb2JqZWN0LiAnICsgKCdJbnN0ZWFkIHJlY2VpdmVkICcgKyBwcm9wcyArICcuJykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBjb21wdXRlTWVyZ2VkUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgcGFyZW50UHJvcHMpIHtcbiAgICAgICAgdmFyIG1lcmdlZFByb3BzID0gZmluYWxNZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIHBhcmVudFByb3BzKTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjaGVja1N0YXRlU2hhcGUobWVyZ2VkUHJvcHMsICdtZXJnZVByb3BzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lcmdlZFByb3BzO1xuICAgICAgfVxuICAgICAgdmFyIENvbm5lY3QgPSBmdW5jdGlvbihfQ29tcG9uZW50KSB7XG4gICAgICAgIF9pbmhlcml0cyhDb25uZWN0LCBfQ29tcG9uZW50KTtcbiAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuc2hvdWxkQ29tcG9uZW50VXBkYXRlID0gZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCkge1xuICAgICAgICAgIHJldHVybiAhcHVyZSB8fCB0aGlzLmhhdmVPd25Qcm9wc0NoYW5nZWQgfHwgdGhpcy5oYXNTdG9yZVN0YXRlQ2hhbmdlZDtcbiAgICAgICAgfTtcbiAgICAgICAgZnVuY3Rpb24gQ29ubmVjdChwcm9wcywgY29udGV4dCkge1xuICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb25uZWN0KTtcbiAgICAgICAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcbiAgICAgICAgICBfdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICBfdGhpcy5zdG9yZSA9IHByb3BzLnN0b3JlIHx8IGNvbnRleHQuc3RvcmU7XG4gICAgICAgICAgKDAsIF9pbnZhcmlhbnQyW1wiZGVmYXVsdFwiXSkoX3RoaXMuc3RvcmUsICdDb3VsZCBub3QgZmluZCBcInN0b3JlXCIgaW4gZWl0aGVyIHRoZSBjb250ZXh0IG9yICcgKyAoJ3Byb3BzIG9mIFwiJyArIGNvbm5lY3REaXNwbGF5TmFtZSArICdcIi4gJykgKyAnRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgJyArICgnb3IgZXhwbGljaXRseSBwYXNzIFwic3RvcmVcIiBhcyBhIHByb3AgdG8gXCInICsgY29ubmVjdERpc3BsYXlOYW1lICsgJ1wiLicpKTtcbiAgICAgICAgICB2YXIgc3RvcmVTdGF0ZSA9IF90aGlzLnN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgX3RoaXMuc3RhdGUgPSB7c3RvcmVTdGF0ZTogc3RvcmVTdGF0ZX07XG4gICAgICAgICAgX3RoaXMuY2xlYXJDYWNoZSgpO1xuICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgfVxuICAgICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wdXRlU3RhdGVQcm9wcyA9IGZ1bmN0aW9uIGNvbXB1dGVTdGF0ZVByb3BzKHN0b3JlLCBwcm9wcykge1xuICAgICAgICAgIGlmICghdGhpcy5maW5hbE1hcFN0YXRlVG9Qcm9wcykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlndXJlRmluYWxNYXBTdGF0ZShzdG9yZSwgcHJvcHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgc3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIHZhciBzdGF0ZVByb3BzID0gdGhpcy5kb1N0YXRlUHJvcHNEZXBlbmRPbk93blByb3BzID8gdGhpcy5maW5hbE1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgcHJvcHMpIDogdGhpcy5maW5hbE1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSk7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNoZWNrU3RhdGVTaGFwZShzdGF0ZVByb3BzLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBzdGF0ZVByb3BzO1xuICAgICAgICB9O1xuICAgICAgICBDb25uZWN0LnByb3RvdHlwZS5jb25maWd1cmVGaW5hbE1hcFN0YXRlID0gZnVuY3Rpb24gY29uZmlndXJlRmluYWxNYXBTdGF0ZShzdG9yZSwgcHJvcHMpIHtcbiAgICAgICAgICB2YXIgbWFwcGVkU3RhdGUgPSBtYXBTdGF0ZShzdG9yZS5nZXRTdGF0ZSgpLCBwcm9wcyk7XG4gICAgICAgICAgdmFyIGlzRmFjdG9yeSA9IHR5cGVvZiBtYXBwZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgICB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzID0gaXNGYWN0b3J5ID8gbWFwcGVkU3RhdGUgOiBtYXBTdGF0ZTtcbiAgICAgICAgICB0aGlzLmRvU3RhdGVQcm9wc0RlcGVuZE9uT3duUHJvcHMgPSB0aGlzLmZpbmFsTWFwU3RhdGVUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbiAgICAgICAgICBpZiAoaXNGYWN0b3J5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlU3RhdGVQcm9wcyhzdG9yZSwgcHJvcHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY2hlY2tTdGF0ZVNoYXBlKG1hcHBlZFN0YXRlLCAnbWFwU3RhdGVUb1Byb3BzJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtYXBwZWRTdGF0ZTtcbiAgICAgICAgfTtcbiAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcHV0ZURpc3BhdGNoUHJvcHMgPSBmdW5jdGlvbiBjb21wdXRlRGlzcGF0Y2hQcm9wcyhzdG9yZSwgcHJvcHMpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbmZpZ3VyZUZpbmFsTWFwRGlzcGF0Y2goc3RvcmUsIHByb3BzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGRpc3BhdGNoID0gc3RvcmUuZGlzcGF0Y2g7XG4gICAgICAgICAgdmFyIGRpc3BhdGNoUHJvcHMgPSB0aGlzLmRvRGlzcGF0Y2hQcm9wc0RlcGVuZE9uT3duUHJvcHMgPyB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBwcm9wcykgOiB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKTtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY2hlY2tTdGF0ZVNoYXBlKGRpc3BhdGNoUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGRpc3BhdGNoUHJvcHM7XG4gICAgICAgIH07XG4gICAgICAgIENvbm5lY3QucHJvdG90eXBlLmNvbmZpZ3VyZUZpbmFsTWFwRGlzcGF0Y2ggPSBmdW5jdGlvbiBjb25maWd1cmVGaW5hbE1hcERpc3BhdGNoKHN0b3JlLCBwcm9wcykge1xuICAgICAgICAgIHZhciBtYXBwZWREaXNwYXRjaCA9IG1hcERpc3BhdGNoKHN0b3JlLmRpc3BhdGNoLCBwcm9wcyk7XG4gICAgICAgICAgdmFyIGlzRmFjdG9yeSA9IHR5cGVvZiBtYXBwZWREaXNwYXRjaCA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgICAgICB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzID0gaXNGYWN0b3J5ID8gbWFwcGVkRGlzcGF0Y2ggOiBtYXBEaXNwYXRjaDtcbiAgICAgICAgICB0aGlzLmRvRGlzcGF0Y2hQcm9wc0RlcGVuZE9uT3duUHJvcHMgPSB0aGlzLmZpbmFsTWFwRGlzcGF0Y2hUb1Byb3BzLmxlbmd0aCAhPT0gMTtcbiAgICAgICAgICBpZiAoaXNGYWN0b3J5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlRGlzcGF0Y2hQcm9wcyhzdG9yZSwgcHJvcHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgY2hlY2tTdGF0ZVNoYXBlKG1hcHBlZERpc3BhdGNoLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBtYXBwZWREaXNwYXRjaDtcbiAgICAgICAgfTtcbiAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUudXBkYXRlU3RhdGVQcm9wc0lmTmVlZGVkID0gZnVuY3Rpb24gdXBkYXRlU3RhdGVQcm9wc0lmTmVlZGVkKCkge1xuICAgICAgICAgIHZhciBuZXh0U3RhdGVQcm9wcyA9IHRoaXMuY29tcHV0ZVN0YXRlUHJvcHModGhpcy5zdG9yZSwgdGhpcy5wcm9wcyk7XG4gICAgICAgICAgaWYgKHRoaXMuc3RhdGVQcm9wcyAmJiAoMCwgX3NoYWxsb3dFcXVhbDJbXCJkZWZhdWx0XCJdKShuZXh0U3RhdGVQcm9wcywgdGhpcy5zdGF0ZVByb3BzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnN0YXRlUHJvcHMgPSBuZXh0U3RhdGVQcm9wcztcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUudXBkYXRlRGlzcGF0Y2hQcm9wc0lmTmVlZGVkID0gZnVuY3Rpb24gdXBkYXRlRGlzcGF0Y2hQcm9wc0lmTmVlZGVkKCkge1xuICAgICAgICAgIHZhciBuZXh0RGlzcGF0Y2hQcm9wcyA9IHRoaXMuY29tcHV0ZURpc3BhdGNoUHJvcHModGhpcy5zdG9yZSwgdGhpcy5wcm9wcyk7XG4gICAgICAgICAgaWYgKHRoaXMuZGlzcGF0Y2hQcm9wcyAmJiAoMCwgX3NoYWxsb3dFcXVhbDJbXCJkZWZhdWx0XCJdKShuZXh0RGlzcGF0Y2hQcm9wcywgdGhpcy5kaXNwYXRjaFByb3BzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmRpc3BhdGNoUHJvcHMgPSBuZXh0RGlzcGF0Y2hQcm9wcztcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUudXBkYXRlTWVyZ2VkUHJvcHNJZk5lZWRlZCA9IGZ1bmN0aW9uIHVwZGF0ZU1lcmdlZFByb3BzSWZOZWVkZWQoKSB7XG4gICAgICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IGNvbXB1dGVNZXJnZWRQcm9wcyh0aGlzLnN0YXRlUHJvcHMsIHRoaXMuZGlzcGF0Y2hQcm9wcywgdGhpcy5wcm9wcyk7XG4gICAgICAgICAgaWYgKHRoaXMubWVyZ2VkUHJvcHMgJiYgY2hlY2tNZXJnZWRFcXVhbHMgJiYgKDAsIF9zaGFsbG93RXF1YWwyW1wiZGVmYXVsdFwiXSkobmV4dE1lcmdlZFByb3BzLCB0aGlzLm1lcmdlZFByb3BzKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBDb25uZWN0LnByb3RvdHlwZS5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nO1xuICAgICAgICB9O1xuICAgICAgICBDb25uZWN0LnByb3RvdHlwZS50cnlTdWJzY3JpYmUgPSBmdW5jdGlvbiB0cnlTdWJzY3JpYmUoKSB7XG4gICAgICAgICAgaWYgKHNob3VsZFN1YnNjcmliZSAmJiAhdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMuc3RvcmUuc3Vic2NyaWJlKHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIENvbm5lY3QucHJvdG90eXBlLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgICAgICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgICAgICB9O1xuICAgICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgICAgICBpZiAoIXB1cmUgfHwgISgwLCBfc2hhbGxvd0VxdWFsMltcImRlZmF1bHRcIl0pKG5leHRQcm9wcywgdGhpcy5wcm9wcykpIHtcbiAgICAgICAgICAgIHRoaXMuaGF2ZU93blByb3BzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgIHRoaXMudHJ5VW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ29ubmVjdC5wcm90b3R5cGUuY2xlYXJDYWNoZSA9IGZ1bmN0aW9uIGNsZWFyQ2FjaGUoKSB7XG4gICAgICAgICAgdGhpcy5kaXNwYXRjaFByb3BzID0gbnVsbDtcbiAgICAgICAgICB0aGlzLnN0YXRlUHJvcHMgPSBudWxsO1xuICAgICAgICAgIHRoaXMubWVyZ2VkUHJvcHMgPSBudWxsO1xuICAgICAgICAgIHRoaXMuaGF2ZU93blByb3BzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5oYXNTdG9yZVN0YXRlQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5oYXZlU3RhdGVQcm9wc0JlZW5QcmVjYWxjdWxhdGVkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5zdGF0ZVByb3BzUHJlY2FsY3VsYXRpb25FcnJvciA9IG51bGw7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlZEVsZW1lbnQgPSBudWxsO1xuICAgICAgICAgIHRoaXMuZmluYWxNYXBEaXNwYXRjaFRvUHJvcHMgPSBudWxsO1xuICAgICAgICAgIHRoaXMuZmluYWxNYXBTdGF0ZVRvUHJvcHMgPSBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBDb25uZWN0LnByb3RvdHlwZS5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVDaGFuZ2UoKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBzdG9yZVN0YXRlID0gdGhpcy5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICAgIHZhciBwcmV2U3RvcmVTdGF0ZSA9IHRoaXMuc3RhdGUuc3RvcmVTdGF0ZTtcbiAgICAgICAgICBpZiAocHVyZSAmJiBwcmV2U3RvcmVTdGF0ZSA9PT0gc3RvcmVTdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHVyZSAmJiAhdGhpcy5kb1N0YXRlUHJvcHNEZXBlbmRPbk93blByb3BzKSB7XG4gICAgICAgICAgICB2YXIgaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkID0gdHJ5Q2F0Y2godGhpcy51cGRhdGVTdGF0ZVByb3BzSWZOZWVkZWQsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKCFoYXZlU3RhdGVQcm9wc0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhhdmVTdGF0ZVByb3BzQ2hhbmdlZCA9PT0gZXJyb3JPYmplY3QpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdGF0ZVByb3BzUHJlY2FsY3VsYXRpb25FcnJvciA9IGVycm9yT2JqZWN0LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5oYXZlU3RhdGVQcm9wc0JlZW5QcmVjYWxjdWxhdGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5oYXNTdG9yZVN0YXRlQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7c3RvcmVTdGF0ZTogc3RvcmVTdGF0ZX0pO1xuICAgICAgICB9O1xuICAgICAgICBDb25uZWN0LnByb3RvdHlwZS5nZXRXcmFwcGVkSW5zdGFuY2UgPSBmdW5jdGlvbiBnZXRXcmFwcGVkSW5zdGFuY2UoKSB7XG4gICAgICAgICAgKDAsIF9pbnZhcmlhbnQyW1wiZGVmYXVsdFwiXSkod2l0aFJlZiwgJ1RvIGFjY2VzcyB0aGUgd3JhcHBlZCBpbnN0YW5jZSwgeW91IG5lZWQgdG8gc3BlY2lmeSAnICsgJ3sgd2l0aFJlZjogdHJ1ZSB9IGFzIHRoZSBmb3VydGggYXJndW1lbnQgb2YgdGhlIGNvbm5lY3QoKSBjYWxsLicpO1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlZnMud3JhcHBlZEluc3RhbmNlO1xuICAgICAgICB9O1xuICAgICAgICBDb25uZWN0LnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgdmFyIGhhdmVPd25Qcm9wc0NoYW5nZWQgPSB0aGlzLmhhdmVPd25Qcm9wc0NoYW5nZWQ7XG4gICAgICAgICAgdmFyIGhhc1N0b3JlU3RhdGVDaGFuZ2VkID0gdGhpcy5oYXNTdG9yZVN0YXRlQ2hhbmdlZDtcbiAgICAgICAgICB2YXIgaGF2ZVN0YXRlUHJvcHNCZWVuUHJlY2FsY3VsYXRlZCA9IHRoaXMuaGF2ZVN0YXRlUHJvcHNCZWVuUHJlY2FsY3VsYXRlZDtcbiAgICAgICAgICB2YXIgc3RhdGVQcm9wc1ByZWNhbGN1bGF0aW9uRXJyb3IgPSB0aGlzLnN0YXRlUHJvcHNQcmVjYWxjdWxhdGlvbkVycm9yO1xuICAgICAgICAgIHZhciByZW5kZXJlZEVsZW1lbnQgPSB0aGlzLnJlbmRlcmVkRWxlbWVudDtcbiAgICAgICAgICB0aGlzLmhhdmVPd25Qcm9wc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmhhc1N0b3JlU3RhdGVDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5oYXZlU3RhdGVQcm9wc0JlZW5QcmVjYWxjdWxhdGVkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5zdGF0ZVByb3BzUHJlY2FsY3VsYXRpb25FcnJvciA9IG51bGw7XG4gICAgICAgICAgaWYgKHN0YXRlUHJvcHNQcmVjYWxjdWxhdGlvbkVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBzdGF0ZVByb3BzUHJlY2FsY3VsYXRpb25FcnJvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIHNob3VsZFVwZGF0ZVN0YXRlUHJvcHMgPSB0cnVlO1xuICAgICAgICAgIHZhciBzaG91bGRVcGRhdGVEaXNwYXRjaFByb3BzID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHVyZSAmJiByZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZVN0YXRlUHJvcHMgPSBoYXNTdG9yZVN0YXRlQ2hhbmdlZCB8fCBoYXZlT3duUHJvcHNDaGFuZ2VkICYmIHRoaXMuZG9TdGF0ZVByb3BzRGVwZW5kT25Pd25Qcm9wcztcbiAgICAgICAgICAgIHNob3VsZFVwZGF0ZURpc3BhdGNoUHJvcHMgPSBoYXZlT3duUHJvcHNDaGFuZ2VkICYmIHRoaXMuZG9EaXNwYXRjaFByb3BzRGVwZW5kT25Pd25Qcm9wcztcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGhhdmVTdGF0ZVByb3BzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgIHZhciBoYXZlRGlzcGF0Y2hQcm9wc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgICBpZiAoaGF2ZVN0YXRlUHJvcHNCZWVuUHJlY2FsY3VsYXRlZCkge1xuICAgICAgICAgICAgaGF2ZVN0YXRlUHJvcHNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNob3VsZFVwZGF0ZVN0YXRlUHJvcHMpIHtcbiAgICAgICAgICAgIGhhdmVTdGF0ZVByb3BzQ2hhbmdlZCA9IHRoaXMudXBkYXRlU3RhdGVQcm9wc0lmTmVlZGVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaG91bGRVcGRhdGVEaXNwYXRjaFByb3BzKSB7XG4gICAgICAgICAgICBoYXZlRGlzcGF0Y2hQcm9wc0NoYW5nZWQgPSB0aGlzLnVwZGF0ZURpc3BhdGNoUHJvcHNJZk5lZWRlZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgaGF2ZU1lcmdlZFByb3BzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKGhhdmVTdGF0ZVByb3BzQ2hhbmdlZCB8fCBoYXZlRGlzcGF0Y2hQcm9wc0NoYW5nZWQgfHwgaGF2ZU93blByb3BzQ2hhbmdlZCkge1xuICAgICAgICAgICAgaGF2ZU1lcmdlZFByb3BzQ2hhbmdlZCA9IHRoaXMudXBkYXRlTWVyZ2VkUHJvcHNJZk5lZWRlZCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYXZlTWVyZ2VkUHJvcHNDaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghaGF2ZU1lcmdlZFByb3BzQ2hhbmdlZCAmJiByZW5kZXJlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiByZW5kZXJlZEVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh3aXRoUmVmKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudCA9ICgwLCBfcmVhY3QuY3JlYXRlRWxlbWVudCkoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIHRoaXMubWVyZ2VkUHJvcHMsIHtyZWY6ICd3cmFwcGVkSW5zdGFuY2UnfSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkRWxlbWVudCA9ICgwLCBfcmVhY3QuY3JlYXRlRWxlbWVudCkoV3JhcHBlZENvbXBvbmVudCwgdGhpcy5tZXJnZWRQcm9wcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVkRWxlbWVudDtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIENvbm5lY3Q7XG4gICAgICB9KF9yZWFjdC5Db21wb25lbnQpO1xuICAgICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGNvbm5lY3REaXNwbGF5TmFtZTtcbiAgICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICBDb25uZWN0LmNvbnRleHRUeXBlcyA9IHtzdG9yZTogX3N0b3JlU2hhcGUyW1wiZGVmYXVsdFwiXX07XG4gICAgICBDb25uZWN0LnByb3BUeXBlcyA9IHtzdG9yZTogX3N0b3JlU2hhcGUyW1wiZGVmYXVsdFwiXX07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBDb25uZWN0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy52ZXJzaW9uID09PSB2ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICAgICAgdGhpcy50cnlTdWJzY3JpYmUoKTtcbiAgICAgICAgICB0aGlzLmNsZWFyQ2FjaGUoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoMCwgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzMltcImRlZmF1bHRcIl0pKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICAgIH07XG4gIH1cbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmNvbm5lY3QgPSBleHBvcnRzLlByb3ZpZGVyID0gdW5kZWZpbmVkO1xudmFyIF9Qcm92aWRlciA9IHJlcXVpcmUoJy4vY29tcG9uZW50cy9Qcm92aWRlcicpO1xudmFyIF9Qcm92aWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qcm92aWRlcik7XG52YXIgX2Nvbm5lY3QgPSByZXF1aXJlKCcuL2NvbXBvbmVudHMvY29ubmVjdCcpO1xudmFyIF9jb25uZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nvbm5lY3QpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcImRlZmF1bHRcIjogb2JqfTtcbn1cbmV4cG9ydHMuUHJvdmlkZXIgPSBfUHJvdmlkZXIyW1wiZGVmYXVsdFwiXTtcbmV4cG9ydHMuY29ubmVjdCA9IF9jb25uZWN0MltcImRlZmF1bHRcIl07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJucG06cmVhY3QtcmVkdXhANC40LjUvbGliL2luZGV4LmpzXCIpOyIsIi8qICovIFxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuLyQuZXhwb3J0JyksXG4gICAgY29yZSA9IHJlcXVpcmUoJy4vJC5jb3JlJyksXG4gICAgZmFpbHMgPSByZXF1aXJlKCcuLyQuZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oS0VZLCBleGVjKSB7XG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXSxcbiAgICAgIGV4cCA9IHt9O1xuICBleHBbS0VZXSA9IGV4ZWMoZm4pO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uKCkge1xuICAgIGZuKDEpO1xuICB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwiLyogKi8gXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi8kLnRvLWlvYmplY3QnKTtcbnJlcXVpcmUoJy4vJC5vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uKCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcbiAgfTtcbn0pO1xuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvJCcpO1xucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xuICByZXR1cm4gJC5nZXREZXNjKGl0LCBrZXkpO1xufTtcbiIsIi8qICovIFxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCIvKiAqLyBcblwidXNlIHN0cmljdFwiO1xudmFyIF9PYmplY3QkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vY29yZS1qcy9vYmplY3QvZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJylbXCJkZWZhdWx0XCJdO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbiBnZXQoX3gsIF94MiwgX3gzKSB7XG4gIHZhciBfYWdhaW4gPSB0cnVlO1xuICBfZnVuY3Rpb246IHdoaWxlIChfYWdhaW4pIHtcbiAgICB2YXIgb2JqZWN0ID0gX3gsXG4gICAgICAgIHByb3BlcnR5ID0gX3gyLFxuICAgICAgICByZWNlaXZlciA9IF94MztcbiAgICBfYWdhaW4gPSBmYWxzZTtcbiAgICBpZiAob2JqZWN0ID09PSBudWxsKVxuICAgICAgb2JqZWN0ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuICAgIHZhciBkZXNjID0gX09iamVjdCRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7XG4gICAgaWYgKGRlc2MgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHBhcmVudCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICAgICAgaWYgKHBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3ggPSBwYXJlbnQ7XG4gICAgICAgIF94MiA9IHByb3BlcnR5O1xuICAgICAgICBfeDMgPSByZWNlaXZlcjtcbiAgICAgICAgX2FnYWluID0gdHJ1ZTtcbiAgICAgICAgZGVzYyA9IHBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgY29udGludWUgX2Z1bmN0aW9uO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXCJ2YWx1ZVwiIGluIGRlc2MpIHtcbiAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZ2V0dGVyID0gZGVzYy5nZXQ7XG4gICAgICBpZiAoZ2V0dGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBnZXR0ZXIuY2FsbChyZWNlaXZlcik7XG4gICAgfVxuICB9XG59O1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzLyQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlKFAsIEQpIHtcbiAgcmV0dXJuICQuY3JlYXRlKFAsIEQpO1xufTtcbiIsIi8qICovIFxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9jcmVhdGVcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCIvKiAqLyBcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi8kLmV4cG9ydCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7c2V0UHJvdG90eXBlT2Y6IHJlcXVpcmUoJy4vJC5zZXQtcHJvdG8nKS5zZXR9KTtcbiIsIi8qICovIFxucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy8kLmNvcmUnKS5PYmplY3Quc2V0UHJvdG90eXBlT2Y7XG4iLCIvKiAqLyBcbm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9vYmplY3Qvc2V0LXByb3RvdHlwZS1vZlwiKSwgX19lc01vZHVsZTogdHJ1ZSB9OyIsIi8qICovIFxuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX09iamVjdCRjcmVhdGUgPSByZXF1aXJlKCcuLi9jb3JlLWpzL29iamVjdC9jcmVhdGUnKVtcImRlZmF1bHRcIl07XG52YXIgX09iamVjdCRzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2NvcmUtanMvb2JqZWN0L3NldC1wcm90b3R5cGUtb2YnKVtcImRlZmF1bHRcIl07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGZ1bmN0aW9uKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTtcbiAgfVxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBfT2JqZWN0JGNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7Y29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBzdWJDbGFzcyxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9fSk7XG4gIGlmIChzdXBlckNsYXNzKVxuICAgIF9PYmplY3Qkc2V0UHJvdG90eXBlT2YgPyBfT2JqZWN0JHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59O1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiIsIi8qICovIFxudmFyICQgPSByZXF1aXJlKCcuLi8uLi9tb2R1bGVzLyQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoaXQsIGtleSwgZGVzYykge1xuICByZXR1cm4gJC5zZXREZXNjKGl0LCBrZXksIGRlc2MpO1xufTtcbiIsIi8qICovIFxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9kZWZpbmUtcHJvcGVydHlcIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCIvKiAqLyBcblwidXNlIHN0cmljdFwiO1xudmFyIF9PYmplY3QkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9jb3JlLWpzL29iamVjdC9kZWZpbmUtcHJvcGVydHknKVtcImRlZmF1bHRcIl07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcilcbiAgICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgICBfT2JqZWN0JGRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpXG4gICAgICBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKVxuICAgICAgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfTtcbn0pKCk7XG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuIiwiLyogKi8gXG5cInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTsiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcywgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5cbmNsYXNzIExhenlJbWcgZXh0ZW5kcyBDb21wb25lbnQge1xuICBjb21wb25lbnRXaWxsTW91bnQgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0xvYWRlZDogZmFsc2UgfSlcbiAgfVxuXG4gIGhhbmRsZUxvYWQgKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBpc0xvYWRlZDogdHJ1ZSB9KVxuICB9XG5cbiAgcmVuZGVyICgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGltZ1xuICAgICAgICBjbGFzc05hbWU9e2Ake3RoaXMuc3RhdGUuaXNMb2FkZWQgPyAnbGF6eWxvYWRlZCcgOiAnbGF6eWxvYWQnfSBsYXp5Ymx1cmB9XG4gICAgICAgIHNyYz17dGhpcy5wcm9wcy5zcmN9XG4gICAgICAgIG9uTG9hZD17KCkgPT4gdGhpcy5oYW5kbGVMb2FkKCl9XG4gICAgICAgIGFsdD17dGhpcy5wcm9wcy5hbHR9IC8+XG4gICAgKVxuICB9XG59XG5cbkxhenlJbWcuZGVmYXVsdFByb3BzID0ge1xuICBhbHQ6ICcnXG59XG5cbkxhenlJbWcucHJvcFR5cGVzID0ge1xuICBzcmM6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgYWx0OiBQcm9wVHlwZXMuc3RyaW5nXG59XG5cbmV4cG9ydCBkZWZhdWx0IExhenlJbWdcbiIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIH0gZnJvbSAncmVhY3QnXG5cbmNvbnN0IFN2Z0ljb24gPSAoeyBpZCwgbGFiZWwgfSkgPT4gKFxuICA8c3ZnIGNsYXNzTmFtZT0naWNvbicgYXJpYS1oaWRkZW49J3RydWUnIGFyaWEtbGFiZWw9e2xhYmVsfT5cbiAgICA8dXNlIHhsaW5rSHJlZj17YHN2Zy9pY29ucy5zdmcjJHtpZH1gfSAvPlxuICA8L3N2Zz5cbilcblxuU3ZnSWNvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGxhYmVsOiAnJ1xufVxuXG5TdmdJY29uLnByb3BUeXBlcyA9IHtcbiAgaWQ6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgbGFiZWw6IFByb3BUeXBlcy5zdHJpbmdcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3ZnSWNvblxuIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBMYXp5SW1nIGZyb20gJy4vbGF6eS1pbWcnXG5pbXBvcnQgU3ZnSWNvbiBmcm9tICcuL3N2Zy1pY29uJ1xuXG5jb25zdCBnZXRNb250aCA9IChtb250aCkgPT4ge1xuICBjb25zdCBtb250aHMgPSBbXG4gICAgJ0phbmVpcm8nLFxuICAgICdGZXZlcmVpcm8nLFxuICAgICdNYXLDp28nLFxuICAgICdBYnJpbCcsXG4gICAgJ01haW8nLFxuICAgICdKdW5obycsXG4gICAgJ0p1bGhvJyxcbiAgICAnQWdvc3RvJyxcbiAgICAnU2V0ZW1icm8nLFxuICAgICdPdXR1YnJvJyxcbiAgICAnTm92ZW1icm8nLFxuICAgICdEZXplbWJybydcbiAgXVxuICBjb25zdCBtID0gbW9udGhzLmluZGV4T2YobW9udGgpICsgMVxuICByZXR1cm4gKG0gPCAxMCA/ICcwJyA6ICcnKSArIG1cbn1cblxuY29uc3QgZm9ybWF0RGF0ZSA9ICh7IGRheSwgbW9udGgsIHllYXIgfSkgPT4ge1xuICByZXR1cm4gYCR7ZGF5fS8ke2dldE1vbnRoKG1vbnRoKX0vJHt5ZWFyfWBcbn1cblxuY29uc3QgRXZlbnRMaXN0SXRlbSA9ICh7XG4gIHRpdGxlLFxuICBpbWFnZSxcbiAgaW5uZXJMaW5rLFxuICBsaW5rLFxuICBkYXRlLFxuICBwcmljZSxcbiAgbG9jYXRpb24sXG4gIGxvY2F0aW9uVXJsLFxuICBzaG9ydERlc2NyaXB0aW9uXG59KSA9PiAoXG4gIDxhcnRpY2xlIGNsYXNzTmFtZT0nZXZlbnQnPlxuICAgIDxhIGNsYXNzTmFtZT0nZXZlbnQtbWVkaWEnIGhyZWY9e2xpbmt9IHRpdGxlPSdWZXIgZXZlbnRvJz5cbiAgICAgIDxMYXp5SW1nIHNyYz17aW1hZ2UgfHwgJ3N2Zy9sb2dvLnN2Zyd9IGFsdD17dGl0bGV9IC8+XG4gICAgPC9hPlxuICAgIDxkaXYgY2xhc3NOYW1lPSdldmVudC1tYWluJz5cbiAgICAgIDxhIGNsYXNzTmFtZT0nY29udGVudCcgaHJlZj17bGlua30gdGl0bGU9J1ZlciBldmVudG8nPlxuICAgICAgICA8aDI+e3RpdGxlfTwvaDI+XG4gICAgICAgIDxwPntzaG9ydERlc2NyaXB0aW9ufTwvcD5cbiAgICAgIDwvYT5cbiAgICAgIHshIWxpbmsgJiZcbiAgICAgICAgPGEgY2xhc3NOYW1lPSdidG4tbGluaycgaHJlZj17bGlua30gdGFyZ2V0PSdfYmxhbmsnIHRpdGxlPSdWaXNpdGFyIHNpdGUgb2ZpY2lhbCc+XG4gICAgICAgICAgPFN2Z0ljb24gaWQ9J2xpbmsnIGxhYmVsPSdMaW5rJyAvPlxuICAgICAgICAgIHtsaW5rfVxuICAgICAgICA8L2E+XG4gICAgICB9XG4gICAgICA8dWwgY2xhc3NOYW1lPSdldmVudC1saXN0Jz5cbiAgICAgICAgPGxpIGNsYXNzTmFtZT0nZXZlbnQtbGlzdC0taXRlbSc+XG4gICAgICAgICAgPFN2Z0ljb24gaWQ9J2RhdGUnIGxhYmVsPSdEYXRhJyAvPlxuICAgICAgICAgIHtmb3JtYXREYXRlKGRhdGUpfVxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGkgY2xhc3NOYW1lPSdldmVudC1saXN0LS1pdGVtJz5cbiAgICAgICAgICA8U3ZnSWNvbiBpZD0ncHJpY2UnIGxhYmVsPSdQcmXDp28nIC8+XG4gICAgICAgICAge3ByaWNlfVxuICAgICAgICA8L2xpPlxuICAgICAgICB7ISFsb2NhdGlvblVybCAmJlxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9J2V2ZW50LWxpc3QtLWl0ZW0nPlxuICAgICAgICAgICAgPFN2Z0ljb24gaWQ9J2xvY2F0aW9uJyBsYWJlbD0nTG9jYWwnIC8+XG4gICAgICAgICAgICA8YSBocmVmPXtsb2NhdGlvblVybH0gdGFyZ2V0PSdfYmxhbmsnPntsb2NhdGlvbn08L2E+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgfVxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgPC9hcnRpY2xlPlxuKVxuXG5FdmVudExpc3RJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGF0ZToge1xuICAgIGRheTogJzAwJyxcbiAgICBtb250aDogJ3h4JyxcbiAgICB5ZWFyOiAnMDAwMCdcbiAgfSxcbiAgcHJpY2U6ICdHcsOhdGlzJ1xufVxuXG5FdmVudExpc3RJdGVtLnByb3BUeXBlcyA9IHtcbiAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgaW1hZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGlubmVyTGluazogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsaW5rOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBkYXRlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGRheTogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkLFxuICAgIG1vbnRoOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgeWVhcjogUHJvcFR5cGVzLm51bWJlci5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWQsXG4gIHByaWNlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLnN0cmluZyxcbiAgbG9jYXRpb25Vcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNob3J0RGVzY3JpcHRpb246IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxufVxuXG5leHBvcnQgZGVmYXVsdCBFdmVudExpc3RJdGVtXG4iLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IFJlYWN0LCB7IFByb3BUeXBlcyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4J1xuaW1wb3J0IEV2ZW50TGlzdEl0ZW0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9ldmVudC1saXN0LWl0ZW0nXG4vLyBpbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuLi8uLi9jb21wb25lbnRzL3BhZ2luYXRpb24vaW5kZXgnXG5cbmNvbnN0IFBhZ2UgPSAoeyBldmVudHMgfSkgPT4gKFxuICA8c2VjdGlvbiBjbGFzc05hbWU9J3BhZ2UnPlxuICAgIDxoZWFkZXIgY2xhc3NOYW1lPSdwYWdlLWhlYWRlcic+XG4gICAgICA8aDMgY2xhc3NOYW1lPSd0aXRsZSc+UHLDs3hpbW9zIEV2ZW50b3M8L2gzPlxuICAgIDwvaGVhZGVyPlxuXG4gICAgPGRpdiBjbGFzc05hbWU9J3BhZ2Utd3JhcCc+XG4gICAgICB7ZXZlbnRzLm1hcCgocHJvcHMsIGluZGV4KSA9PiAoXG4gICAgICAgIDxFdmVudExpc3RJdGVtIGtleT17aW5kZXh9IHsuLi5wcm9wc30gLz5cbiAgICAgICkpfVxuICAgICAgey8qIDxQYWdpbmF0aW9uIC8+ICovfVxuICAgIDwvZGl2PlxuXG4gIDwvc2VjdGlvbj5cbilcblxuUGFnZS5wcm9wVHlwZXMgPSB7XG4gIGV2ZW50czogUHJvcFR5cGVzLnNoYXBlLmlzUmVxdWlyZWRcbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiAoe1xuICBldmVudHM6IHN0YXRlLmV2ZW50cy5ldmVudHMuZmlsdGVyKChfLCBpbmRleCkgPT4gaW5kZXggPj0gNSlcbn0pXG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShQYWdlKVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuY29uc3QgQXNpZGUgPSAoKSA9PiAoXG4gIDxhc2lkZSBjbGFzc05hbWU9J2Rpc2NsYWltZXInPlxuICAgIDxkaXYgY2xhc3NOYW1lPSdkaXNjbGFpbWVyLWlubmVyJz5cbiAgICAgIDxoMiBjbGFzc05hbWU9J3RpdGxlJz5cbiAgICAgICAgQ29uaGVjZSBhbGd1bSBldmVudG8gZGUgRnJvbnQtRW5kIHF1ZSBuw6NvIGVzdMOhIGxpc3RhZG8/XG4gICAgICA8L2gyPlxuICAgICAgPGFcbiAgICAgICAgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL2Zyb250ZW5kYnIvZXZlbnRvcy9pc3N1ZXMnXG4gICAgICAgIGNsYXNzTmFtZT0nYnRuJ1xuICAgICAgICBhcmlhLWxhYmVsPSdBbnVuY2lhciBFdmVudG8nXG4gICAgICAgIHRpdGxlPSdBbnVuY2llIHNldSBldmVudG8nPlxuICAgICAgICBBbnVuY2lhciBFdmVudG9cbiAgICAgIDwvYT5cbiAgICA8L2Rpdj5cbiAgPC9hc2lkZT5cblxuKVxuXG5leHBvcnQgZGVmYXVsdCBBc2lkZVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9oZWFkZXInXG5pbXBvcnQgUGFnZSBmcm9tICcuL3BhZ2UnXG5pbXBvcnQgQXNpZGUgZnJvbSAnLi9hc2lkZSdcblxuY29uc3QgTWFpbkNvbnRlbnQgPSAoKSA9PiAoXG4gIDxtYWluIGNsYXNzTmFtZT0nbWFpbicgcm9sZT0nbWFpbic+XG4gICAgPEhlYWRlciAvPlxuICAgIDxQYWdlIC8+XG4gICAgPEFzaWRlIC8+XG4gIDwvbWFpbj5cblxuKVxuXG5leHBvcnQgZGVmYXVsdCBNYWluQ29udGVudFxuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIG9uZUFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oY29weUZpZWxkc0Zyb20pIHtcbiAgICB2YXIgS2xhc3MgPSB0aGlzO1xuICAgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBjb3B5RmllbGRzRnJvbSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgS2xhc3MoY29weUZpZWxkc0Zyb20pO1xuICAgIH1cbiAgfTtcbiAgdmFyIHR3b0FyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyKSB7XG4gICAgdmFyIEtsYXNzID0gdGhpcztcbiAgICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBLbGFzcyhhMSwgYTIpO1xuICAgIH1cbiAgfTtcbiAgdmFyIHRocmVlQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIsIGEzKSB7XG4gICAgdmFyIEtsYXNzID0gdGhpcztcbiAgICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgICAgdmFyIGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMyk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMyk7XG4gICAgfVxuICB9O1xuICB2YXIgZm91ckFyZ3VtZW50UG9vbGVyID0gZnVuY3Rpb24oYTEsIGEyLCBhMywgYTQpIHtcbiAgICB2YXIgS2xhc3MgPSB0aGlzO1xuICAgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgICBLbGFzcy5jYWxsKGluc3RhbmNlLCBhMSwgYTIsIGEzLCBhNCk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGZpdmVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMsIGE0LCBhNSkge1xuICAgIHZhciBLbGFzcyA9IHRoaXM7XG4gICAgaWYgKEtsYXNzLmluc3RhbmNlUG9vbC5sZW5ndGgpIHtcbiAgICAgIHZhciBpbnN0YW5jZSA9IEtsYXNzLmluc3RhbmNlUG9vbC5wb3AoKTtcbiAgICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMsIGE0LCBhNSk7XG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyLCBhMywgYTQsIGE1KTtcbiAgICB9XG4gIH07XG4gIHZhciBzdGFuZGFyZFJlbGVhc2VyID0gZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICB2YXIgS2xhc3MgPSB0aGlzO1xuICAgICEoaW5zdGFuY2UgaW5zdGFuY2VvZiBLbGFzcykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnVHJ5aW5nIHRvIHJlbGVhc2UgYW4gaW5zdGFuY2UgaW50byBhIHBvb2wgb2YgYSBkaWZmZXJlbnQgdHlwZS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuICAgIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoIDwgS2xhc3MucG9vbFNpemUpIHtcbiAgICAgIEtsYXNzLmluc3RhbmNlUG9vbC5wdXNoKGluc3RhbmNlKTtcbiAgICB9XG4gIH07XG4gIHZhciBERUZBVUxUX1BPT0xfU0laRSA9IDEwO1xuICB2YXIgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcbiAgdmFyIGFkZFBvb2xpbmdUbyA9IGZ1bmN0aW9uKENvcHlDb25zdHJ1Y3RvciwgcG9vbGVyKSB7XG4gICAgdmFyIE5ld0tsYXNzID0gQ29weUNvbnN0cnVjdG9yO1xuICAgIE5ld0tsYXNzLmluc3RhbmNlUG9vbCA9IFtdO1xuICAgIE5ld0tsYXNzLmdldFBvb2xlZCA9IHBvb2xlciB8fCBERUZBVUxUX1BPT0xFUjtcbiAgICBpZiAoIU5ld0tsYXNzLnBvb2xTaXplKSB7XG4gICAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuICAgIH1cbiAgICBOZXdLbGFzcy5yZWxlYXNlID0gc3RhbmRhcmRSZWxlYXNlcjtcbiAgICByZXR1cm4gTmV3S2xhc3M7XG4gIH07XG4gIHZhciBQb29sZWRDbGFzcyA9IHtcbiAgICBhZGRQb29saW5nVG86IGFkZFBvb2xpbmdUbyxcbiAgICBvbmVBcmd1bWVudFBvb2xlcjogb25lQXJndW1lbnRQb29sZXIsXG4gICAgdHdvQXJndW1lbnRQb29sZXI6IHR3b0FyZ3VtZW50UG9vbGVyLFxuICAgIHRocmVlQXJndW1lbnRQb29sZXI6IHRocmVlQXJndW1lbnRQb29sZXIsXG4gICAgZm91ckFyZ3VtZW50UG9vbGVyOiBmb3VyQXJndW1lbnRQb29sZXIsXG4gICAgZml2ZUFyZ3VtZW50UG9vbGVyOiBmaXZlQXJndW1lbnRQb29sZXJcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBQb29sZWRDbGFzcztcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgS2V5RXNjYXBlVXRpbHNcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRXNjYXBlIGFuZCB3cmFwIGtleSBzbyBpdCBpcyBzYWZlIHRvIHVzZSBhcyBhIHJlYWN0aWRcbiAqXG4gKiBAcGFyYW0geyp9IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgZXNjYXBlZCBrZXkuXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICB2YXIgZXNjYXBlUmVnZXggPSAvWz06XS9nO1xuICB2YXIgZXNjYXBlckxvb2t1cCA9IHtcbiAgICAnPSc6ICc9MCcsXG4gICAgJzonOiAnPTInXG4gIH07XG4gIHZhciBlc2NhcGVkU3RyaW5nID0gKCcnICsga2V5KS5yZXBsYWNlKGVzY2FwZVJlZ2V4LCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gZXNjYXBlckxvb2t1cFttYXRjaF07XG4gIH0pO1xuXG4gIHJldHVybiAnJCcgKyBlc2NhcGVkU3RyaW5nO1xufVxuXG4vKipcbiAqIFVuZXNjYXBlIGFuZCB1bndyYXAga2V5IGZvciBodW1hbi1yZWFkYWJsZSBkaXNwbGF5XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSB0byB1bmVzY2FwZS5cbiAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHVuZXNjYXBlZCBrZXkuXG4gKi9cbmZ1bmN0aW9uIHVuZXNjYXBlKGtleSkge1xuICB2YXIgdW5lc2NhcGVSZWdleCA9IC8oPTB8PTIpL2c7XG4gIHZhciB1bmVzY2FwZXJMb29rdXAgPSB7XG4gICAgJz0wJzogJz0nLFxuICAgICc9Mic6ICc6J1xuICB9O1xuICB2YXIga2V5U3Vic3RyaW5nID0ga2V5WzBdID09PSAnLicgJiYga2V5WzFdID09PSAnJCcgPyBrZXkuc3Vic3RyaW5nKDIpIDoga2V5LnN1YnN0cmluZygxKTtcblxuICByZXR1cm4gKCcnICsga2V5U3Vic3RyaW5nKS5yZXBsYWNlKHVuZXNjYXBlUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiB1bmVzY2FwZXJMb29rdXBbbWF0Y2hdO1xuICB9KTtcbn1cblxudmFyIEtleUVzY2FwZVV0aWxzID0ge1xuICBlc2NhcGU6IGVzY2FwZSxcbiAgdW5lc2NhcGU6IHVuZXNjYXBlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEtleUVzY2FwZVV0aWxzOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgUmVhY3RDdXJyZW50T3duZXIgPSByZXF1aXJlKCcuL1JlYWN0Q3VycmVudE93bmVyJyk7XG4gIHZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuICB2YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3JGbicpO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIHZhciBLZXlFc2NhcGVVdGlscyA9IHJlcXVpcmUoJy4vS2V5RXNjYXBlVXRpbHMnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIHZhciBTRVBBUkFUT1IgPSAnLic7XG4gIHZhciBTVUJTRVBBUkFUT1IgPSAnOic7XG4gIHZhciBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGdldENvbXBvbmVudEtleShjb21wb25lbnQsIGluZGV4KSB7XG4gICAgaWYgKGNvbXBvbmVudCAmJiB0eXBlb2YgY29tcG9uZW50ID09PSAnb2JqZWN0JyAmJiBjb21wb25lbnQua2V5ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBLZXlFc2NhcGVVdGlscy5lc2NhcGUoY29tcG9uZW50LmtleSk7XG4gICAgfVxuICAgIHJldHVybiBpbmRleC50b1N0cmluZygzNik7XG4gIH1cbiAgZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGRyZW4sIG5hbWVTb0ZhciwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuICAgIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGNoaWxkcmVuID09PSBudWxsIHx8IHR5cGUgPT09ICdzdHJpbmcnIHx8IHR5cGUgPT09ICdudW1iZXInIHx8IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikpIHtcbiAgICAgIGNhbGxiYWNrKHRyYXZlcnNlQ29udGV4dCwgY2hpbGRyZW4sIG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgKyBnZXRDb21wb25lbnRLZXkoY2hpbGRyZW4sIDApIDogbmFtZVNvRmFyKTtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cbiAgICB2YXIgY2hpbGQ7XG4gICAgdmFyIG5leHROYW1lO1xuICAgIHZhciBzdWJ0cmVlQ291bnQgPSAwO1xuICAgIHZhciBuZXh0TmFtZVByZWZpeCA9IG5hbWVTb0ZhciA9PT0gJycgPyBTRVBBUkFUT1IgOiBuYW1lU29GYXIgKyBTVUJTRVBBUkFUT1I7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICAgIG5leHROYW1lID0gbmV4dE5hbWVQcmVmaXggKyBnZXRDb21wb25lbnRLZXkoY2hpbGQsIGkpO1xuICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcbiAgICAgIGlmIChpdGVyYXRvckZuKSB7XG4gICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG4gICAgICAgIHZhciBzdGVwO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gY2hpbGRyZW4uZW50cmllcykge1xuICAgICAgICAgIHZhciBpaSA9IDA7XG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgY2hpbGQgPSBzdGVwLnZhbHVlO1xuICAgICAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldENvbXBvbmVudEtleShjaGlsZCwgaWkrKyk7XG4gICAgICAgICAgICBzdWJ0cmVlQ291bnQgKz0gdHJhdmVyc2VBbGxDaGlsZHJlbkltcGwoY2hpbGQsIG5leHROYW1lLCBjYWxsYmFjaywgdHJhdmVyc2VDb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGRpZFdhcm5BYm91dE1hcHMsICdVc2luZyBNYXBzIGFzIGNoaWxkcmVuIGlzIG5vdCB5ZXQgZnVsbHkgc3VwcG9ydGVkLiBJdCBpcyBhbiAnICsgJ2V4cGVyaW1lbnRhbCBmZWF0dXJlIHRoYXQgbWlnaHQgYmUgcmVtb3ZlZC4gQ29udmVydCBpdCB0byBhICcgKyAnc2VxdWVuY2UgLyBpdGVyYWJsZSBvZiBrZXllZCBSZWFjdEVsZW1lbnRzIGluc3RlYWQuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICBjaGlsZCA9IGVudHJ5WzFdO1xuICAgICAgICAgICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgS2V5RXNjYXBlVXRpbHMuZXNjYXBlKGVudHJ5WzBdKSArIFNVQlNFUEFSQVRPUiArIGdldENvbXBvbmVudEtleShjaGlsZCwgMCk7XG4gICAgICAgICAgICAgIHN1YnRyZWVDb3VudCArPSB0cmF2ZXJzZUFsbENoaWxkcmVuSW1wbChjaGlsZCwgbmV4dE5hbWUsIGNhbGxiYWNrLCB0cmF2ZXJzZUNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2JqZWN0Jykge1xuICAgICAgICB2YXIgYWRkZW5kdW0gPSAnJztcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICsgJ2luc3RlYWQgb3Igd3JhcCB0aGUgb2JqZWN0IHVzaW5nIGNyZWF0ZUZyYWdtZW50KG9iamVjdCkgZnJvbSB0aGUgJyArICdSZWFjdCBhZGQtb25zLic7XG4gICAgICAgICAgaWYgKGNoaWxkcmVuLl9pc1JlYWN0RWxlbWVudCkge1xuICAgICAgICAgICAgYWRkZW5kdW0gPSAnIEl0IGxvb2tzIGxpa2UgeW91XFwncmUgdXNpbmcgYW4gZWxlbWVudCBjcmVhdGVkIGJ5IGEgZGlmZmVyZW50ICcgKyAndmVyc2lvbiBvZiBSZWFjdC4gTWFrZSBzdXJlIHRvIHVzZSBvbmx5IG9uZSBjb3B5IG9mIFJlYWN0Lic7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQuZ2V0TmFtZSgpO1xuICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgYWRkZW5kdW0gKz0gJyBDaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgY2hpbGRyZW5TdHJpbmcgPSBTdHJpbmcoY2hpbGRyZW4pO1xuICAgICAgICAhZmFsc2UgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiAlcykuJXMnLCBjaGlsZHJlblN0cmluZyA9PT0gJ1tvYmplY3QgT2JqZWN0XScgPyAnb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKGNoaWxkcmVuKS5qb2luKCcsICcpICsgJ30nIDogY2hpbGRyZW5TdHJpbmcsIGFkZGVuZHVtKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdWJ0cmVlQ291bnQ7XG4gIH1cbiAgZnVuY3Rpb24gdHJhdmVyc2VBbGxDaGlsZHJlbihjaGlsZHJlbiwgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCkge1xuICAgIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIHRyYXZlcnNlQWxsQ2hpbGRyZW5JbXBsKGNoaWxkcmVuLCAnJywgY2FsbGJhY2ssIHRyYXZlcnNlQ29udGV4dCk7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSB0cmF2ZXJzZUFsbENoaWxkcmVuO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIFBvb2xlZENsYXNzID0gcmVxdWlyZSgnLi9Qb29sZWRDbGFzcycpO1xudmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG52YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJ2ZianMvbGliL2VtcHR5RnVuY3Rpb24nKTtcbnZhciB0cmF2ZXJzZUFsbENoaWxkcmVuID0gcmVxdWlyZSgnLi90cmF2ZXJzZUFsbENoaWxkcmVuJyk7XG52YXIgdHdvQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy50d29Bcmd1bWVudFBvb2xlcjtcbnZhciBmb3VyQXJndW1lbnRQb29sZXIgPSBQb29sZWRDbGFzcy5mb3VyQXJndW1lbnRQb29sZXI7XG52YXIgdXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXggPSAvXFwvKy9nO1xuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuICgnJyArIHRleHQpLnJlcGxhY2UodXNlclByb3ZpZGVkS2V5RXNjYXBlUmVnZXgsICckJi8nKTtcbn1cbmZ1bmN0aW9uIEZvckVhY2hCb29rS2VlcGluZyhmb3JFYWNoRnVuY3Rpb24sIGZvckVhY2hDb250ZXh0KSB7XG4gIHRoaXMuZnVuYyA9IGZvckVhY2hGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gZm9yRWFjaENvbnRleHQ7XG4gIHRoaXMuY291bnQgPSAwO1xufVxuRm9yRWFjaEJvb2tLZWVwaW5nLnByb3RvdHlwZS5kZXN0cnVjdG9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZnVuYyA9IG51bGw7XG4gIHRoaXMuY29udGV4dCA9IG51bGw7XG4gIHRoaXMuY291bnQgPSAwO1xufTtcblBvb2xlZENsYXNzLmFkZFBvb2xpbmdUbyhGb3JFYWNoQm9va0tlZXBpbmcsIHR3b0FyZ3VtZW50UG9vbGVyKTtcbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZChib29rS2VlcGluZywgY2hpbGQsIG5hbWUpIHtcbiAgdmFyIGZ1bmMgPSBib29rS2VlcGluZy5mdW5jO1xuICB2YXIgY29udGV4dCA9IGJvb2tLZWVwaW5nLmNvbnRleHQ7XG4gIGZ1bmMuY2FsbChjb250ZXh0LCBjaGlsZCwgYm9va0tlZXBpbmcuY291bnQrKyk7XG59XG5mdW5jdGlvbiBmb3JFYWNoQ2hpbGRyZW4oY2hpbGRyZW4sIGZvckVhY2hGdW5jLCBmb3JFYWNoQ29udGV4dCkge1xuICBpZiAoY2hpbGRyZW4gPT0gbnVsbCkge1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICB2YXIgdHJhdmVyc2VDb250ZXh0ID0gRm9yRWFjaEJvb2tLZWVwaW5nLmdldFBvb2xlZChmb3JFYWNoRnVuYywgZm9yRWFjaENvbnRleHQpO1xuICB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIEZvckVhY2hCb29rS2VlcGluZy5yZWxlYXNlKHRyYXZlcnNlQ29udGV4dCk7XG59XG5mdW5jdGlvbiBNYXBCb29rS2VlcGluZyhtYXBSZXN1bHQsIGtleVByZWZpeCwgbWFwRnVuY3Rpb24sIG1hcENvbnRleHQpIHtcbiAgdGhpcy5yZXN1bHQgPSBtYXBSZXN1bHQ7XG4gIHRoaXMua2V5UHJlZml4ID0ga2V5UHJlZml4O1xuICB0aGlzLmZ1bmMgPSBtYXBGdW5jdGlvbjtcbiAgdGhpcy5jb250ZXh0ID0gbWFwQ29udGV4dDtcbiAgdGhpcy5jb3VudCA9IDA7XG59XG5NYXBCb29rS2VlcGluZy5wcm90b3R5cGUuZGVzdHJ1Y3RvciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnJlc3VsdCA9IG51bGw7XG4gIHRoaXMua2V5UHJlZml4ID0gbnVsbDtcbiAgdGhpcy5mdW5jID0gbnVsbDtcbiAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgdGhpcy5jb3VudCA9IDA7XG59O1xuUG9vbGVkQ2xhc3MuYWRkUG9vbGluZ1RvKE1hcEJvb2tLZWVwaW5nLCBmb3VyQXJndW1lbnRQb29sZXIpO1xuZnVuY3Rpb24gbWFwU2luZ2xlQ2hpbGRJbnRvQ29udGV4dChib29rS2VlcGluZywgY2hpbGQsIGNoaWxkS2V5KSB7XG4gIHZhciByZXN1bHQgPSBib29rS2VlcGluZy5yZXN1bHQ7XG4gIHZhciBrZXlQcmVmaXggPSBib29rS2VlcGluZy5rZXlQcmVmaXg7XG4gIHZhciBmdW5jID0gYm9va0tlZXBpbmcuZnVuYztcbiAgdmFyIGNvbnRleHQgPSBib29rS2VlcGluZy5jb250ZXh0O1xuICB2YXIgbWFwcGVkQ2hpbGQgPSBmdW5jLmNhbGwoY29udGV4dCwgY2hpbGQsIGJvb2tLZWVwaW5nLmNvdW50KyspO1xuICBpZiAoQXJyYXkuaXNBcnJheShtYXBwZWRDaGlsZCkpIHtcbiAgICBtYXBJbnRvV2l0aEtleVByZWZpeEludGVybmFsKG1hcHBlZENoaWxkLCByZXN1bHQsIGNoaWxkS2V5LCBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQpO1xuICB9IGVsc2UgaWYgKG1hcHBlZENoaWxkICE9IG51bGwpIHtcbiAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KG1hcHBlZENoaWxkKSkge1xuICAgICAgbWFwcGVkQ2hpbGQgPSBSZWFjdEVsZW1lbnQuY2xvbmVBbmRSZXBsYWNlS2V5KG1hcHBlZENoaWxkLCBrZXlQcmVmaXggKyAobWFwcGVkQ2hpbGQua2V5ICYmICghY2hpbGQgfHwgY2hpbGQua2V5ICE9PSBtYXBwZWRDaGlsZC5rZXkpID8gZXNjYXBlVXNlclByb3ZpZGVkS2V5KG1hcHBlZENoaWxkLmtleSkgKyAnLycgOiAnJykgKyBjaGlsZEtleSk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKG1hcHBlZENoaWxkKTtcbiAgfVxufVxuZnVuY3Rpb24gbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgYXJyYXksIHByZWZpeCwgZnVuYywgY29udGV4dCkge1xuICB2YXIgZXNjYXBlZFByZWZpeCA9ICcnO1xuICBpZiAocHJlZml4ICE9IG51bGwpIHtcbiAgICBlc2NhcGVkUHJlZml4ID0gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHByZWZpeCkgKyAnLyc7XG4gIH1cbiAgdmFyIHRyYXZlcnNlQ29udGV4dCA9IE1hcEJvb2tLZWVwaW5nLmdldFBvb2xlZChhcnJheSwgZXNjYXBlZFByZWZpeCwgZnVuYywgY29udGV4dCk7XG4gIHRyYXZlcnNlQWxsQ2hpbGRyZW4oY2hpbGRyZW4sIG1hcFNpbmdsZUNoaWxkSW50b0NvbnRleHQsIHRyYXZlcnNlQ29udGV4dCk7XG4gIE1hcEJvb2tLZWVwaW5nLnJlbGVhc2UodHJhdmVyc2VDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBmdW5jLCBjb250ZXh0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGZvckVhY2hTaW5nbGVDaGlsZER1bW15KHRyYXZlcnNlQ29udGV4dCwgY2hpbGQsIG5hbWUpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBjb3VudENoaWxkcmVuKGNoaWxkcmVuLCBjb250ZXh0KSB7XG4gIHJldHVybiB0cmF2ZXJzZUFsbENoaWxkcmVuKGNoaWxkcmVuLCBmb3JFYWNoU2luZ2xlQ2hpbGREdW1teSwgbnVsbCk7XG59XG5mdW5jdGlvbiB0b0FycmF5KGNoaWxkcmVuKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbChjaGlsZHJlbiwgcmVzdWx0LCBudWxsLCBlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zQXJndW1lbnQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxudmFyIFJlYWN0Q2hpbGRyZW4gPSB7XG4gIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcbiAgbWFwOiBtYXBDaGlsZHJlbixcbiAgbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbDogbWFwSW50b1dpdGhLZXlQcmVmaXhJbnRlcm5hbCxcbiAgY291bnQ6IGNvdW50Q2hpbGRyZW4sXG4gIHRvQXJyYXk6IHRvQXJyYXlcbn07XG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q2hpbGRyZW47XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJy4vRXhlY3V0aW9uRW52aXJvbm1lbnQnKTtcbnZhciBwZXJmb3JtYW5jZTtcbmlmIChFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00pIHtcbiAgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2UgfHwgd2luZG93Lm1zUGVyZm9ybWFuY2UgfHwgd2luZG93LndlYmtpdFBlcmZvcm1hbmNlO1xufVxubW9kdWxlLmV4cG9ydHMgPSBwZXJmb3JtYW5jZSB8fCB7fTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIHBlcmZvcm1hbmNlID0gcmVxdWlyZSgnLi9wZXJmb3JtYW5jZScpO1xudmFyIHBlcmZvcm1hbmNlTm93O1xuaWYgKHBlcmZvcm1hbmNlLm5vdykge1xuICBwZXJmb3JtYW5jZU5vdyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBwZXJmb3JtYW5jZS5ub3coKTtcbiAgfTtcbn0gZWxzZSB7XG4gIHBlcmZvcm1hbmNlTm93ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIERhdGUubm93KCk7XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IHBlcmZvcm1hbmNlTm93O1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBwcm9jZXNzaW5nQ2hpbGRDb250ZXh0ID0gZmFsc2U7XG4gICAgdmFyIHdhcm5JbnZhbGlkU2V0U3RhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFwcm9jZXNzaW5nQ2hpbGRDb250ZXh0LCAnc2V0U3RhdGUoLi4uKTogQ2Fubm90IGNhbGwgc2V0U3RhdGUoKSBpbnNpZGUgZ2V0Q2hpbGRDb250ZXh0KCknKSA6IHZvaWQgMDtcbiAgICB9O1xuICB9XG4gIHZhciBSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sID0ge1xuICAgIG9uQmVnaW5Qcm9jZXNzaW5nQ2hpbGRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHByb2Nlc3NpbmdDaGlsZENvbnRleHQgPSB0cnVlO1xuICAgIH0sXG4gICAgb25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHByb2Nlc3NpbmdDaGlsZENvbnRleHQgPSBmYWxzZTtcbiAgICB9LFxuICAgIG9uU2V0U3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgd2FybkludmFsaWRTZXRTdGF0ZSgpO1xuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdE5hdGl2ZU9wZXJhdGlvbkhpc3RvcnlEZXZ0b29sXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGlzdG9yeSA9IFtdO1xuXG52YXIgUmVhY3ROYXRpdmVPcGVyYXRpb25IaXN0b3J5RGV2dG9vbCA9IHtcbiAgb25OYXRpdmVPcGVyYXRpb246IGZ1bmN0aW9uIChkZWJ1Z0lELCB0eXBlLCBwYXlsb2FkKSB7XG4gICAgaGlzdG9yeS5wdXNoKHtcbiAgICAgIGluc3RhbmNlSUQ6IGRlYnVnSUQsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgcGF5bG9hZDogcGF5bG9hZFxuICAgIH0pO1xuICB9LFxuICBjbGVhckhpc3Rvcnk6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoUmVhY3ROYXRpdmVPcGVyYXRpb25IaXN0b3J5RGV2dG9vbC5fcHJldmVudENsZWFyaW5nKSB7XG4gICAgICAvLyBTaG91bGQgb25seSBiZSB1c2VkIGZvciB0ZXN0cy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBoaXN0b3J5ID0gW107XG4gIH0sXG4gIGdldEhpc3Rvcnk6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaGlzdG9yeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5hdGl2ZU9wZXJhdGlvbkhpc3RvcnlEZXZ0b29sOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIHZhciB0cmVlID0ge307XG4gIHZhciByb290SURzID0gW107XG4gIGZ1bmN0aW9uIHVwZGF0ZVRyZWUoaWQsIHVwZGF0ZSkge1xuICAgIGlmICghdHJlZVtpZF0pIHtcbiAgICAgIHRyZWVbaWRdID0ge1xuICAgICAgICBwYXJlbnRJRDogbnVsbCxcbiAgICAgICAgb3duZXJJRDogbnVsbCxcbiAgICAgICAgdGV4dDogbnVsbCxcbiAgICAgICAgY2hpbGRJRHM6IFtdLFxuICAgICAgICBkaXNwbGF5TmFtZTogJ1Vua25vd24nLFxuICAgICAgICBpc01vdW50ZWQ6IGZhbHNlLFxuICAgICAgICB1cGRhdGVDb3VudDogMFxuICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlKHRyZWVbaWRdKTtcbiAgfVxuICBmdW5jdGlvbiBwdXJnZURlZXAoaWQpIHtcbiAgICB2YXIgaXRlbSA9IHRyZWVbaWRdO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgY2hpbGRJRHMgPSBpdGVtLmNoaWxkSURzO1xuICAgICAgZGVsZXRlIHRyZWVbaWRdO1xuICAgICAgY2hpbGRJRHMuZm9yRWFjaChwdXJnZURlZXApO1xuICAgIH1cbiAgfVxuICB2YXIgUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbCA9IHtcbiAgICBvblNldERpc3BsYXlOYW1lOiBmdW5jdGlvbihpZCwgZGlzcGxheU5hbWUpIHtcbiAgICAgIHVwZGF0ZVRyZWUoaWQsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0uZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb25TZXRDaGlsZHJlbjogZnVuY3Rpb24oaWQsIG5leHRDaGlsZElEcykge1xuICAgICAgdXBkYXRlVHJlZShpZCwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgcHJldkNoaWxkSURzID0gaXRlbS5jaGlsZElEcztcbiAgICAgICAgaXRlbS5jaGlsZElEcyA9IG5leHRDaGlsZElEcztcbiAgICAgICAgbmV4dENoaWxkSURzLmZvckVhY2goZnVuY3Rpb24obmV4dENoaWxkSUQpIHtcbiAgICAgICAgICB2YXIgbmV4dENoaWxkID0gdHJlZVtuZXh0Q2hpbGRJRF07XG4gICAgICAgICAgIW5leHRDaGlsZCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdFeHBlY3RlZCBkZXZ0b29sIGV2ZW50cyB0byBmaXJlIGZvciB0aGUgY2hpbGQgJyArICdiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICEobmV4dENoaWxkLmRpc3BsYXlOYW1lICE9IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ0V4cGVjdGVkIG9uU2V0RGlzcGxheU5hbWUoKSB0byBmaXJlIGZvciB0aGUgY2hpbGQgJyArICdiZWZvcmUgaXRzIHBhcmVudCBpbmNsdWRlcyBpdCBpbiBvblNldENoaWxkcmVuKCkuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICAgICEobmV4dENoaWxkLmNoaWxkSURzICE9IG51bGwgfHwgbmV4dENoaWxkLnRleHQgIT0gbnVsbCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgb25TZXRDaGlsZHJlbigpIG9yIG9uU2V0VGV4dCgpIHRvIGZpcmUgZm9yIHRoZSBjaGlsZCAnICsgJ2JlZm9yZSBpdHMgcGFyZW50IGluY2x1ZGVzIGl0IGluIG9uU2V0Q2hpbGRyZW4oKS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgIW5leHRDaGlsZC5pc01vdW50ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnRXhwZWN0ZWQgb25Nb3VudENvbXBvbmVudCgpIHRvIGZpcmUgZm9yIHRoZSBjaGlsZCAnICsgJ2JlZm9yZSBpdHMgcGFyZW50IGluY2x1ZGVzIGl0IGluIG9uU2V0Q2hpbGRyZW4oKS4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgaWYgKHByZXZDaGlsZElEcy5pbmRleE9mKG5leHRDaGlsZElEKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5leHRDaGlsZC5wYXJlbnRJRCA9IGlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIG9uU2V0T3duZXI6IGZ1bmN0aW9uKGlkLCBvd25lcklEKSB7XG4gICAgICB1cGRhdGVUcmVlKGlkLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLm93bmVySUQgPSBvd25lcklEO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBvblNldFRleHQ6IGZ1bmN0aW9uKGlkLCB0ZXh0KSB7XG4gICAgICB1cGRhdGVUcmVlKGlkLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLnRleHQgPSB0ZXh0O1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbk1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihpZCkge1xuICAgICAgdXBkYXRlVHJlZShpZCwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBvbk1vdW50Um9vdENvbXBvbmVudDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJvb3RJRHMucHVzaChpZCk7XG4gICAgfSxcbiAgICBvblVwZGF0ZUNvbXBvbmVudDogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHVwZGF0ZVRyZWUoaWQsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0udXBkYXRlQ291bnQrKztcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgb25Vbm1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihpZCkge1xuICAgICAgdXBkYXRlVHJlZShpZCwgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbS5pc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgICAgcm9vdElEcyA9IHJvb3RJRHMuZmlsdGVyKGZ1bmN0aW9uKHJvb3RJRCkge1xuICAgICAgICByZXR1cm4gcm9vdElEICE9PSBpZDtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcHVyZ2VVbm1vdW50ZWRDb21wb25lbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChSZWFjdENvbXBvbmVudFRyZWVEZXZ0b29sLl9wcmV2ZW50UHVyZ2luZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBPYmplY3Qua2V5cyh0cmVlKS5maWx0ZXIoZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgcmV0dXJuICF0cmVlW2lkXS5pc01vdW50ZWQ7XG4gICAgICB9KS5mb3JFYWNoKHB1cmdlRGVlcCk7XG4gICAgfSxcbiAgICBpc01vdW50ZWQ6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgaXRlbSA9IHRyZWVbaWRdO1xuICAgICAgcmV0dXJuIGl0ZW0gPyBpdGVtLmlzTW91bnRlZCA6IGZhbHNlO1xuICAgIH0sXG4gICAgZ2V0Q2hpbGRJRHM6IGZ1bmN0aW9uKGlkKSB7XG4gICAgICB2YXIgaXRlbSA9IHRyZWVbaWRdO1xuICAgICAgcmV0dXJuIGl0ZW0gPyBpdGVtLmNoaWxkSURzIDogW107XG4gICAgfSxcbiAgICBnZXREaXNwbGF5TmFtZTogZnVuY3Rpb24oaWQpIHtcbiAgICAgIHZhciBpdGVtID0gdHJlZVtpZF07XG4gICAgICByZXR1cm4gaXRlbSA/IGl0ZW0uZGlzcGxheU5hbWUgOiAnVW5rbm93bic7XG4gICAgfSxcbiAgICBnZXRPd25lcklEOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIGl0ZW0gPSB0cmVlW2lkXTtcbiAgICAgIHJldHVybiBpdGVtID8gaXRlbS5vd25lcklEIDogbnVsbDtcbiAgICB9LFxuICAgIGdldFBhcmVudElEOiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIGl0ZW0gPSB0cmVlW2lkXTtcbiAgICAgIHJldHVybiBpdGVtID8gaXRlbS5wYXJlbnRJRCA6IG51bGw7XG4gICAgfSxcbiAgICBnZXRUZXh0OiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIGl0ZW0gPSB0cmVlW2lkXTtcbiAgICAgIHJldHVybiBpdGVtID8gaXRlbS50ZXh0IDogbnVsbDtcbiAgICB9LFxuICAgIGdldFVwZGF0ZUNvdW50OiBmdW5jdGlvbihpZCkge1xuICAgICAgdmFyIGl0ZW0gPSB0cmVlW2lkXTtcbiAgICAgIHJldHVybiBpdGVtID8gaXRlbS51cGRhdGVDb3VudCA6IDA7XG4gICAgfSxcbiAgICBnZXRSb290SURzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByb290SURzO1xuICAgIH0sXG4gICAgZ2V0UmVnaXN0ZXJlZElEczogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModHJlZSk7XG4gICAgfVxuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2w7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHJlcXVpcmUoJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50Jyk7XG4gIHZhciBwZXJmb3JtYW5jZU5vdyA9IHJlcXVpcmUoJ2ZianMvbGliL3BlcmZvcm1hbmNlTm93Jyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgZXZlbnRIYW5kbGVycyA9IFtdO1xuICB2YXIgaGFuZGxlckRvZXNUaHJvd0ZvckV2ZW50ID0ge307XG4gIGZ1bmN0aW9uIGVtaXRFdmVudChoYW5kbGVyRnVuY3Rpb25OYW1lLCBhcmcxLCBhcmcyLCBhcmczLCBhcmc0LCBhcmc1KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGV2ZW50SGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGhhbmRsZXJbaGFuZGxlckZ1bmN0aW9uTmFtZV0pIHtcbiAgICAgICAgICAgIGhhbmRsZXJbaGFuZGxlckZ1bmN0aW9uTmFtZV0oYXJnMSwgYXJnMiwgYXJnMywgYXJnNCwgYXJnNSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIWhhbmRsZXJEb2VzVGhyb3dGb3JFdmVudFtoYW5kbGVyRnVuY3Rpb25OYW1lXSwgJ2V4Y2VwdGlvbiB0aHJvd24gYnkgZGV2dG9vbCB3aGlsZSBoYW5kbGluZyAlczogJXMnLCBoYW5kbGVyRnVuY3Rpb25OYW1lLCBlLm1lc3NhZ2UpIDogdm9pZCAwO1xuICAgICAgICAgIGhhbmRsZXJEb2VzVGhyb3dGb3JFdmVudFtoYW5kbGVyRnVuY3Rpb25OYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICB2YXIgaXNQcm9maWxpbmcgPSBmYWxzZTtcbiAgdmFyIGZsdXNoSGlzdG9yeSA9IFtdO1xuICB2YXIgY3VycmVudEZsdXNoTmVzdGluZyA9IDA7XG4gIHZhciBjdXJyZW50Rmx1c2hNZWFzdXJlbWVudHMgPSBudWxsO1xuICB2YXIgY3VycmVudEZsdXNoU3RhcnRUaW1lID0gbnVsbDtcbiAgdmFyIGN1cnJlbnRUaW1lckRlYnVnSUQgPSBudWxsO1xuICB2YXIgY3VycmVudFRpbWVyU3RhcnRUaW1lID0gbnVsbDtcbiAgdmFyIGN1cnJlbnRUaW1lclR5cGUgPSBudWxsO1xuICBmdW5jdGlvbiBjbGVhckhpc3RvcnkoKSB7XG4gICAgUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbC5wdXJnZVVubW91bnRlZENvbXBvbmVudHMoKTtcbiAgICBSZWFjdE5hdGl2ZU9wZXJhdGlvbkhpc3RvcnlEZXZ0b29sLmNsZWFySGlzdG9yeSgpO1xuICB9XG4gIGZ1bmN0aW9uIGdldFRyZWVTbmFwc2hvdChyZWdpc3RlcmVkSURzKSB7XG4gICAgcmV0dXJuIHJlZ2lzdGVyZWRJRHMucmVkdWNlKGZ1bmN0aW9uKHRyZWUsIGlkKSB7XG4gICAgICB2YXIgb3duZXJJRCA9IFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2wuZ2V0T3duZXJJRChpZCk7XG4gICAgICB2YXIgcGFyZW50SUQgPSBSZWFjdENvbXBvbmVudFRyZWVEZXZ0b29sLmdldFBhcmVudElEKGlkKTtcbiAgICAgIHRyZWVbaWRdID0ge1xuICAgICAgICBkaXNwbGF5TmFtZTogUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbC5nZXREaXNwbGF5TmFtZShpZCksXG4gICAgICAgIHRleHQ6IFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2wuZ2V0VGV4dChpZCksXG4gICAgICAgIHVwZGF0ZUNvdW50OiBSZWFjdENvbXBvbmVudFRyZWVEZXZ0b29sLmdldFVwZGF0ZUNvdW50KGlkKSxcbiAgICAgICAgY2hpbGRJRHM6IFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2wuZ2V0Q2hpbGRJRHMoaWQpLFxuICAgICAgICBvd25lcklEOiBvd25lcklEIHx8IFJlYWN0Q29tcG9uZW50VHJlZURldnRvb2wuZ2V0T3duZXJJRChwYXJlbnRJRCksXG4gICAgICAgIHBhcmVudElEOiBwYXJlbnRJRFxuICAgICAgfTtcbiAgICAgIHJldHVybiB0cmVlO1xuICAgIH0sIHt9KTtcbiAgfVxuICBmdW5jdGlvbiByZXNldE1lYXN1cmVtZW50cygpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIHByZXZpb3VzU3RhcnRUaW1lID0gY3VycmVudEZsdXNoU3RhcnRUaW1lO1xuICAgICAgdmFyIHByZXZpb3VzTWVhc3VyZW1lbnRzID0gY3VycmVudEZsdXNoTWVhc3VyZW1lbnRzIHx8IFtdO1xuICAgICAgdmFyIHByZXZpb3VzT3BlcmF0aW9ucyA9IFJlYWN0TmF0aXZlT3BlcmF0aW9uSGlzdG9yeURldnRvb2wuZ2V0SGlzdG9yeSgpO1xuICAgICAgaWYgKCFpc1Byb2ZpbGluZyB8fCBjdXJyZW50Rmx1c2hOZXN0aW5nID09PSAwKSB7XG4gICAgICAgIGN1cnJlbnRGbHVzaFN0YXJ0VGltZSA9IG51bGw7XG4gICAgICAgIGN1cnJlbnRGbHVzaE1lYXN1cmVtZW50cyA9IG51bGw7XG4gICAgICAgIGNsZWFySGlzdG9yeSgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocHJldmlvdXNNZWFzdXJlbWVudHMubGVuZ3RoIHx8IHByZXZpb3VzT3BlcmF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlZ2lzdGVyZWRJRHMgPSBSZWFjdENvbXBvbmVudFRyZWVEZXZ0b29sLmdldFJlZ2lzdGVyZWRJRHMoKTtcbiAgICAgICAgZmx1c2hIaXN0b3J5LnB1c2goe1xuICAgICAgICAgIGR1cmF0aW9uOiBwZXJmb3JtYW5jZU5vdygpIC0gcHJldmlvdXNTdGFydFRpbWUsXG4gICAgICAgICAgbWVhc3VyZW1lbnRzOiBwcmV2aW91c01lYXN1cmVtZW50cyB8fCBbXSxcbiAgICAgICAgICBvcGVyYXRpb25zOiBwcmV2aW91c09wZXJhdGlvbnMgfHwgW10sXG4gICAgICAgICAgdHJlZVNuYXBzaG90OiBnZXRUcmVlU25hcHNob3QocmVnaXN0ZXJlZElEcylcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBjbGVhckhpc3RvcnkoKTtcbiAgICAgIGN1cnJlbnRGbHVzaFN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlTm93KCk7XG4gICAgICBjdXJyZW50Rmx1c2hNZWFzdXJlbWVudHMgPSBbXTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhkZWJ1Z0lELCAnUmVhY3REZWJ1Z1Rvb2w6IGRlYnVnSUQgbWF5IG5vdCBiZSBlbXB0eS4nKSA6IHZvaWQgMDtcbiAgfVxuICB2YXIgUmVhY3REZWJ1Z1Rvb2wgPSB7XG4gICAgYWRkRGV2dG9vbDogZnVuY3Rpb24oZGV2dG9vbCkge1xuICAgICAgZXZlbnRIYW5kbGVycy5wdXNoKGRldnRvb2wpO1xuICAgIH0sXG4gICAgcmVtb3ZlRGV2dG9vbDogZnVuY3Rpb24oZGV2dG9vbCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudEhhbmRsZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChldmVudEhhbmRsZXJzW2ldID09PSBkZXZ0b29sKSB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBiZWdpblByb2ZpbGluZzogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoaXNQcm9maWxpbmcpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaXNQcm9maWxpbmcgPSB0cnVlO1xuICAgICAgICBmbHVzaEhpc3RvcnkubGVuZ3RoID0gMDtcbiAgICAgICAgcmVzZXRNZWFzdXJlbWVudHMoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGVuZFByb2ZpbGluZzogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoIWlzUHJvZmlsaW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlzUHJvZmlsaW5nID0gZmFsc2U7XG4gICAgICAgIHJlc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXRGbHVzaEhpc3Rvcnk6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZsdXNoSGlzdG9yeTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9uQmVnaW5GbHVzaDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjdXJyZW50Rmx1c2hOZXN0aW5nKys7XG4gICAgICAgIHJlc2V0TWVhc3VyZW1lbnRzKCk7XG4gICAgICB9XG4gICAgICBlbWl0RXZlbnQoJ29uQmVnaW5GbHVzaCcpO1xuICAgIH0sXG4gICAgb25FbmRGbHVzaDogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICByZXNldE1lYXN1cmVtZW50cygpO1xuICAgICAgICBjdXJyZW50Rmx1c2hOZXN0aW5nLS07XG4gICAgICB9XG4gICAgICBlbWl0RXZlbnQoJ29uRW5kRmx1c2gnKTtcbiAgICB9LFxuICAgIG9uQmVnaW5MaWZlQ3ljbGVUaW1lcjogZnVuY3Rpb24oZGVidWdJRCwgdGltZXJUeXBlKSB7XG4gICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICBlbWl0RXZlbnQoJ29uQmVnaW5MaWZlQ3ljbGVUaW1lcicsIGRlYnVnSUQsIHRpbWVyVHlwZSk7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoaXNQcm9maWxpbmcgJiYgY3VycmVudEZsdXNoTmVzdGluZyA+IDApIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghY3VycmVudFRpbWVyVHlwZSwgJ1RoZXJlIGlzIGFuIGludGVybmFsIGVycm9yIGluIHRoZSBSZWFjdCBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudCBjb2RlLiAnICsgJ0RpZCBub3QgZXhwZWN0ICVzIHRpbWVyIHRvIHN0YXJ0IHdoaWxlICVzIHRpbWVyIGlzIHN0aWxsIGluICcgKyAncHJvZ3Jlc3MgZm9yICVzIGluc3RhbmNlLicsIHRpbWVyVHlwZSwgY3VycmVudFRpbWVyVHlwZSB8fCAnbm8nLCBkZWJ1Z0lEID09PSBjdXJyZW50VGltZXJEZWJ1Z0lEID8gJ3RoZSBzYW1lJyA6ICdhbm90aGVyJykgOiB2b2lkIDA7XG4gICAgICAgICAgY3VycmVudFRpbWVyU3RhcnRUaW1lID0gcGVyZm9ybWFuY2VOb3coKTtcbiAgICAgICAgICBjdXJyZW50VGltZXJEZWJ1Z0lEID0gZGVidWdJRDtcbiAgICAgICAgICBjdXJyZW50VGltZXJUeXBlID0gdGltZXJUeXBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvbkVuZExpZmVDeWNsZVRpbWVyOiBmdW5jdGlvbihkZWJ1Z0lELCB0aW1lclR5cGUpIHtcbiAgICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChpc1Byb2ZpbGluZyAmJiBjdXJyZW50Rmx1c2hOZXN0aW5nID4gMCkge1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGN1cnJlbnRUaW1lclR5cGUgPT09IHRpbWVyVHlwZSwgJ1RoZXJlIGlzIGFuIGludGVybmFsIGVycm9yIGluIHRoZSBSZWFjdCBwZXJmb3JtYW5jZSBtZWFzdXJlbWVudCBjb2RlLiAnICsgJ1dlIGRpZCBub3QgZXhwZWN0ICVzIHRpbWVyIHRvIHN0b3Agd2hpbGUgJXMgdGltZXIgaXMgc3RpbGwgaW4gJyArICdwcm9ncmVzcyBmb3IgJXMgaW5zdGFuY2UuIFBsZWFzZSByZXBvcnQgdGhpcyBhcyBhIGJ1ZyBpbiBSZWFjdC4nLCB0aW1lclR5cGUsIGN1cnJlbnRUaW1lclR5cGUgfHwgJ25vJywgZGVidWdJRCA9PT0gY3VycmVudFRpbWVyRGVidWdJRCA/ICd0aGUgc2FtZScgOiAnYW5vdGhlcicpIDogdm9pZCAwO1xuICAgICAgICAgIGN1cnJlbnRGbHVzaE1lYXN1cmVtZW50cy5wdXNoKHtcbiAgICAgICAgICAgIHRpbWVyVHlwZTogdGltZXJUeXBlLFxuICAgICAgICAgICAgaW5zdGFuY2VJRDogZGVidWdJRCxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBwZXJmb3JtYW5jZU5vdygpIC0gY3VycmVudFRpbWVyU3RhcnRUaW1lXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY3VycmVudFRpbWVyU3RhcnRUaW1lID0gbnVsbDtcbiAgICAgICAgICBjdXJyZW50VGltZXJEZWJ1Z0lEID0gbnVsbDtcbiAgICAgICAgICBjdXJyZW50VGltZXJUeXBlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZW1pdEV2ZW50KCdvbkVuZExpZmVDeWNsZVRpbWVyJywgZGVidWdJRCwgdGltZXJUeXBlKTtcbiAgICB9LFxuICAgIG9uQmVnaW5SZWNvbmNpbGVyVGltZXI6IGZ1bmN0aW9uKGRlYnVnSUQsIHRpbWVyVHlwZSkge1xuICAgICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgICAgZW1pdEV2ZW50KCdvbkJlZ2luUmVjb25jaWxlclRpbWVyJywgZGVidWdJRCwgdGltZXJUeXBlKTtcbiAgICB9LFxuICAgIG9uRW5kUmVjb25jaWxlclRpbWVyOiBmdW5jdGlvbihkZWJ1Z0lELCB0aW1lclR5cGUpIHtcbiAgICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICAgIGVtaXRFdmVudCgnb25FbmRSZWNvbmNpbGVyVGltZXInLCBkZWJ1Z0lELCB0aW1lclR5cGUpO1xuICAgIH0sXG4gICAgb25CZWdpblByb2Nlc3NpbmdDaGlsZENvbnRleHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZW1pdEV2ZW50KCdvbkJlZ2luUHJvY2Vzc2luZ0NoaWxkQ29udGV4dCcpO1xuICAgIH0sXG4gICAgb25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIGVtaXRFdmVudCgnb25FbmRQcm9jZXNzaW5nQ2hpbGRDb250ZXh0Jyk7XG4gICAgfSxcbiAgICBvbk5hdGl2ZU9wZXJhdGlvbjogZnVuY3Rpb24oZGVidWdJRCwgdHlwZSwgcGF5bG9hZCkge1xuICAgICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgICAgZW1pdEV2ZW50KCdvbk5hdGl2ZU9wZXJhdGlvbicsIGRlYnVnSUQsIHR5cGUsIHBheWxvYWQpO1xuICAgIH0sXG4gICAgb25TZXRTdGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgICBlbWl0RXZlbnQoJ29uU2V0U3RhdGUnKTtcbiAgICB9LFxuICAgIG9uU2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uKGRlYnVnSUQsIGRpc3BsYXlOYW1lKSB7XG4gICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICBlbWl0RXZlbnQoJ29uU2V0RGlzcGxheU5hbWUnLCBkZWJ1Z0lELCBkaXNwbGF5TmFtZSk7XG4gICAgfSxcbiAgICBvblNldENoaWxkcmVuOiBmdW5jdGlvbihkZWJ1Z0lELCBjaGlsZERlYnVnSURzKSB7XG4gICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICBlbWl0RXZlbnQoJ29uU2V0Q2hpbGRyZW4nLCBkZWJ1Z0lELCBjaGlsZERlYnVnSURzKTtcbiAgICB9LFxuICAgIG9uU2V0T3duZXI6IGZ1bmN0aW9uKGRlYnVnSUQsIG93bmVyRGVidWdJRCkge1xuICAgICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgICAgZW1pdEV2ZW50KCdvblNldE93bmVyJywgZGVidWdJRCwgb3duZXJEZWJ1Z0lEKTtcbiAgICB9LFxuICAgIG9uU2V0VGV4dDogZnVuY3Rpb24oZGVidWdJRCwgdGV4dCkge1xuICAgICAgY2hlY2tEZWJ1Z0lEKGRlYnVnSUQpO1xuICAgICAgZW1pdEV2ZW50KCdvblNldFRleHQnLCBkZWJ1Z0lELCB0ZXh0KTtcbiAgICB9LFxuICAgIG9uTW91bnRSb290Q29tcG9uZW50OiBmdW5jdGlvbihkZWJ1Z0lEKSB7XG4gICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICBlbWl0RXZlbnQoJ29uTW91bnRSb290Q29tcG9uZW50JywgZGVidWdJRCk7XG4gICAgfSxcbiAgICBvbk1vdW50Q29tcG9uZW50OiBmdW5jdGlvbihkZWJ1Z0lEKSB7XG4gICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICBlbWl0RXZlbnQoJ29uTW91bnRDb21wb25lbnQnLCBkZWJ1Z0lEKTtcbiAgICB9LFxuICAgIG9uVXBkYXRlQ29tcG9uZW50OiBmdW5jdGlvbihkZWJ1Z0lEKSB7XG4gICAgICBjaGVja0RlYnVnSUQoZGVidWdJRCk7XG4gICAgICBlbWl0RXZlbnQoJ29uVXBkYXRlQ29tcG9uZW50JywgZGVidWdJRCk7XG4gICAgfSxcbiAgICBvblVubW91bnRDb21wb25lbnQ6IGZ1bmN0aW9uKGRlYnVnSUQpIHtcbiAgICAgIGNoZWNrRGVidWdJRChkZWJ1Z0lEKTtcbiAgICAgIGVtaXRFdmVudCgnb25Vbm1vdW50Q29tcG9uZW50JywgZGVidWdJRCk7XG4gICAgfVxuICB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBSZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sID0gcmVxdWlyZSgnLi9SZWFjdEludmFsaWRTZXRTdGF0ZVdhcm5pbmdEZXZUb29sJyk7XG4gICAgdmFyIFJlYWN0TmF0aXZlT3BlcmF0aW9uSGlzdG9yeURldnRvb2wgPSByZXF1aXJlKCcuL1JlYWN0TmF0aXZlT3BlcmF0aW9uSGlzdG9yeURldnRvb2wnKTtcbiAgICB2YXIgUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnRUcmVlRGV2dG9vbCcpO1xuICAgIFJlYWN0RGVidWdUb29sLmFkZERldnRvb2woUmVhY3RJbnZhbGlkU2V0U3RhdGVXYXJuaW5nRGV2VG9vbCk7XG4gICAgUmVhY3REZWJ1Z1Rvb2wuYWRkRGV2dG9vbChSZWFjdENvbXBvbmVudFRyZWVEZXZ0b29sKTtcbiAgICBSZWFjdERlYnVnVG9vbC5hZGREZXZ0b29sKFJlYWN0TmF0aXZlT3BlcmF0aW9uSGlzdG9yeURldnRvb2wpO1xuICAgIHZhciB1cmwgPSBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiYgd2luZG93LmxvY2F0aW9uLmhyZWYgfHwgJyc7XG4gICAgaWYgKC9bPyZdcmVhY3RfcGVyZlxcYi8udGVzdCh1cmwpKSB7XG4gICAgICBSZWFjdERlYnVnVG9vbC5iZWdpblByb2ZpbGluZygpO1xuICAgIH1cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IFJlYWN0RGVidWdUb29sO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xudmFyIFJlYWN0RGVidWdUb29sID0gcmVxdWlyZSgnLi9SZWFjdERlYnVnVG9vbCcpO1xubW9kdWxlLmV4cG9ydHMgPSB7ZGVidWdUb29sOiBSZWFjdERlYnVnVG9vbH07XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0gcmVxdWlyZSgnLi9SZWFjdE5vb3BVcGRhdGVRdWV1ZScpO1xuICB2YXIgUmVhY3RJbnN0cnVtZW50YXRpb24gPSByZXF1aXJlKCcuL1JlYWN0SW5zdHJ1bWVudGF0aW9uJyk7XG4gIHZhciBjYW5EZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vY2FuRGVmaW5lUHJvcGVydHknKTtcbiAgdmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgZnVuY3Rpb24gUmVhY3RDb21wb25lbnQocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xuICB9XG4gIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50ID0ge307XG4gIFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uKHBhcnRpYWxTdGF0ZSwgY2FsbGJhY2spIHtcbiAgICAhKHR5cGVvZiBwYXJ0aWFsU3RhdGUgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBwYXJ0aWFsU3RhdGUgPT09ICdmdW5jdGlvbicgfHwgcGFydGlhbFN0YXRlID09IG51bGwpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ3NldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgJyArICdmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBSZWFjdEluc3RydW1lbnRhdGlvbi5kZWJ1Z1Rvb2wub25TZXRTdGF0ZSgpO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcocGFydGlhbFN0YXRlICE9IG51bGwsICdzZXRTdGF0ZSguLi4pOiBZb3UgcGFzc2VkIGFuIHVuZGVmaW5lZCBvciBudWxsIHN0YXRlIG9iamVjdDsgJyArICdpbnN0ZWFkLCB1c2UgZm9yY2VVcGRhdGUoKS4nKSA6IHZvaWQgMDtcbiAgICB9XG4gICAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVDYWxsYmFjayh0aGlzLCBjYWxsYmFjaywgJ3NldFN0YXRlJyk7XG4gICAgfVxuICB9O1xuICBSZWFjdENvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyk7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUNhbGxiYWNrKHRoaXMsIGNhbGxiYWNrLCAnZm9yY2VVcGRhdGUnKTtcbiAgICB9XG4gIH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGRlcHJlY2F0ZWRBUElzID0ge1xuICAgICAgaXNNb3VudGVkOiBbJ2lzTW91bnRlZCcsICdJbnN0ZWFkLCBtYWtlIHN1cmUgdG8gY2xlYW4gdXAgc3Vic2NyaXB0aW9ucyBhbmQgcGVuZGluZyByZXF1ZXN0cyBpbiAnICsgJ2NvbXBvbmVudFdpbGxVbm1vdW50IHRvIHByZXZlbnQgbWVtb3J5IGxlYWtzLiddLFxuICAgICAgcmVwbGFjZVN0YXRlOiBbJ3JlcGxhY2VTdGF0ZScsICdSZWZhY3RvciB5b3VyIGNvZGUgdG8gdXNlIHNldFN0YXRlIGluc3RlYWQgKHNlZSAnICsgJ2h0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzIzNikuJ11cbiAgICB9O1xuICAgIHZhciBkZWZpbmVEZXByZWNhdGlvbldhcm5pbmcgPSBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmZvKSB7XG4gICAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWN0Q29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kTmFtZSwge2dldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzKC4uLikgaXMgZGVwcmVjYXRlZCBpbiBwbGFpbiBKYXZhU2NyaXB0IFJlYWN0IGNsYXNzZXMuICVzJywgaW5mb1swXSwgaW5mb1sxXSkgOiB2b2lkIDA7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgIH19KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZvciAodmFyIGZuTmFtZSBpbiBkZXByZWNhdGVkQVBJcykge1xuICAgICAgaWYgKGRlcHJlY2F0ZWRBUElzLmhhc093blByb3BlcnR5KGZuTmFtZSkpIHtcbiAgICAgICAgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSwgZGVwcmVjYXRlZEFQSXNbZm5OYW1lXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RDb21wb25lbnQ7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICBmdW5jdGlvbiB3YXJuVERaKHB1YmxpY0luc3RhbmNlLCBjYWxsZXJOYW1lKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXMoLi4uKTogQ2FuIG9ubHkgdXBkYXRlIGEgbW91bnRlZCBvciBtb3VudGluZyBjb21wb25lbnQuICcgKyAnVGhpcyB1c3VhbGx5IG1lYW5zIHlvdSBjYWxsZWQgJXMoKSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LiAnICsgJ1RoaXMgaXMgYSBuby1vcC4gUGxlYXNlIGNoZWNrIHRoZSBjb2RlIGZvciB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNhbGxlck5hbWUsIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yICYmIHB1YmxpY0luc3RhbmNlLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICcnKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgdmFyIFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0ge1xuICAgIGlzTW91bnRlZDogZnVuY3Rpb24ocHVibGljSW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIGVucXVldWVDYWxsYmFjazogZnVuY3Rpb24ocHVibGljSW5zdGFuY2UsIGNhbGxiYWNrKSB7fSxcbiAgICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgICB3YXJuVERaKHB1YmxpY0luc3RhbmNlLCAnZm9yY2VVcGRhdGUnKTtcbiAgICB9LFxuICAgIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlKSB7XG4gICAgICB3YXJuVERaKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gICAgfSxcbiAgICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUpIHtcbiAgICAgIHdhcm5URFoocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGVtcHR5T2JqZWN0ID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbi8qKlxuICogQWxsb3dzIGV4dHJhY3Rpb24gb2YgYSBtaW5pZmllZCBrZXkuIExldCdzIHRoZSBidWlsZCBzeXN0ZW0gbWluaWZ5IGtleXNcbiAqIHdpdGhvdXQgbG9zaW5nIHRoZSBhYmlsaXR5IHRvIGR5bmFtaWNhbGx5IHVzZSBrZXkgc3RyaW5ncyBhcyB2YWx1ZXNcbiAqIHRoZW1zZWx2ZXMuIFBhc3MgaW4gYW4gb2JqZWN0IHdpdGggYSBzaW5nbGUga2V5L3ZhbCBwYWlyIGFuZCBpdCB3aWxsIHJldHVyblxuICogeW91IHRoZSBzdHJpbmcga2V5IG9mIHRoYXQgc2luZ2xlIHJlY29yZC4gU3VwcG9zZSB5b3Ugd2FudCB0byBncmFiIHRoZVxuICogdmFsdWUgZm9yIGEga2V5ICdjbGFzc05hbWUnIGluc2lkZSBvZiBhbiBvYmplY3QuIEtleS92YWwgbWluaWZpY2F0aW9uIG1heVxuICogaGF2ZSBhbGlhc2VkIHRoYXQga2V5IHRvIGJlICd4YTEyJy4ga2V5T2Yoe2NsYXNzTmFtZTogbnVsbH0pIHdpbGwgcmV0dXJuXG4gKiAneGExMicgaW4gdGhhdCBjYXNlLiBSZXNvbHZlIGtleXMgeW91IHdhbnQgdG8gdXNlIG9uY2UgYXQgc3RhcnR1cCB0aW1lLCB0aGVuXG4gKiByZXVzZSB0aG9zZSByZXNvbHV0aW9ucy5cbiAqL1xudmFyIGtleU9mID0gZnVuY3Rpb24gKG9uZUtleU9iaikge1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBvbmVLZXlPYmopIHtcbiAgICBpZiAoIW9uZUtleU9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ga2V5T2Y7IiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBfYXNzaWduID0gcmVxdWlyZSgnb2JqZWN0LWFzc2lnbicpO1xuICB2YXIgUmVhY3RDb21wb25lbnQgPSByZXF1aXJlKCcuL1JlYWN0Q29tcG9uZW50Jyk7XG4gIHZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9ucycpO1xuICB2YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMgPSByZXF1aXJlKCcuL1JlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzJyk7XG4gIHZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHJlcXVpcmUoJy4vUmVhY3ROb29wVXBkYXRlUXVldWUnKTtcbiAgdmFyIGVtcHR5T2JqZWN0ID0gcmVxdWlyZSgnZmJqcy9saWIvZW1wdHlPYmplY3QnKTtcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJ2ZianMvbGliL2ludmFyaWFudCcpO1xuICB2YXIga2V5TWlycm9yID0gcmVxdWlyZSgnZmJqcy9saWIva2V5TWlycm9yJyk7XG4gIHZhciBrZXlPZiA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU9mJyk7XG4gIHZhciB3YXJuaW5nID0gcmVxdWlyZSgnZmJqcy9saWIvd2FybmluZycpO1xuICB2YXIgTUlYSU5TX0tFWSA9IGtleU9mKHttaXhpbnM6IG51bGx9KTtcbiAgdmFyIFNwZWNQb2xpY3kgPSBrZXlNaXJyb3Ioe1xuICAgIERFRklORV9PTkNFOiBudWxsLFxuICAgIERFRklORV9NQU5ZOiBudWxsLFxuICAgIE9WRVJSSURFX0JBU0U6IG51bGwsXG4gICAgREVGSU5FX01BTllfTUVSR0VEOiBudWxsXG4gIH0pO1xuICB2YXIgaW5qZWN0ZWRNaXhpbnMgPSBbXTtcbiAgdmFyIFJlYWN0Q2xhc3NJbnRlcmZhY2UgPSB7XG4gICAgbWl4aW5zOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIHN0YXRpY3M6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgcHJvcFR5cGVzOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIGNvbnRleHRUeXBlczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcbiAgICBjaGlsZENvbnRleHRUeXBlczogU3BlY1BvbGljeS5ERUZJTkVfTUFOWSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IFNwZWNQb2xpY3kuREVGSU5FX01BTllfTUVSR0VELFxuICAgIGdldEluaXRpYWxTdGF0ZTogU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQsXG4gICAgZ2V0Q2hpbGRDb250ZXh0OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZX01FUkdFRCxcbiAgICByZW5kZXI6IFNwZWNQb2xpY3kuREVGSU5FX09OQ0UsXG4gICAgY29tcG9uZW50V2lsbE1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIGNvbXBvbmVudERpZE1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHM6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9PTkNFLFxuICAgIGNvbXBvbmVudFdpbGxVcGRhdGU6IFNwZWNQb2xpY3kuREVGSU5FX01BTlksXG4gICAgY29tcG9uZW50RGlkVXBkYXRlOiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50OiBTcGVjUG9saWN5LkRFRklORV9NQU5ZLFxuICAgIHVwZGF0ZUNvbXBvbmVudDogU3BlY1BvbGljeS5PVkVSUklERV9CQVNFXG4gIH07XG4gIHZhciBSRVNFUlZFRF9TUEVDX0tFWVMgPSB7XG4gICAgZGlzcGxheU5hbWU6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBkaXNwbGF5TmFtZSkge1xuICAgICAgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICB9LFxuICAgIG1peGluczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIG1peGlucykge1xuICAgICAgaWYgKG1peGlucykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1peGlucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG1peFNwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBtaXhpbnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjaGlsZENvbnRleHRUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB2YWxpZGF0ZVR5cGVEZWYoQ29uc3RydWN0b3IsIGNoaWxkQ29udGV4dFR5cGVzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNoaWxkQ29udGV4dCk7XG4gICAgICB9XG4gICAgICBDb25zdHJ1Y3Rvci5jaGlsZENvbnRleHRUeXBlcyA9IF9hc3NpZ24oe30sIENvbnN0cnVjdG9yLmNoaWxkQ29udGV4dFR5cGVzLCBjaGlsZENvbnRleHRUeXBlcyk7XG4gICAgfSxcbiAgICBjb250ZXh0VHlwZXM6IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBjb250ZXh0VHlwZXMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhbGlkYXRlVHlwZURlZihDb25zdHJ1Y3RvciwgY29udGV4dFR5cGVzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzID0gX2Fzc2lnbih7fSwgQ29uc3RydWN0b3IuY29udGV4dFR5cGVzLCBjb250ZXh0VHlwZXMpO1xuICAgIH0sXG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbihDb25zdHJ1Y3RvciwgZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcywgZ2V0RGVmYXVsdFByb3BzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcyA9IGdldERlZmF1bHRQcm9wcztcbiAgICAgIH1cbiAgICB9LFxuICAgIHByb3BUeXBlczogZnVuY3Rpb24oQ29uc3RydWN0b3IsIHByb3BUeXBlcykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCBwcm9wVHlwZXMsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbnMucHJvcCk7XG4gICAgICB9XG4gICAgICBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMgPSBfYXNzaWduKHt9LCBDb25zdHJ1Y3Rvci5wcm9wVHlwZXMsIHByb3BUeXBlcyk7XG4gICAgfSxcbiAgICBzdGF0aWNzOiBmdW5jdGlvbihDb25zdHJ1Y3Rvciwgc3RhdGljcykge1xuICAgICAgbWl4U3RhdGljU3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHN0YXRpY3MpO1xuICAgIH0sXG4gICAgYXV0b2JpbmQ6IGZ1bmN0aW9uKCkge31cbiAgfTtcbiAgZnVuY3Rpb24gdmFsaWRhdGVUeXBlRGVmKENvbnN0cnVjdG9yLCB0eXBlRGVmLCBsb2NhdGlvbikge1xuICAgIGZvciAodmFyIHByb3BOYW1lIGluIHR5cGVEZWYpIHtcbiAgICAgIGlmICh0eXBlRGVmLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0eXBlb2YgdHlwZURlZltwcm9wTmFtZV0gPT09ICdmdW5jdGlvbicsICclczogJXMgdHlwZSBgJXNgIGlzIGludmFsaWQ7IGl0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tICcgKyAnUmVhY3QuUHJvcFR5cGVzLicsIENvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8ICdSZWFjdENsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCBwcm9wTmFtZSkgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHZhbGlkYXRlTWV0aG9kT3ZlcnJpZGUoaXNBbHJlYWR5RGVmaW5lZCwgbmFtZSkge1xuICAgIHZhciBzcGVjUG9saWN5ID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV0gOiBudWxsO1xuICAgIGlmIChSZWFjdENsYXNzTWl4aW4uaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICEoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5PVkVSUklERV9CQVNFKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdSZWFjdENsYXNzSW50ZXJmYWNlOiBZb3UgYXJlIGF0dGVtcHRpbmcgdG8gb3ZlcnJpZGUgJyArICdgJXNgIGZyb20geW91ciBjbGFzcyBzcGVjaWZpY2F0aW9uLiBFbnN1cmUgdGhhdCB5b3VyIG1ldGhvZCBuYW1lcyAnICsgJ2RvIG5vdCBvdmVybGFwIHdpdGggUmVhY3QgbWV0aG9kcy4nLCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgfVxuICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAhKHNwZWNQb2xpY3kgPT09IFNwZWNQb2xpY3kuREVGSU5FX01BTlkgfHwgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3NJbnRlcmZhY2U6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArICdgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSBkdWUgJyArICd0byBhIG1peGluLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWl4U3BlY0ludG9Db21wb25lbnQoQ29uc3RydWN0b3IsIHNwZWMpIHtcbiAgICBpZiAoIXNwZWMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgISh0eXBlb2Ygc3BlYyAhPT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91XFwncmUgYXR0ZW1wdGluZyB0byAnICsgJ3VzZSBhIGNvbXBvbmVudCBjbGFzcyBvciBmdW5jdGlvbiBhcyBhIG1peGluLiBJbnN0ZWFkLCBqdXN0IHVzZSBhICcgKyAncmVndWxhciBvYmplY3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICEhUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHNwZWMpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdVxcJ3JlIGF0dGVtcHRpbmcgdG8gJyArICd1c2UgYSBjb21wb25lbnQgYXMgYSBtaXhpbi4gSW5zdGVhZCwganVzdCB1c2UgYSByZWd1bGFyIG9iamVjdC4nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIHByb3RvID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIHZhciBhdXRvQmluZFBhaXJzID0gcHJvdG8uX19yZWFjdEF1dG9CaW5kUGFpcnM7XG4gICAgaWYgKHNwZWMuaGFzT3duUHJvcGVydHkoTUlYSU5TX0tFWSkpIHtcbiAgICAgIFJFU0VSVkVEX1NQRUNfS0VZUy5taXhpbnMoQ29uc3RydWN0b3IsIHNwZWMubWl4aW5zKTtcbiAgICB9XG4gICAgZm9yICh2YXIgbmFtZSBpbiBzcGVjKSB7XG4gICAgICBpZiAoIXNwZWMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PT0gTUlYSU5TX0tFWSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wZXJ0eSA9IHNwZWNbbmFtZV07XG4gICAgICB2YXIgaXNBbHJlYWR5RGVmaW5lZCA9IHByb3RvLmhhc093blByb3BlcnR5KG5hbWUpO1xuICAgICAgdmFsaWRhdGVNZXRob2RPdmVycmlkZShpc0FscmVhZHlEZWZpbmVkLCBuYW1lKTtcbiAgICAgIGlmIChSRVNFUlZFRF9TUEVDX0tFWVMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgUkVTRVJWRURfU1BFQ19LRVlTW25hbWVdKENvbnN0cnVjdG9yLCBwcm9wZXJ0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaXNSZWFjdENsYXNzTWV0aG9kID0gUmVhY3RDbGFzc0ludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbic7XG4gICAgICAgIHZhciBzaG91bGRBdXRvQmluZCA9IGlzRnVuY3Rpb24gJiYgIWlzUmVhY3RDbGFzc01ldGhvZCAmJiAhaXNBbHJlYWR5RGVmaW5lZCAmJiBzcGVjLmF1dG9iaW5kICE9PSBmYWxzZTtcbiAgICAgICAgaWYgKHNob3VsZEF1dG9CaW5kKSB7XG4gICAgICAgICAgYXV0b0JpbmRQYWlycy5wdXNoKG5hbWUsIHByb3BlcnR5KTtcbiAgICAgICAgICBwcm90b1tuYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpc0FscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgc3BlY1BvbGljeSA9IFJlYWN0Q2xhc3NJbnRlcmZhY2VbbmFtZV07XG4gICAgICAgICAgICAhKGlzUmVhY3RDbGFzc01ldGhvZCAmJiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQgfHwgc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFVuZXhwZWN0ZWQgc3BlYyBwb2xpY3kgJXMgZm9yIGtleSAlcyAnICsgJ3doZW4gbWl4aW5nIGluIGNvbXBvbmVudCBzcGVjcy4nLCBzcGVjUG9saWN5LCBuYW1lKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICAgICAgICBpZiAoc3BlY1BvbGljeSA9PT0gU3BlY1BvbGljeS5ERUZJTkVfTUFOWV9NRVJHRUQpIHtcbiAgICAgICAgICAgICAgcHJvdG9bbmFtZV0gPSBjcmVhdGVNZXJnZWRSZXN1bHRGdW5jdGlvbihwcm90b1tuYW1lXSwgcHJvcGVydHkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzcGVjUG9saWN5ID09PSBTcGVjUG9saWN5LkRFRklORV9NQU5ZKSB7XG4gICAgICAgICAgICAgIHByb3RvW25hbWVdID0gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKHByb3RvW25hbWVdLCBwcm9wZXJ0eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3RvW25hbWVdID0gcHJvcGVydHk7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5ID09PSAnZnVuY3Rpb24nICYmIHNwZWMuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICAgICAgICBwcm90b1tuYW1lXS5kaXNwbGF5TmFtZSA9IHNwZWMuZGlzcGxheU5hbWUgKyAnXycgKyBuYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1peFN0YXRpY1NwZWNJbnRvQ29tcG9uZW50KENvbnN0cnVjdG9yLCBzdGF0aWNzKSB7XG4gICAgaWYgKCFzdGF0aWNzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAodmFyIG5hbWUgaW4gc3RhdGljcykge1xuICAgICAgdmFyIHByb3BlcnR5ID0gc3RhdGljc1tuYW1lXTtcbiAgICAgIGlmICghc3RhdGljcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpc1Jlc2VydmVkID0gbmFtZSBpbiBSRVNFUlZFRF9TUEVDX0tFWVM7XG4gICAgICAhIWlzUmVzZXJ2ZWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnUmVhY3RDbGFzczogWW91IGFyZSBhdHRlbXB0aW5nIHRvIGRlZmluZSBhIHJlc2VydmVkICcgKyAncHJvcGVydHksIGAlc2AsIHRoYXQgc2hvdWxkblxcJ3QgYmUgb24gdGhlIFwic3RhdGljc1wiIGtleS4gRGVmaW5lIGl0ICcgKyAnYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgaW5zdGVhZDsgaXQgd2lsbCBzdGlsbCBiZSBhY2Nlc3NpYmxlIG9uIHRoZSAnICsgJ2NvbnN0cnVjdG9yLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBpc0luaGVyaXRlZCA9IG5hbWUgaW4gQ29uc3RydWN0b3I7XG4gICAgICAhIWlzSW5oZXJpdGVkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ1JlYWN0Q2xhc3M6IFlvdSBhcmUgYXR0ZW1wdGluZyB0byBkZWZpbmUgJyArICdgJXNgIG9uIHlvdXIgY29tcG9uZW50IG1vcmUgdGhhbiBvbmNlLiBUaGlzIGNvbmZsaWN0IG1heSBiZSAnICsgJ2R1ZSB0byBhIG1peGluLicsIG5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIENvbnN0cnVjdG9yW25hbWVdID0gcHJvcGVydHk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMob25lLCB0d28pIHtcbiAgICAhKG9uZSAmJiB0d28gJiYgdHlwZW9mIG9uZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR3byA9PT0gJ29iamVjdCcpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ21lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoKTogQ2Fubm90IG1lcmdlIG5vbi1vYmplY3RzLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBmb3IgKHZhciBrZXkgaW4gdHdvKSB7XG4gICAgICBpZiAodHdvLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgIShvbmVba2V5XSA9PT0gdW5kZWZpbmVkKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKCk6ICcgKyAnVHJpZWQgdG8gbWVyZ2UgdHdvIG9iamVjdHMgd2l0aCB0aGUgc2FtZSBrZXk6IGAlc2AuIFRoaXMgY29uZmxpY3QgJyArICdtYXkgYmUgZHVlIHRvIGEgbWl4aW47IGluIHBhcnRpY3VsYXIsIHRoaXMgbWF5IGJlIGNhdXNlZCBieSB0d28gJyArICdnZXRJbml0aWFsU3RhdGUoKSBvciBnZXREZWZhdWx0UHJvcHMoKSBtZXRob2RzIHJldHVybmluZyBvYmplY3RzICcgKyAnd2l0aCBjbGFzaGluZyBrZXlzLicsIGtleSkgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICBvbmVba2V5XSA9IHR3b1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb25lO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU1lcmdlZFJlc3VsdEZ1bmN0aW9uKG9uZSwgdHdvKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZFJlc3VsdCgpIHtcbiAgICAgIHZhciBhID0gb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB2YXIgYiA9IHR3by5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKGEgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH0gZWxzZSBpZiAoYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfVxuICAgICAgdmFyIGMgPSB7fTtcbiAgICAgIG1lcmdlSW50b1dpdGhOb0R1cGxpY2F0ZUtleXMoYywgYSk7XG4gICAgICBtZXJnZUludG9XaXRoTm9EdXBsaWNhdGVLZXlzKGMsIGIpO1xuICAgICAgcmV0dXJuIGM7XG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVDaGFpbmVkRnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gY2hhaW5lZEZ1bmN0aW9uKCkge1xuICAgICAgb25lLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB0d28uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGJpbmRBdXRvQmluZE1ldGhvZChjb21wb25lbnQsIG1ldGhvZCkge1xuICAgIHZhciBib3VuZE1ldGhvZCA9IG1ldGhvZC5iaW5kKGNvbXBvbmVudCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZENvbnRleHQgPSBjb21wb25lbnQ7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRNZXRob2QgPSBtZXRob2Q7XG4gICAgICBib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBudWxsO1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQuY29uc3RydWN0b3IuZGlzcGxheU5hbWU7XG4gICAgICB2YXIgX2JpbmQgPSBib3VuZE1ldGhvZC5iaW5kO1xuICAgICAgYm91bmRNZXRob2QuYmluZCA9IGZ1bmN0aW9uKG5ld1RoaXMpIHtcbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICAgICAgICBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLFxuICAgICAgICAgICAgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3VGhpcyAhPT0gY29tcG9uZW50ICYmIG5ld1RoaXMgIT09IG51bGwpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2JpbmQoKTogUmVhY3QgY29tcG9uZW50IG1ldGhvZHMgbWF5IG9ubHkgYmUgYm91bmQgdG8gdGhlICcgKyAnY29tcG9uZW50IGluc3RhbmNlLiBTZWUgJXMnLCBjb21wb25lbnROYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgfSBlbHNlIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJ2JpbmQoKTogWW91IGFyZSBiaW5kaW5nIGEgY29tcG9uZW50IG1ldGhvZCB0byB0aGUgY29tcG9uZW50LiAnICsgJ1JlYWN0IGRvZXMgdGhpcyBmb3IgeW91IGF1dG9tYXRpY2FsbHkgaW4gYSBoaWdoLXBlcmZvcm1hbmNlICcgKyAnd2F5LCBzbyB5b3UgY2FuIHNhZmVseSByZW1vdmUgdGhpcyBjYWxsLiBTZWUgJXMnLCBjb21wb25lbnROYW1lKSA6IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4gYm91bmRNZXRob2Q7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlYm91bmRNZXRob2QgPSBfYmluZC5hcHBseShib3VuZE1ldGhvZCwgYXJndW1lbnRzKTtcbiAgICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRDb250ZXh0ID0gY29tcG9uZW50O1xuICAgICAgICByZWJvdW5kTWV0aG9kLl9fcmVhY3RCb3VuZE1ldGhvZCA9IG1ldGhvZDtcbiAgICAgICAgcmVib3VuZE1ldGhvZC5fX3JlYWN0Qm91bmRBcmd1bWVudHMgPSBhcmdzO1xuICAgICAgICByZXR1cm4gcmVib3VuZE1ldGhvZDtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBib3VuZE1ldGhvZDtcbiAgfVxuICBmdW5jdGlvbiBiaW5kQXV0b0JpbmRNZXRob2RzKGNvbXBvbmVudCkge1xuICAgIHZhciBwYWlycyA9IGNvbXBvbmVudC5fX3JlYWN0QXV0b0JpbmRQYWlycztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICB2YXIgYXV0b0JpbmRLZXkgPSBwYWlyc1tpXTtcbiAgICAgIHZhciBtZXRob2QgPSBwYWlyc1tpICsgMV07XG4gICAgICBjb21wb25lbnRbYXV0b0JpbmRLZXldID0gYmluZEF1dG9CaW5kTWV0aG9kKGNvbXBvbmVudCwgbWV0aG9kKTtcbiAgICB9XG4gIH1cbiAgdmFyIFJlYWN0Q2xhc3NNaXhpbiA9IHtcbiAgICByZXBsYWNlU3RhdGU6IGZ1bmN0aW9uKG5ld1N0YXRlLCBjYWxsYmFjaykge1xuICAgICAgdGhpcy51cGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUodGhpcywgbmV3U3RhdGUpO1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlci5lbnF1ZXVlQ2FsbGJhY2sodGhpcywgY2FsbGJhY2ssICdyZXBsYWNlU3RhdGUnKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzTW91bnRlZDogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy51cGRhdGVyLmlzTW91bnRlZCh0aGlzKTtcbiAgICB9XG4gIH07XG4gIHZhciBSZWFjdENsYXNzQ29tcG9uZW50ID0gZnVuY3Rpb24oKSB7fTtcbiAgX2Fzc2lnbihSZWFjdENsYXNzQ29tcG9uZW50LnByb3RvdHlwZSwgUmVhY3RDb21wb25lbnQucHJvdG90eXBlLCBSZWFjdENsYXNzTWl4aW4pO1xuICB2YXIgUmVhY3RDbGFzcyA9IHtcbiAgICBjcmVhdGVDbGFzczogZnVuY3Rpb24oc3BlYykge1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gZnVuY3Rpb24ocHJvcHMsIGNvbnRleHQsIHVwZGF0ZXIpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh0aGlzIGluc3RhbmNlb2YgQ29uc3RydWN0b3IsICdTb21ldGhpbmcgaXMgY2FsbGluZyBhIFJlYWN0IGNvbXBvbmVudCBkaXJlY3RseS4gVXNlIGEgZmFjdG9yeSBvciAnICsgJ0pTWCBpbnN0ZWFkLiBTZWU6IGh0dHBzOi8vZmIubWUvcmVhY3QtbGVnYWN5ZmFjdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9fcmVhY3RBdXRvQmluZFBhaXJzLmxlbmd0aCkge1xuICAgICAgICAgIGJpbmRBdXRvQmluZE1ldGhvZHModGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLnJlZnMgPSBlbXB0eU9iamVjdDtcbiAgICAgICAgdGhpcy51cGRhdGVyID0gdXBkYXRlciB8fCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gICAgICAgIHZhciBpbml0aWFsU3RhdGUgPSB0aGlzLmdldEluaXRpYWxTdGF0ZSA/IHRoaXMuZ2V0SW5pdGlhbFN0YXRlKCkgOiBudWxsO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmIChpbml0aWFsU3RhdGUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLmdldEluaXRpYWxTdGF0ZS5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgICEodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoaW5pdGlhbFN0YXRlKSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXMuZ2V0SW5pdGlhbFN0YXRlKCk6IG11c3QgcmV0dXJuIGFuIG9iamVjdCBvciBudWxsJywgQ29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgJ1JlYWN0Q29tcG9zaXRlQ29tcG9uZW50JykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgICB0aGlzLnN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgICAgfTtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IG5ldyBSZWFjdENsYXNzQ29tcG9uZW50KCk7XG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZS5fX3JlYWN0QXV0b0JpbmRQYWlycyA9IFtdO1xuICAgICAgaW5qZWN0ZWRNaXhpbnMuZm9yRWFjaChtaXhTcGVjSW50b0NvbXBvbmVudC5iaW5kKG51bGwsIENvbnN0cnVjdG9yKSk7XG4gICAgICBtaXhTcGVjSW50b0NvbXBvbmVudChDb25zdHJ1Y3Rvciwgc3BlYyk7XG4gICAgICBpZiAoQ29uc3RydWN0b3IuZ2V0RGVmYXVsdFByb3BzKSB7XG4gICAgICAgIENvbnN0cnVjdG9yLmRlZmF1bHRQcm9wcyA9IENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcygpO1xuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcykge1xuICAgICAgICAgIENvbnN0cnVjdG9yLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChDb25zdHJ1Y3Rvci5wcm90b3R5cGUuZ2V0SW5pdGlhbFN0YXRlKSB7XG4gICAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlLmdldEluaXRpYWxTdGF0ZS5pc1JlYWN0Q2xhc3NBcHByb3ZlZCA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAhQ29uc3RydWN0b3IucHJvdG90eXBlLnJlbmRlciA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdjcmVhdGVDbGFzcyguLi4pOiBDbGFzcyBzcGVjaWZpY2F0aW9uIG11c3QgaW1wbGVtZW50IGEgYHJlbmRlcmAgbWV0aG9kLicpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKCFDb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29tcG9uZW50U2hvdWxkVXBkYXRlLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFNob3VsZFVwZGF0ZSgpLiBEaWQgeW91IG1lYW4gc2hvdWxkQ29tcG9uZW50VXBkYXRlKCk/ICcgKyAnVGhlIG5hbWUgaXMgcGhyYXNlZCBhcyBhIHF1ZXN0aW9uIGJlY2F1c2UgdGhlIGZ1bmN0aW9uIGlzICcgKyAnZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUuJywgc3BlYy5kaXNwbGF5TmFtZSB8fCAnQSBjb21wb25lbnQnKSA6IHZvaWQgMDtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoIUNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzLCAnJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMoKS4gRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKT8nLCBzcGVjLmRpc3BsYXlOYW1lIHx8ICdBIGNvbXBvbmVudCcpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgbWV0aG9kTmFtZSBpbiBSZWFjdENsYXNzSW50ZXJmYWNlKSB7XG4gICAgICAgIGlmICghQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdKSB7XG4gICAgICAgICAgQ29uc3RydWN0b3IucHJvdG90eXBlW21ldGhvZE5hbWVdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIH0sXG4gICAgaW5qZWN0aW9uOiB7aW5qZWN0TWl4aW46IGZ1bmN0aW9uKG1peGluKSB7XG4gICAgICAgIGluamVjdGVkTWl4aW5zLnB1c2gobWl4aW4pO1xuICAgICAgfX1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdENsYXNzO1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEV4ZWN1dGVzIHRoZSBwcm92aWRlZCBgY2FsbGJhY2tgIG9uY2UgZm9yIGVhY2ggZW51bWVyYWJsZSBvd24gcHJvcGVydHkgaW4gdGhlXG4gKiBvYmplY3QgYW5kIGNvbnN0cnVjdHMgYSBuZXcgb2JqZWN0IGZyb20gdGhlIHJlc3VsdHMuIFRoZSBgY2FsbGJhY2tgIGlzXG4gKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICpcbiAqICAtIHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICogIC0gdGhlIHByb3BlcnR5IG5hbWVcbiAqICAtIHRoZSBvYmplY3QgYmVpbmcgdHJhdmVyc2VkXG4gKlxuICogUHJvcGVydGllcyB0aGF0IGFyZSBhZGRlZCBhZnRlciB0aGUgY2FsbCB0byBgbWFwT2JqZWN0YCB3aWxsIG5vdCBiZSB2aXNpdGVkXG4gKiBieSBgY2FsbGJhY2tgLiBJZiB0aGUgdmFsdWVzIG9mIGV4aXN0aW5nIHByb3BlcnRpZXMgYXJlIGNoYW5nZWQsIHRoZSB2YWx1ZVxuICogcGFzc2VkIHRvIGBjYWxsYmFja2Agd2lsbCBiZSB0aGUgdmFsdWUgYXQgdGhlIHRpbWUgYG1hcE9iamVjdGAgdmlzaXRzIHRoZW0uXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIGRlbGV0ZWQgYmVmb3JlIGJlaW5nIHZpc2l0ZWQgYXJlIG5vdCB2aXNpdGVkLlxuICpcbiAqIEBncmVwIGZ1bmN0aW9uIG9iamVjdE1hcCgpXG4gKiBAZ3JlcCBmdW5jdGlvbiBvYmpNYXAoKVxuICpcbiAqIEBwYXJhbSB7P29iamVjdH0gb2JqZWN0XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHBhcmFtIHsqfSBjb250ZXh0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBtYXBPYmplY3Qob2JqZWN0LCBjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZm9yICh2YXIgbmFtZSBpbiBvYmplY3QpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIG5hbWUpKSB7XG4gICAgICByZXN1bHRbbmFtZV0gPSBjYWxsYmFjay5jYWxsKGNvbnRleHQsIG9iamVjdFtuYW1lXSwgbmFtZSwgb2JqZWN0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBPYmplY3Q7IiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuICB2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnRWYWxpZGF0b3InKTtcbiAgdmFyIG1hcE9iamVjdCA9IHJlcXVpcmUoJ2ZianMvbGliL21hcE9iamVjdCcpO1xuICBmdW5jdGlvbiBjcmVhdGVET01GYWN0b3J5KHRhZykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICByZXR1cm4gUmVhY3RFbGVtZW50VmFsaWRhdG9yLmNyZWF0ZUZhY3RvcnkodGFnKTtcbiAgICB9XG4gICAgcmV0dXJuIFJlYWN0RWxlbWVudC5jcmVhdGVGYWN0b3J5KHRhZyk7XG4gIH1cbiAgdmFyIFJlYWN0RE9NRmFjdG9yaWVzID0gbWFwT2JqZWN0KHtcbiAgICBhOiAnYScsXG4gICAgYWJicjogJ2FiYnInLFxuICAgIGFkZHJlc3M6ICdhZGRyZXNzJyxcbiAgICBhcmVhOiAnYXJlYScsXG4gICAgYXJ0aWNsZTogJ2FydGljbGUnLFxuICAgIGFzaWRlOiAnYXNpZGUnLFxuICAgIGF1ZGlvOiAnYXVkaW8nLFxuICAgIGI6ICdiJyxcbiAgICBiYXNlOiAnYmFzZScsXG4gICAgYmRpOiAnYmRpJyxcbiAgICBiZG86ICdiZG8nLFxuICAgIGJpZzogJ2JpZycsXG4gICAgYmxvY2txdW90ZTogJ2Jsb2NrcXVvdGUnLFxuICAgIGJvZHk6ICdib2R5JyxcbiAgICBicjogJ2JyJyxcbiAgICBidXR0b246ICdidXR0b24nLFxuICAgIGNhbnZhczogJ2NhbnZhcycsXG4gICAgY2FwdGlvbjogJ2NhcHRpb24nLFxuICAgIGNpdGU6ICdjaXRlJyxcbiAgICBjb2RlOiAnY29kZScsXG4gICAgY29sOiAnY29sJyxcbiAgICBjb2xncm91cDogJ2NvbGdyb3VwJyxcbiAgICBkYXRhOiAnZGF0YScsXG4gICAgZGF0YWxpc3Q6ICdkYXRhbGlzdCcsXG4gICAgZGQ6ICdkZCcsXG4gICAgZGVsOiAnZGVsJyxcbiAgICBkZXRhaWxzOiAnZGV0YWlscycsXG4gICAgZGZuOiAnZGZuJyxcbiAgICBkaWFsb2c6ICdkaWFsb2cnLFxuICAgIGRpdjogJ2RpdicsXG4gICAgZGw6ICdkbCcsXG4gICAgZHQ6ICdkdCcsXG4gICAgZW06ICdlbScsXG4gICAgZW1iZWQ6ICdlbWJlZCcsXG4gICAgZmllbGRzZXQ6ICdmaWVsZHNldCcsXG4gICAgZmlnY2FwdGlvbjogJ2ZpZ2NhcHRpb24nLFxuICAgIGZpZ3VyZTogJ2ZpZ3VyZScsXG4gICAgZm9vdGVyOiAnZm9vdGVyJyxcbiAgICBmb3JtOiAnZm9ybScsXG4gICAgaDE6ICdoMScsXG4gICAgaDI6ICdoMicsXG4gICAgaDM6ICdoMycsXG4gICAgaDQ6ICdoNCcsXG4gICAgaDU6ICdoNScsXG4gICAgaDY6ICdoNicsXG4gICAgaGVhZDogJ2hlYWQnLFxuICAgIGhlYWRlcjogJ2hlYWRlcicsXG4gICAgaGdyb3VwOiAnaGdyb3VwJyxcbiAgICBocjogJ2hyJyxcbiAgICBodG1sOiAnaHRtbCcsXG4gICAgaTogJ2knLFxuICAgIGlmcmFtZTogJ2lmcmFtZScsXG4gICAgaW1nOiAnaW1nJyxcbiAgICBpbnB1dDogJ2lucHV0JyxcbiAgICBpbnM6ICdpbnMnLFxuICAgIGtiZDogJ2tiZCcsXG4gICAga2V5Z2VuOiAna2V5Z2VuJyxcbiAgICBsYWJlbDogJ2xhYmVsJyxcbiAgICBsZWdlbmQ6ICdsZWdlbmQnLFxuICAgIGxpOiAnbGknLFxuICAgIGxpbms6ICdsaW5rJyxcbiAgICBtYWluOiAnbWFpbicsXG4gICAgbWFwOiAnbWFwJyxcbiAgICBtYXJrOiAnbWFyaycsXG4gICAgbWVudTogJ21lbnUnLFxuICAgIG1lbnVpdGVtOiAnbWVudWl0ZW0nLFxuICAgIG1ldGE6ICdtZXRhJyxcbiAgICBtZXRlcjogJ21ldGVyJyxcbiAgICBuYXY6ICduYXYnLFxuICAgIG5vc2NyaXB0OiAnbm9zY3JpcHQnLFxuICAgIG9iamVjdDogJ29iamVjdCcsXG4gICAgb2w6ICdvbCcsXG4gICAgb3B0Z3JvdXA6ICdvcHRncm91cCcsXG4gICAgb3B0aW9uOiAnb3B0aW9uJyxcbiAgICBvdXRwdXQ6ICdvdXRwdXQnLFxuICAgIHA6ICdwJyxcbiAgICBwYXJhbTogJ3BhcmFtJyxcbiAgICBwaWN0dXJlOiAncGljdHVyZScsXG4gICAgcHJlOiAncHJlJyxcbiAgICBwcm9ncmVzczogJ3Byb2dyZXNzJyxcbiAgICBxOiAncScsXG4gICAgcnA6ICdycCcsXG4gICAgcnQ6ICdydCcsXG4gICAgcnVieTogJ3J1YnknLFxuICAgIHM6ICdzJyxcbiAgICBzYW1wOiAnc2FtcCcsXG4gICAgc2NyaXB0OiAnc2NyaXB0JyxcbiAgICBzZWN0aW9uOiAnc2VjdGlvbicsXG4gICAgc2VsZWN0OiAnc2VsZWN0JyxcbiAgICBzbWFsbDogJ3NtYWxsJyxcbiAgICBzb3VyY2U6ICdzb3VyY2UnLFxuICAgIHNwYW46ICdzcGFuJyxcbiAgICBzdHJvbmc6ICdzdHJvbmcnLFxuICAgIHN0eWxlOiAnc3R5bGUnLFxuICAgIHN1YjogJ3N1YicsXG4gICAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICAgIHN1cDogJ3N1cCcsXG4gICAgdGFibGU6ICd0YWJsZScsXG4gICAgdGJvZHk6ICd0Ym9keScsXG4gICAgdGQ6ICd0ZCcsXG4gICAgdGV4dGFyZWE6ICd0ZXh0YXJlYScsXG4gICAgdGZvb3Q6ICd0Zm9vdCcsXG4gICAgdGg6ICd0aCcsXG4gICAgdGhlYWQ6ICd0aGVhZCcsXG4gICAgdGltZTogJ3RpbWUnLFxuICAgIHRpdGxlOiAndGl0bGUnLFxuICAgIHRyOiAndHInLFxuICAgIHRyYWNrOiAndHJhY2snLFxuICAgIHU6ICd1JyxcbiAgICB1bDogJ3VsJyxcbiAgICAndmFyJzogJ3ZhcicsXG4gICAgdmlkZW86ICd2aWRlbycsXG4gICAgd2JyOiAnd2JyJyxcbiAgICBjaXJjbGU6ICdjaXJjbGUnLFxuICAgIGNsaXBQYXRoOiAnY2xpcFBhdGgnLFxuICAgIGRlZnM6ICdkZWZzJyxcbiAgICBlbGxpcHNlOiAnZWxsaXBzZScsXG4gICAgZzogJ2cnLFxuICAgIGltYWdlOiAnaW1hZ2UnLFxuICAgIGxpbmU6ICdsaW5lJyxcbiAgICBsaW5lYXJHcmFkaWVudDogJ2xpbmVhckdyYWRpZW50JyxcbiAgICBtYXNrOiAnbWFzaycsXG4gICAgcGF0aDogJ3BhdGgnLFxuICAgIHBhdHRlcm46ICdwYXR0ZXJuJyxcbiAgICBwb2x5Z29uOiAncG9seWdvbicsXG4gICAgcG9seWxpbmU6ICdwb2x5bGluZScsXG4gICAgcmFkaWFsR3JhZGllbnQ6ICdyYWRpYWxHcmFkaWVudCcsXG4gICAgcmVjdDogJ3JlY3QnLFxuICAgIHN0b3A6ICdzdG9wJyxcbiAgICBzdmc6ICdzdmcnLFxuICAgIHRleHQ6ICd0ZXh0JyxcbiAgICB0c3BhbjogJ3RzcGFuJ1xuICB9LCBjcmVhdGVET01GYWN0b3J5KTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTUZhY3Rvcmllcztcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGludmFyaWFudCA9IHJlcXVpcmUoJy4vaW52YXJpYW50Jyk7XG4gIHZhciBrZXlNaXJyb3IgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgcmV0ID0ge307XG4gICAgdmFyIGtleTtcbiAgICAhKG9iaiBpbnN0YW5jZW9mIE9iamVjdCAmJiAhQXJyYXkuaXNBcnJheShvYmopKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBpbnZhcmlhbnQoZmFsc2UsICdrZXlNaXJyb3IoLi4uKTogQXJndW1lbnQgbXVzdCBiZSBhbiBvYmplY3QuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGZvciAoa2V5IGluIG9iaikge1xuICAgICAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJldFtrZXldID0ga2V5O1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuICBtb2R1bGUuZXhwb3J0cyA9IGtleU1pcnJvcjtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RQcm9wVHlwZUxvY2F0aW9uc1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGtleU1pcnJvciA9IHJlcXVpcmUoJ2ZianMvbGliL2tleU1pcnJvcicpO1xuXG52YXIgUmVhY3RQcm9wVHlwZUxvY2F0aW9ucyA9IGtleU1pcnJvcih7XG4gIHByb3A6IG51bGwsXG4gIGNvbnRleHQ6IG51bGwsXG4gIGNoaWxkQ29udGV4dDogbnVsbFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uczsiLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIFJlYWN0RWxlbWVudCA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50Jyk7XG4gIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25zID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25zJyk7XG4gIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXMnKTtcbiAgdmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xuICB2YXIgY2FuRGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL2NhbkRlZmluZVByb3BlcnR5Jyk7XG4gIHZhciBnZXRJdGVyYXRvckZuID0gcmVxdWlyZSgnLi9nZXRJdGVyYXRvckZuJyk7XG4gIHZhciBpbnZhcmlhbnQgPSByZXF1aXJlKCdmYmpzL2xpYi9pbnZhcmlhbnQnKTtcbiAgdmFyIHdhcm5pbmcgPSByZXF1aXJlKCdmYmpzL2xpYi93YXJuaW5nJyk7XG4gIGZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpIHtcbiAgICBpZiAoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCkge1xuICAgICAgdmFyIG5hbWUgPSBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LmdldE5hbWUoKTtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHJldHVybiAnIENoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfVxuICB2YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG4gIHZhciBsb2dnZWRUeXBlRmFpbHVyZXMgPSB7fTtcbiAgZnVuY3Rpb24gdmFsaWRhdGVFeHBsaWNpdEtleShlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gICAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIHZhciBhZGRlbmRhID0gZ2V0QWRkZW5kYUZvcktleVVzZSgndW5pcXVlS2V5JywgZWxlbWVudCwgcGFyZW50VHlwZSk7XG4gICAgaWYgKGFkZGVuZGEgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdFYWNoIGNoaWxkIGluIGFuIGFycmF5IG9yIGl0ZXJhdG9yIHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4nICsgJyVzJXMlcycsIGFkZGVuZGEucGFyZW50T3JPd25lciB8fCAnJywgYWRkZW5kYS5jaGlsZE93bmVyIHx8ICcnLCBhZGRlbmRhLnVybCB8fCAnJykgOiB2b2lkIDA7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0QWRkZW5kYUZvcktleVVzZShtZXNzYWdlVHlwZSwgZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgIGlmICghYWRkZW5kdW0pIHtcbiAgICAgIHZhciBwYXJlbnROYW1lID0gdHlwZW9mIHBhcmVudFR5cGUgPT09ICdzdHJpbmcnID8gcGFyZW50VHlwZSA6IHBhcmVudFR5cGUuZGlzcGxheU5hbWUgfHwgcGFyZW50VHlwZS5uYW1lO1xuICAgICAgaWYgKHBhcmVudE5hbWUpIHtcbiAgICAgICAgYWRkZW5kdW0gPSAnIENoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPCcgKyBwYXJlbnROYW1lICsgJz4uJztcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIG1lbW9pemVyID0gb3duZXJIYXNLZXlVc2VXYXJuaW5nW21lc3NhZ2VUeXBlXSB8fCAob3duZXJIYXNLZXlVc2VXYXJuaW5nW21lc3NhZ2VUeXBlXSA9IHt9KTtcbiAgICBpZiAobWVtb2l6ZXJbYWRkZW5kdW1dKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbWVtb2l6ZXJbYWRkZW5kdW1dID0gdHJ1ZTtcbiAgICB2YXIgYWRkZW5kYSA9IHtcbiAgICAgIHBhcmVudE9yT3duZXI6IGFkZGVuZHVtLFxuICAgICAgdXJsOiAnIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLFxuICAgICAgY2hpbGRPd25lcjogbnVsbFxuICAgIH07XG4gICAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5fb3duZXIgJiYgZWxlbWVudC5fb3duZXIgIT09IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAgIGFkZGVuZGEuY2hpbGRPd25lciA9ICcgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gJyArIGVsZW1lbnQuX293bmVyLmdldE5hbWUoKSArICcuJztcbiAgICB9XG4gICAgcmV0dXJuIGFkZGVuZGE7XG4gIH1cbiAgZnVuY3Rpb24gdmFsaWRhdGVDaGlsZEtleXMobm9kZSwgcGFyZW50VHlwZSkge1xuICAgIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuICAgICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQobm9kZSkpIHtcbiAgICAgIGlmIChub2RlLl9zdG9yZSkge1xuICAgICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5vZGUpO1xuICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IG5vZGUuZW50cmllcykge1xuICAgICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChub2RlKTtcbiAgICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICBpZiAoUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNoZWNrUHJvcFR5cGVzKGNvbXBvbmVudE5hbWUsIHByb3BUeXBlcywgcHJvcHMsIGxvY2F0aW9uKSB7XG4gICAgZm9yICh2YXIgcHJvcE5hbWUgaW4gcHJvcFR5cGVzKSB7XG4gICAgICBpZiAocHJvcFR5cGVzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3I7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgISh0eXBlb2YgcHJvcFR5cGVzW3Byb3BOYW1lXSA9PT0gJ2Z1bmN0aW9uJykgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gaW52YXJpYW50KGZhbHNlLCAnJXM6ICVzIHR5cGUgYCVzYCBpcyBpbnZhbGlkOyBpdCBtdXN0IGJlIGEgZnVuY3Rpb24sIHVzdWFsbHkgZnJvbSAnICsgJ1JlYWN0LlByb3BUeXBlcy4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXSwgcHJvcE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgICAgICBlcnJvciA9IHByb3BUeXBlc1twcm9wTmFtZV0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbik7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IgPSBleDtcbiAgICAgICAgfVxuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyghZXJyb3IgfHwgZXJyb3IgaW5zdGFuY2VvZiBFcnJvciwgJyVzOiB0eXBlIHNwZWNpZmljYXRpb24gb2YgJXMgYCVzYCBpcyBpbnZhbGlkOyB0aGUgdHlwZSBjaGVja2VyICcgKyAnZnVuY3Rpb24gbXVzdCByZXR1cm4gYG51bGxgIG9yIGFuIGBFcnJvcmAgYnV0IHJldHVybmVkIGEgJXMuICcgKyAnWW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBwYXNzIGFuIGFyZ3VtZW50IHRvIHRoZSB0eXBlIGNoZWNrZXIgJyArICdjcmVhdG9yIChhcnJheU9mLCBpbnN0YW5jZU9mLCBvYmplY3RPZiwgb25lT2YsIG9uZU9mVHlwZSwgYW5kICcgKyAnc2hhcGUgYWxsIHJlcXVpcmUgYW4gYXJndW1lbnQpLicsIGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJywgUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dLCBwcm9wTmFtZSwgdHlwZW9mIGVycm9yKSA6IHZvaWQgMDtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvci5tZXNzYWdlIGluIGxvZ2dlZFR5cGVGYWlsdXJlcykpIHtcbiAgICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IubWVzc2FnZV0gPSB0cnVlO1xuICAgICAgICAgIHZhciBhZGRlbmR1bSA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnRmFpbGVkIHByb3BUeXBlOiAlcyVzJywgZXJyb3IubWVzc2FnZSwgYWRkZW5kdW0pIDogdm9pZCAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpIHtcbiAgICB2YXIgY29tcG9uZW50Q2xhc3MgPSBlbGVtZW50LnR5cGU7XG4gICAgaWYgKHR5cGVvZiBjb21wb25lbnRDbGFzcyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgbmFtZSA9IGNvbXBvbmVudENsYXNzLmRpc3BsYXlOYW1lIHx8IGNvbXBvbmVudENsYXNzLm5hbWU7XG4gICAgaWYgKGNvbXBvbmVudENsYXNzLnByb3BUeXBlcykge1xuICAgICAgY2hlY2tQcm9wVHlwZXMobmFtZSwgY29tcG9uZW50Q2xhc3MucHJvcFR5cGVzLCBlbGVtZW50LnByb3BzLCBSZWFjdFByb3BUeXBlTG9jYXRpb25zLnByb3ApO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudENsYXNzLmdldERlZmF1bHRQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoY29tcG9uZW50Q2xhc3MuZ2V0RGVmYXVsdFByb3BzLmlzUmVhY3RDbGFzc0FwcHJvdmVkLCAnZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzICcgKyAnZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLicpIDogdm9pZCAwO1xuICAgIH1cbiAgfVxuICB2YXIgUmVhY3RFbGVtZW50VmFsaWRhdG9yID0ge1xuICAgIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKHR5cGUsIHByb3BzLCBjaGlsZHJlbikge1xuICAgICAgdmFyIHZhbGlkVHlwZSA9IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKHZhbGlkVHlwZSwgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQ6IHR5cGUgc2hvdWxkIG5vdCBiZSBudWxsLCB1bmRlZmluZWQsIGJvb2xlYW4sIG9yICcgKyAnbnVtYmVyLiBJdCBzaG91bGQgYmUgYSBzdHJpbmcgKGZvciBET00gZWxlbWVudHMpIG9yIGEgUmVhY3RDbGFzcyAnICsgJyhmb3IgY29tcG9zaXRlIGNvbXBvbmVudHMpLiVzJywgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkpIDogdm9pZCAwO1xuICAgICAgdmFyIGVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cbiAgICAgIGlmICh2YWxpZFR5cGUpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDI7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIHR5cGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH0sXG4gICAgY3JlYXRlRmFjdG9yeTogZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIHZhbGlkYXRlZEZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRWxlbWVudC5iaW5kKG51bGwsIHR5cGUpO1xuICAgICAgdmFsaWRhdGVkRmFjdG9yeS50eXBlID0gdHlwZTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWxpZGF0ZWRGYWN0b3J5LCAndHlwZScsIHtcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoZmFsc2UsICdGYWN0b3J5LnR5cGUgaXMgZGVwcmVjYXRlZC4gQWNjZXNzIHRoZSBjbGFzcyBkaXJlY3RseSAnICsgJ2JlZm9yZSBwYXNzaW5nIGl0IHRvIGNyZWF0ZUZhY3RvcnkuJykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAndHlwZScsIHt2YWx1ZTogdHlwZX0pO1xuICAgICAgICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbGlkYXRlZEZhY3Rvcnk7XG4gICAgfSxcbiAgICBjbG9uZUVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BzLCBjaGlsZHJlbikge1xuICAgICAgdmFyIG5ld0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YWxpZGF0ZUNoaWxkS2V5cyhhcmd1bWVudHNbaV0sIG5ld0VsZW1lbnQudHlwZSk7XG4gICAgICB9XG4gICAgICB2YWxpZGF0ZVByb3BUeXBlcyhuZXdFbGVtZW50KTtcbiAgICAgIHJldHVybiBuZXdFbGVtZW50O1xuICAgIH1cbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3I7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcyA9IHt9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0ge1xuICAgICAgcHJvcDogJ3Byb3AnLFxuICAgICAgY29udGV4dDogJ2NvbnRleHQnLFxuICAgICAgY2hpbGRDb250ZXh0OiAnY2hpbGQgY29udGV4dCdcbiAgICB9O1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXM7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICogQHByb3ZpZGVzTW9kdWxlIGdldEl0ZXJhdG9yRm5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBTeW1ib2wgKi9cblxudmFyIElURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InOyAvLyBCZWZvcmUgU3ltYm9sIHNwZWMuXG5cbi8qKlxuICogUmV0dXJucyB0aGUgaXRlcmF0b3IgbWV0aG9kIGZ1bmN0aW9uIGNvbnRhaW5lZCBvbiB0aGUgaXRlcmFibGUgb2JqZWN0LlxuICpcbiAqIEJlIHN1cmUgdG8gaW52b2tlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBpdGVyYWJsZSBhcyBjb250ZXh0OlxuICpcbiAqICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obXlJdGVyYWJsZSk7XG4gKiAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAqICAgICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChteUl0ZXJhYmxlKTtcbiAqICAgICAgIC4uLlxuICogICAgIH1cbiAqXG4gKiBAcGFyYW0gez9vYmplY3R9IG1heWJlSXRlcmFibGVcbiAqIEByZXR1cm4gez9mdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID0gbWF5YmVJdGVyYWJsZSAmJiAoSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXSk7XG4gIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBpdGVyYXRvckZuO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0SXRlcmF0b3JGbjsiLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xudmFyIFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzID0gcmVxdWlyZSgnLi9SZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lcycpO1xudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgZ2V0SXRlcmF0b3JGbiA9IHJlcXVpcmUoJy4vZ2V0SXRlcmF0b3JGbicpO1xudmFyIEFOT05ZTU9VUyA9ICc8PGFub255bW91cz4+JztcbnZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgYXJyYXk6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdhcnJheScpLFxuICBib29sOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignYm9vbGVhbicpLFxuICBmdW5jOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignZnVuY3Rpb24nKSxcbiAgbnVtYmVyOiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcignbnVtYmVyJyksXG4gIG9iamVjdDogY3JlYXRlUHJpbWl0aXZlVHlwZUNoZWNrZXIoJ29iamVjdCcpLFxuICBzdHJpbmc6IGNyZWF0ZVByaW1pdGl2ZVR5cGVDaGVja2VyKCdzdHJpbmcnKSxcbiAgYW55OiBjcmVhdGVBbnlUeXBlQ2hlY2tlcigpLFxuICBhcnJheU9mOiBjcmVhdGVBcnJheU9mVHlwZUNoZWNrZXIsXG4gIGVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnRUeXBlQ2hlY2tlcigpLFxuICBpbnN0YW5jZU9mOiBjcmVhdGVJbnN0YW5jZVR5cGVDaGVja2VyLFxuICBub2RlOiBjcmVhdGVOb2RlQ2hlY2tlcigpLFxuICBvYmplY3RPZjogY3JlYXRlT2JqZWN0T2ZUeXBlQ2hlY2tlcixcbiAgb25lT2Y6IGNyZWF0ZUVudW1UeXBlQ2hlY2tlcixcbiAgb25lT2ZUeXBlOiBjcmVhdGVVbmlvblR5cGVDaGVja2VyLFxuICBzaGFwZTogY3JlYXRlU2hhcGVUeXBlQ2hlY2tlclxufTtcbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuZnVuY3Rpb24gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpIHtcbiAgZnVuY3Rpb24gY2hlY2tUeXBlKGlzUmVxdWlyZWQsIHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnROYW1lIHx8IEFOT05ZTU9VUztcbiAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG4gICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PSBudWxsKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgaWYgKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcignUmVxdWlyZWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCB3YXMgbm90IHNwZWNpZmllZCBpbiAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSk7XG4gICAgfVxuICB9XG4gIHZhciBjaGFpbmVkQ2hlY2tUeXBlID0gY2hlY2tUeXBlLmJpbmQobnVsbCwgZmFsc2UpO1xuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5mdW5jdGlvbiBjcmVhdGVQcmltaXRpdmVUeXBlQ2hlY2tlcihleHBlY3RlZFR5cGUpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgdmFyIHByZWNpc2VUeXBlID0gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgcHJlY2lzZVR5cGUgKyAnYCBzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgJykgKyAoJ2AnICsgZXhwZWN0ZWRUeXBlICsgJ2AuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlQW55VHlwZUNoZWNrZXIoKSB7XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcihlbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zKG51bGwpKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5T2ZUeXBlQ2hlY2tlcih0eXBlQ2hlY2tlcikge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBpZiAodHlwZW9mIHR5cGVDaGVja2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdQcm9wZXJ0eSBgJyArIHByb3BGdWxsTmFtZSArICdgIG9mIGNvbXBvbmVudCBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCBoYXMgaW52YWxpZCBQcm9wVHlwZSBub3RhdGlvbiBpbnNpZGUgYXJyYXlPZi4nKTtcbiAgICB9XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICAgIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIGFycmF5LicpKTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wVmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlcnJvciA9IHR5cGVDaGVja2VyKHByb3BWYWx1ZSwgaSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICdbJyArIGkgKyAnXScpO1xuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudFR5cGVDaGVja2VyKCkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBpZiAoIVJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudChwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIHNpbmdsZSBSZWFjdEVsZW1lbnQuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2VUeXBlQ2hlY2tlcihleHBlY3RlZENsYXNzKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIGlmICghKHByb3BzW3Byb3BOYW1lXSBpbnN0YW5jZW9mIGV4cGVjdGVkQ2xhc3MpKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgdmFyIGV4cGVjdGVkQ2xhc3NOYW1lID0gZXhwZWN0ZWRDbGFzcy5uYW1lIHx8IEFOT05ZTU9VUztcbiAgICAgIHZhciBhY3R1YWxDbGFzc05hbWUgPSBnZXRDbGFzc05hbWUocHJvcHNbcHJvcE5hbWVdKTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB0eXBlICcgKyAoJ2AnICsgYWN0dWFsQ2xhc3NOYW1lICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkICcpICsgKCdpbnN0YW5jZSBvZiBgJyArIGV4cGVjdGVkQ2xhc3NOYW1lICsgJ2AuJykpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlRW51bVR5cGVDaGVja2VyKGV4cGVjdGVkVmFsdWVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFZhbHVlcykpIHtcbiAgICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IHN1cHBsaWVkIHRvIG9uZU9mLCBleHBlY3RlZCBhbiBpbnN0YW5jZSBvZiBhcnJheS4nKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcE5hbWVdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpcyhwcm9wVmFsdWUsIGV4cGVjdGVkVmFsdWVzW2ldKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGxvY2F0aW9uTmFtZSA9IFJlYWN0UHJvcFR5cGVMb2NhdGlvbk5hbWVzW2xvY2F0aW9uXTtcbiAgICB2YXIgdmFsdWVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZXhwZWN0ZWRWYWx1ZXMpO1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBvZiB2YWx1ZSBgJyArIHByb3BWYWx1ZSArICdgICcgKyAoJ3N1cHBsaWVkIHRvIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBvbmUgb2YgJyArIHZhbHVlc1N0cmluZyArICcuJykpO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVPYmplY3RPZlR5cGVDaGVja2VyKHR5cGVDaGVja2VyKSB7XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIGlmICh0eXBlb2YgdHlwZUNoZWNrZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ1Byb3BlcnR5IGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgY29tcG9uZW50IGAnICsgY29tcG9uZW50TmFtZSArICdgIGhhcyBpbnZhbGlkIFByb3BUeXBlIG5vdGF0aW9uIGluc2lkZSBvYmplY3RPZi4nKTtcbiAgICB9XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSAnICsgKCdgJyArIHByb3BUeXBlICsgJ2Agc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGFuIG9iamVjdC4nKSk7XG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wVmFsdWUpIHtcbiAgICAgIGlmIChwcm9wVmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB2YXIgZXJyb3IgPSB0eXBlQ2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSk7XG4gICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVVbmlvblR5cGVDaGVja2VyKGFycmF5T2ZUeXBlQ2hlY2tlcnMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5T2ZUeXBlQ2hlY2tlcnMpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCBhcmd1bWVudCBzdXBwbGllZCB0byBvbmVPZlR5cGUsIGV4cGVjdGVkIGFuIGluc3RhbmNlIG9mIGFycmF5LicpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXlPZlR5cGVDaGVja2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoZWNrZXIgPSBhcnJheU9mVHlwZUNoZWNrZXJzW2ldO1xuICAgICAgaWYgKGNoZWNrZXIocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ludmFsaWQgJyArIGxvY2F0aW9uTmFtZSArICcgYCcgKyBwcm9wRnVsbE5hbWUgKyAnYCBzdXBwbGllZCB0byAnICsgKCdgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4nKSk7XG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUNoYWluYWJsZVR5cGVDaGVja2VyKHZhbGlkYXRlKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVDaGVja2VyKCkge1xuICBmdW5jdGlvbiB2YWxpZGF0ZShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICBpZiAoIWlzTm9kZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICB2YXIgbG9jYXRpb25OYW1lID0gUmVhY3RQcm9wVHlwZUxvY2F0aW9uTmFtZXNbbG9jYXRpb25dO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcignSW52YWxpZCAnICsgbG9jYXRpb25OYW1lICsgJyBgJyArIHByb3BGdWxsTmFtZSArICdgIHN1cHBsaWVkIHRvICcgKyAoJ2AnICsgY29tcG9uZW50TmFtZSArICdgLCBleHBlY3RlZCBhIFJlYWN0Tm9kZS4nKSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBjcmVhdGVDaGFpbmFibGVUeXBlQ2hlY2tlcih2YWxpZGF0ZSk7XG59XG5mdW5jdGlvbiBjcmVhdGVTaGFwZVR5cGVDaGVja2VyKHNoYXBlVHlwZXMpIHtcbiAgZnVuY3Rpb24gdmFsaWRhdGUocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gICAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICB2YXIgcHJvcFR5cGUgPSBnZXRQcm9wVHlwZShwcm9wVmFsdWUpO1xuICAgIGlmIChwcm9wVHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBsb2NhdGlvbk5hbWUgPSBSZWFjdFByb3BUeXBlTG9jYXRpb25OYW1lc1tsb2NhdGlvbl07XG4gICAgICByZXR1cm4gbmV3IEVycm9yKCdJbnZhbGlkICcgKyBsb2NhdGlvbk5hbWUgKyAnIGAnICsgcHJvcEZ1bGxOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArICgnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGBvYmplY3RgLicpKTtcbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIHNoYXBlVHlwZXMpIHtcbiAgICAgIHZhciBjaGVja2VyID0gc2hhcGVUeXBlc1trZXldO1xuICAgICAgaWYgKCFjaGVja2VyKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFyIGVycm9yID0gY2hlY2tlcihwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSArICcuJyArIGtleSk7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gY3JlYXRlQ2hhaW5hYmxlVHlwZUNoZWNrZXIodmFsaWRhdGUpO1xufVxuZnVuY3Rpb24gaXNOb2RlKHByb3BWYWx1ZSkge1xuICBzd2l0Y2ggKHR5cGVvZiBwcm9wVmFsdWUpIHtcbiAgICBjYXNlICdudW1iZXInOlxuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgcmV0dXJuICFwcm9wVmFsdWU7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BWYWx1ZS5ldmVyeShpc05vZGUpO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BWYWx1ZSA9PT0gbnVsbCB8fCBSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQocHJvcFZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihwcm9wVmFsdWUpO1xuICAgICAgaWYgKGl0ZXJhdG9yRm4pIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKHByb3BWYWx1ZSk7XG4gICAgICAgIHZhciBzdGVwO1xuICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gcHJvcFZhbHVlLmVudHJpZXMpIHtcbiAgICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgICBpZiAoIWlzTm9kZShzdGVwLnZhbHVlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc05vZGUoZW50cnlbMV0pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBnZXRQcm9wVHlwZShwcm9wVmFsdWUpIHtcbiAgdmFyIHByb3BUeXBlID0gdHlwZW9mIHByb3BWYWx1ZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIHJldHVybiAnYXJyYXknO1xuICB9XG4gIGlmIChwcm9wVmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gJ29iamVjdCc7XG4gIH1cbiAgcmV0dXJuIHByb3BUeXBlO1xufVxuZnVuY3Rpb24gZ2V0UHJlY2lzZVR5cGUocHJvcFZhbHVlKSB7XG4gIHZhciBwcm9wVHlwZSA9IGdldFByb3BUeXBlKHByb3BWYWx1ZSk7XG4gIGlmIChwcm9wVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgcmV0dXJuICdkYXRlJztcbiAgICB9IGVsc2UgaWYgKHByb3BWYWx1ZSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuICdyZWdleHAnO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvcFR5cGU7XG59XG5mdW5jdGlvbiBnZXRDbGFzc05hbWUocHJvcFZhbHVlKSB7XG4gIGlmICghcHJvcFZhbHVlLmNvbnN0cnVjdG9yIHx8ICFwcm9wVmFsdWUuY29uc3RydWN0b3IubmFtZSkge1xuICAgIHJldHVybiBBTk9OWU1PVVM7XG4gIH1cbiAgcmV0dXJuIHByb3BWYWx1ZS5jb25zdHJ1Y3Rvci5uYW1lO1xufVxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlcztcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICpcbiAqIEBwcm92aWRlc01vZHVsZSBSZWFjdFZlcnNpb25cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gJzE1LjEuMCc7IiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJucG06b2JqZWN0LWFzc2lnbkA0LjEuMC9pbmRleFwiKTsiLCIvKipcbiAqIENvcHlyaWdodCAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqXG4gKiBAcHJvdmlkZXNNb2R1bGUgUmVhY3RDdXJyZW50T3duZXJcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICovXG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciA9IHtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdEN1cnJlbnRPd25lcjsiLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIGNhbkRlZmluZVByb3BlcnR5ID0gZmFsc2U7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3gnLCB7Z2V0OiBmdW5jdGlvbigpIHt9fSk7XG4gICAgICBjYW5EZWZpbmVQcm9wZXJ0eSA9IHRydWU7XG4gICAgfSBjYXRjaCAoeCkge31cbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGNhbkRlZmluZVByb3BlcnR5O1xufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgX2Fzc2lnbiA9IHJlcXVpcmUoJ29iamVjdC1hc3NpZ24nKTtcbiAgdmFyIFJlYWN0Q3VycmVudE93bmVyID0gcmVxdWlyZSgnLi9SZWFjdEN1cnJlbnRPd25lcicpO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgdmFyIGNhbkRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9jYW5EZWZpbmVQcm9wZXJ0eScpO1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2xbJ2ZvciddICYmIFN5bWJvbFsnZm9yJ10oJ3JlYWN0LmVsZW1lbnQnKSB8fCAweGVhYzc7XG4gIHZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAgICBrZXk6IHRydWUsXG4gICAgcmVmOiB0cnVlLFxuICAgIF9fc2VsZjogdHJ1ZSxcbiAgICBfX3NvdXJjZTogdHJ1ZVxuICB9O1xuICB2YXIgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24sXG4gICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bjtcbiAgdmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uKHR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcykge1xuICAgIHZhciBlbGVtZW50ID0ge1xuICAgICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBrZXk6IGtleSxcbiAgICAgIHJlZjogcmVmLFxuICAgICAgcHJvcHM6IHByb3BzLFxuICAgICAgX293bmVyOiBvd25lclxuICAgIH07XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGVsZW1lbnQuX3N0b3JlID0ge307XG4gICAgICBpZiAoY2FuRGVmaW5lUHJvcGVydHkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQuX3N0b3JlLCAndmFsaWRhdGVkJywge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgdmFsdWU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgICAgIHZhbHVlOiBzZWxmXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zb3VyY2UnLCB7XG4gICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgICAgdmFsdWU6IHNvdXJjZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICBlbGVtZW50Ll9zZWxmID0gc2VsZjtcbiAgICAgICAgZWxlbWVudC5fc291cmNlID0gc291cmNlO1xuICAgICAgfVxuICAgICAgaWYgKE9iamVjdC5mcmVlemUpIHtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50LnByb3BzKTtcbiAgICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH07XG4gIFJlYWN0RWxlbWVudC5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24odHlwZSwgY29uZmlnLCBjaGlsZHJlbikge1xuICAgIHZhciBwcm9wTmFtZTtcbiAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICB2YXIga2V5ID0gbnVsbDtcbiAgICB2YXIgcmVmID0gbnVsbDtcbiAgICB2YXIgc2VsZiA9IG51bGw7XG4gICAgdmFyIHNvdXJjZSA9IG51bGw7XG4gICAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhjb25maWcuX19wcm90b19fID09IG51bGwgfHwgY29uZmlnLl9fcHJvdG9fXyA9PT0gT2JqZWN0LnByb3RvdHlwZSwgJ1JlYWN0LmNyZWF0ZUVsZW1lbnQoLi4uKTogRXhwZWN0ZWQgcHJvcHMgYXJndW1lbnQgdG8gYmUgYSBwbGFpbiBvYmplY3QuICcgKyAnUHJvcGVydGllcyBkZWZpbmVkIGluIGl0cyBwcm90b3R5cGUgY2hhaW4gd2lsbCBiZSBpZ25vcmVkLicpIDogdm9pZCAwO1xuICAgICAgICByZWYgPSAhY29uZmlnLmhhc093blByb3BlcnR5KCdyZWYnKSB8fCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNvbmZpZywgJ3JlZicpLmdldCA/IG51bGwgOiBjb25maWcucmVmO1xuICAgICAgICBrZXkgPSAhY29uZmlnLmhhc093blByb3BlcnR5KCdrZXknKSB8fCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNvbmZpZywgJ2tleScpLmdldCA/IG51bGwgOiAnJyArIGNvbmZpZy5rZXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWYgPSBjb25maWcucmVmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLnJlZjtcbiAgICAgICAga2V5ID0gY29uZmlnLmtleSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6ICcnICsgY29uZmlnLmtleTtcbiAgICAgIH1cbiAgICAgIHNlbGYgPSBjb25maWcuX19zZWxmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc2VsZjtcbiAgICAgIHNvdXJjZSA9IGNvbmZpZy5fX3NvdXJjZSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNvbmZpZy5fX3NvdXJjZTtcbiAgICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICAgIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2hpbGRBcnJheVtpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgICB9XG4gICAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7XG4gICAgfVxuICAgIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgICB2YXIgZGVmYXVsdFByb3BzID0gdHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzLiQkdHlwZW9mID09PSAndW5kZWZpbmVkJyB8fCBwcm9wcy4kJHR5cGVvZiAhPT0gUkVBQ1RfRUxFTUVOVF9UWVBFKSB7XG4gICAgICAgIGlmICghcHJvcHMuaGFzT3duUHJvcGVydHkoJ2tleScpKSB7XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAna2V5Jywge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKCFzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bikge1xuICAgICAgICAgICAgICAgIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyhmYWxzZSwgJyVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9mYi5tZS9yZWFjdC1zcGVjaWFsLXByb3BzKScsIHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nICYmICdkaXNwbGF5TmFtZScgaW4gdHlwZSA/IHR5cGUuZGlzcGxheU5hbWUgOiAnRWxlbWVudCcpIDogdm9pZCAwO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eSgncmVmJykpIHtcbiAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdyZWYnLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAoIXNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duKSB7XG4gICAgICAgICAgICAgICAgc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyB3YXJuaW5nKGZhbHNlLCAnJXM6IGByZWZgIGlzIG5vdCBhIHByb3AuIFRyeWluZyB0byBhY2Nlc3MgaXQgd2lsbCByZXN1bHQgJyArICdpbiBgdW5kZWZpbmVkYCBiZWluZyByZXR1cm5lZC4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzYW1lICcgKyAndmFsdWUgd2l0aGluIHRoZSBjaGlsZCBjb21wb25lbnQsIHlvdSBzaG91bGQgcGFzcyBpdCBhcyBhIGRpZmZlcmVudCAnICsgJ3Byb3AuIChodHRwczovL2ZiLm1lL3JlYWN0LXNwZWNpYWwtcHJvcHMpJywgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgJiYgJ2Rpc3BsYXlOYW1lJyBpbiB0eXBlID8gdHlwZS5kaXNwbGF5TmFtZSA6ICdFbGVtZW50JykgOiB2b2lkIDA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsIHByb3BzKTtcbiAgfTtcbiAgUmVhY3RFbGVtZW50LmNyZWF0ZUZhY3RvcnkgPSBmdW5jdGlvbih0eXBlKSB7XG4gICAgdmFyIGZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudC5iaW5kKG51bGwsIHR5cGUpO1xuICAgIGZhY3RvcnkudHlwZSA9IHR5cGU7XG4gICAgcmV0dXJuIGZhY3Rvcnk7XG4gIH07XG4gIFJlYWN0RWxlbWVudC5jbG9uZUFuZFJlcGxhY2VLZXkgPSBmdW5jdGlvbihvbGRFbGVtZW50LCBuZXdLZXkpIHtcbiAgICB2YXIgbmV3RWxlbWVudCA9IFJlYWN0RWxlbWVudChvbGRFbGVtZW50LnR5cGUsIG5ld0tleSwgb2xkRWxlbWVudC5yZWYsIG9sZEVsZW1lbnQuX3NlbGYsIG9sZEVsZW1lbnQuX3NvdXJjZSwgb2xkRWxlbWVudC5fb3duZXIsIG9sZEVsZW1lbnQucHJvcHMpO1xuICAgIHJldHVybiBuZXdFbGVtZW50O1xuICB9O1xuICBSZWFjdEVsZW1lbnQuY2xvbmVFbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICAgIHZhciBwcm9wTmFtZTtcbiAgICB2YXIgcHJvcHMgPSBfYXNzaWduKHt9LCBlbGVtZW50LnByb3BzKTtcbiAgICB2YXIga2V5ID0gZWxlbWVudC5rZXk7XG4gICAgdmFyIHJlZiA9IGVsZW1lbnQucmVmO1xuICAgIHZhciBzZWxmID0gZWxlbWVudC5fc2VsZjtcbiAgICB2YXIgc291cmNlID0gZWxlbWVudC5fc291cmNlO1xuICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IHdhcm5pbmcoY29uZmlnLl9fcHJvdG9fXyA9PSBudWxsIHx8IGNvbmZpZy5fX3Byb3RvX18gPT09IE9iamVjdC5wcm90b3R5cGUsICdSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogRXhwZWN0ZWQgcHJvcHMgYXJndW1lbnQgdG8gYmUgYSBwbGFpbiBvYmplY3QuICcgKyAnUHJvcGVydGllcyBkZWZpbmVkIGluIGl0cyBwcm90b3R5cGUgY2hhaW4gd2lsbCBiZSBpZ25vcmVkLicpIDogdm9pZCAwO1xuICAgICAgfVxuICAgICAgaWYgKGNvbmZpZy5yZWYgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZWYgPSBjb25maWcucmVmO1xuICAgICAgICBvd25lciA9IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoY29uZmlnLmtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTtcbiAgICAgIH1cbiAgICAgIHZhciBkZWZhdWx0UHJvcHM7XG4gICAgICBpZiAoZWxlbWVudC50eXBlICYmIGVsZW1lbnQudHlwZS5kZWZhdWx0UHJvcHMpIHtcbiAgICAgICAgZGVmYXVsdFByb3BzID0gZWxlbWVudC50eXBlLmRlZmF1bHRQcm9wcztcbiAgICAgIH1cbiAgICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgICBpZiAoY29uZmlnW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkICYmIGRlZmF1bHRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBjb25maWdbcHJvcE5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHtcbiAgICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgICAgfVxuICAgICAgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZEFycmF5O1xuICAgIH1cbiAgICByZXR1cm4gUmVhY3RFbGVtZW50KGVsZW1lbnQudHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKTtcbiAgfTtcbiAgUmVhY3RFbGVtZW50LmlzVmFsaWRFbGVtZW50ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCAmJiBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdEVsZW1lbnQ7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIGZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgdmFyIGVycm9yO1xuICAgICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVycm9yID0gbmV3IEVycm9yKCdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICsgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYXJncyA9IFthLCBiLCBjLCBkLCBlLCBmXTtcbiAgICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KSk7XG4gICAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICB9XG4gICAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBpbnZhcmlhbnQ7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIHZhciBSZWFjdEVsZW1lbnQgPSByZXF1aXJlKCcuL1JlYWN0RWxlbWVudCcpO1xuICB2YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG4gIGZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICAgICFSZWFjdEVsZW1lbnQuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyA/IGludmFyaWFudChmYWxzZSwgJ29ubHlDaGlsZCBtdXN0IGJlIHBhc3NlZCBhIGNoaWxkcmVuIHdpdGggZXhhY3RseSBvbmUgY2hpbGQuJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IG9ubHlDaGlsZDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcblwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKlxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgZW1wdHlGdW5jdGlvbiA9IHJlcXVpcmUoJy4vZW1wdHlGdW5jdGlvbicpO1xuICB2YXIgd2FybmluZyA9IGVtcHR5RnVuY3Rpb247XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0KSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICBhcmdzID0gQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLFxuICAgICAgICAgIF9rZXkgPSAyOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArICdtZXNzYWdlIGFyZ3VtZW50Jyk7XG4gICAgICB9XG4gICAgICBpZiAoZm9ybWF0LmluZGV4T2YoJ0ZhaWxlZCBDb21wb3NpdGUgcHJvcFR5cGU6ICcpID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgKyBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIG1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyIF9hc3NpZ24gPSByZXF1aXJlKCdvYmplY3QtYXNzaWduJyk7XG4gIHZhciBSZWFjdENoaWxkcmVuID0gcmVxdWlyZSgnLi9SZWFjdENoaWxkcmVuJyk7XG4gIHZhciBSZWFjdENvbXBvbmVudCA9IHJlcXVpcmUoJy4vUmVhY3RDb21wb25lbnQnKTtcbiAgdmFyIFJlYWN0Q2xhc3MgPSByZXF1aXJlKCcuL1JlYWN0Q2xhc3MnKTtcbiAgdmFyIFJlYWN0RE9NRmFjdG9yaWVzID0gcmVxdWlyZSgnLi9SZWFjdERPTUZhY3RvcmllcycpO1xuICB2YXIgUmVhY3RFbGVtZW50ID0gcmVxdWlyZSgnLi9SZWFjdEVsZW1lbnQnKTtcbiAgdmFyIFJlYWN0RWxlbWVudFZhbGlkYXRvciA9IHJlcXVpcmUoJy4vUmVhY3RFbGVtZW50VmFsaWRhdG9yJyk7XG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHJlcXVpcmUoJy4vUmVhY3RQcm9wVHlwZXMnKTtcbiAgdmFyIFJlYWN0VmVyc2lvbiA9IHJlcXVpcmUoJy4vUmVhY3RWZXJzaW9uJyk7XG4gIHZhciBvbmx5Q2hpbGQgPSByZXF1aXJlKCcuL29ubHlDaGlsZCcpO1xuICB2YXIgd2FybmluZyA9IHJlcXVpcmUoJ2ZianMvbGliL3dhcm5pbmcnKTtcbiAgdmFyIGNyZWF0ZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRWxlbWVudDtcbiAgdmFyIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnQuY3JlYXRlRmFjdG9yeTtcbiAgdmFyIGNsb25lRWxlbWVudCA9IFJlYWN0RWxlbWVudC5jbG9uZUVsZW1lbnQ7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY3JlYXRlRWxlbWVudCA9IFJlYWN0RWxlbWVudFZhbGlkYXRvci5jcmVhdGVFbGVtZW50O1xuICAgIGNyZWF0ZUZhY3RvcnkgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY3JlYXRlRmFjdG9yeTtcbiAgICBjbG9uZUVsZW1lbnQgPSBSZWFjdEVsZW1lbnRWYWxpZGF0b3IuY2xvbmVFbGVtZW50O1xuICB9XG4gIHZhciBfX3NwcmVhZCA9IF9hc3NpZ247XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICAgIF9fc3ByZWFkID0gZnVuY3Rpb24oKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gd2FybmluZyh3YXJuZWQsICdSZWFjdC5fX3NwcmVhZCBpcyBkZXByZWNhdGVkIGFuZCBzaG91bGQgbm90IGJlIHVzZWQuIFVzZSAnICsgJ09iamVjdC5hc3NpZ24gZGlyZWN0bHkgb3IgYW5vdGhlciBoZWxwZXIgZnVuY3Rpb24gd2l0aCBzaW1pbGFyICcgKyAnc2VtYW50aWNzLiBZb3UgbWF5IGJlIHNlZWluZyB0aGlzIHdhcm5pbmcgZHVlIHRvIHlvdXIgY29tcGlsZXIuICcgKyAnU2VlIGh0dHBzOi8vZmIubWUvcmVhY3Qtc3ByZWFkLWRlcHJlY2F0aW9uIGZvciBtb3JlIGRldGFpbHMuJykgOiB2b2lkIDA7XG4gICAgICB3YXJuZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIF9hc3NpZ24uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9XG4gIHZhciBSZWFjdCA9IHtcbiAgICBDaGlsZHJlbjoge1xuICAgICAgbWFwOiBSZWFjdENoaWxkcmVuLm1hcCxcbiAgICAgIGZvckVhY2g6IFJlYWN0Q2hpbGRyZW4uZm9yRWFjaCxcbiAgICAgIGNvdW50OiBSZWFjdENoaWxkcmVuLmNvdW50LFxuICAgICAgdG9BcnJheTogUmVhY3RDaGlsZHJlbi50b0FycmF5LFxuICAgICAgb25seTogb25seUNoaWxkXG4gICAgfSxcbiAgICBDb21wb25lbnQ6IFJlYWN0Q29tcG9uZW50LFxuICAgIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQsXG4gICAgY2xvbmVFbGVtZW50OiBjbG9uZUVsZW1lbnQsXG4gICAgaXNWYWxpZEVsZW1lbnQ6IFJlYWN0RWxlbWVudC5pc1ZhbGlkRWxlbWVudCxcbiAgICBQcm9wVHlwZXM6IFJlYWN0UHJvcFR5cGVzLFxuICAgIGNyZWF0ZUNsYXNzOiBSZWFjdENsYXNzLmNyZWF0ZUNsYXNzLFxuICAgIGNyZWF0ZUZhY3Rvcnk6IGNyZWF0ZUZhY3RvcnksXG4gICAgY3JlYXRlTWl4aW46IGZ1bmN0aW9uKG1peGluKSB7XG4gICAgICByZXR1cm4gbWl4aW47XG4gICAgfSxcbiAgICBET006IFJlYWN0RE9NRmFjdG9yaWVzLFxuICAgIHZlcnNpb246IFJlYWN0VmVyc2lvbixcbiAgICBfX3NwcmVhZDogX19zcHJlYWRcbiAgfTtcbiAgbW9kdWxlLmV4cG9ydHMgPSBSZWFjdDtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvUmVhY3QnKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5wbTpyZWFjdEAxNS4xLjAvcmVhY3QuanNcIik7IiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuY29uc3QgZm9vdGVyTGlua3MgPSBbe1xuICBocmVmOiAnaHR0cHM6Ly9naXRodWIuY29tL2Zyb250ZW5kYnIvZm9ydW0nLFxuICB0aXRsZTogJ0FjZXNzbyBub3NzbyBmw7NydW0nLFxuICBjb250ZW50OiAnRsOzcnVtJ1xufSwge1xuICBocmVmOiAnaHR0cHM6Ly9naXRodWIuY29tL2Zyb250ZW5kYnIvdmFnYXMnLFxuICB0aXRsZTogJ1B1YmxpcXVlIG91IGVuY29udHJlIHVtYSB2YWdhJyxcbiAgY29udGVudDogJ1ZhZ2FzJ1xufV1cblxuY29uc3QgTWFpbkZvb3RlciA9ICgpID0+IChcbiAgPGZvb3RlciBjbGFzc05hbWU9J2Zvb3Rlcicgcm9sZT0nY29udGVudGluZm8nPlxuICAgIDxkaXYgY2xhc3NOYW1lPSdmb290ZXItaW5uZXInPlxuICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbnRhaW5lci1mbGV4Jz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2Zvb3Rlci1pbm5lci0tbWFpbic+XG4gICAgICAgICAgPHA+RXNzZSBwcm9qZXRvIMOpIHVtYSBpbmljaWF0aXZhIGRhIG9yZ2FuaXphw6fDo28geycgJ31cbiAgICAgICAgICAgIDxhIGhyZWY9J2h0dHBzOi8vZ2l0aHViLmNvbS9mcm9udGVuZGJyJz5cbiAgICAgICAgICAgICAgRnJvbnQtRW5kIEJyYXNpbCBkbyBHaXRIdWIuXG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHVsIGNsYXNzTmFtZT0nZm9vdGVyLWlubmVyLS1uYXYnPlxuICAgICAgICAgIHtmb290ZXJMaW5rcy5tYXAoKHsgaHJlZiwgdGl0bGUsIGNvbnRlbnQgfSkgPT4gKFxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8YSBjbGFzc05hbWU9J2J0bi1saW5rJyBocmVmPXtocmVmfSB0aXRsZT17dGl0bGV9PlxuICAgICAgICAgICAgICAgIHtjb250ZW50fVxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICkpfVxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzTmFtZT0nZm9vdGVyLWhvbGQnPlxuICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbnRhaW5lcic+XG4gICAgICAgIDxwPlxuICAgICAgICAgICZjb3B5OyAyMDE2IHsnICd9XG4gICAgICAgICAgPGEgaHJlZj0naHR0cHM6Ly9naXRodWIuY29tL2Zyb250ZW5kYnIvJz5cbiAgICAgICAgICAgIEZyb250LUVuZCBCcmFzaWxcbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Zvb3Rlcj5cblxuKVxuXG5leHBvcnQgZGVmYXVsdCBNYWluRm9vdGVyXG4iLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IE1haW5IZWFkZXIgZnJvbSAnLi9tYWluLWhlYWRlcidcbmltcG9ydCBNYWluQ29udGVudCBmcm9tICcuLi9tYWluLWNvbnRlbnQvaW5kZXgnXG5pbXBvcnQgTWFpbkZvb3RlciBmcm9tICcuL21haW4tZm9vdGVyJ1xuXG5jb25zdCBBcHAgPSAoKSA9PiAoXG4gIDxkaXY+XG4gICAgPE1haW5IZWFkZXIgLz5cbiAgICA8TWFpbkNvbnRlbnQgLz5cbiAgICA8TWFpbkZvb3RlciAvPlxuICA8L2Rpdj5cbilcblxuZXhwb3J0IGRlZmF1bHQgQXBwXG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vcG9ueWZpbGwnKShnbG9iYWwgfHwgd2luZG93IHx8IHRoaXMpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibnBtOnN5bWJvbC1vYnNlcnZhYmxlQDAuMi40L2luZGV4XCIpOyIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5BY3Rpb25UeXBlcyA9IHVuZGVmaW5lZDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gY3JlYXRlU3RvcmU7XG5cbnZhciBfaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJ2xvZGFzaC9pc1BsYWluT2JqZWN0Jyk7XG5cbnZhciBfaXNQbGFpbk9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1BsYWluT2JqZWN0KTtcblxudmFyIF9zeW1ib2xPYnNlcnZhYmxlID0gcmVxdWlyZSgnc3ltYm9sLW9ic2VydmFibGUnKTtcblxudmFyIF9zeW1ib2xPYnNlcnZhYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3N5bWJvbE9ic2VydmFibGUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuLyoqXG4gKiBUaGVzZSBhcmUgcHJpdmF0ZSBhY3Rpb24gdHlwZXMgcmVzZXJ2ZWQgYnkgUmVkdXguXG4gKiBGb3IgYW55IHVua25vd24gYWN0aW9ucywgeW91IG11c3QgcmV0dXJuIHRoZSBjdXJyZW50IHN0YXRlLlxuICogSWYgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuXG4gKiBEbyBub3QgcmVmZXJlbmNlIHRoZXNlIGFjdGlvbiB0eXBlcyBkaXJlY3RseSBpbiB5b3VyIGNvZGUuXG4gKi9cbnZhciBBY3Rpb25UeXBlcyA9IGV4cG9ydHMuQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6ICdAQHJlZHV4L0lOSVQnXG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbaW5pdGlhbFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlbmhhbmNlciBUaGUgc3RvcmUgZW5oYW5jZXIuIFlvdSBtYXkgb3B0aW9uYWxseSBzcGVjaWZ5IGl0XG4gKiB0byBlbmhhbmNlIHRoZSBzdG9yZSB3aXRoIHRoaXJkLXBhcnR5IGNhcGFiaWxpdGllcyBzdWNoIGFzIG1pZGRsZXdhcmUsXG4gKiB0aW1lIHRyYXZlbCwgcGVyc2lzdGVuY2UsIGV0Yy4gVGhlIG9ubHkgc3RvcmUgZW5oYW5jZXIgdGhhdCBzaGlwcyB3aXRoIFJlZHV4XG4gKiBpcyBgYXBwbHlNaWRkbGV3YXJlKClgLlxuICpcbiAqIEByZXR1cm5zIHtTdG9yZX0gQSBSZWR1eCBzdG9yZSB0aGF0IGxldHMgeW91IHJlYWQgdGhlIHN0YXRlLCBkaXNwYXRjaCBhY3Rpb25zXG4gKiBhbmQgc3Vic2NyaWJlIHRvIGNoYW5nZXMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIGluaXRpYWxTdGF0ZSwgZW5oYW5jZXIpIHtcbiAgdmFyIF9yZWYyO1xuXG4gIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBlbmhhbmNlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbmhhbmNlciA9IGluaXRpYWxTdGF0ZTtcbiAgICBpbml0aWFsU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBpbml0aWFsU3RhdGUpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiByZWR1Y2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgcmVkdWNlciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRSZWR1Y2VyID0gcmVkdWNlcjtcbiAgdmFyIGN1cnJlbnRTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgdmFyIGN1cnJlbnRMaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzO1xuICB2YXIgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKG5leHRMaXN0ZW5lcnMgPT09IGN1cnJlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIG5leHRMaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzLnNsaWNlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuICBmdW5jdGlvbiBnZXRTdGF0ZSgpIHtcbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBjaGFuZ2UgbGlzdGVuZXIuIEl0IHdpbGwgYmUgY2FsbGVkIGFueSB0aW1lIGFuIGFjdGlvbiBpcyBkaXNwYXRjaGVkLFxuICAgKiBhbmQgc29tZSBwYXJ0IG9mIHRoZSBzdGF0ZSB0cmVlIG1heSBwb3RlbnRpYWxseSBoYXZlIGNoYW5nZWQuIFlvdSBtYXkgdGhlblxuICAgKiBjYWxsIGBnZXRTdGF0ZSgpYCB0byByZWFkIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgaW5zaWRlIHRoZSBjYWxsYmFjay5cbiAgICpcbiAgICogWW91IG1heSBjYWxsIGBkaXNwYXRjaCgpYCBmcm9tIGEgY2hhbmdlIGxpc3RlbmVyLCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAgICogY2F2ZWF0czpcbiAgICpcbiAgICogMS4gVGhlIHN1YnNjcmlwdGlvbnMgYXJlIHNuYXBzaG90dGVkIGp1c3QgYmVmb3JlIGV2ZXJ5IGBkaXNwYXRjaCgpYCBjYWxsLlxuICAgKiBJZiB5b3Ugc3Vic2NyaWJlIG9yIHVuc3Vic2NyaWJlIHdoaWxlIHRoZSBsaXN0ZW5lcnMgYXJlIGJlaW5nIGludm9rZWQsIHRoaXNcbiAgICogd2lsbCBub3QgaGF2ZSBhbnkgZWZmZWN0IG9uIHRoZSBgZGlzcGF0Y2goKWAgdGhhdCBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3MuXG4gICAqIEhvd2V2ZXIsIHRoZSBuZXh0IGBkaXNwYXRjaCgpYCBjYWxsLCB3aGV0aGVyIG5lc3RlZCBvciBub3QsIHdpbGwgdXNlIGEgbW9yZVxuICAgKiByZWNlbnQgc25hcHNob3Qgb2YgdGhlIHN1YnNjcmlwdGlvbiBsaXN0LlxuICAgKlxuICAgKiAyLiBUaGUgbGlzdGVuZXIgc2hvdWxkIG5vdCBleHBlY3QgdG8gc2VlIGFsbCBzdGF0ZSBjaGFuZ2VzLCBhcyB0aGUgc3RhdGVcbiAgICogbWlnaHQgaGF2ZSBiZWVuIHVwZGF0ZWQgbXVsdGlwbGUgdGltZXMgZHVyaW5nIGEgbmVzdGVkIGBkaXNwYXRjaCgpYCBiZWZvcmVcbiAgICogdGhlIGxpc3RlbmVyIGlzIGNhbGxlZC4gSXQgaXMsIGhvd2V2ZXIsIGd1YXJhbnRlZWQgdGhhdCBhbGwgc3Vic2NyaWJlcnNcbiAgICogcmVnaXN0ZXJlZCBiZWZvcmUgdGhlIGBkaXNwYXRjaCgpYCBzdGFydGVkIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIGxhdGVzdFxuICAgKiBzdGF0ZSBieSB0aGUgdGltZSBpdCBleGl0cy5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgQSBjYWxsYmFjayB0byBiZSBpbnZva2VkIG9uIGV2ZXJ5IGRpc3BhdGNoLlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gdG8gcmVtb3ZlIHRoaXMgY2hhbmdlIGxpc3RlbmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuXG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCEoMCwgX2lzUGxhaW5PYmplY3QyW1wiZGVmYXVsdFwiXSkoYWN0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBY3Rpb25zIG11c3QgYmUgcGxhaW4gb2JqZWN0cy4gJyArICdVc2UgY3VzdG9tIG1pZGRsZXdhcmUgZm9yIGFzeW5jIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtYXkgbm90IGhhdmUgYW4gdW5kZWZpbmVkIFwidHlwZVwiIHByb3BlcnR5LiAnICsgJ0hhdmUgeW91IG1pc3NwZWxsZWQgYSBjb25zdGFudD8nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsaXN0ZW5lcnNbaV0oKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWN0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBjdXJyZW50UmVkdWNlciA9IG5leHRSZWR1Y2VyO1xuICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnRlcm9wZXJhYmlsaXR5IHBvaW50IGZvciBvYnNlcnZhYmxlL3JlYWN0aXZlIGxpYnJhcmllcy5cbiAgICogQHJldHVybnMge29ic2VydmFibGV9IEEgbWluaW1hbCBvYnNlcnZhYmxlIG9mIHN0YXRlIGNoYW5nZXMuXG4gICAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgdGhlIG9ic2VydmFibGUgcHJvcG9zYWw6XG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS96ZW5wYXJzaW5nL2VzLW9ic2VydmFibGVcbiAgICovXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7IHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZSB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbX3N5bWJvbE9ic2VydmFibGUyW1wiZGVmYXVsdFwiXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LCBfcmVmO1xuICB9XG5cbiAgLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG4gIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZXMuSU5JVCB9KTtcblxuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbX3N5bWJvbE9ic2VydmFibGUyW1wiZGVmYXVsdFwiXV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn0iLCIvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0UHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG4vKipcbiAqIEdldHMgdGhlIGBbW1Byb3RvdHlwZV1dYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtudWxsfE9iamVjdH0gUmV0dXJucyB0aGUgYFtbUHJvdG90eXBlXV1gLlxuICovXG5mdW5jdGlvbiBnZXRQcm90b3R5cGUodmFsdWUpIHtcbiAgcmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZShPYmplY3QodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRQcm90b3R5cGU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QgaW4gSUUgPCA5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgaG9zdCBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNIb3N0T2JqZWN0KHZhbHVlKSB7XG4gIC8vIE1hbnkgaG9zdCBvYmplY3RzIGFyZSBgT2JqZWN0YCBvYmplY3RzIHRoYXQgY2FuIGNvZXJjZSB0byBzdHJpbmdzXG4gIC8vIGRlc3BpdGUgaGF2aW5nIGltcHJvcGVybHkgZGVmaW5lZCBgdG9TdHJpbmdgIG1ldGhvZHMuXG4gIHZhciByZXN1bHQgPSBmYWxzZTtcbiAgaWYgKHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gISEodmFsdWUgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzSG9zdE9iamVjdDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcbiIsIi8qICovIFxudmFyIGdldFByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX2dldFByb3RvdHlwZScpLFxuICAgIGlzSG9zdE9iamVjdCA9IHJlcXVpcmUoJy4vX2lzSG9zdE9iamVjdCcpLFxuICAgIGlzT2JqZWN0TGlrZSA9IHJlcXVpcmUoJy4vaXNPYmplY3RMaWtlJyk7XG52YXIgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xudmFyIGZ1bmNUb1N0cmluZyA9IEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xudmFyIG9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSAhPSBvYmplY3RUYWcgfHwgaXNIb3N0T2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICBpZiAocHJvdG8gPT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgQ3RvciA9IGhhc093blByb3BlcnR5LmNhbGwocHJvdG8sICdjb25zdHJ1Y3RvcicpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICByZXR1cm4gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiYgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZyk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGlzUGxhaW5PYmplY3Q7XG4iLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiAgZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBjb21iaW5lUmVkdWNlcnM7XG4gIHZhciBfY3JlYXRlU3RvcmUgPSByZXF1aXJlKCcuL2NyZWF0ZVN0b3JlJyk7XG4gIHZhciBfaXNQbGFpbk9iamVjdCA9IHJlcXVpcmUoJ2xvZGFzaC9pc1BsYWluT2JqZWN0Jyk7XG4gIHZhciBfaXNQbGFpbk9iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1BsYWluT2JqZWN0KTtcbiAgdmFyIF93YXJuaW5nID0gcmVxdWlyZSgnLi91dGlscy93YXJuaW5nJyk7XG4gIHZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcbiAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1wiZGVmYXVsdFwiOiBvYmp9O1xuICB9XG4gIGZ1bmN0aW9uIGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKGtleSwgYWN0aW9uKSB7XG4gICAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gICAgdmFyIGFjdGlvbk5hbWUgPSBhY3Rpb25UeXBlICYmICdcIicgKyBhY3Rpb25UeXBlLnRvU3RyaW5nKCkgKyAnXCInIHx8ICdhbiBhY3Rpb24nO1xuICAgIHJldHVybiAnR2l2ZW4gYWN0aW9uICcgKyBhY3Rpb25OYW1lICsgJywgcmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiAnICsgJ1RvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4nO1xuICB9XG4gIGZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbikge1xuICAgIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgICB2YXIgYXJndW1lbnROYW1lID0gYWN0aW9uICYmIGFjdGlvbi50eXBlID09PSBfY3JlYXRlU3RvcmUuQWN0aW9uVHlwZXMuSU5JVCA/ICdpbml0aWFsU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG4gICAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgICB9XG4gICAgaWYgKCEoMCwgX2lzUGxhaW5PYmplY3QyW1wiZGVmYXVsdFwiXSkoaW5wdXRTdGF0ZSkpIHtcbiAgICAgIHJldHVybiAnVGhlICcgKyBhcmd1bWVudE5hbWUgKyAnIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXCInICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyAnXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgJyArICgna2V5czogXCInICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyAnXCInKTtcbiAgICB9XG4gICAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgIH0pO1xuICAgIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gJ1VuZXhwZWN0ZWQgJyArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgJyAnICsgKCdcIicgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArICdcIiBmb3VuZCBpbiAnICsgYXJndW1lbnROYW1lICsgJy4gJykgKyAnRXhwZWN0ZWQgdG8gZmluZCBvbmUgb2YgdGhlIGtub3duIHJlZHVjZXIga2V5cyBpbnN0ZWFkOiAnICsgKCdcIicgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArICdcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC4nKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNhbml0eShyZWR1Y2Vycykge1xuICAgIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7dHlwZTogX2NyZWF0ZVN0b3JlLkFjdGlvblR5cGVzLklOSVR9KTtcbiAgICAgIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlZHVjZXIgXCInICsga2V5ICsgJ1wiIHJldHVybmVkIHVuZGVmaW5lZCBkdXJpbmcgaW5pdGlhbGl6YXRpb24uICcgKyAnSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0ICcgKyAnZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSAnICsgJ25vdCBiZSB1bmRlZmluZWQuJyk7XG4gICAgICB9XG4gICAgICB2YXIgdHlwZSA9ICdAQHJlZHV4L1BST0JFX1VOS05PV05fQUNUSU9OXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHJpbmcoNykuc3BsaXQoJycpLmpvaW4oJy4nKTtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHt0eXBlOiB0eXBlfSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlciBcIicgKyBrZXkgKyAnXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gJyArICgnRG9uXFwndCB0cnkgdG8gaGFuZGxlICcgKyBfY3JlYXRlU3RvcmUuQWN0aW9uVHlwZXMuSU5JVCArICcgb3Igb3RoZXIgYWN0aW9ucyBpbiBcInJlZHV4LypcIiAnKSArICduYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSAnICsgJ2N1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsICcgKyAnaW4gd2hpY2ggY2FzZSB5b3UgbXVzdCByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUsIHJlZ2FyZGxlc3Mgb2YgdGhlICcgKyAnYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLicpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGNvbWJpbmVSZWR1Y2VycyhyZWR1Y2Vycykge1xuICAgIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSByZWR1Y2VyS2V5c1tpXTtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgZmluYWxSZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKGZpbmFsUmVkdWNlcnMpO1xuICAgIHZhciBzYW5pdHlFcnJvcjtcbiAgICB0cnkge1xuICAgICAgYXNzZXJ0UmVkdWNlclNhbml0eShmaW5hbFJlZHVjZXJzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBzYW5pdHlFcnJvciA9IGU7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbigpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHt9IDogYXJndW1lbnRzWzBdO1xuICAgICAgdmFyIGFjdGlvbiA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIGlmIChzYW5pdHlFcnJvcikge1xuICAgICAgICB0aHJvdyBzYW5pdHlFcnJvcjtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbik7XG4gICAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICAgICgwLCBfd2FybmluZzJbXCJkZWZhdWx0XCJdKSh3YXJuaW5nTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgICB2YXIgbmV4dFN0YXRlID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGtleSA9IGZpbmFsUmVkdWNlcktleXNbaV07XG4gICAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1trZXldO1xuICAgICAgICB2YXIgcHJldmlvdXNTdGF0ZUZvcktleSA9IHN0YXRlW2tleV07XG4gICAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG4gICAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBnZXRVbmRlZmluZWRTdGF0ZUVycm9yTWVzc2FnZShrZXksIGFjdGlvbik7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dFN0YXRlW2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IG5leHRTdGF0ZUZvcktleSAhPT0gcHJldmlvdXNTdGF0ZUZvcktleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gICAgfTtcbiAgfVxufSkocmVxdWlyZSgncHJvY2VzcycpKTtcbiIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBiaW5kQWN0aW9uQ3JlYXRvcnM7XG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkaXNwYXRjaChhY3Rpb25DcmVhdG9yLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKSk7XG4gIH07XG59XG5cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWN0aW9uQ3JlYXRvcnMgZXhwZWN0ZWQgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24sIGluc3RlYWQgcmVjZWl2ZWQgJyArIChhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCA/ICdudWxsJyA6IHR5cGVvZiBhY3Rpb25DcmVhdG9ycykgKyAnLiAnICsgJ0RpZCB5b3Ugd3JpdGUgXCJpbXBvcnQgQWN0aW9uQ3JlYXRvcnMgZnJvbVwiIGluc3RlYWQgb2YgXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXCI/Jyk7XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIGJvdW5kQWN0aW9uQ3JlYXRvcnMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRBY3Rpb25DcmVhdG9ycztcbn0iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGFwcGx5TWlkZGxld2FyZTtcbnZhciBfY29tcG9zZSA9IHJlcXVpcmUoJy4vY29tcG9zZScpO1xudmFyIF9jb21wb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvc2UpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcImRlZmF1bHRcIjogb2JqfTtcbn1cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgICBtaWRkbGV3YXJlcyA9IEFycmF5KF9sZW4pLFxuICAgICAgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBtaWRkbGV3YXJlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oY3JlYXRlU3RvcmUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ocmVkdWNlciwgaW5pdGlhbFN0YXRlLCBlbmhhbmNlcikge1xuICAgICAgdmFyIHN0b3JlID0gY3JlYXRlU3RvcmUocmVkdWNlciwgaW5pdGlhbFN0YXRlLCBlbmhhbmNlcik7XG4gICAgICB2YXIgX2Rpc3BhdGNoID0gc3RvcmUuZGlzcGF0Y2g7XG4gICAgICB2YXIgY2hhaW4gPSBbXTtcbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaChhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoKGFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbihtaWRkbGV3YXJlKSB7XG4gICAgICAgIHJldHVybiBtaWRkbGV3YXJlKG1pZGRsZXdhcmVBUEkpO1xuICAgICAgfSk7XG4gICAgICBfZGlzcGF0Y2ggPSBfY29tcG9zZTJbXCJkZWZhdWx0XCJdLmFwcGx5KHVuZGVmaW5lZCwgY2hhaW4pKHN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgc3RvcmUsIHtkaXNwYXRjaDogX2Rpc3BhdGNofSk7XG4gICAgfTtcbiAgfTtcbn1cbiIsIi8qICovIFxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGNvbXBvc2U7XG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5cbmZ1bmN0aW9uIGNvbXBvc2UoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBmdW5jcyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdmFyIF9yZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbGFzdCA9IGZ1bmNzW2Z1bmNzLmxlbmd0aCAtIDFdO1xuICAgICAgdmFyIHJlc3QgPSBmdW5jcy5zbGljZSgwLCAtMSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2OiBmdW5jdGlvbiB2KCkge1xuICAgICAgICAgIHJldHVybiByZXN0LnJlZHVjZVJpZ2h0KGZ1bmN0aW9uIChjb21wb3NlZCwgZikge1xuICAgICAgICAgICAgcmV0dXJuIGYoY29tcG9zZWQpO1xuICAgICAgICAgIH0sIGxhc3QuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICBpZiAodHlwZW9mIF9yZXQgPT09IFwib2JqZWN0XCIpIHJldHVybiBfcmV0LnY7XG4gIH1cbn0iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gd2FybmluZztcbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IGlmIHlvdSBlbmFibGVcbiAgICAvLyBcImJyZWFrIG9uIGFsbCBleGNlcHRpb25zXCIgaW4geW91ciBjb25zb2xlLFxuICAgIC8vIGl0IHdvdWxkIHBhdXNlIHRoZSBleGVjdXRpb24gYXQgdGhpcyBsaW5lLlxuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1lbXB0eSAqL1xuICB9IGNhdGNoIChlKSB7fVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWVtcHR5ICovXG59IiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICAndXNlIHN0cmljdCc7XG4gIGV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG4gIGV4cG9ydHMuY29tcG9zZSA9IGV4cG9ydHMuYXBwbHlNaWRkbGV3YXJlID0gZXhwb3J0cy5iaW5kQWN0aW9uQ3JlYXRvcnMgPSBleHBvcnRzLmNvbWJpbmVSZWR1Y2VycyA9IGV4cG9ydHMuY3JlYXRlU3RvcmUgPSB1bmRlZmluZWQ7XG4gIHZhciBfY3JlYXRlU3RvcmUgPSByZXF1aXJlKCcuL2NyZWF0ZVN0b3JlJyk7XG4gIHZhciBfY3JlYXRlU3RvcmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlU3RvcmUpO1xuICB2YXIgX2NvbWJpbmVSZWR1Y2VycyA9IHJlcXVpcmUoJy4vY29tYmluZVJlZHVjZXJzJyk7XG4gIHZhciBfY29tYmluZVJlZHVjZXJzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbWJpbmVSZWR1Y2Vycyk7XG4gIHZhciBfYmluZEFjdGlvbkNyZWF0b3JzID0gcmVxdWlyZSgnLi9iaW5kQWN0aW9uQ3JlYXRvcnMnKTtcbiAgdmFyIF9iaW5kQWN0aW9uQ3JlYXRvcnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmluZEFjdGlvbkNyZWF0b3JzKTtcbiAgdmFyIF9hcHBseU1pZGRsZXdhcmUgPSByZXF1aXJlKCcuL2FwcGx5TWlkZGxld2FyZScpO1xuICB2YXIgX2FwcGx5TWlkZGxld2FyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hcHBseU1pZGRsZXdhcmUpO1xuICB2YXIgX2NvbXBvc2UgPSByZXF1aXJlKCcuL2NvbXBvc2UnKTtcbiAgdmFyIF9jb21wb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NvbXBvc2UpO1xuICB2YXIgX3dhcm5pbmcgPSByZXF1aXJlKCcuL3V0aWxzL3dhcm5pbmcnKTtcbiAgdmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICAgIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XCJkZWZhdWx0XCI6IG9ian07XG4gIH1cbiAgZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgICAoMCwgX3dhcm5pbmcyW1wiZGVmYXVsdFwiXSkoJ1lvdSBhcmUgY3VycmVudGx5IHVzaW5nIG1pbmlmaWVkIGNvZGUgb3V0c2lkZSBvZiBOT0RFX0VOViA9PT0gXFwncHJvZHVjdGlvblxcJy4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIERlZmluZVBsdWdpbiBmb3Igd2VicGFjayAoaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDAzMDAzMSkgJyArICd0byBlbnN1cmUgeW91IGhhdmUgdGhlIGNvcnJlY3QgY29kZSBmb3IgeW91ciBwcm9kdWN0aW9uIGJ1aWxkLicpO1xuICB9XG4gIGV4cG9ydHMuY3JlYXRlU3RvcmUgPSBfY3JlYXRlU3RvcmUyW1wiZGVmYXVsdFwiXTtcbiAgZXhwb3J0cy5jb21iaW5lUmVkdWNlcnMgPSBfY29tYmluZVJlZHVjZXJzMltcImRlZmF1bHRcIl07XG4gIGV4cG9ydHMuYmluZEFjdGlvbkNyZWF0b3JzID0gX2JpbmRBY3Rpb25DcmVhdG9yczJbXCJkZWZhdWx0XCJdO1xuICBleHBvcnRzLmFwcGx5TWlkZGxld2FyZSA9IF9hcHBseU1pZGRsZXdhcmUyW1wiZGVmYXVsdFwiXTtcbiAgZXhwb3J0cy5jb21wb3NlID0gX2NvbXBvc2UyW1wiZGVmYXVsdFwiXTtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJucG06cmVkdXhAMy41LjIvbGliL2luZGV4LmpzXCIpOyIsIi8qICovIFxuJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0c1snZGVmYXVsdCddID0gdGh1bmtNaWRkbGV3YXJlO1xuZnVuY3Rpb24gdGh1bmtNaWRkbGV3YXJlKF9yZWYpIHtcbiAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaDtcbiAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcblxuICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgaWYgKHR5cGVvZiBhY3Rpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgIH07XG4gIH07XG59IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwibnBtOnJlZHV4LXRodW5rQDIuMC4xL2xpYi9pbmRleC5qc1wiKTsiLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IHtcbiAgY3JlYXRlU3RvcmUsXG4gIGNvbXBvc2UsXG4gIGFwcGx5TWlkZGxld2FyZSxcbiAgY29tYmluZVJlZHVjZXJzXG59IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHRodW5rTWlkZGxld2FyZSBmcm9tICdyZWR1eC10aHVuaydcblxuZXhwb3J0IGRlZmF1bHQgKHsgaW5pdGlhbFN0YXRlID0ge30sIHJlZHVjZXJzLCBtaWRkbGV3YXJlcyA9IFtdIH0pID0+IHtcbiAgY29uc3Qgcm9vdFJlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnMoe1xuICAgIC4uLnJlZHVjZXJzXG4gIH0pXG4gIHJldHVybiBjb21wb3NlKFxuICAgIGFwcGx5TWlkZGxld2FyZSh0aHVua01pZGRsZXdhcmUsIC4uLm1pZGRsZXdhcmVzKVxuICApKGNyZWF0ZVN0b3JlKShyb290UmVkdWNlciwgaW5pdGlhbFN0YXRlKVxufVxuIiwiLyogKi8gXG52YXIgJCA9IHJlcXVpcmUoJy4vJCcpLFxuICAgIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi8kLnRvLW9iamVjdCcpLFxuICAgIElPYmplY3QgPSByZXF1aXJlKCcuLyQuaW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLyQuZmFpbHMnKShmdW5jdGlvbigpIHtcbiAgdmFyIGEgPSBPYmplY3QuYXNzaWduLFxuICAgICAgQSA9IHt9LFxuICAgICAgQiA9IHt9LFxuICAgICAgUyA9IFN5bWJvbCgpLFxuICAgICAgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XG4gIEFbU10gPSA3O1xuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICBCW2tdID0gaztcbiAgfSk7XG4gIHJldHVybiBhKHt9LCBBKVtTXSAhPSA3IHx8IE9iamVjdC5rZXlzKGEoe30sIEIpKS5qb2luKCcnKSAhPSBLO1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpLFxuICAgICAgJCQgPSBhcmd1bWVudHMsXG4gICAgICAkJGxlbiA9ICQkLmxlbmd0aCxcbiAgICAgIGluZGV4ID0gMSxcbiAgICAgIGdldEtleXMgPSAkLmdldEtleXMsXG4gICAgICBnZXRTeW1ib2xzID0gJC5nZXRTeW1ib2xzLFxuICAgICAgaXNFbnVtID0gJC5pc0VudW07XG4gIHdoaWxlICgkJGxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KCQkW2luZGV4KytdKSxcbiAgICAgICAga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyksXG4gICAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoLFxuICAgICAgICBqID0gMCxcbiAgICAgICAga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKVxuICAgICAgaWYgKGlzRW51bS5jYWxsKFMsIGtleSA9IGtleXNbaisrXSkpXG4gICAgICAgIFRba2V5XSA9IFNba2V5XTtcbiAgfVxuICByZXR1cm4gVDtcbn0gOiBPYmplY3QuYXNzaWduO1xuIiwiLyogKi8gXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vJC5leHBvcnQnKTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0Jywge2Fzc2lnbjogcmVxdWlyZSgnLi8kLm9iamVjdC1hc3NpZ24nKX0pO1xuIiwiLyogKi8gXG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvJC5jb3JlJykuT2JqZWN0LmFzc2lnbjtcbiIsIi8qICovIFxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL29iamVjdC9hc3NpZ25cIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCIvKiAqLyBcblwidXNlIHN0cmljdFwiO1xudmFyIF9PYmplY3QkYXNzaWduID0gcmVxdWlyZSgnLi4vY29yZS1qcy9vYmplY3QvYXNzaWduJylbXCJkZWZhdWx0XCJdO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfT2JqZWN0JGFzc2lnbiB8fCBmdW5jdGlvbih0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiIsIi8qICovIFxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuLyQuZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCkge1xuICByZXR1cm4gT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBjdHggPSByZXF1aXJlKCcuLyQuY3R4JyksXG4gICAgJGV4cG9ydCA9IHJlcXVpcmUoJy4vJC5leHBvcnQnKSxcbiAgICB0b09iamVjdCA9IHJlcXVpcmUoJy4vJC50by1vYmplY3QnKSxcbiAgICBjYWxsID0gcmVxdWlyZSgnLi8kLml0ZXItY2FsbCcpLFxuICAgIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi8kLmlzLWFycmF5LWl0ZXInKSxcbiAgICB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vJC50by1sZW5ndGgnKSxcbiAgICBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi8kLml0ZXItZGV0ZWN0JykoZnVuY3Rpb24oaXRlcikge1xuICBBcnJheS5mcm9tKGl0ZXIpO1xufSksICdBcnJheScsIHtmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSkge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKSxcbiAgICAgICAgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXksXG4gICAgICAgICQkID0gYXJndW1lbnRzLFxuICAgICAgICAkJGxlbiA9ICQkLmxlbmd0aCxcbiAgICAgICAgbWFwZm4gPSAkJGxlbiA+IDEgPyAkJFsxXSA6IHVuZGVmaW5lZCxcbiAgICAgICAgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQsXG4gICAgICAgIGluZGV4ID0gMCxcbiAgICAgICAgaXRlckZuID0gZ2V0SXRlckZuKE8pLFxuICAgICAgICBsZW5ndGgsXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgc3RlcCxcbiAgICAgICAgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpXG4gICAgICBtYXBmbiA9IGN0eChtYXBmbiwgJCRsZW4gPiAyID8gJCRbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQzsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHRbaW5kZXhdID0gbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH19KTtcbiIsIi8qICovIFxucmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XG5yZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvJC5jb3JlJykuQXJyYXkuZnJvbTtcbiIsIi8qICovIFxubW9kdWxlLmV4cG9ydHMgPSB7IFwiZGVmYXVsdFwiOiByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL2FycmF5L2Zyb21cIiksIF9fZXNNb2R1bGU6IHRydWUgfTsiLCIvKiAqLyBcblwidXNlIHN0cmljdFwiO1xudmFyIF9BcnJheSRmcm9tID0gcmVxdWlyZSgnLi4vY29yZS1qcy9hcnJheS9mcm9tJylbXCJkZWZhdWx0XCJdO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBmdW5jdGlvbihhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLFxuICAgICAgICBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspXG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIHJldHVybiBhcnIyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBfQXJyYXkkZnJvbShhcnIpO1xuICB9XG59O1xuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbiIsIi8qICovIFxuXCJmb3JtYXQgY2pzXCI7XG4iLCIvKiAqLyBcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLyQudG8taW50ZWdlcicpLFxuICAgIGRlZmluZWQgPSByZXF1aXJlKCcuLyQuZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQodGhhdCkpLFxuICAgICAgICBpID0gdG9JbnRlZ2VyKHBvcyksXG4gICAgICAgIGwgPSBzLmxlbmd0aCxcbiAgICAgICAgYSxcbiAgICAgICAgYjtcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKVxuICAgICAgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmYgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGEgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJGF0ID0gcmVxdWlyZSgnLi8kLnN0cmluZy1hdCcpKHRydWUpO1xucmVxdWlyZSgnLi8kLml0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24oaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7XG4gIHRoaXMuX2kgPSAwO1xufSwgZnVuY3Rpb24oKSB7XG4gIHZhciBPID0gdGhpcy5fdCxcbiAgICAgIGluZGV4ID0gdGhpcy5faSxcbiAgICAgIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpXG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICBkb25lOiB0cnVlXG4gICAgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogcG9pbnQsXG4gICAgZG9uZTogZmFsc2VcbiAgfTtcbn0pO1xuIiwiLyogKi8gXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCl7IC8qIGVtcHR5ICovIH07IiwiLyogKi8gXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbmUsIHZhbHVlKXtcbiAgcmV0dXJuIHt2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZX07XG59OyIsIi8qICovIFxudmFyIGNvZiA9IHJlcXVpcmUoJy4vJC5jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbihpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICBpZihpdCA9PSB1bmRlZmluZWQpdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xuICByZXR1cm4gaXQ7XG59OyIsIi8qICovIFxudmFyIElPYmplY3QgPSByZXF1aXJlKCcuLyQuaW9iamVjdCcpLFxuICAgIGRlZmluZWQgPSByZXF1aXJlKCcuLyQuZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4vJCcpLFxuICAgIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuLyQucHJvcGVydHktZGVzYycpLFxuICAgIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi8kLnNldC10by1zdHJpbmctdGFnJyksXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbnJlcXVpcmUoJy4vJC5oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vJC53a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzO1xufSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9ICQuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7bmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KX0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCIvKiAqLyBcbid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi8kLmxpYnJhcnknKSxcbiAgICAkZXhwb3J0ID0gcmVxdWlyZSgnLi8kLmV4cG9ydCcpLFxuICAgIHJlZGVmaW5lID0gcmVxdWlyZSgnLi8kLnJlZGVmaW5lJyksXG4gICAgaGlkZSA9IHJlcXVpcmUoJy4vJC5oaWRlJyksXG4gICAgaGFzID0gcmVxdWlyZSgnLi8kLmhhcycpLFxuICAgIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKSxcbiAgICAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vJC5pdGVyLWNyZWF0ZScpLFxuICAgIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi8kLnNldC10by1zdHJpbmctdGFnJyksXG4gICAgZ2V0UHJvdG8gPSByZXF1aXJlKCcuLyQnKS5nZXRQcm90byxcbiAgICBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vJC53a3MnKSgnaXRlcmF0b3InKSxcbiAgICBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKSxcbiAgICBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJyxcbiAgICBLRVlTID0gJ2tleXMnLFxuICAgIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24oa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bylcbiAgICAgIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzpcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTtcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgVkFMVUVTOlxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkge1xuICAgICAgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTtcbiAgICB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InLFxuICAgICAgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTLFxuICAgICAgVkFMVUVTX0JVRyA9IGZhbHNlLFxuICAgICAgcHJvdG8gPSBCYXNlLnByb3RvdHlwZSxcbiAgICAgICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF0sXG4gICAgICAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpLFxuICAgICAgbWV0aG9kcyxcbiAgICAgIGtleTtcbiAgaWYgKCRuYXRpdmUpIHtcbiAgICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90bygkZGVmYXVsdC5jYWxsKG5ldyBCYXNlKSk7XG4gICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XG4gICAgaWYgKCFMSUJSQVJZICYmIGhhcyhwcm90bywgRkZfSVRFUkFUT1IpKVxuICAgICAgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XG4gICAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkge1xuICAgICAgICByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpXG4gICAgICBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBwcm90bykpXG4gICAgICAgICAgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcbiAgICAgIH1cbiAgICBlbHNlXG4gICAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vJC5hZGQtdG8tdW5zY29wYWJsZXMnKSxcbiAgICBzdGVwID0gcmVxdWlyZSgnLi8kLml0ZXItc3RlcCcpLFxuICAgIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKSxcbiAgICB0b0lPYmplY3QgPSByZXF1aXJlKCcuLyQudG8taW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLyQuaXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24oaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7XG4gIHRoaXMuX2kgPSAwO1xuICB0aGlzLl9rID0ga2luZDtcbn0sIGZ1bmN0aW9uKCkge1xuICB2YXIgTyA9IHRoaXMuX3QsXG4gICAgICBraW5kID0gdGhpcy5fayxcbiAgICAgIGluZGV4ID0gdGhpcy5faSsrO1xuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcbiAgICB0aGlzLl90ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiBzdGVwKDEpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJylcbiAgICByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKVxuICAgIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwiLyogKi8gXG5yZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKTtcbkl0ZXJhdG9ycy5Ob2RlTGlzdCA9IEl0ZXJhdG9ycy5IVE1MQ29sbGVjdGlvbiA9IEl0ZXJhdG9ycy5BcnJheTtcbiIsIi8qICovIFxubW9kdWxlLmV4cG9ydHMgPSB0cnVlOyIsIi8qICovIFxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vJC5nbG9iYWwnKSxcbiAgICBjb3JlID0gcmVxdWlyZSgnLi8kLmNvcmUnKSxcbiAgICBjdHggPSByZXF1aXJlKCcuLyQuY3R4JyksXG4gICAgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRixcbiAgICAgIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0LkcsXG4gICAgICBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TLFxuICAgICAgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QLFxuICAgICAgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkIsXG4gICAgICBJU19XUkFQID0gdHlwZSAmICRleHBvcnQuVyxcbiAgICAgIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KSxcbiAgICAgIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV0sXG4gICAgICBrZXksXG4gICAgICBvd24sXG4gICAgICBvdXQ7XG4gIGlmIChJU19HTE9CQUwpXG4gICAgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYga2V5IGluIHRhcmdldDtcbiAgICBpZiAob3duICYmIGtleSBpbiBleHBvcnRzKVxuICAgICAgY29udGludWU7XG4gICAgb3V0ID0gb3duID8gdGFyZ2V0W2tleV0gOiBzb3VyY2Vba2V5XTtcbiAgICBleHBvcnRzW2tleV0gPSBJU19HTE9CQUwgJiYgdHlwZW9mIHRhcmdldFtrZXldICE9ICdmdW5jdGlvbicgPyBzb3VyY2Vba2V5XSA6IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1dSQVAgJiYgdGFyZ2V0W2tleV0gPT0gb3V0ID8gKGZ1bmN0aW9uKEMpIHtcbiAgICAgIHZhciBGID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBDID8gbmV3IEMocGFyYW0pIDogQyhwYXJhbSk7XG4gICAgICB9O1xuICAgICAgRltQUk9UT1RZUEVdID0gQ1tQUk9UT1RZUEVdO1xuICAgICAgcmV0dXJuIEY7XG4gICAgfSkob3V0KSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIGlmIChJU19QUk9UTylcbiAgICAgIChleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KSlba2V5XSA9IG91dDtcbiAgfVxufTtcbiRleHBvcnQuRiA9IDE7XG4kZXhwb3J0LkcgPSAyO1xuJGV4cG9ydC5TID0gNDtcbiRleHBvcnQuUCA9IDg7XG4kZXhwb3J0LkIgPSAxNjtcbiRleHBvcnQuVyA9IDMyO1xubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwiLyogKi8gXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSl7XG4gIGlmKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpdGhyb3cgVHlwZUVycm9yKG5hbWUgKyBcIjogdXNlIHRoZSAnbmV3JyBvcGVyYXRvciFcIik7XG4gIHJldHVybiBpdDtcbn07IiwiLyogKi8gXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLyQuYW4tb2JqZWN0Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZW50cmllcyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpXG4gICAgICBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGU7XG4gIH1cbn07XG4iLCIvKiAqLyBcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLyQuaXRlcmF0b3JzJyksXG4gICAgSVRFUkFUT1IgPSByZXF1aXJlKCcuLyQud2tzJykoJ2l0ZXJhdG9yJyksXG4gICAgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcbnZhciBjZWlsICA9IE1hdGguY2VpbFxuICAsIGZsb29yID0gTWF0aC5mbG9vcjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpe1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07IiwiLyogKi8gXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi8kLnRvLWludGVnZXInKSxcbiAgICBtaW4gPSBNYXRoLm1pbjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7XG59O1xuIiwiLyogKi8gXG52YXIgY29mID0gcmVxdWlyZSgnLi8kLmNvZicpLFxuICAgIFRBRyA9IHJlcXVpcmUoJy4vJC53a3MnKSgndG9TdHJpbmdUYWcnKSxcbiAgICBBUkcgPSBjb2YoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYXJndW1lbnRzO1xuICAgIH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gIHZhciBPLFxuICAgICAgVCxcbiAgICAgIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJyA6IHR5cGVvZihUID0gKE8gPSBPYmplY3QoaXQpKVtUQUddKSA9PSAnc3RyaW5nJyA/IFQgOiBBUkcgPyBjb2YoTykgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiLyogKi8gXG5tb2R1bGUuZXhwb3J0cyA9IHt9OyIsIi8qICovIFxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLyQuY2xhc3NvZicpLFxuICAgIElURVJBVE9SID0gcmVxdWlyZSgnLi8kLndrcycpKCdpdGVyYXRvcicpLFxuICAgIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vJC5pdGVyYXRvcnMnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi8kLmNvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIGl0W0lURVJBVE9SXSB8fCBpdFsnQEBpdGVyYXRvciddIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwiLyogKi8gXG52YXIgY3R4ID0gcmVxdWlyZSgnLi8kLmN0eCcpLFxuICAgIGNhbGwgPSByZXF1aXJlKCcuLyQuaXRlci1jYWxsJyksXG4gICAgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuLyQuaXMtYXJyYXktaXRlcicpLFxuICAgIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmFuLW9iamVjdCcpLFxuICAgIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi8kLnRvLWxlbmd0aCcpLFxuICAgIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCkge1xuICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKGl0ZXJhYmxlKSxcbiAgICAgIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSksXG4gICAgICBpbmRleCA9IDAsXG4gICAgICBsZW5ndGgsXG4gICAgICBzdGVwLFxuICAgICAgaXRlcmF0b3I7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpXG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKVxuICAgIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICB9XG4gIGVsc2VcbiAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7ICkge1xuICAgICAgY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgfVxufTtcbiIsIi8qICovIFxudmFyIGdldERlc2MgPSByZXF1aXJlKCcuLyQnKS5nZXREZXNjLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmlzLW9iamVjdCcpLFxuICAgIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmFuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24oTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKVxuICAgIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24odGVzdCwgYnVnZ3ksIHNldCkge1xuICAgIHRyeSB7XG4gICAgICBzZXQgPSByZXF1aXJlKCcuLyQuY3R4JykoRnVuY3Rpb24uY2FsbCwgZ2V0RGVzYyhPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBidWdneSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgaWYgKGJ1Z2d5KVxuICAgICAgICBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgZWxzZVxuICAgICAgICBzZXQoTywgcHJvdG8pO1xuICAgICAgcmV0dXJuIE87XG4gICAgfTtcbiAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiLy8gNy4yLjkgU2FtZVZhbHVlKHgsIHkpXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KXtcbiAgcmV0dXJuIHggPT09IHkgPyB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geSA6IHggIT0geCAmJiB5ICE9IHk7XG59OyIsIi8qICovIFxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi8kLmlzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSlcbiAgICB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvKiAqLyBcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vJC5hbi1vYmplY3QnKSxcbiAgICBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLyQuYS1mdW5jdGlvbicpLFxuICAgIFNQRUNJRVMgPSByZXF1aXJlKCcuLyQud2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yLFxuICAgICAgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsIi8qICovIFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIGlmKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKXRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07IiwiLyogKi8gXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi8kLmEtZnVuY3Rpb24nKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gZnVuY3Rpb24oYSkge1xuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICAgIH07XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgICB9O1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZuLCBhcmdzLCB0aGF0KXtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2goYXJncy5sZW5ndGgpe1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiAgICAgICAgICAgICAgZm4uYXBwbHkodGhhdCwgYXJncyk7XG59OyIsIi8qICovIFxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJykuZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLyogKi8gXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KXtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07IiwiLyogKi8gXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLyQuaXMtb2JqZWN0JyksXG4gICAgZG9jdW1lbnQgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJykuZG9jdW1lbnQsXG4gICAgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0KSB7XG4gIHJldHVybiBpcyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwiLyogKi8gXG4oZnVuY3Rpb24ocHJvY2Vzcykge1xuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi8kLmN0eCcpLFxuICAgICAgaW52b2tlID0gcmVxdWlyZSgnLi8kLmludm9rZScpLFxuICAgICAgaHRtbCA9IHJlcXVpcmUoJy4vJC5odG1sJyksXG4gICAgICBjZWwgPSByZXF1aXJlKCcuLyQuZG9tLWNyZWF0ZScpLFxuICAgICAgZ2xvYmFsID0gcmVxdWlyZSgnLi8kLmdsb2JhbCcpLFxuICAgICAgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzLFxuICAgICAgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGUsXG4gICAgICBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGUsXG4gICAgICBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCxcbiAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgcXVldWUgPSB7fSxcbiAgICAgIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnLFxuICAgICAgZGVmZXIsXG4gICAgICBjaGFubmVsLFxuICAgICAgcG9ydDtcbiAgdmFyIHJ1biA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpZCA9ICt0aGlzO1xuICAgIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgICBmbigpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGxpc3RuZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xuICB9O1xuICBpZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICAgIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgaSA9IDE7XG4gICAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpXG4gICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICAgIH07XG4gICAgICBkZWZlcihjb3VudGVyKTtcbiAgICAgIHJldHVybiBjb3VudGVyO1xuICAgIH07XG4gICAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgfTtcbiAgICBpZiAocmVxdWlyZSgnLi8kLmNvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgICAgZGVmZXIgPSBmdW5jdGlvbihpZCkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWw7XG4gICAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdG5lcjtcbiAgICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgICAgfTtcbiAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdG5lciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICAgIGRlZmVyID0gZnVuY3Rpb24oaWQpIHtcbiAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZlciA9IGZ1bmN0aW9uKGlkKSB7XG4gICAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNldDogc2V0VGFzayxcbiAgICBjbGVhcjogY2xlYXJUYXNrXG4gIH07XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCl7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59OyIsIi8qICovIFxuKGZ1bmN0aW9uKHByb2Nlc3MpIHtcbiAgdmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vJC5nbG9iYWwnKSxcbiAgICAgIG1hY3JvdGFzayA9IHJlcXVpcmUoJy4vJC50YXNrJykuc2V0LFxuICAgICAgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcixcbiAgICAgIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcyxcbiAgICAgIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZSxcbiAgICAgIGlzTm9kZSA9IHJlcXVpcmUoJy4vJC5jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycsXG4gICAgICBoZWFkLFxuICAgICAgbGFzdCxcbiAgICAgIG5vdGlmeTtcbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCxcbiAgICAgICAgZG9tYWluLFxuICAgICAgICBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHtcbiAgICAgIHByb2Nlc3MuZG9tYWluID0gbnVsbDtcbiAgICAgIHBhcmVudC5leGl0KCk7XG4gICAgfVxuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBkb21haW4gPSBoZWFkLmRvbWFpbjtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGlmIChkb21haW4pXG4gICAgICAgIGRvbWFpbi5lbnRlcigpO1xuICAgICAgZm4oKTtcbiAgICAgIGlmIChkb21haW4pXG4gICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgIH1cbiAgICBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpXG4gICAgICBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgfSBlbHNlIGlmIChPYnNlcnZlcikge1xuICAgIHZhciB0b2dnbGUgPSAxLFxuICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7Y2hhcmFjdGVyRGF0YTogdHJ1ZX0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gLXRvZ2dsZTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24oKSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZsdXNoKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uKCkge1xuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XG4gICAgfTtcbiAgfVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFzYXAoZm4pIHtcbiAgICB2YXIgdGFzayA9IHtcbiAgICAgIGZuOiBmbixcbiAgICAgIG5leHQ6IHVuZGVmaW5lZCxcbiAgICAgIGRvbWFpbjogaXNOb2RlICYmIHByb2Nlc3MuZG9tYWluXG4gICAgfTtcbiAgICBpZiAobGFzdClcbiAgICAgIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH1cbiAgICBsYXN0ID0gdGFzaztcbiAgfTtcbn0pKHJlcXVpcmUoJ3Byb2Nlc3MnKSk7XG4iLCIvKiAqLyBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYml0bWFwLCB2YWx1ZSl7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZSAgOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZSAgICA6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWUgICAgICAgOiB2YWx1ZVxuICB9O1xufTsiLCIvKiAqLyBcbnZhciAkID0gcmVxdWlyZSgnLi8kJyksXG4gICAgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vJC5wcm9wZXJ0eS1kZXNjJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vJC5kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24ob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiAkLnNldERlc2Mob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbihvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCIvKiAqLyBcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi8kLmhpZGUnKTtcbiIsIi8qICovIFxudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi8kLnJlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHRhcmdldCwgc3JjKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCIvKiAqLyBcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihpdCwga2V5KXtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59OyIsIi8qICovIFxudmFyIGRlZiA9IHJlcXVpcmUoJy4vJCcpLnNldERlc2MsXG4gICAgaGFzID0gcmVxdWlyZSgnLi8kLmhhcycpLFxuICAgIFRBRyA9IHJlcXVpcmUoJy4vJC53a3MnKSgndG9TdHJpbmdUYWcnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSlcbiAgICBkZWYoaXQsIFRBRywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHRhZ1xuICAgIH0pO1xufTtcbiIsIi8qICovIFxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3JlYXRlOiAgICAgJE9iamVjdC5jcmVhdGUsXG4gIGdldFByb3RvOiAgICRPYmplY3QuZ2V0UHJvdG90eXBlT2YsXG4gIGlzRW51bTogICAgIHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlLFxuICBnZXREZXNjOiAgICAkT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgc2V0RGVzYzogICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgc2V0RGVzY3M6ICAgJE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzLFxuICBnZXRLZXlzOiAgICAkT2JqZWN0LmtleXMsXG4gIGdldE5hbWVzOiAgICRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgZ2V0U3ltYm9sczogJE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gIGVhY2g6ICAgICAgIFtdLmZvckVhY2hcbn07IiwiLyogKi8gXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGV4ZWMpe1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaChlKXtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTsiLCIvKiAqLyBcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vJC5mYWlscycpKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHtnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDc7XG4gICAgfX0pLmEgIT0gNztcbn0pO1xuIiwiLyogKi8gXG4ndXNlIHN0cmljdCc7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vJC5jb3JlJyksXG4gICAgJCA9IHJlcXVpcmUoJy4vJCcpLFxuICAgIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi8kLmRlc2NyaXB0b3JzJyksXG4gICAgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vJC53a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihLRVkpIHtcbiAgdmFyIEMgPSBjb3JlW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKVxuICAgICQuc2V0RGVzYyhDLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9KTtcbn07XG4iLCIvKiAqLyBcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLyQuZ2xvYmFsJyksXG4gICAgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXycsXG4gICAgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHt9KTtcbn07XG4iLCIvKiAqLyBcbnZhciBpZCA9IDBcbiAgLCBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGtleSl7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59OyIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4XG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGYgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYodHlwZW9mIF9fZyA9PSAnbnVtYmVyJylfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYiLCIvKiAqLyBcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4vJC5zaGFyZWQnKSgnd2tzJyksXG4gICAgdWlkID0gcmVxdWlyZSgnLi8kLnVpZCcpLFxuICAgIFN5bWJvbCA9IHJlcXVpcmUoJy4vJC5nbG9iYWwnKS5TeW1ib2w7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9IFN5bWJvbCAmJiBTeW1ib2xbbmFtZV0gfHwgKFN5bWJvbCB8fCB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG4iLCIvKiAqLyBcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vJC53a3MnKSgnaXRlcmF0b3InKSxcbiAgICBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24oKSB7XG4gICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgfTtcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgMjtcbiAgfSk7XG59IGNhdGNoIChlKSB7fVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpXG4gICAgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN10sXG4gICAgICAgIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgICBzYWZlID0gdHJ1ZTtcbiAgICB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBpdGVyO1xuICAgIH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcblxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgc2V0VGltZW91dChkcmFpblF1ZXVlLCAwKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIm5wbTpwcm9jZXNzQDAuMTEuMy9icm93c2VyLmpzXCIpOyIsIm1vZHVsZS5leHBvcnRzID0gU3lzdGVtLl9ub2RlUmVxdWlyZSA/IHByb2Nlc3MgOiByZXF1aXJlKCdwcm9jZXNzJyk7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiZ2l0aHViOmpzcG0vbm9kZWxpYnMtcHJvY2Vzc0AwLjEuMi9pbmRleFwiKTsiLCIvKiAqLyBcbihmdW5jdGlvbihwcm9jZXNzKSB7XG4gICd1c2Ugc3RyaWN0JztcbiAgdmFyICQgPSByZXF1aXJlKCcuLyQnKSxcbiAgICAgIExJQlJBUlkgPSByZXF1aXJlKCcuLyQubGlicmFyeScpLFxuICAgICAgZ2xvYmFsID0gcmVxdWlyZSgnLi8kLmdsb2JhbCcpLFxuICAgICAgY3R4ID0gcmVxdWlyZSgnLi8kLmN0eCcpLFxuICAgICAgY2xhc3NvZiA9IHJlcXVpcmUoJy4vJC5jbGFzc29mJyksXG4gICAgICAkZXhwb3J0ID0gcmVxdWlyZSgnLi8kLmV4cG9ydCcpLFxuICAgICAgaXNPYmplY3QgPSByZXF1aXJlKCcuLyQuaXMtb2JqZWN0JyksXG4gICAgICBhbk9iamVjdCA9IHJlcXVpcmUoJy4vJC5hbi1vYmplY3QnKSxcbiAgICAgIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vJC5hLWZ1bmN0aW9uJyksXG4gICAgICBzdHJpY3ROZXcgPSByZXF1aXJlKCcuLyQuc3RyaWN0LW5ldycpLFxuICAgICAgZm9yT2YgPSByZXF1aXJlKCcuLyQuZm9yLW9mJyksXG4gICAgICBzZXRQcm90byA9IHJlcXVpcmUoJy4vJC5zZXQtcHJvdG8nKS5zZXQsXG4gICAgICBzYW1lID0gcmVxdWlyZSgnLi8kLnNhbWUtdmFsdWUnKSxcbiAgICAgIFNQRUNJRVMgPSByZXF1aXJlKCcuLyQud2tzJykoJ3NwZWNpZXMnKSxcbiAgICAgIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vJC5zcGVjaWVzLWNvbnN0cnVjdG9yJyksXG4gICAgICBhc2FwID0gcmVxdWlyZSgnLi8kLm1pY3JvdGFzaycpLFxuICAgICAgUFJPTUlTRSA9ICdQcm9taXNlJyxcbiAgICAgIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcyxcbiAgICAgIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnLFxuICAgICAgUCA9IGdsb2JhbFtQUk9NSVNFXSxcbiAgICAgIFdyYXBwZXI7XG4gIHZhciB0ZXN0UmVzb2x2ZSA9IGZ1bmN0aW9uKHN1Yikge1xuICAgIHZhciB0ZXN0ID0gbmV3IFAoZnVuY3Rpb24oKSB7fSk7XG4gICAgaWYgKHN1YilcbiAgICAgIHRlc3QuY29uc3RydWN0b3IgPSBPYmplY3Q7XG4gICAgcmV0dXJuIFAucmVzb2x2ZSh0ZXN0KSA9PT0gdGVzdDtcbiAgfTtcbiAgdmFyIFVTRV9OQVRJVkUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgd29ya3MgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBQMih4KSB7XG4gICAgICB2YXIgc2VsZiA9IG5ldyBQKHgpO1xuICAgICAgc2V0UHJvdG8oc2VsZiwgUDIucHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgd29ya3MgPSBQICYmIFAucmVzb2x2ZSAmJiB0ZXN0UmVzb2x2ZSgpO1xuICAgICAgc2V0UHJvdG8oUDIsIFApO1xuICAgICAgUDIucHJvdG90eXBlID0gJC5jcmVhdGUoUC5wcm90b3R5cGUsIHtjb25zdHJ1Y3Rvcjoge3ZhbHVlOiBQMn19KTtcbiAgICAgIGlmICghKFAyLnJlc29sdmUoNSkudGhlbihmdW5jdGlvbigpIHt9KSBpbnN0YW5jZW9mIFAyKSkge1xuICAgICAgICB3b3JrcyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKHdvcmtzICYmIHJlcXVpcmUoJy4vJC5kZXNjcmlwdG9ycycpKSB7XG4gICAgICAgIHZhciB0aGVuYWJsZVRoZW5Hb3R0ZW4gPSBmYWxzZTtcbiAgICAgICAgUC5yZXNvbHZlKCQuc2V0RGVzYyh7fSwgJ3RoZW4nLCB7Z2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoZW5hYmxlVGhlbkdvdHRlbiA9IHRydWU7XG4gICAgICAgICAgfX0pKTtcbiAgICAgICAgd29ya3MgPSB0aGVuYWJsZVRoZW5Hb3R0ZW47XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgd29ya3MgPSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHdvcmtzO1xuICB9KCk7XG4gIHZhciBzYW1lQ29uc3RydWN0b3IgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgaWYgKExJQlJBUlkgJiYgYSA9PT0gUCAmJiBiID09PSBXcmFwcGVyKVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIHNhbWUoYSwgYik7XG4gIH07XG4gIHZhciBnZXRDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uKEMpIHtcbiAgICB2YXIgUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdO1xuICAgIHJldHVybiBTICE9IHVuZGVmaW5lZCA/IFMgOiBDO1xuICB9O1xuICB2YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uKGl0KSB7XG4gICAgdmFyIHRoZW47XG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YodGhlbiA9IGl0LnRoZW4pID09ICdmdW5jdGlvbicgPyB0aGVuIDogZmFsc2U7XG4gIH07XG4gIHZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uKEMpIHtcbiAgICB2YXIgcmVzb2x2ZSxcbiAgICAgICAgcmVqZWN0O1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgICByZWplY3QgPSAkJHJlamVjdDtcbiAgICB9KTtcbiAgICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSksIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG4gIH07XG4gIHZhciBwZXJmb3JtID0gZnVuY3Rpb24oZXhlYykge1xuICAgIHRyeSB7XG4gICAgICBleGVjKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHtlcnJvcjogZX07XG4gICAgfVxuICB9O1xuICB2YXIgbm90aWZ5ID0gZnVuY3Rpb24ocmVjb3JkLCBpc1JlamVjdCkge1xuICAgIGlmIChyZWNvcmQubilcbiAgICAgIHJldHVybjtcbiAgICByZWNvcmQubiA9IHRydWU7XG4gICAgdmFyIGNoYWluID0gcmVjb3JkLmM7XG4gICAgYXNhcChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHJlY29yZC52LFxuICAgICAgICAgIG9rID0gcmVjb3JkLnMgPT0gMSxcbiAgICAgICAgICBpID0gMDtcbiAgICAgIHZhciBydW4gPSBmdW5jdGlvbihyZWFjdGlvbikge1xuICAgICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsLFxuICAgICAgICAgICAgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmUsXG4gICAgICAgICAgICByZWplY3QgPSByZWFjdGlvbi5yZWplY3QsXG4gICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICB0aGVuO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgICBpZiAoIW9rKVxuICAgICAgICAgICAgICByZWNvcmQuaCA9IHRydWU7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyID09PSB0cnVlID8gdmFsdWUgOiBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHJlamVjdCh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSlcbiAgICAgICAgcnVuKGNoYWluW2krK10pO1xuICAgICAgY2hhaW4ubGVuZ3RoID0gMDtcbiAgICAgIHJlY29yZC5uID0gZmFsc2U7XG4gICAgICBpZiAoaXNSZWplY3QpXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHByb21pc2UgPSByZWNvcmQucCxcbiAgICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgICAgY29uc29sZTtcbiAgICAgICAgICBpZiAoaXNVbmhhbmRsZWQocHJvbWlzZSkpIHtcbiAgICAgICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICAgICAgaGFuZGxlcih7XG4gICAgICAgICAgICAgICAgcHJvbWlzZTogcHJvbWlzZSxcbiAgICAgICAgICAgICAgICByZWFzb246IHZhbHVlXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVjb3JkLmEgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0sIDEpO1xuICAgIH0pO1xuICB9O1xuICB2YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgdmFyIHJlY29yZCA9IHByb21pc2UuX2QsXG4gICAgICAgIGNoYWluID0gcmVjb3JkLmEgfHwgcmVjb3JkLmMsXG4gICAgICAgIGkgPSAwLFxuICAgICAgICByZWFjdGlvbjtcbiAgICBpZiAocmVjb3JkLmgpXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGkpIHtcbiAgICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTtcbiAgICAgIGlmIChyZWFjdGlvbi5mYWlsIHx8ICFpc1VuaGFuZGxlZChyZWFjdGlvbi5wcm9taXNlKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgdmFyICRyZWplY3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZWNvcmQgPSB0aGlzO1xuICAgIGlmIChyZWNvcmQuZClcbiAgICAgIHJldHVybjtcbiAgICByZWNvcmQuZCA9IHRydWU7XG4gICAgcmVjb3JkID0gcmVjb3JkLnIgfHwgcmVjb3JkO1xuICAgIHJlY29yZC52ID0gdmFsdWU7XG4gICAgcmVjb3JkLnMgPSAyO1xuICAgIHJlY29yZC5hID0gcmVjb3JkLmMuc2xpY2UoKTtcbiAgICBub3RpZnkocmVjb3JkLCB0cnVlKTtcbiAgfTtcbiAgdmFyICRyZXNvbHZlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVjb3JkID0gdGhpcyxcbiAgICAgICAgdGhlbjtcbiAgICBpZiAocmVjb3JkLmQpXG4gICAgICByZXR1cm47XG4gICAgcmVjb3JkLmQgPSB0cnVlO1xuICAgIHJlY29yZCA9IHJlY29yZC5yIHx8IHJlY29yZDtcbiAgICB0cnkge1xuICAgICAgaWYgKHJlY29yZC5wID09PSB2YWx1ZSlcbiAgICAgICAgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICAgIGFzYXAoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHdyYXBwZXIgPSB7XG4gICAgICAgICAgICByOiByZWNvcmQsXG4gICAgICAgICAgICBkOiBmYWxzZVxuICAgICAgICAgIH07XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlY29yZC52ID0gdmFsdWU7XG4gICAgICAgIHJlY29yZC5zID0gMTtcbiAgICAgICAgbm90aWZ5KHJlY29yZCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICRyZWplY3QuY2FsbCh7XG4gICAgICAgIHI6IHJlY29yZCxcbiAgICAgICAgZDogZmFsc2VcbiAgICAgIH0sIGUpO1xuICAgIH1cbiAgfTtcbiAgaWYgKCFVU0VfTkFUSVZFKSB7XG4gICAgUCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgICB2YXIgcmVjb3JkID0gdGhpcy5fZCA9IHtcbiAgICAgICAgcDogc3RyaWN0TmV3KHRoaXMsIFAsIFBST01JU0UpLFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgYTogdW5kZWZpbmVkLFxuICAgICAgICBzOiAwLFxuICAgICAgICBkOiBmYWxzZSxcbiAgICAgICAgdjogdW5kZWZpbmVkLFxuICAgICAgICBoOiBmYWxzZSxcbiAgICAgICAgbjogZmFsc2VcbiAgICAgIH07XG4gICAgICB0cnkge1xuICAgICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHJlY29yZCwgMSksIGN0eCgkcmVqZWN0LCByZWNvcmQsIDEpKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAkcmVqZWN0LmNhbGwocmVjb3JkLCBlcnIpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmVxdWlyZSgnLi8kLnJlZGVmaW5lLWFsbCcpKFAucHJvdG90eXBlLCB7XG4gICAgICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICAgIHZhciByZWFjdGlvbiA9IG5ldyBQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUCkpLFxuICAgICAgICAgICAgcHJvbWlzZSA9IHJlYWN0aW9uLnByb21pc2UsXG4gICAgICAgICAgICByZWNvcmQgPSB0aGlzLl9kO1xuICAgICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgICByZWFjdGlvbi5mYWlsID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT0gJ2Z1bmN0aW9uJyAmJiBvblJlamVjdGVkO1xuICAgICAgICByZWNvcmQuYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgICAgaWYgKHJlY29yZC5hKVxuICAgICAgICAgIHJlY29yZC5hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgICBpZiAocmVjb3JkLnMpXG4gICAgICAgICAgbm90aWZ5KHJlY29yZCwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH0sXG4gICAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7UHJvbWlzZTogUH0pO1xuICByZXF1aXJlKCcuLyQuc2V0LXRvLXN0cmluZy10YWcnKShQLCBQUk9NSVNFKTtcbiAgcmVxdWlyZSgnLi8kLnNldC1zcGVjaWVzJykoUFJPTUlTRSk7XG4gIFdyYXBwZXIgPSByZXF1aXJlKCcuLyQuY29yZScpW1BST01JU0VdO1xuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7cmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgICAgdmFyIGNhcGFiaWxpdHkgPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkodGhpcyksXG4gICAgICAgICAgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAgICQkcmVqZWN0KHIpO1xuICAgICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgICB9fSk7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8IHRlc3RSZXNvbHZlKHRydWUpKSwgUFJPTUlTRSwge3Jlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgICAgaWYgKHggaW5zdGFuY2VvZiBQICYmIHNhbWVDb25zdHJ1Y3Rvcih4LmNvbnN0cnVjdG9yLCB0aGlzKSlcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB2YXIgY2FwYWJpbGl0eSA9IG5ldyBQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKSxcbiAgICAgICAgICAkJHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgICAkJHJlc29sdmUoeCk7XG4gICAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH19KTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi8kLml0ZXItZGV0ZWN0JykoZnVuY3Rpb24oaXRlcikge1xuICAgIFAuYWxsKGl0ZXIpWydjYXRjaCddKGZ1bmN0aW9uKCkge30pO1xuICB9KSksIFBST01JU0UsIHtcbiAgICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgICAgdmFyIEMgPSBnZXRDb25zdHJ1Y3Rvcih0aGlzKSxcbiAgICAgICAgICBjYXBhYmlsaXR5ID0gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpLFxuICAgICAgICAgIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmUsXG4gICAgICAgICAgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3QsXG4gICAgICAgICAgdmFsdWVzID0gW107XG4gICAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCB2YWx1ZXMucHVzaCwgdmFsdWVzKTtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgICByZXN1bHRzID0gQXJyYXkocmVtYWluaW5nKTtcbiAgICAgICAgaWYgKHJlbWFpbmluZylcbiAgICAgICAgICAkLmVhY2guY2FsbCh2YWx1ZXMsIGZ1bmN0aW9uKHByb21pc2UsIGluZGV4KSB7XG4gICAgICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcmVzdWx0c1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZShyZXN1bHRzKTtcbiAgICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgfSk7XG4gICAgICBpZiAoYWJydXB0KVxuICAgICAgICByZWplY3QoYWJydXB0LmVycm9yKTtcbiAgICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gICAgfSxcbiAgICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgQyA9IGdldENvbnN0cnVjdG9yKHRoaXMpLFxuICAgICAgICAgIGNhcGFiaWxpdHkgPSBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyksXG4gICAgICAgICAgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgICB2YXIgYWJydXB0ID0gcGVyZm9ybShmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGFicnVwdClcbiAgICAgICAgcmVqZWN0KGFicnVwdC5lcnJvcik7XG4gICAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICAgIH1cbiAgfSk7XG59KShyZXF1aXJlKCdwcm9jZXNzJykpO1xuIiwiLyogKi8gXG52YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0ge3ZlcnNpb246ICcxLjIuNid9O1xuaWYodHlwZW9mIF9fZSA9PSAnbnVtYmVyJylfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmIiwiLyogKi8gXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lczYucHJvbWlzZScpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzLyQuY29yZScpLlByb21pc2U7XG4iLCIvKiAqLyBcbm1vZHVsZS5leHBvcnRzID0geyBcImRlZmF1bHRcIjogcmVxdWlyZShcImNvcmUtanMvbGlicmFyeS9mbi9wcm9taXNlXCIpLCBfX2VzTW9kdWxlOiB0cnVlIH07IiwiLyogKi8gXG5cImZvcm1hdCBjanNcIjtcbi8qKiFcbiAqIGFqYXggLSB2Mi4wLjFcbiAqIEFqYXggbW9kdWxlIGluIFZhbmlsbGEgSlNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9mZGFjaXVrL2FqYXhcblxuICogRnJpIE1heSAwNiAyMDE2IDEwOjMwOjM0IEdNVC0wMzAwIChCUlQpXG4gKiBNSVQgKGMpIEZlcm5hbmRvIERhY2l1a1xuKi9cbiFmdW5jdGlvbihlLHQpe1widXNlIHN0cmljdFwiO1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoXCJhamF4XCIsdCk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cz1tb2R1bGUuZXhwb3J0cz10KCk6ZS5hamF4PXQoKX0odGhpcyxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGUoZSl7dmFyIHI9W1wiZ2V0XCIsXCJwb3N0XCIsXCJwdXRcIixcImRlbGV0ZVwiXTtyZXR1cm4gZT1lfHx7fSxlLmJhc2VVcmw9ZS5iYXNlVXJsfHxcIlwiLGUubWV0aG9kJiZlLnVybD9uKGUubWV0aG9kLGUuYmFzZVVybCtlLnVybCx0KGUuZGF0YSksZSk6ci5yZWR1Y2UoZnVuY3Rpb24ocix1KXtyZXR1cm4gclt1XT1mdW5jdGlvbihyLG8pe3JldHVybiBuKHUsZS5iYXNlVXJsK3IsdChvKSxlKX0scn0se30pfWZ1bmN0aW9uIHQoZSl7cmV0dXJuIGV8fG51bGx9ZnVuY3Rpb24gbihlLHQsbix1KXt2YXIgYz1bXCJ0aGVuXCIsXCJjYXRjaFwiLFwiYWx3YXlzXCJdLHM9Yy5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZVt0XT1mdW5jdGlvbihuKXtyZXR1cm4gZVt0XT1uLGV9LGV9LHt9KSxpPW5ldyBYTUxIdHRwUmVxdWVzdDtyZXR1cm4gaS5vcGVuKGUsdCwhMCkscihpLHUuaGVhZGVycyksaS5hZGRFdmVudExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLG8ocyxpKSwhMSksaS5zZW5kKGEobikpLHN9ZnVuY3Rpb24gcihlLHQpe3Q9dHx8e30sdSh0KXx8KHRbXCJDb250ZW50LVR5cGVcIl09XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiksT2JqZWN0LmtleXModCkuZm9yRWFjaChmdW5jdGlvbihuKXt0W25dJiZlLnNldFJlcXVlc3RIZWFkZXIobix0W25dKX0pfWZ1bmN0aW9uIHUoZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUpLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuXCJjb250ZW50LXR5cGVcIj09PWUudG9Mb3dlckNhc2UoKX0pfWZ1bmN0aW9uIG8oZSx0KXtyZXR1cm4gZnVuY3Rpb24gbigpe3QucmVhZHlTdGF0ZT09PXQuRE9ORSYmKHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlYWR5c3RhdGVjaGFuZ2VcIixuLCExKSxlLmFsd2F5cy5hcHBseShlLGModCkpLHQuc3RhdHVzPj0yMDAmJnQuc3RhdHVzPDMwMD9lLnRoZW4uYXBwbHkoZSxjKHQpKTplW1wiY2F0Y2hcIl0uYXBwbHkoZSxjKHQpKSl9fWZ1bmN0aW9uIGMoZSl7dmFyIHQ7dHJ5e3Q9SlNPTi5wYXJzZShlLnJlc3BvbnNlVGV4dCl9Y2F0Y2gobil7dD1lLnJlc3BvbnNlVGV4dH1yZXR1cm5bdCxlXX1mdW5jdGlvbiBhKGUpe3JldHVybiBzKGUpP2koZSk6ZX1mdW5jdGlvbiBzKGUpe3JldHVyblwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gaShlKXtyZXR1cm4gT2JqZWN0LmtleXMoZSkucmVkdWNlKGZ1bmN0aW9uKHQsbil7dmFyIHI9dD90K1wiJlwiOlwiXCI7cmV0dXJuIHIrZihuKStcIj1cIitmKGVbbl0pfSxcIlwiKX1mdW5jdGlvbiBmKGUpe3JldHVybiBlbmNvZGVVUklDb21wb25lbnQoZSl9cmV0dXJuIGV9KTsiLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJucG06QGZkYWNpdWsvYWpheEAyLjAuMS9kaXN0L2FqYXgubWluLmpzXCIpOyIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgYWpheCBmcm9tICdAZmRhY2l1ay9hamF4J1xuaW1wb3J0IHtcbiAgRkVUQ0hfRVZFTlRTLFxuICBFVkVOVFNfU1VDQ0VTUyxcbiAgRVZFTlRTX0ZBSUxFRFxufSBmcm9tICcuL2luZGV4J1xuXG5leHBvcnQgY29uc3QgZmV0Y2hFdmVudHMgPSAoKSA9PiB7XG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgY29uc3QgeyBpc0ZldGNoaW5nIH0gPSBnZXRTdGF0ZSgpLmV2ZW50c1xuICAgIGlmIChpc0ZldGNoaW5nKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICB9XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBGRVRDSF9FVkVOVFMgfSlcbiAgICBhamF4KCkuZ2V0KCdkYXRhL2V2ZW50cy5qc29uJykudGhlbigoZXZlbnRzKSA9PiB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6IEVWRU5UU19TVUNDRVNTLFxuICAgICAgICBwYXlsb2FkOiBldmVudHNcbiAgICAgIH0pXG4gICAgfSlcbiAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6IEVWRU5UU19GQUlMRUQgfSlcbiAgICB9KVxuICB9XG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGNvbnN0IEZFVENIX0VWRU5UUyA9ICdGRVRDSF9FVkVOVFMnXG5leHBvcnQgY29uc3QgRVZFTlRTX1NVQ0NFU1MgPSAnRVZFTlRTX1NVQ0NFU1MnXG5leHBvcnQgY29uc3QgRVZFTlRTX0ZBSUxFRCA9ICdFVkVOVFNfRkFJTEVEJ1xuXG5leHBvcnQgeyBmZXRjaEV2ZW50cyB9IGZyb20gJy4vZXZlbnRzJ1xuIiwiJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCB7XG4gIEZFVENIX0VWRU5UUyxcbiAgRVZFTlRTX1NVQ0NFU1MsXG4gIEVWRU5UU19GQUlMRURcbn0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCdcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICBldmVudHM6IFt7XG4gICAgdGl0bGU6ICcuLi4nLFxuICAgIGRhdGU6IHsgZGF5OiAwLCBtb250aDogJycsIHllYXI6IDAgfSxcbiAgICBpbWFnZTogJydcbiAgfSwge1xuICAgIHRpdGxlOiAnLi4uJyxcbiAgICBkYXRlOiB7IGRheTogMCwgbW9udGg6ICcnLCB5ZWFyOiAwIH1cbiAgfSwge1xuICAgIHRpdGxlOiAnLi4uJyxcbiAgICBkYXRlOiB7IGRheTogMCwgbW9udGg6ICcnLCB5ZWFyOiAwIH1cbiAgfSwge1xuICAgIHRpdGxlOiAnLi4uJyxcbiAgICBkYXRlOiB7IGRheTogMCwgbW9udGg6ICcnLCB5ZWFyOiAwIH1cbiAgfSwge1xuICAgIHRpdGxlOiAnLi4uJyxcbiAgICBkYXRlOiB7IGRheTogMCwgbW9udGg6ICcnLCB5ZWFyOiAwIH1cbiAgfV0sXG4gIGlzRmV0Y2hpbmc6IGZhbHNlXG59XG5cbmNvbnN0IGV2ZW50cyA9IChzdGF0ZSA9IGluaXRpYWxTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIEZFVENIX0VWRU5UUzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBpc0ZldGNoaW5nOiB0cnVlXG4gICAgICB9XG5cbiAgICBjYXNlIEVWRU5UU19TVUNDRVNTOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGV2ZW50czogWy4uLmFjdGlvbi5wYXlsb2FkXSxcbiAgICAgICAgaXNGZXRjaGluZzogZmFsc2VcbiAgICAgIH1cblxuICAgIGNhc2UgRVZFTlRTX0ZBSUxFRDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBpc0ZldGNoaW5nOiBmYWxzZVxuICAgICAgfVxuICB9XG4gIHJldHVybiBzdGF0ZVxufVxuXG5leHBvcnQgZGVmYXVsdCBldmVudHNcbiIsIid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgZXZlbnRzIGZyb20gJy4vZXZlbnRzJ1xuXG5leHBvcnQgZGVmYXVsdCB7IGV2ZW50cyB9XG4iLCIndXNlIHN0cmljdCdcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgcmVuZGVyIH0gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCBBcHAgZnJvbSAnLi9jb250YWluZXJzL2FwcC9pbmRleCdcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tICcuL3N0b3JlL2NvbmZpZ3VyZS1zdG9yZSdcbmltcG9ydCByZWR1Y2VycyBmcm9tICcuL3JlZHVjZXJzL2luZGV4J1xuXG5jb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHsgcmVkdWNlcnMgfSlcblxucmVuZGVyKFxuICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICA8QXBwIC8+XG4gIDwvUHJvdmlkZXI+LFxuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1qcz1cImFwcFwiXScpXG4pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
